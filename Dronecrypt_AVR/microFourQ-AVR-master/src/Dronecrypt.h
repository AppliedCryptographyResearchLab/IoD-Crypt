/***********************************************************************************
* FourQlib: a high-performance crypto library based on the elliptic curve FourQ
*
*    Copyright (c) Microsoft Corporation. All rights reserved.
*
* Abstract: API header file
************************************************************************************/

#ifndef __Dronecrypt__
#define __Dronecrypt__


// For C++
#ifdef __cplusplus
extern "C" {
#endif

 

#include "FourQ.h"


// #define BPV_n 1024
// #define BPV_k 18

//Only as a trial
static const unsigned char CA_secretKey[32] = {0x4e, 0x79, 0xa2, 0x3e, 0x29, 0x99, 0x15, 0x41, 0x76, 0x20, 0x5b, 0xac, 0x5e, 0x1a, 0xde, 0x3f, 0x91, 0xe, 0x88, 0x9b, 0x94, 0xf7, 0x1, 0x78, 0xde, 0xf3, 0xa3, 0xb0, 0x2e, 0xcd, 0xf4, 0xc8};
static const unsigned char CA_PublicKey[64] = {0x12, 0xe1, 0xb6, 0xf0, 0x7d, 0x5a, 0x48, 0x8f, 0x98, 0x9, 0x3c, 0xab, 0x7b, 0xc4, 0x54, 0x73, 0x53, 0x59, 0x55, 0xbc, 0xf8, 0x8f, 0x21, 0x32, 0xae, 0xb8, 0x39, 0xda, 0x3, 0xdb, 0xc, 0x5e, 0x23, 0xfa, 0x85, 0x84, 0xce, 0xb, 0xc0, 0xdd, 0x34, 0x8a, 0xd7, 0x58, 0x6, 0x5d, 0xe, 0x5, 0xe4, 0x4d, 0x41, 0x83, 0xe8, 0xed, 0xf8, 0xb0, 0xb5, 0x67, 0x62, 0xe0, 0xc8, 0xff, 0xfd, 0x14};
static const unsigned char receiver_sk[32] = {0xb1, 0x15, 0xae, 0xcc, 0xee, 0xe6, 0x6d, 0x2f, 0x91, 0xfb, 0x4e, 0x46, 0x1a, 0xa2, 0x41, 0x3a, 0xa0, 0x79, 0xb1, 0xf1, 0xe8, 0xd7, 0xaa, 0xca, 0xf0, 0xa8, 0xbf, 0xd5, 0xa, 0xf5, 0xda, 0xc8};
static const unsigned char receiver_PK[64] = {0xdc, 0xf8, 0x1e, 0x67, 0x28, 0x4c, 0x3f, 0xd9, 0x5, 0xb3, 0xc3, 0x2e, 0x4, 0x0, 0x6, 0x6c, 0xdc, 0x3d, 0xcd, 0x59, 0x31, 0x4c, 0xee, 0x6a, 0xb7, 0xa6, 0x83, 0xa1, 0xfa, 0xe, 0x44, 0x7d, 0x99, 0xbb, 0x40, 0xaf, 0xd9, 0x56, 0x18, 0x7a, 0x79, 0xb3, 0xc6, 0xc, 0xb3, 0xab, 0xed, 0x71, 0xf0, 0x18, 0xb7, 0x64, 0x6, 0x82, 0x96, 0xf9, 0xef, 0xd, 0x5, 0xbf, 0x70, 0x86, 0x15, 0x67};
//(H(U_A) x U_A + CA_PublicKey) is precomputed and stored
static const unsigned char receiver_precomp[64] = {0x1c, 0x9, 0xc6, 0xce, 0xff, 0x29, 0x67, 0x66, 0x19, 0xbf, 0x26, 0x95, 0x6d, 0x9c, 0xd7, 0x45, 0xd1, 0x83, 0x3, 0x2, 0x30, 0x20, 0xc8, 0x8a, 0x73, 0xbf, 0x8e, 0x43, 0xd2, 0x60, 0x64, 0x2b, 0x93, 0x70, 0xb5, 0x0, 0x6b, 0x1f, 0x35, 0x5e, 0x15, 0x91, 0x52, 0x2d, 0x2d, 0x60, 0xe1, 0x55, 0x11, 0xae, 0x4c, 0xf, 0x4e, 0xdd, 0xa0, 0xe2, 0xae, 0x41, 0x98, 0x5, 0x31, 0x6d, 0x43, 0x63};


ECCRYPTO_STATUS AQHang_Offline(unsigned char* SecretKey, unsigned char* PublicKey);

ECCRYPTO_STATUS precompute(const unsigned char* PublicKey, unsigned char* PrecomputedPublicKey);

ECCRYPTO_STATUS BPV_KeyGeneration(unsigned char* secretAll, unsigned char* publicAll_BPV, unsigned char* publicAll_DBPV);

ECCRYPTO_STATUS BPVOnline(unsigned char* lastSecret, unsigned char* lastPublic);

ECCRYPTO_STATUS DBPVOnline(unsigned char* lastSecret, unsigned char* lastPublic, unsigned char* lastDesignated);

ECCRYPTO_STATUS BPV_AQHang_Online(const unsigned char* SecretKey, unsigned char* SharedSecret);

ECCRYPTO_STATUS BPV_Ephemeral_AQHang_Online(const unsigned char* SecretKey, const unsigned char* SharedSecret, const unsigned char* Ephemeral_receiverPK, unsigned char* EphemeralSecret);

ECCRYPTO_STATUS BPV_Schnorr(const unsigned char* SecretKey, const unsigned char* Message, const unsigned int SizeMessage, unsigned char* Signature);

ECCRYPTO_STATUS BPV_Schnorr_Verify(const unsigned char* PublicKey, const unsigned char* Message, const unsigned int SizeMessage, const unsigned char* Signature, unsigned int* valid);

ECCRYPTO_STATUS DBPV_ECIES_Encrypt(const unsigned char* SecretKey, unsigned char* onetime_Public);

ECCRYPTO_STATUS DBPV_ECIES_Decrypt(const unsigned char* SecretKey, const unsigned char* onetime_Public);


#ifdef __cplusplus
}
#endif


#endif
