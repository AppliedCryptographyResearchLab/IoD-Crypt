///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V7.10.1.1197 for Atmel AVR          07/Sep/2018  15:59:32
// Copyright 1996-2017 IAR Systems AB.
// Evaluation license - IAR Embedded Workbench for Atmel AVR, Evaluation Version 7.10
//
//    Source file  =  E:\Documents\DroneAVR\microFourQ-AVR-master\src\eccp2.c
//    Command line =  
//        -f C:\Users\OZGURO~1\AppData\Local\Temp\EWAD3A.tmp
//        (E:\Documents\DroneAVR\microFourQ-AVR-master\src\eccp2.c --cpu=m2560
//        -ms -o E:\Documents\DroneAVR\microFourQ-AVR-master\iar-ide\Debug\Obj
//        -D __IAR__ -D _AVR_ -D _ASM_ -D USE_ENDO -D _NO_CACHE_MEM_ -lC
//        E:\Documents\DroneAVR\microFourQ-AVR-master\iar-ide\Debug\List -lA
//        E:\Documents\DroneAVR\microFourQ-AVR-master\iar-ide\Debug\List -y
//        --initializers_in_flash --debug -e --eeprom_size 4096 --clib -Ohs)
//    Locale       =  English_USA.1252
//    List file    =  
//        E:\Documents\DroneAVR\microFourQ-AVR-master\iar-ide\Debug\List\eccp2.s90
//
///////////////////////////////////////////////////////////////////////////////

        NAME eccp2

        RTMODEL "__64bit_doubles", "disabled"
        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__cpu", "5"
        RTMODEL "__cpu_name", "ATmega2560"
        RTMODEL "__enhanced_core", "enabled"
        RTMODEL "__has_elpm", "true"
        RTMODEL "__memory_model", "2"
        RTMODEL "__no_rampd", "enabled"
        RTMODEL "__rt_version", "3"
        RTMODEL "__vtable_memory", "__nearflash"

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        EXTERN ?LL_ADD_L12
        EXTERN ?LL_AND_L12
        EXTERN ?LL_CMP_L12
        EXTERN ?LL_CMP_R0_L12
        EXTERN ?LL_XOR_L12
        EXTERN ?ML_FLASH_SRAM_24EC_16_L07
        EXTERN ?Register_R10_is_cg_reg
        EXTERN ?Register_R11_is_cg_reg
        EXTERN ?Register_R12_is_cg_reg
        EXTERN ?Register_R13_is_cg_reg
        EXTERN ?Register_R14_is_cg_reg
        EXTERN ?Register_R15_is_cg_reg
        EXTERN ?Register_R4_is_cg_reg
        EXTERN ?Register_R5_is_cg_reg
        EXTERN ?Register_R6_is_cg_reg
        EXTERN ?Register_R7_is_cg_reg
        EXTERN ?Register_R8_is_cg_reg
        EXTERN ?Register_R9_is_cg_reg
        EXTERN ?S_SHL_L02
        EXTERN ?ULL_SHR_L12
        EXTERN ?US_DIVMOD_S_L02
        EXTERN ?need_segment_init

        PUBWEAK `?<Segment init: NEAR_I>`
        PUBLIC FIXED_BASE_TABLE
        PUBLIC Montgomery_multiply_mod_order
        PUBLIC R1_to_R2
        PUBLIC R1_to_R3
        PUBLIC R2_to_R4
        PUBLIC R5_to_R1
        PUBWEAK __?EEARH
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR
        PUBWEAK __Constant_0_0
        PUBLIC add_mod_order
        PUBLIC clear_words
        PUBLIC cofactor_clearing
        PUBLIC conversion_to_odd
        PUBLIC decompose
        PUBLIC digit_x_digit
        PUBLIC ecc_mul
        PUBLIC ecc_mul_double
        PUBLIC ecc_mul_fixed
        PUBLIC ecc_phi
        PUBLIC ecc_point_validate
        PUBLIC ecc_precomp
        PUBLIC ecc_precomp_double
        PUBLIC ecc_psi
        PUBLIC eccadd
        PUBLIC eccadd_core
        PUBLIC eccdouble
        PUBLIC eccnorm
        PUBLIC eccset
        PUBLIC fp2add1271
        PUBLIC fp2addsub1271
        PUBLIC fp2copy1271
        PUBLIC fp2copy1271_flash
        PUBLIC fp2inv1271
        PUBLIC fp2mul1271
        PUBLIC fp2neg1271
        PUBLIC fp2sqr1271
        PUBLIC fp2sub1271
        PUBLIC fp2zero1271
        PUBLIC fpdiv1271
        PUBLIC fpexp1251
        PUBLIC fpinv1271
        PUBLIC fpmul1271
        PUBLIC fpsqr1271
        PUBLIC mLSB_set_recode
        PUBLIC mask_7fff
        PUBLIC modulo_order
        PUBLIC mp_mul
        PUBLIC point_setup
        PUBLIC prime1271_0
        PUBLIC recode
        PUBLIC subtract
        PUBLIC subtract_mod_order
        PUBLIC table_lookup_1x8
        PUBLIC table_lookup_fixed_base
        PUBLIC wNAF_recode
        
          CFI Names cfiNames0
          CFI StackFrame CFA_Y Y DATA
          CFI StackFrame CFA_SP SP DATA
          CFI VirtualResource ?RetPad:1, ?RetByte3:8, ?RetHigh:8, ?RetLow:8
          CFI VirtualResource ?Ret:25
          CFI Resource R0:8, R1:8, R2:8, R3:8, R4:8, R5:8, R6:8, R7:8, R8:8, R9:8
          CFI Resource R10:8, R11:8, R12:8, R13:8, R14:8, R15:8, R16:8, R17:8
          CFI Resource R18:8, R19:8, R20:8, R21:8, R22:8, R23:8, R24:8, R25:8
          CFI Resource R26:8, R27:8, R28:8, R29:8, R30:8, R31:8
          CFI Resource ?RetHighByteMask:8, SP:16, SPH:8, SPL:8, Y:16
          CFI ResourceParts ?Ret ?RetByte3, ?RetHigh, ?RetLow, ?RetPad
          CFI ResourceParts SP SPH, SPL
          CFI ResourceParts Y R29, R28
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign 1
          CFI ReturnAddress ?Ret CODE
          CFI CFA_Y Y+0
          CFI CFA_SP SP+3
          CFI ?RetPad 0
          CFI ?RetByte3 and(load(1, DATA, sub(CFA_SP, 2)), ?RetHighByteMask)
          CFI ?RetHigh Frame(CFA_SP, -1)
          CFI ?RetLow Frame(CFA_SP, 0)
          CFI ?Ret Concat
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 SameValue
          CFI R13 SameValue
          CFI R14 SameValue
          CFI R15 SameValue
          CFI R16 Undefined
          CFI R17 Undefined
          CFI R18 Undefined
          CFI R19 Undefined
          CFI R20 Undefined
          CFI R21 Undefined
          CFI R22 Undefined
          CFI R23 Undefined
          CFI R24 SameValue
          CFI R25 SameValue
          CFI R26 SameValue
          CFI R27 SameValue
          CFI R28 Undefined
          CFI R29 Undefined
          CFI R30 Undefined
          CFI R31 Undefined
          CFI ?RetHighByteMask SameValue
          CFI SPH Undefined
          CFI SPL Undefined
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign 1
          CFI ReturnAddress ?Ret CODE
          CFI CFA_Y Y+2
          CFI CFA_SP SP+3
          CFI ?RetPad 0
          CFI ?RetByte3 and(load(1, DATA, sub(CFA_SP, 2)), ?RetHighByteMask)
          CFI ?RetHigh Frame(CFA_SP, -1)
          CFI ?RetLow Frame(CFA_SP, 0)
          CFI ?Ret Concat
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 SameValue
          CFI R13 SameValue
          CFI R14 SameValue
          CFI R15 SameValue
          CFI R16 Undefined
          CFI R17 Undefined
          CFI R18 Undefined
          CFI R19 Undefined
          CFI R20 Undefined
          CFI R21 Undefined
          CFI R22 Undefined
          CFI R23 Undefined
          CFI R24 SameValue
          CFI R25 SameValue
          CFI R26 SameValue
          CFI R27 SameValue
          CFI R28 Undefined
          CFI R29 Undefined
          CFI R30 Undefined
          CFI R31 Undefined
          CFI ?RetHighByteMask SameValue
          CFI SPH Undefined
          CFI SPL Undefined
          CFI EndCommon cfiCommon1
        
        
          CFI Common cfiCommon2 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign 1
          CFI ReturnAddress ?Ret CODE
          CFI CFA_Y Notused
          CFI CFA_SP SP+3
          CFI ?RetPad 0
          CFI ?RetByte3 and(load(1, DATA, sub(CFA_SP, 2)), ?RetHighByteMask)
          CFI ?RetHigh Frame(CFA_SP, -1)
          CFI ?RetLow Frame(CFA_SP, 0)
          CFI ?Ret Concat
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 SameValue
          CFI R13 SameValue
          CFI R14 SameValue
          CFI R15 SameValue
          CFI R16 SameValue
          CFI R17 SameValue
          CFI R18 SameValue
          CFI R19 SameValue
          CFI R20 SameValue
          CFI R21 SameValue
          CFI R22 SameValue
          CFI R23 SameValue
          CFI R24 SameValue
          CFI R25 SameValue
          CFI R26 SameValue
          CFI R27 SameValue
          CFI R28 Undefined
          CFI R29 Undefined
          CFI R30 SameValue
          CFI R31 SameValue
          CFI ?RetHighByteMask SameValue
          CFI SPH Undefined
          CFI SPL Undefined
          CFI Y SameValue
          CFI EndCommon cfiCommon2
        
        
          CFI Common cfiCommon3 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign 1
          CFI ReturnAddress ?Ret CODE
          CFI CFA_Y Y+4
          CFI CFA_SP SP+3
          CFI ?RetPad 0
          CFI ?RetByte3 and(load(1, DATA, sub(CFA_SP, 2)), ?RetHighByteMask)
          CFI ?RetHigh Frame(CFA_SP, -1)
          CFI ?RetLow Frame(CFA_SP, 0)
          CFI ?Ret Concat
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 SameValue
          CFI R13 SameValue
          CFI R14 SameValue
          CFI R15 SameValue
          CFI R16 Undefined
          CFI R17 Undefined
          CFI R18 Undefined
          CFI R19 Undefined
          CFI R20 Undefined
          CFI R21 Undefined
          CFI R22 Undefined
          CFI R23 Undefined
          CFI R24 SameValue
          CFI R25 SameValue
          CFI R26 SameValue
          CFI R27 SameValue
          CFI R28 Undefined
          CFI R29 Undefined
          CFI R30 Undefined
          CFI R31 Undefined
          CFI ?RetHighByteMask SameValue
          CFI SPH Undefined
          CFI SPL Undefined
          CFI EndCommon cfiCommon3
        
        EXTERN fpadd1271
        EXTERN fpcopy1271
        EXTERN fpcopy1271_flash
        EXTERN fpneg1271
        EXTERN fpsub1271
        EXTERN fpzero1271
        EXTERN mod1271
        EXTERN mod_mul128
        EXTERN mod_mul_dbl128
        EXTERN mod_sqr128
        EXTERN mp_add
        EXTERN mp_sub
        EXTERN mul256
        EXTERN mul32
        EXTERN mul64

// E:\Documents\DroneAVR\microFourQ-AVR-master\src\eccp2.c
//    1 /***********************************************************************************
//    2 * FourQlib: a high-performance crypto library based on the elliptic curve FourQ
//    3 *
//    4 *    Copyright (c) Microsoft Corporation. All rights reserved.
//    5 *
//    6 * Abstract: ECC operations over GF(p^2) exploiting endomorphisms
//    7 *
//    8 * Modified by Geovandro C. C. F. Pereira
//    9 ************************************************************************************/
//   10 
//   11 #include "FourQ_internal.h"
//   12 #include "FourQ_params.h"

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
// static uint64_t const PARAMETER_d[4]
PARAMETER_d:
        DS8 32
        REQUIRE `?<Initializer for PARAMETER_d>`

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
// static uint64_t const GENERATOR_x[4]
GENERATOR_x:
        DS8 32
        REQUIRE `?<Initializer for GENERATOR_x>`
        DS8 32
        REQUIRE `?<Initializer for GENERATOR_y>`

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
// static uint64_t const curve_order[4]
curve_order:
        DS8 32
        REQUIRE `?<Initializer for curve_order>`
        DS8 32
        REQUIRE `?<Initializer for Montgomery_rprime>`

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
// static uint64_t const Montgomery_Rprime[4]
Montgomery_Rprime:
        DS8 32
        REQUIRE `?<Initializer for Montgomery_Rprime>`
//   13 #include "FourQ_tables.h"

        RSEG NEAR_F:CODE:NOROOT(0)
// uint64_t const __flash FIXED_BASE_TABLE[960]
FIXED_BASE_TABLE:
        DD 2802050609, 3783931123, 491793247, 678715583, 3841524563, 3761136375
        DD 2340859102, 205234231, 2962456284, 2428440472, 619758933, 1946909816
        DD 597693286, 3005293457, 982865829, 1341978041, 2883207867, 695925963
        DD 1433180102, 1497944375, 858810444, 2820184633, 171188007, 212806514
        DD 4246243207, 982229016, 2296189608, 1430655617, 3231685495
        DD 2964573235, 3092062281, 464448248, 301660416, 6563238, 3785815945
        DD 418893074, 307585126, 1842147482, 2900866795, 1150158318, 2636655024
        DD 3207541608, 693616052, 1838226891, 3694920686, 2669892571
        DD 3133072641, 113591045, 1034920229, 783238513, 1686779469, 1922445400
        DD 2637250290, 1639413535, 3219304553, 1329711096, 1503105196
        DD 1082532782, 1144195650, 1295222150, 2631758983, 4233533028
        DD 3852001556, 1960800992, 2436632843, 3382731557, 1608823000
        DD 124507153, 3602904025, 1986109029, 2095987208, 613564436, 1217813107
        DD 3600136545, 2284451590, 682281122, 704095611, 1106362451, 2667831310
        DD 1142729192, 2348229662, 3786029227, 3358767092, 1492290735
        DD 4199809222, 3403348152, 676234814, 884396294, 988893335, 4115238059
        DD 25009225, 1841198992, 340322492, 1673492136, 4063944710, 1668387419
        DD 3186459130, 3319973665, 3598735019, 1323200750, 3029817360
        DD 2403129781, 789224104, 1196621081, 527647764, 830969067, 3360065122
        DD 299759570, 1924244302, 638824559, 2058381168, 1180005811, 2187562283
        DD 1085899871, 2030213326, 1216954448, 28635441, 3202061221, 680112891
        DD 83056141, 291186571, 1165875317, 1301448074, 1458724581, 3456931710
        DD 2463416781, 2279033238, 126863937, 1993089697, 1002122733
        DD 1037839350, 293283973, 3116546722, 1140029052, 3773467279
        DD 1929879077, 1511356781, 24615211, 2161766290, 779579924, 1731668246
        DD 3188295733, 2063030125, 630134635, 1634220315, 813906173, 2591249316
        DD 1921356383, 1340625172, 2251034576, 1111157585, 1394974439
        DD 1262164584, 4261425576, 530608636, 441392486, 2378770599, 769479702
        DD 3742984810, 1612209178, 3698174388, 1233164055, 1305476099
        DD 1617037643, 100302477, 2753472250, 661735584, 1246748783, 4003365104
        DD 2075284393, 3434157875, 1100649099, 1788478366, 2217884646
        DD 2535986363, 28496302, 3540324913, 2807596420, 3432488407, 1423908384
        DD 1043276509, 2446919422, 1608456719, 1312221591, 1802794548
        DD 3625480564, 4007736371, 1046360506, 2507389603, 3839525015
        DD 2097051590, 1267018457, 339839902, 3767219303, 803663752, 675115419
        DD 3831240715, 3073613101, 299029960, 1974271215, 2354452598
        DD 2403366778, 2803059787, 206875712, 1723526664, 3106809981, 111249599
        DD 1865776720, 3978193265, 3314561817, 2447048000, 1954301423
        DD 489652590, 3728770729, 3014913917, 1573595117, 4196258542
        DD 1140704364, 1888904344, 1364533151, 1642961884, 3041211639
        DD 121614463, 1161057715, 2211100427, 4064768995, 1972171999
        DD 1738269278, 2487152169, 3659001330, 3604746086, 1036641720
        DD 1094694747, 1453657274, 3316142975, 509948251, 2150396435
        DD 1610154562, 4096075054, 1942608072, 857312399, 1013152646
        DD 3980480307, 1397720243, 3739052290, 2905685618, 484389807
        DD 1591049876, 710357102, 1517281309, 877073401, 1941323242, 253504499
        DD 969633879, 2669287643, 771278564, 1735890916, 1713095497, 3200159842
        DD 1343940555, 3902117443, 1532143757, 297803089, 57832744, 807123240
        DD 17586082, 1431654342, 931869041, 698363121, 4169398850, 1356323625
        DD 1593853880, 675294634, 1294236387, 2823856828, 218301991, 2292466677
        DD 3034996122, 762163337, 1858693227, 4272019847, 3726650888
        DD 4069357056, 1550115283, 4133601207, 360519614, 3715445580
        DD 1446587702, 3172537692, 3797186776, 1026779901, 342708013
        DD 4182644200, 2616975371, 1793003712, 723016346, 3981618043
        DD 2456102835, 1930436224, 1738112532, 2491204929, 3046068212
        DD 4207516282, 922222791, 1074026201, 3492818482, 1086089595
        DD 1131602998, 1196480664, 2437204667, 3382852799, 1976720122
        DD 1985334270, 2034602358, 402410247, 1960517990, 627495113, 1884795428
        DD 138509091, 492059481, 1145210755, 432177332, 2339161071, 891488765
        DD 3228085874, 931347818, 599792116, 1321232154, 2748341173, 2643998433
        DD 4062506979, 1157503711, 3850304330, 2727787580, 899760464, 788449384
        DD 4212739018, 803314697, 2503791110, 416024531, 3384850912, 1541403159
        DD 1478147310, 1729800022, 687329698, 3788256174, 933274622, 460268873
        DD 1706736515, 1364213014, 3582497297, 1958303286, 3935762537
        DD 3183049444, 2653229245, 352833048, 4206443283, 2037271892, 93718825
        DD 1786869343, 3853005805, 781452577, 2990929476, 1004447026
        DD 4292159123, 3198642549, 3127725782, 1689864264, 2497920711
        DD 2645896449, 1432592165, 1909417434, 3680141624, 3991354143
        DD 1818418210, 316985659, 1696093463, 2635706562, 1471544784
        DD 2006979026, 2932704484, 535676362, 506761937, 1183075861, 2420252895
        DD 2051160625, 1206448281, 1529963975, 3744850478, 476471018
        DD 4232403291, 2013443414, 22794974, 2242043636, 2507237037, 401779591
        DD 543212005, 433024309, 3191901802, 304773841, 1683748710, 1534704584
        DD 1292557007, 553320605, 732071224, 2538760743, 222432222, 1883354345
        DD 1490726999, 993005875, 4040311363, 1027181414, 63784712, 2443549082
        DD 3448995990, 514728969, 1278611596, 1725786976, 2299009384, 387123255
        DD 1898306813, 1472910993, 2533683658, 883977400, 523611122, 3702515943
        DD 2371112377, 1770205465, 1135544155, 1653040998, 1436363629
        DD 537481445, 3973943412, 3572907971, 1118573474, 1953706353, 87135062
        DD 2528117512, 608401594, 740360160, 3530211354, 1216958746, 2576874742
        DD 1323509537, 252442858, 369092327, 2798692055, 1801551796, 3308221220
        DD 1226235041, 2252767863, 1015179760, 3359105099, 3259109572
        DD 2438616108, 1313344335, 2592072542, 3321820080, 1157465266
        DD 832897502, 1084491705, 2045943369, 2781668779, 195551292, 2322913514
        DD 2812850693, 237427420, 1190446977, 2493584010, 1175919310
        DD 1419094033, 1155224834, 1274121564, 2139659802, 1140000434
        DD 1297028906, 3139239853, 866752358, 617847498, 1649702745, 3257209710
        DD 3629458190, 2027495709, 475286992, 4131349434, 318675305, 2493371266
        DD 110817756, 3487941206, 811323200, 1270592917, 1672384658, 2478300678
        DD 3830516087, 2680161342, 158862579, 3950610545, 2189097191
        DD 2002221623, 986614380, 853562810, 2044659219, 2865670443, 1444790394
        DD 2181899891, 2118394585, 3769586504, 1803935619, 3738718827
        DD 521476801, 359744189, 904583397, 868720084, 1839656812, 630521316
        DD 1596891213, 3223836154, 2432924940, 128987931, 1404387344
        DD 1028367779, 2165250442, 2611560853, 1147387173, 3962228638
        DD 850957484, 3594734030, 2020677473, 4112507409, 624615859, 1398498403
        DD 1084115775, 3663612382, 975400208, 2619421546, 433238274, 917167504
        DD 674624516, 85527321, 155362069, 1988264569, 3246986008, 3398311836
        DD 989763267, 2434991763, 2669150644, 1650446481, 971148728, 1574194318
        DD 2678804533, 1922770957, 340874714, 491615957, 3553425424, 2351656040
        DD 1510976026, 3411339914, 1019636868, 4117153651, 1359293667
        DD 1705943029, 1005458654, 30208036, 1971720586, 2305552734, 144603420
        DD 639472598, 905904685, 2407341305, 3443319101, 2511845622, 1327360399
        DD 1658601908, 1374063140, 603381033, 1638768188, 2162940753
        DD 1481632356, 1067314419, 1565720071, 2918397653, 2600355902
        DD 2159110506, 502924233, 4286683673, 1442266439, 907084013, 1769731421
        DD 1178178585, 3738468420, 2144216479, 1636602950, 4035900684
        DD 4065951729, 2379822016, 130627001, 2027869686, 3145043132
        DD 2937263247, 513412358, 2135741659, 2275205445, 2519550356, 674852001
        DD 3312846275, 4111030845, 2764384177, 509022013, 76765063, 720804409
        DD 4258274510, 1495196534, 2294056499, 4152056031, 3002308049
        DD 1415894609, 513443502, 2948335979, 4133186344, 1826807627, 782056968
        DD 993690253, 2368562896, 1669464349, 1295849789, 2493021350, 997021359
        DD 1356723981, 3366786473, 2371745404, 3160088466, 958431384
        DD 3755320571, 3466196256, 3093986217, 842775687, 3624126345
        DD 3779037352, 4062183509, 1459608765, 455395117, 989793699, 1175194646
        DD 1879119206, 985950739, 1995945973, 3070720962, 470195198, 2705996854
        DD 2403801404, 4035501629, 1836311370, 830301748, 1665870809
        DD 3078561480, 1530939192, 480365341, 4082084791, 3394529862, 88783818
        DD 149792352, 3905800925, 2508971761, 1769057215, 3722137263
        DD 1093895511, 2960766588, 504726917, 3483525224, 3525772404
        DD 3016664169, 1404267826, 1817459976, 18162625, 1601384782, 1181280556
        DD 1092070609, 3136241342, 2803077914, 67337498, 3817916045, 1759582436
        DD 2756449653, 1803603285, 1462353970, 1929898634, 4008286898
        DD 1556432735, 1276423285, 876940866, 1572068568, 1057559934
        DD 1347977298, 1657678619, 1315254159, 665360837, 801285613, 181207967
        DD 3582017260, 1262503133, 2426886488, 3226278046, 3877450657
        DD 606425532, 1375239941, 3646617963, 4161394709, 43550752, 999588805
        DD 2994693623, 4097198915, 787875653, 1062189241, 3412508105
        DD 2270608266, 730253748, 2610456481, 4176206560, 1315957162
        DD 1142845464, 818680457, 4257370883, 2337106322, 1205392986, 816739518
        DD 2349053690, 3283982805, 480799036, 270070438, 1772007761, 3656712181
        DD 1033914212, 1027255129, 907485251, 750278655, 799609185, 204414124
        DD 2751823265, 866502169, 1218582969, 3512667077, 1110708256
        DD 1184931245, 1945667920, 3329499576, 464343826, 915300910, 1100248859
        DD 3830320639, 2361858681, 1416098242, 1262839012, 2951028883
        DD 2002383210, 3613376169, 958099932, 2874079128, 706479764, 1413747469
        DD 36734804, 3484031649, 1266344447, 3610468839, 1692561202, 3171636409
        DD 2376364088, 3941395989, 344783471, 2042809405, 928437460, 3541386206
        DD 634670760, 649800771, 3626798063, 1026028415, 740312835, 937087584
        DD 1540570520, 2738371453, 2006200599, 2124776434, 302456169, 706894834
        DD 1014776103, 4059052755, 2464923130, 1756772100, 1566638860
        DD 3136189905, 3396216915, 1998206518, 306203444, 644251215, 3188966499
        DD 1872487344, 735207825, 2915569545, 2263087307, 395627336, 1951534474
        DD 38599038, 504743749, 508816130, 1559131166, 2946092449, 2366148064
        DD 482379308, 1649939094, 566290740, 1125335923, 3290757028, 1622919016
        DD 1007739203, 2879856575, 346625464, 934865567, 3288470527, 2375478373
        DD 4286022748, 1956677672, 3673556899, 3202052500, 370968326, 401106545
        DD 1379949007, 2901121248, 2492559113, 1750411972, 2937797703
        DD 1288869659, 3722582896, 1749298876, 243692949, 425892748, 1667212410
        DD 1785288147, 4075000749, 1873495520, 4243607748, 1725775604
        DD 4259085809, 3138091708, 453758876, 350968693, 2734506269, 485990300
        DD 4293943306, 1548316531, 1430416752, 1231326597, 589486249
        DD 1187053930, 228289871, 3045055367, 165525043, 1621014098, 3202122437
        DD 3876557158, 3366956839, 1999615413, 2955049504, 2040698073
        DD 288210061, 2138419521, 2382823456, 2563885048, 3296860081
        DD 1498665130, 3781112831, 3800191979, 509692997, 645733825, 3114148422
        DD 3194287370, 2197705877, 1319807836, 2120269520, 2457688768
        DD 3869907789, 1741912173, 258877765, 2803458751, 2740906651
        DD 1675180100, 3529916588, 3007457479, 3945330081, 379336914, 876207138
        DD 1266250419, 3450478100, 1900512343, 3961346247, 1378279717
        DD 3884963057, 1721599894, 2856624255, 1963839914, 1525399247
        DD 847012533, 3041901861, 7048853, 32192078, 716437853, 3235242390
        DD 4240330880, 1515710245, 706452439, 1477679965, 489368423, 2224781939
        DD 1964831919, 863830181, 373980462, 3414402236, 13558692, 1841178873
        DD 882434102, 1221756162, 87918993, 3400596329, 23485796, 148278900
        DD 1251545890, 3175059805, 3125066708, 388047547, 489992441, 703113715
        DD 1561415111, 3576908640, 149398589, 854651880, 685477522, 2149994338
        DD 1555545627, 2186317603, 2599602055, 4158890418, 862644172, 768709822
        DD 2145572078, 730490994, 1463627291, 1672669750, 858974771, 1528775235
        DD 537641271, 112403981, 1707375756, 1402559582, 1107435466, 2612107590
        DD 796814580, 588868908, 824162922, 736155405, 3272348598, 655470812
        DD 1643031572, 1501378004, 2287102358, 3871154647, 1880529867
        DD 2905187600, 2700194512, 1925298509, 719213332, 412644327, 300097756
        DD 3898399544, 757733268, 2801148387, 2695414867, 1160115959
        DD 1258739125, 407432220, 4096333417, 1566017328, 490870357, 688544590
        DD 4173729191, 2717079135, 1725800249, 934573216, 1437346265
        DD 1245093604, 1116837498, 317111433, 2441981098, 106021648, 1028057232
        DD 2685309105, 2936362032, 1839581753, 385231861, 1217155558, 436345907
        DD 1677442261, 224713439, 2646600316, 152628453, 3715375162, 993204695
        DD 2342496524, 495473755, 2425117158, 330797788, 2621245817, 170759066
        DD 3075207463, 840588734, 4134372464, 1582909439, 4247174297, 585932490
        DD 2477851958, 3726101122, 1436407878, 1497323200, 1967673379
        DD 289945395, 4148464412, 600223997, 2317844559, 930677829, 656861808
        DD 1463718294, 842378352, 903983695, 1240791134, 1371146272, 1624535444
        DD 1271173505, 856220125, 1563009566, 1047416371, 2115340619
        DD 1328664827, 1356578095, 900319710, 4012149714, 459491088, 874032594
        DD 1379285970, 2529633082, 2584267167, 2089030829, 1424408668
        DD 3161115466, 294868890, 1462305306, 185137692, 103269344, 3783010931
        DD 1024151545, 1502622079, 3574065269, 3162242632, 1974631347
        DD 1827033589, 1151864620, 460353094, 2073531900, 4260996672
        DD 2649185246, 3133143720, 1974330634, 2265483680, 3456807190
        DD 3713657964, 1866325244, 2296252020, 1849066293, 3928531059
        DD 689770793, 1686654305, 4172866872, 2927971702, 1886320881
        DD 2205495401, 326798437, 3324049766, 31743772, 796313530, 3800965112
        DD 3823672404, 919772844, 2131446219, 2201460501, 732739895, 1709818782
        DD 118282814, 2603760709, 2877173221, 383790897, 1666261687, 1404891974
        DD 3603095049, 534241799, 3927857068, 979328916, 3505435871, 213518056
        DD 2276049810, 1890861251, 3739342848, 511557955, 1916375339
        DD 1419295341, 387460372, 858288288, 1731033420, 1810040572, 609954638
        DD 741138961, 2368448415, 278622764, 2623500922, 646258938, 620656878
        DD 1364930565, 3417220760, 1935802860, 839958392, 1174973457
        DD 2621708355, 853081489, 79229656, 3377823259, 2564584537, 2002008055
        DD 1537480693, 302052696, 1048236804, 771812447, 725901960, 4236721503
        DD 1648916196, 841419411, 142121762, 3326518396, 2455115454, 594598398
        DD 434532804, 1124792886, 2887737266, 358901966, 4064376373, 998563522
        DD 398517647, 823398032, 3413394426, 1552283788, 1691903148, 229072733
        DD 1907424132, 694154312, 2905814723, 460972299, 3710482355, 4292843842
        DD 261757475, 1276844429, 3239216718, 3128396324, 4067248336
        DD 1962305687, 2256188945, 1070973038, 4286085305, 1268305459
        DD 1976275301, 4158344654, 2582401379, 291920544, 2926647481, 709463830
        DD 3035320474, 643744731, 1758342278, 1034167046, 3001234309, 921054122
        DD 2041267320, 2572189002, 1092520053, 633320188, 855780577, 3618381513
        DD 54330470, 601047470, 3915561984, 3533026405, 2732011904, 600842523
        DD 4287769933, 2688339322, 3727693076, 511078728, 2828332971
        DD 3259083574, 1140596312, 480232179, 735214215, 3392902742, 2245881877
        DD 1398947362, 471962656, 1433670128, 158024441, 421942647, 455301423
        DD 3543215508, 3284474886, 816425377, 3933114233, 1032433843
        DD 3318185138, 2125165853, 3873402422, 3232346502, 1058363028
        DD 1334070616, 664002554, 1099962403, 1809024333, 719143947, 836726322
        DD 3579085041, 1793319959, 831316868, 436831476, 90506797, 3535796726
        DD 1857743971, 703043472, 1996972007, 617129191, 232342342, 3752439906
        DD 3213824482, 1592308580, 454547493, 4146881348, 1656886540
        DD 3498174684, 672163968, 3756822977, 4104433421, 2541625134, 445582956
        DD 951660911, 1923589031, 2353930988, 842471026, 1537519419, 3242223878
        DD 2299646823, 135599140, 2830549815, 1371359994, 1362362599
        DD 1357347483, 713172296, 1186989339, 442424572, 38307556, 1103806847
        DD 2691370746, 463230581, 862597296, 3389617702, 1962617872, 1223231873
        DD 723537066, 3114367860, 1761790290, 3106025531, 969075126, 1012495385
        DD 3105975195, 1693540214, 1838322434, 4004385831, 2064816085
        DD 4263236359, 252134573, 1541843101, 867532326, 859139088, 674210533
        DD 1641838380, 973314396, 2302529525, 1331531614, 4232577599
        DD 1274843774, 3601237422, 1500455489, 3962157218, 1018421423
        DD 275068994, 822185485, 1146574374, 802164713, 1233313809, 306305136
        DD 1315406247, 2534233702, 255713998, 453375133, 1668382310, 2845114335
        DD 1806208664, 1097036967, 1408325530, 2332568813, 3050482251
        DD 1450712570, 409318168, 2169626365, 224428535, 1684446084, 1597563214
        DD 3828806843, 177687360, 1137981505, 3597057538, 1479724723, 450986638
        DD 104103326, 971238022, 1769555739, 3410713316, 754110305, 3663359716
        DD 3081447914, 2596951912, 317152434, 3540852732, 3864727817
        DD 1798442586, 1912192717, 1715990233, 3699542274, 212157839, 836119813
        DD 978633189, 3928735570, 3824047249, 1613492409, 595635531, 631927650
        DD 1910464344, 728440370, 1788888845, 3687182296, 3099866443, 87374884
        DD 4125125578, 2747783996, 726574583, 680139919, 315522209, 3591712606
        DD 912735357, 1507115444, 1377815445, 503469390, 604689472, 1725143055
        DD 967104977, 2884726635, 2840342370, 2146055452, 949052346, 1029879539
        DD 779654634, 264680527, 3450324585, 3586540547, 241185171, 775985417
        DD 368725039, 2606501807, 2383590969, 1177115805, 979055387, 1558490582
        DD 1816942713, 1604828531, 1204924146, 1202931476, 573724473, 671108124
        DD 2587644569, 3582477181, 315434984, 716282904, 2147710978, 988217590
        DD 188885814, 449930112, 4206633273, 1169682230, 568114461, 1153228543
        DD 1910578299, 1103551009, 4156869652, 741731961, 1505835081
        DD 1213371431, 280888586, 1687343727, 2354114777, 2801094296
        DD 3714193435, 1781379766, 710825891, 4158226539, 1000684832
        DD 1465019355, 4110476880, 399404209, 1123611461, 98058672, 1770908016
        DD 2860517996, 2883767182, 83146073, 631039133, 3226525655, 4182620469
        DD 557332925, 1429234180, 3010536838, 435777626, 2100444043, 381077016
        DD 651448363, 2861128027, 2037477481, 1840519282, 4167549155
        DD 1819730384, 332792280, 857437059, 771525389, 3828252789, 408187635
        DD 722529184, 96277479, 2432146325, 1369061492, 3551339776, 2366226866
        DD 753989427, 73245789, 1751269996, 1677820309, 2617121545, 1921865717
        DD 2376254853, 4188643207, 1641827856, 1338278686, 1413042144
        DD 1841693388, 1743382702, 75781739, 1251180699, 3321688135, 1492378299
        DD 1908458042, 922643523, 3019963070, 2934227111, 1632382782
        DD 3504457409, 1980803456, 2290638284, 484972924, 985844523, 3940424863
        DD 2939106334, 1192939643, 1795232283, 3598353276, 525978457, 713974824
        DD 791831242, 1390871012, 3974432128, 434152061, 2814224044, 3043564567
        DD 463335922, 1128811569, 2611890666, 2793493844, 2720398053
        DD 1134740957, 3983544047, 4200503594, 596740182, 1485905750
        DD 3834400169, 1686864289, 3184575421, 1726407436, 379397739
        DD 4089061532, 809793157, 553101410, 437009710, 3518716586, 1024528881
        DD 913058180, 768380947, 113740644, 3775521787, 659049060, 2758243428
        DD 2408492220, 499272897, 191673115, 2307854240, 3748251727, 1226896034
        DD 768878196, 2102156393, 3230738969, 1788401878, 1218109055
        DD 2132819496, 1166502388, 4228230295, 307183907, 2909633895
        DD 1001993972, 3572502520, 856249598, 1190727343, 3268306176
        DD 3573145277, 2079934306, 1483602819, 781391658, 3021028758
        DD 1014653026, 343870867, 1574634391, 3330510900, 149117295, 1734581242
        DD 927885311, 428376626, 419568673, 4258619130, 3104004, 2044836515
        DD 95733472, 2910111820, 3848769187, 1784194941, 474150786, 3536517837
        DD 3763627659, 3991152156, 594962643, 1957608242, 3992218211, 835653364
        DD 837586009, 3277543461, 2505846421, 1747293699, 668512490, 1115496128
        DD 3081279342, 1901247763, 1802290624, 2696037581, 64524044, 2365511831
        DD 1879706, 4136871933, 2823074721, 2059267222, 1735170763, 3771579699
        DD 1662741461, 215865784, 703760860, 922431231, 155702645, 238989401
        DD 515034725, 244052997, 557429668, 972336781, 1097199099, 2054215334
        DD 3764514214, 2358281462, 775733298, 3495298623, 519582366, 1239987157
        DD 1833763278, 374788939, 17877295, 386410976, 1840061518, 2427746238
        DD 1481397957, 3576031541, 1501454090, 2394411885, 1611146829
        DD 2577171102, 1062758228, 4115950109, 1031710877, 2587837284
        DD 1098207101, 788036007, 990353026, 2552637554, 447903637, 3153033507
        DD 3694643696, 3962937495, 628017176, 165500998, 1249040988, 3989492828
        DD 1373596769, 3478972441, 2935115725, 2598799857, 195476373
        DD 2776316574, 3865558373, 2726989386, 1912591761, 1403517663
        DD 113452538, 1798164243, 1718088344, 3576302052, 1056395686
        DD 1085851466, 1366954050, 2357298165, 3498892797, 461457393
        DD 1495497927, 2285459763, 4294528977, 756084583, 1401605209
        DD 1878059805, 2891042360, 348520037, 1775512449, 2512382137
        DD 2709445177, 3741688641, 1573312911, 1558756984, 4063251767
        DD 3972301770, 833979681, 125837866, 80926740, 3823998409, 1036094251
        DD 4074179883, 2760775225, 3155114192, 1342002342, 2797016123
        DD 2330183259, 2440624797, 1211020319, 2276282141, 604736334, 5892928
        DD 1837445698, 1143427378, 3241539454, 229303113, 1650526058, 943879772
        DD 892431323, 982252946, 610362810, 3575085685, 472741707, 373810102
        DD 73019289, 1497788840, 3980089635, 1523404213, 85261018, 1486943503
        DD 3895033795, 4069862033, 2094185180, 3936010854, 228872496, 504678777
        DD 648074300, 4271088528, 3143808809, 4160126155, 906188719, 477911528
        DD 987005789, 2264549131, 1460514813, 2409872790, 3619995241, 718761980
        DD 400866796, 3940015185, 1137594025, 3595194766, 1488616160
        DD 1684538709, 3759459454, 3458609336, 61589843, 2006564439, 2736284172
        DD 3897403730, 723881890, 104542205, 3716742597, 2587534678, 389488087
        DD 2023232153, 2457568117, 496020269, 1430606352, 2363837392
        DD 3025339937, 4292567605, 1494260581, 2709562645, 2254692548
        DD 476447988, 1095139300, 3702995064, 2922125988, 3334501655, 433310466
        DD 3932636657, 2853469335, 835372092, 1893386010, 1794670074
        DD 3105963714, 4128144165, 1743923433, 4153275359, 3216350092
        DD 2753916835, 912816018, 588739908, 3787349023, 1682644112, 2020253211
        DD 2479521627, 1098052723, 3098209113, 1655593908, 4200799087
        DD 3168388145, 3989425261, 532553906, 3155091589, 1608352415
        DD 2915425625, 605934357, 637000630, 3031861462, 3854488276, 1499103998
        DD 3423701005, 1768241888, 4232064886, 731809278, 125241985, 3139737013
        DD 1605584689, 97651799, 910711474, 2644402740, 1710489275, 654387862
        DD 2227195895, 1483538164, 3236609982, 1151698444, 4082314880
        DD 1874847458, 2939298046, 95152826, 3414201976, 468525554, 3085631186
        DD 715530514, 4128250123, 3801645948, 4019280120, 516488124, 2767810411
        DD 520002362, 109776627, 1782285354, 3623364599, 2463976316, 4093451415
        DD 1615951291, 2619305368, 328971841, 2542646032, 976925417, 3386236171
        DD 3318307137, 632470752, 885442400, 1237025062, 222564698, 299562521
        DD 1981991915, 374273453, 2019295123, 895267933, 1905353853, 1288597084
        DD 293545308, 245018174, 1478182027, 908219412, 1420096459, 968640133
        DD 2030141637, 3083254127, 1191592003, 975962379, 1137495899
        DD 3242997553, 503051183, 2505516404, 473337649, 3037137754, 12332755
        DD 1672707936, 53663965, 2359023856, 121942416, 2376907214, 757436002
        DD 3116768788, 3148199101, 1513417110, 197792297, 1864463828, 94143686
        DD 2274410104, 440134979, 2108405168, 3745075031, 993801188, 809990118
        DD 3895220842, 1503829327, 3901650852, 1927553489, 321988953
        DD 1776689923, 2364718008, 765475501, 2414653622, 676911200, 2751611814
        DD 875600359, 3533344611, 3123295861, 4143011974, 1025517732
        DD 2248441098, 4033405650, 1819741728, 345611101, 595974777, 3515304537
        DD 3243908313, 2024715602, 602521710, 1210961100, 3041613637
        DD 2065211807, 4271536646, 57444718, 3515292691, 791424224, 3595866823
        DD 992844702, 135909495, 105498597, 2070275019, 3450562282, 3299536959
        DD 1236360000

        RSEG NEAR_F:CODE:NOROOT(0)
// static uint64_t const __flash DOUBLE_SCALAR_TABLE[768]
DOUBLE_SCALAR_TABLE:
        DD 2802050609, 3783931123, 491793247, 678715583, 3841524563, 3761136375
        DD 2340859102, 205234231, 2962456284, 2428440472, 619758933, 1946909816
        DD 597693286, 3005293457, 982865829, 1341978041, 2883207867, 695925963
        DD 1433180102, 1497944375, 858810444, 2820184633, 171188007, 212806514
        DD 1540319428, 2301056689, 2560960186, 1464006524, 3925385115
        DD 873093661, 4000698615, 351234058, 1078174751, 2229760225, 381893781
        DD 34784273, 3729637602, 901222886, 1368218920, 1498013448, 1156387035
        DD 1779307015, 2219020755, 1515291598, 2331884112, 1868663573
        DD 1192108168, 753009534, 2590292540, 524941844, 426181713, 1603827413
        DD 1867864171, 50398469, 2106578726, 34544213, 2959967944, 3746345333
        DD 2145747856, 1766833342, 1969888103, 2033396042, 1264122092
        DD 165407122, 3455162294, 1494172675, 3363441575, 470259359, 304423783
        DD 3298183031, 586264726, 1426626400, 1160648565, 4024055326
        DD 2898802939, 2047478988, 199613535, 2961078556, 416009107, 618247860
        DD 3323035139, 1232695539, 3415659925, 965124440, 3868352811
        DD 2407553132, 2119039446, 811380698, 1683132746, 3248603872
        DD 3948425337, 2130282944, 1935978649, 980835103, 1479122027
        DD 1341006701, 1997440025, 1870727519, 1939258377, 1404819563
        DD 1797997072, 728939122, 687982475, 1650317853, 416099134, 267762811
        DD 1935201074, 89545100, 553603287, 160506975, 3910773118, 243226853
        DD 997558102, 1510302007, 4168882570, 1682422931, 3276567840
        DD 4179822084, 1197218810, 1797342245, 1786746007, 3913147949
        DD 2264156476, 556352925, 3294941156, 1164154055, 3287589299
        DD 1629762814, 4097991155, 517545693, 4192248831, 208484436, 2292704483
        DD 3556578609, 3390476556, 610869181, 3613547677, 3197584988
        DD 1945590260, 715529427, 2737231403, 2186106723, 1356472506, 436921246
        DD 518308793, 852543560, 2631735494, 1815512848, 801084890, 3844544276
        DD 3039619526, 1740612639, 2292192372, 1311037088, 3824903718
        DD 1235667466, 2432899358, 3598684074, 2859282530, 1732806901
        DD 3270007449, 1269250084, 2369106708, 1080766417, 3933375169
        DD 2802350875, 830150158, 299037218, 2116265065, 4170477056, 3150852514
        DD 581015290, 3692172986, 1393159707, 942121764, 605022613, 1672394183
        DD 4194089115, 3977687472, 1614512457, 47145467, 2985396076, 1630508171
        DD 1247687343, 3868887059, 4232649453, 920992421, 450443153, 3588669731
        DD 1571098033, 4264301258, 792728823, 1988477941, 3841358109
        DD 3279182491, 1277265185, 2555731863, 201662895, 1405803131, 342008105
        DD 3594857499, 196258659, 3969432455, 1468253489, 1616755868
        DD 1937633107, 820537113, 1241088697, 3411153379, 1974560656
        DD 3451578782, 1168991604, 4276918353, 274904877, 3427175560
        DD 1157798409, 2012455410, 1394753758, 2862272746, 398272798
        DD 3271073952, 3768768495, 539064206, 980685317, 1791791327, 2967449751
        DD 2309468659, 2144732086, 3405829830, 290609052, 1662536099
        DD 1665168443, 235723265, 3953805097, 3577736971, 338847142, 3649169242
        DD 1160928623, 962096938, 244809932, 2055612637, 2767621408, 412346433
        DD 1355952309, 1270154422, 4089280154, 963193134, 1435982854
        DD 1605924207, 124943266, 2396467709, 134186703, 3426066928, 4015520320
        DD 2269255932, 1886730864, 875271996, 1633244386, 442097542, 1521079951
        DD 4125377640, 999202463, 3590995235, 779391252, 3245792075, 346143006
        DD 3600461421, 1442388579, 2065394983, 4095967794, 1605151485
        DD 718217031, 2041940328, 4254099892, 3299106679, 1001059557
        DD 2323294902, 2729220793, 418711937, 1416022864, 1908027909
        DD 1047241335, 3927686116, 837456077, 1549104019, 16747, 1515261309
        DD 1179430977, 117386175, 3491792850, 2141972278, 731680461, 1120578317
        DD 2998234424, 1987510439, 74358967, 2654040848, 289045128, 3203911882
        DD 1502782292, 3573778621, 1054714190, 1736675668, 86401527, 3785238752
        DD 1277750774, 3539354853, 488227570, 3677727549, 1567826248
        DD 3090514165, 1745635092, 3145780460, 2742350466, 3346719004
        DD 2023645339, 1503348210, 282220413, 2239177137, 475302747, 3025420255
        DD 2075043622, 756764370, 1008034449, 3085443202, 3593871875
        DD 3553077504, 336913699, 471671721, 2091075989, 1021841332, 1302603358
        DD 2896817974, 2038557628, 3049232395, 1320864229, 4103910820
        DD 2882716124, 633746447, 1062513916, 3151043773, 539947002, 3010027148
        DD 1730243452, 2990524913, 4286364921, 4160387835, 787213279
        DD 2702309470, 1897229295, 4112683052, 462412173, 1649514385
        DD 1797843885, 235002093, 1827728022, 6907861, 3026287554, 3409834157
        DD 842899557, 1105350044, 828931335, 1352301762, 47943467, 607257895
        DD 2453928025, 493776171, 1757634800, 2010460266, 592561640, 2244342697
        DD 1867959548, 935629455, 453600552, 1283717489, 187905877, 3435627500
        DD 3801291746, 3121137231, 1182963348, 1491257004, 2671108963
        DD 2952843632, 343192371, 711904749, 1150638854, 2417357168, 2006056682
        DD 3509568346, 1936455171, 2771943462, 640855484, 3781786703
        DD 2507033672, 2248205101, 1323937278, 228942854, 2776892458
        DD 3208999763, 883152884, 1535915, 2370819326, 1435770702, 355606248
        DD 2180202660, 1728512495, 2330790824, 209550433, 3653229014
        DD 1932013873, 3810241637, 882072121, 2867378577, 1181547452, 407341766
        DD 621663566, 507567695, 1704871621, 4274327044, 1636737044, 134973308
        DD 4268021891, 1720239351, 1462545339, 981680454, 2731022153
        DD 1983349024, 114127688, 1932961865, 3822979953, 2447070148, 915681105
        DD 1790922120, 2751049206, 2156395158, 714740811, 3079297871
        DD 4266262268, 378702763, 467929734, 1428289450, 128516503, 2204710160
        DD 533098150, 3124901902, 1304363140, 3105408823, 523715733, 2743115786
        DD 3090442582, 1875749383, 323417206, 3563262657, 3034273417
        DD 1960579862, 2002681650, 4079174080, 126453800, 993953503, 339972259
        DD 3790194148, 1891393612, 2230387, 309744350, 2650082629, 678739046
        DD 352412148, 594494853, 830608610, 1006260221, 1694865221, 2093558369
        DD 151975722, 799936146, 2622475323, 644312021, 1959908423, 571212553
        DD 3917907687, 1715820679, 3631615452, 1097119972, 2215635811
        DD 1427613807, 2473708254, 3652463724, 3972096185, 981402574
        DD 1286485612, 3711993558, 662971699, 459444419, 2812340267, 340720850
        DD 3390100254, 375527717, 417466609, 2849820977, 3702637902, 1519450494
        DD 3363085721, 2160358193, 1772620629, 1862670901, 2653558213
        DD 258654049, 304236020, 688942232, 2244588671, 1482731785, 2652238864
        DD 1329044023, 4136507000, 769061981, 2912626748, 742871399, 2502584890
        DD 599239168, 2752271205, 1429388326, 899075618, 2780866750, 2599396719
        DD 1336087162, 2842945151, 2488173626, 1525184596, 1014441940
        DD 1964080804, 1224355046, 2906373020, 2076872196, 1919912165
        DD 3581164004, 2688230022, 859296678, 33577299, 2964723497, 887537825
        DD 1363924839, 4007118516, 4185884980, 3891378014, 180229070, 302929063
        DD 1820856442, 2054033887, 1666160237, 163135639, 1346684209
        DD 1428338490, 1758764998, 2353284710, 1776457165, 3650724388
        DD 1412189279, 2338170735, 335513921, 1787292852, 1899231864
        DD 1164182196, 790104358, 2468105676, 1390259623, 818353552, 1856965921
        DD 3961722918, 21938850, 1135824342, 2886055444, 2971185689, 360369146
        DD 1255149721, 3840079032, 2728005304, 180308557, 3047074591
        DD 1602562949, 1919445485, 466770372, 2272856597, 3461766546
        DD 3170208256, 396657730, 595670587, 31791442, 1896718458, 590794874
        DD 3698412722, 3488346875, 1277409449, 796545351, 3571675500
        DD 2010851847, 3500185606, 1089001682, 1832917732, 1682138062
        DD 1191277309, 1408879328, 2379930707, 1490644685, 4090943126
        DD 352485892, 339975394, 1866506386, 594296406, 1938576241, 2727082492
        DD 1694007015, 2592149486, 1327012164, 3206669174, 3500840436
        DD 674780860, 1634782244, 3613720437, 2650556711, 1067638802, 578724182
        DD 1647108231, 2916955749, 128264286, 1195195370, 220925618, 3233384174
        DD 1088231661, 2028307655, 2689586440, 3584933680, 3046895035
        DD 476769626, 3185269665, 634413004, 1065968409, 1247345515, 4253107450
        DD 3677315907, 1834682341, 1185170910, 1340727770, 4135192168
        DD 598826143, 1471304025, 2181704204, 1346607424, 1862589109
        DD 1660205490, 3491431229, 3885934081, 1863385083, 10208791, 2424230810
        DD 859569967, 1651364864, 624757406, 4240371818, 2057027292, 1530475565
        DD 756771450, 2703543450, 3135222882, 2193710256, 780983965, 3606164129
        DD 2084536764, 2751943316, 80415631, 952881924, 4197897179, 1116222803
        DD 1509882164, 481899566, 2442668660, 397416834, 2073912236, 1512652494
        DD 1393249986, 2678124708, 1628465581, 3059132317, 2049321561
        DD 3603961264, 1877407988, 442322512, 741332836, 93098268, 615564551
        DD 2466137518, 2202567396, 323168097, 1758507035, 2484571020, 246196911
        DD 7175425, 306068115, 931132220, 3975347817, 1141397579, 1338597547
        DD 518280788, 719078491, 3520109203, 1233741852, 2951340982, 2035324313
        DD 4001766421, 2138045374, 3594066725, 785548703, 2310450471
        DD 1586222370, 3687742585, 3377014794, 1710280020, 1359583720
        DD 3464312635, 2140500756, 3132133106, 1261178532, 1543874779
        DD 763150475, 592475799, 1175036138, 405558712, 3791960629, 4260323814
        DD 1582127363, 673601931, 4267934767, 2875367801, 2016034771
        DD 2045092083, 3538950681, 3593993122, 263505597, 539018064, 4227812377
        DD 3285328832, 344297480, 2618961493, 1710062216, 2214204107, 494459636
        DD 29100490, 1532285211, 925918485, 1425925975, 274424743, 2305970737
        DD 1255987865, 1898782521, 3920359339, 3042181230, 3175895937, 81629051
        DD 832132425, 2563910458, 1800868399, 1668961246, 1284692579
        DD 2204620443, 337972726, 594487957, 4131224444, 2992984218, 3159057912
        DD 139603510, 890532343, 1862296137, 3488214380, 839183249, 1007923106
        DD 3768250824, 3588117339, 1836117384, 439331359, 544769853, 2375480282
        DD 1551089371, 2745290269, 1102820359, 3041847941, 2051075119
        DD 2648122083, 3604310475, 93485930, 279770744, 2361453061, 667295105
        DD 4120446178, 1471247817, 2461378061, 1333477564, 2068232346
        DD 1363353444, 3425333774, 3448036693, 8428060, 1798702487, 101620239
        DD 2028201437, 342652884, 1661733914, 3935301163, 3381811981
        DD 1259774061, 1193865312, 1666917144, 3026194512, 409235611, 612693800
        DD 1379013083, 3190739618, 601700955, 1680200959, 24833886, 4035349513
        DD 2915489262, 657707489, 4051666921, 2788285257, 3578615591, 920081358
        DD 1816851767, 1159534587, 500521732, 499928417, 2369672347, 196664844
        DD 1901669437, 800246290, 4223868141, 3631714639, 2521845008, 419957153
        DD 2533521379, 1153291866, 2336948730, 320429159, 1334105119
        DD 3868869029, 1449018632, 1640482928, 1863195803, 3970093820
        DD 3797357866, 2131121280, 982021040, 4205485948, 3045732938
        DD 1140644749, 1855825826, 2526705922, 4079532505, 1319834458
        DD 2281201532, 3012209406, 443248434, 1777050878, 3033693372
        DD 1443362502, 2809461223, 657486526, 3369409968, 1007765987, 868387834
        DD 371166420, 419328218, 1985634802, 1595946683, 1143692608, 475417793
        DD 2532806695, 1348258134, 1029552947, 1185888604, 1645885620
        DD 1538723046, 766081204, 497324936, 1968884337, 1441295864, 1190323006
        DD 1555545636, 4233839949, 2374987026, 1742686166, 2475264685
        DD 2048795208, 2311246142, 67117468, 1674862809, 1821810253, 4172679890
        DD 1307987293, 1174374893, 535744602, 3867456751, 688671577, 4036406710
        DD 2550119485, 1985354902, 1254491006, 291393969, 465830553, 3647644094
        DD 1902764193, 1806457196, 1140154251, 813801848, 482779232, 2613650896
        DD 2384276918, 3575458097, 1878755054, 772469173, 986835748, 801992060
        DD 864131093, 1844525379, 3253961033, 3787852546, 98116655, 3732860033
        DD 962688272, 3345683128, 618183258, 2656339075, 672051931, 982160368
        DD 1817260411, 968692277, 2997483785, 3282016934, 766107270, 51542935
        DD 2136248689, 3542573417, 2078457434, 3541999015, 3379156739
        DD 3139406414, 83943227, 2239322391, 3926247286, 2463142725, 76903849
        DD 766164533, 3580360926, 2833266123, 943697205, 3151248726, 3107274418
        DD 562433114, 1387500850, 1841217598, 4192517332, 2813536156
        DD 1259188404, 3791618240, 2361783990, 1263870485, 466800198
        DD 3013362230, 3490245413, 792898044, 994895291, 487931293, 3790752104
        DD 1271186873, 1040329905, 3370998355, 2316423201, 1488897173
        DD 1443708850, 1884971026, 4097857618, 2981359571, 1552665810
        DD 3128746179, 3644591971, 1049877434, 863475915, 2148306568
        DD 2057267407, 2671688910, 1469775464, 3753751721, 2111053164
        DD 1310402382, 939671820, 217111298, 1680088439, 3343638051, 796688691
        DD 1590793518, 4089707907, 2748244859, 1947934088, 1183041167
        DD 1960947300, 259690977, 209771934, 4091837476, 965007169, 1782174290
        DD 1262401915, 229220757, 854178113, 82590529, 298885084, 1021176368
        DD 4180661733, 2313211397, 695077205, 2726540950, 1311899843
        DD 1156363052, 2117335994, 2427256883, 3980133271, 190759044
        DD 1552857894, 3080531613, 2791785819, 1331409237, 318499997
        DD 1292733769, 983955131, 1885722635, 212226797, 3575410563, 3079898963
        DD 2785212914, 1097091777, 1673760637, 2216836429, 2341671554
        DD 1896184651, 375343029, 3550453781, 2620637697, 1966524577, 376188333
        DD 3195092132, 3021571345, 1164744898, 481576536, 1200878174
        DD 4263123879, 486551324, 3785521495, 2677987041, 675441627, 157150432
        DD 4228907478, 3850187794, 3652345497, 1209820064, 230697637
        DD 3344348858, 2045593219, 615449725, 867598965, 3816472833, 1887445010
        DD 1099646437, 205062350, 2270662127, 999069504, 2086035858, 4258952038
        DD 1598730406, 635759420, 180752392, 748571954, 814033124, 2470305256
        DD 1131305337, 590684706, 215411681, 1190346183, 1674671754, 4086076019
        DD 2529973727, 1900036381, 1195653338, 2177852418, 2709829787
        DD 2858897488, 1811423395, 389619470, 1003778564, 2593000634
        DD 1059819397, 2972047913, 3985974625, 1097140605, 132848327
        DD 2108729853, 3287747852, 2301184620, 1522046628, 1545601421
        DD 3568699543, 4066182230, 1648603193, 3259790436, 4150716815
        DD 3525910082, 537091081, 3947242788, 3423492958, 100206167, 616348245
        DD 3841629174, 1135185304, 411198676, 996286148, 593264940, 1664381694
        DD 2737925411, 832702532, 3623211197, 1203244471, 1714913529, 584352501
        DD 1377050656, 1307715548, 616502142, 621243654, 174421573, 3410652899
        DD 3048055859, 216295899, 4133198939, 4256195153, 2833839416
        DD 1157112436, 3454815127, 2566540417, 2880838925, 214786513
        DD 1153805140, 3118216979, 4175821081, 903666124, 1773819682
        DD 1744601587, 2942313690, 303782561, 722462715, 434130203, 2172761358
        DD 1446518461, 1239370435, 1552511170, 2396944005, 145534670
        DD 2896220683, 3293518449, 2464459834, 1648286861, 2287602837
        DD 1419159525, 828051822, 547994167, 167097693, 929400632, 3958321141
        DD 600067138, 527582579, 1453944210, 1924704747, 840401243, 1397793929
        DD 750892079, 2243479307, 837858158, 1294787405, 1347050636, 3011014316
        DD 452520486, 3618625071, 1773952550, 1111998362, 568564176, 2827942695
        DD 1852663414, 4271534036, 1197609657, 675375326, 121699173, 1709609992
        DD 1601532094, 2648185897, 23511847, 130346349, 1701136528, 2068978121
        DD 3137035219, 4074901751, 2430729, 1371609483, 220357531, 3191728145
        DD 255593971, 3812052719, 894591275, 419405994, 137655363, 894935052
        DD 3416202270, 3733677588, 549673461, 886067816, 3541649450, 3026941399
        DD 1108760433, 3906539942, 3392367650, 108677089, 1292316528, 22371998
        DD 2418198257, 2093143703, 1284275887, 3624159255, 1654132914
        DD 453429697, 621874112, 4087263223, 469352555, 525513960, 1824747285
        DD 347480168, 1991719530, 2312845345, 1205645532, 795283265, 4271767212
        DD 3111371799, 1650154643, 806566938, 1603047801, 160611115, 1809014590
        DD 2235604574, 62208282, 372647783, 2038552829, 849493174, 3678783498
        DD 4102761923, 1731553918, 2667687343, 1636377454, 3842190294
        DD 128051540, 2624156286, 1406543641, 1674493972, 634814017, 1671956280
        DD 417839978, 3051142260, 823311948, 2170830596, 2912605907, 3938153293
        DD 291574475, 761724679, 845298366, 2183411422, 1299710720, 71923720
        DD 2616002156, 2632476416, 1088104883, 2153120421, 1851678387
        DD 2981737485, 1391601650, 2543944596, 1371718849, 1055027388
        DD 1837877826, 2410708850, 3605400830, 1895383238, 2111204409
        DD 2584418252, 1722722229, 23123753, 1979513008, 2602828469, 3202113187
        DD 637464021, 230907908, 3407570481, 2915163634, 984520554, 543091006
        DD 868844696, 2049750243, 1834387244, 2098391927, 3021314558
        DD 2385746881, 1068274727, 1174466725, 1928413956, 273273763
        DD 2989340482, 2069159968, 1923307321, 3580335650, 286650564, 664868747
        DD 432234011, 1828403670, 2849625222, 1555656657, 4216324074
        DD 2940587767, 3130204625, 1249105842, 2159969964, 1152674634
        DD 2045310772, 661239045, 1953690482, 2875003038, 3421083062, 734854049
        DD 1395848867, 3221235217, 2706775123, 2060134525, 2363035097
        DD 559242336, 2274209299, 1999753650, 3961128521, 840051701, 2162984039
        DD 1496014753, 2912740975, 2271994293, 3140780445, 1212947653
        DD 1529917548, 149212226, 239936206, 660997727, 1233628927, 3641189732
        DD 2143573670, 981688268, 3430968681, 4107796946, 3394631737
        DD 1104635884, 32630607, 4074678781, 1176637899, 1959795607, 3533668556
        DD 3829278730, 2418651697, 1558144678, 1015426265, 3906360736
        DD 2366540921, 948844725, 1224704930, 1570417224, 1298972276, 349633518
        DD 2434861546, 69655770, 1976874305, 465025485, 3013313797, 977011972
        DD 724645498, 899925384, 900089658, 1736938454, 538976308, 1722534526
        DD 2905604129, 1251016477, 1414342276, 418549814, 2406025565, 540464027
        DD 1171360968, 910757718, 2329105966, 2484393782, 1163413630
        DD 2139162784, 3595822091, 2480606806, 2516924347, 66327530, 2138204143
        DD 2554795959, 2783867653, 1818074532, 906365513, 1918048476
        DD 3885638558, 658741240, 1083554480, 3181876827, 1551394531
        DD 1653781072, 1731028787, 1159706272, 37922905, 935682292, 2173637667
        DD 354309867, 4039257825, 1665472902, 979138017, 2457206663, 1244838250
        DD 395107443, 1111796428, 4286241714, 3755568604, 1985055392
        DD 2164724249, 370941068, 279176924, 92591180, 166309035, 656877610
        DD 877743805, 312009884, 3390836333, 52678745, 2110942150, 1618135224
        DD 684945190, 921477803, 2867128874, 714570933, 194332327, 4049065018
        DD 3982892329, 81136368, 309216258, 884740224, 559452529, 1987571610
        DD 2029025856, 3172170098, 3045007532, 851499760, 2204556334
        DD 3162766619, 3303436524, 1825600134, 4080655498, 4082402723
        DD 4062477963, 1853788805, 160709550, 2849086778, 4007154342
        DD 1140478359, 70402814, 4178655626, 319998953, 1242566091, 3910182546
        DD 3190806635, 915241271, 1632622633, 2838321039, 3680147633, 453888638
        DD 1190253118, 1585528630, 2348074610, 2167000721, 1757186311
        DD 3801046143, 4283846714, 1108839653, 728633166, 3966077275
        DD 2843531591, 672134857, 2057898854, 4049117344, 3954897709
        DD 3224090387, 1786023178, 434647959, 3749295574, 4131937129, 378751303
        DD 447948929, 3880879442, 1786011849, 544808487, 583470025, 3529261118
        DD 2389107155, 200309073, 490148318, 1172135063, 817767212, 1723673706
        DD 2996720586, 1618487781, 1910245538, 820855118, 3926859065
        DD 1070826889, 523762780, 1518869010, 1754823247, 666450243, 330280493
        DD 840950878, 2163424928, 3338581840, 4099861437, 35024210
//   14 #include "AVR/fp.h"

        RSEG FARCODE:CODE:NOROOT(1)
// __farfunc __version_3 void table_lookup_1x8(struct <unnamed> [1] *, struct <unnamed> *, unsigned int, unsigned int)
table_lookup_1x8:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function table_lookup_1x8
        ST      -Y, R7
          CFI R7 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R6
          CFI R6 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R5
          CFI R5 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        ST      -Y, R4
          CFI R4 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        ST      -Y, R27
          CFI R27 Frame(CFA_Y, -5)
          CFI CFA_Y Y+5
        ST      -Y, R26
          CFI R26 Frame(CFA_Y, -6)
          CFI CFA_Y Y+6
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -7)
          CFI CFA_Y Y+7
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -8)
          CFI CFA_Y Y+8
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        REQUIRE ?Register_R6_is_cg_reg
        REQUIRE ?Register_R7_is_cg_reg
        DEC     R29
          CFI CFA_Y Y+264
        MOVW    R27:R26, R19:R18
        MOV     R6, R22
        LSR     R21
        ROR     R20
        MOV     R21, R20
        LDI     R20, 0
        ROR     R20
        ADD     R16, R20
        ADC     R17, R21
        MOVW    R25:R24, R17:R16
        MOVW    R19:R18, R29:R28
        SUBI    R18, 128
        SBCI    R19, 255
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 112
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R5:R4, R25:R24
        LDI     R16, 32
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
        MOVW    R19:R18, R29:R28
        SUBI    R18, 96
        SBCI    R19, 255
        MOVW    R17:R16, R5:R4
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 80
        SBCI    R19, 255
        LDI     R16, 16
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
        MOVW    R17:R16, R5:R4
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R5:R4, R25:R24
        LDI     R16, 64
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
        MOVW    R19:R18, R29:R28
        SUBI    R18, 64
        SBCI    R19, 255
        MOVW    R17:R16, R5:R4
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 48
        SBCI    R19, 255
        LDI     R16, 16
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
        MOVW    R17:R16, R5:R4
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        SUBI    R24, 160
        SBCI    R25, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 32
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 16
        SBCI    R19, 255
        ADIW    R25:R24, 16
        MOVW    R17:R16, R25:R24
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 224
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 128
        SBCI    R17, 255
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 208
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 112
        SBCI    R17, 255
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R29:R28
        SUBI    R16, 96
        SBCI    R17, 255
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 80
        SBCI    R17, 255
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 160
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 32
        SBCI    R17, 255
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 144
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 16
        SBCI    R17, 255
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 192
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 64
        SBCI    R17, 255
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 176
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 48
        SBCI    R17, 255
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R17:R16, R29:R28
        SUBI    R16, 160
        SBCI    R17, 255
          CFI FunCall fpneg1271
        CALL    fpneg1271
        MOVW    R17:R16, R29:R28
        SUBI    R16, 144
        SBCI    R17, 255
          CFI FunCall fpneg1271
        CALL    fpneg1271
        MOVW    R25:R24, R29:R28
        MOV     R16, R6
        ANDI    R16, 0x01
        LDI     R17, 0
        LSR     R16
        ROR     R16
        ADD     R24, R16
        ADC     R25, R17
        MOVW    R19:R18, R27:R26
        MOVW    R17:R16, R25:R24
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R27:R26
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R7:R6, R27:R26
        LDI     R16, 32
        ADD     R6, R16
        LDI     R16, 0
        ADC     R7, R16
        MOVW    R5:R4, R25:R24
        LDI     R16, 32
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
        MOVW    R19:R18, R7:R6
        MOVW    R17:R16, R5:R4
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        LDI     R16, 16
        ADD     R6, R16
        LDI     R16, 0
        ADC     R7, R16
        MOVW    R19:R18, R7:R6
        LDI     R16, 16
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
        MOVW    R17:R16, R5:R4
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R7:R6, R27:R26
        LDI     R16, 64
        ADD     R6, R16
        LDI     R16, 0
        ADC     R7, R16
        MOVW    R5:R4, R25:R24
        LDI     R16, 64
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
        MOVW    R19:R18, R7:R6
        MOVW    R17:R16, R5:R4
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        LDI     R16, 16
        ADD     R6, R16
        LDI     R16, 0
        ADC     R7, R16
        MOVW    R19:R18, R7:R6
        LDI     R16, 16
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
        MOVW    R17:R16, R5:R4
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        SUBI    R26, 160
        SBCI    R27, 255
        SUBI    R24, 160
        SBCI    R25, 255
        MOVW    R19:R18, R27:R26
        MOVW    R17:R16, R25:R24
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        ADIW    R27:R26, 16
        MOVW    R19:R18, R27:R26
        ADIW    R25:R24, 16
        MOVW    R17:R16, R25:R24
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        INC     R29
          CFI CFA_Y Y+8
        RJMP    ??Subroutine12_0
          CFI EndBlock cfiBlock0

        RSEG FARCODE:CODE:NOROOT(1)
// __farfunc __version_3 void table_lookup_fixed_base(point_precomp_t *, point_precomp *, unsigned int, unsigned int)
table_lookup_fixed_base:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function table_lookup_fixed_base
        ST      -Y, R7
          CFI R7 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R6
          CFI R6 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R5
          CFI R5 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        ST      -Y, R4
          CFI R4 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        ST      -Y, R27
          CFI R27 Frame(CFA_Y, -5)
          CFI CFA_Y Y+5
        ST      -Y, R26
          CFI R26 Frame(CFA_Y, -6)
          CFI CFA_Y Y+6
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -7)
          CFI CFA_Y Y+7
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -8)
          CFI CFA_Y Y+8
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        REQUIRE ?Register_R6_is_cg_reg
        REQUIRE ?Register_R7_is_cg_reg
        SBIW    R29:R28, 63
          CFI CFA_Y Y+71
        SBIW    R29:R28, 63
          CFI CFA_Y Y+134
        SBIW    R29:R28, 63
          CFI CFA_Y Y+197
        SBIW    R29:R28, 3
          CFI CFA_Y Y+200
        MOVW    R27:R26, R19:R18
        MOV     R6, R22
        LDI     R18, 96
        MUL     R21, R18
        MOV     R21, R0
        MUL     R20, R18
        ADD     R21, R1
        ADD     R16, R0
        ADC     R17, R21
        MOVW    R5:R4, R17:R16
        MOVW    R19:R18, R29:R28
          CFI FunCall fpcopy1271_flash
        CALL    fpcopy1271_flash
        MOVW    R19:R18, R29:R28
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R5:R4
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpcopy1271_flash
        CALL    fpcopy1271_flash
        MOVW    R25:R24, R5:R4
        ADIW    R25:R24, 32
        MOVW    R19:R18, R29:R28
        SUBI    R18, 224
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
          CFI FunCall fpcopy1271_flash
        CALL    fpcopy1271_flash
        MOVW    R19:R18, R29:R28
        SUBI    R18, 208
        SBCI    R19, 255
        ADIW    R25:R24, 16
        MOVW    R17:R16, R25:R24
          CFI FunCall fpcopy1271_flash
        CALL    fpcopy1271_flash
        LDI     R16, 64
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
        MOVW    R25:R24, R5:R4
        MOVW    R19:R18, R29:R28
        SUBI    R18, 192
        SBCI    R19, 255
        MOVW    R17:R16, R5:R4
          CFI FunCall fpcopy1271_flash
        CALL    fpcopy1271_flash
        MOVW    R19:R18, R29:R28
        SUBI    R18, 176
        SBCI    R19, 255
        ADIW    R25:R24, 16
        MOVW    R17:R16, R25:R24
          CFI FunCall fpcopy1271_flash
        CALL    fpcopy1271_flash
        MOVW    R19:R18, R29:R28
        SUBI    R18, 128
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 112
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 160
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 224
        SBCI    R17, 255
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 144
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 208
        SBCI    R17, 255
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 96
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 192
        SBCI    R17, 255
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 80
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 176
        SBCI    R17, 255
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R17:R16, R29:R28
        SUBI    R16, 96
        SBCI    R17, 255
          CFI FunCall fpneg1271
        CALL    fpneg1271
        MOVW    R17:R16, R29:R28
        SUBI    R16, 80
        SBCI    R17, 255
          CFI FunCall fpneg1271
        CALL    fpneg1271
        MOVW    R25:R24, R29:R28
        MOV     R18, R6
        ANDI    R18, 0x01
        LDI     R16, 96
        MUL     R18, R16
        ADD     R24, R0
        ADC     R25, R1
        MOVW    R19:R18, R27:R26
        MOVW    R17:R16, R25:R24
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R27:R26
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R7:R6, R27:R26
        LDI     R16, 32
        ADD     R6, R16
        LDI     R16, 0
        ADC     R7, R16
        MOVW    R5:R4, R25:R24
        LDI     R16, 32
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
        MOVW    R19:R18, R7:R6
        MOVW    R17:R16, R5:R4
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        LDI     R16, 16
        ADD     R6, R16
        LDI     R16, 0
        ADC     R7, R16
        MOVW    R19:R18, R7:R6
        LDI     R16, 16
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
        MOVW    R17:R16, R5:R4
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        SUBI    R26, 192
        SBCI    R27, 255
        SUBI    R24, 192
        SBCI    R25, 255
        MOVW    R19:R18, R27:R26
        MOVW    R17:R16, R25:R24
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        ADIW    R27:R26, 16
        MOVW    R19:R18, R27:R26
        ADIW    R25:R24, 16
        MOVW    R17:R16, R25:R24
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
          CFI EndBlock cfiBlock1
        REQUIRE ?Subroutine9
        ;               // Fall through to label ?Subroutine9

        RSEG FARCODE:CODE:NOROOT(1)
?Subroutine9:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI NoFunction
          CFI CFA_Y Y+200
          CFI R4 Frame(CFA_Y, -4)
          CFI R5 Frame(CFA_Y, -3)
          CFI R6 Frame(CFA_Y, -2)
          CFI R7 Frame(CFA_Y, -1)
          CFI R24 Frame(CFA_Y, -8)
          CFI R25 Frame(CFA_Y, -7)
          CFI R26 Frame(CFA_Y, -6)
          CFI R27 Frame(CFA_Y, -5)
        ADIW    R29:R28, 63
          CFI CFA_Y Y+137
        ADIW    R29:R28, 63
          CFI CFA_Y Y+74
        ADIW    R29:R28, 63
          CFI CFA_Y Y+11
        ADIW    R29:R28, 3
          CFI CFA_Y Y+8
        RJMP    ??Subroutine12_0
          CFI EndBlock cfiBlock2

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
// digit_t const mask_7fff
mask_7fff:
        DS8 4
        REQUIRE `?<Initializer for mask_7fff>`

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
// digit_t const prime1271_0
prime1271_0:
        DS8 4
        REQUIRE `?<Initializer for prime1271_0>`

        RSEG FARCODE:CODE:NOROOT(1)
// __farfunc __version_3 void digit_x_digit(digit_t, digit_t, digit_t *)
digit_x_digit:
          CFI Block cfiBlock3 Using cfiCommon1
          CFI Function digit_x_digit
        SBIW    R29:R28, 8
          CFI CFA_Y Y+10
        STD     Y+4, R16
        STD     Y+5, R17
        STD     Y+6, R18
        STD     Y+7, R19
        ST      Y, R20
        STD     Y+1, R21
        STD     Y+2, R22
        STD     Y+3, R23
        LDD     R20, Y+8
        LDD     R21, Y+9
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R29:R28
        SUBI    R16, 252
        SBCI    R17, 255
          CFI FunCall mul32
        CALL    mul32
        ADIW    R29:R28, 8
          CFI CFA_Y Y+2
        ADIW    R29:R28, 2
          CFI CFA_Y Y+0
        RET
          CFI EndBlock cfiBlock3

        RSEG FARCODE:CODE:NOROOT(1)
// __farfunc __version_3 void fpmul1271(digit_t *, digit_t *, digit_t *)
fpmul1271:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function fpmul1271
          CFI FunCall mod_mul128
        JMP     mod_mul128
          CFI EndBlock cfiBlock4

        RSEG FARCODE:CODE:NOROOT(1)
// __farfunc __version_3 void fpexp1251(digit_t *, digit_t *)
fpexp1251:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function fpexp1251
        ST      -Y, R4
          CFI R4 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R27
          CFI R27 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R26
          CFI R26 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -5)
          CFI CFA_Y Y+5
        REQUIRE ?Register_R4_is_cg_reg
        SBIW    R29:R28, 63
          CFI CFA_Y Y+68
        SBIW    R29:R28, 17
          CFI CFA_Y Y+85
        MOVW    R25:R24, R17:R16
        MOVW    R27:R26, R19:R18
        MOVW    R19:R18, R29:R28
        SUBI    R18, 240
        SBCI    R19, 255
          CFI FunCall mod_sqr128
        CALL    mod_sqr128
        MOVW    R21:R20, R29:R28
        SUBI    R20, 240
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
          CFI FunCall mod_mul128
        CALL    mod_mul128
        MOVW    R19:R18, R29:R28
        SUBI    R18, 192
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall mod_sqr128
        CALL    mod_sqr128
        MOVW    R19:R18, R29:R28
        SUBI    R18, 192
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 192
        SBCI    R17, 255
          CFI FunCall mod_sqr128
        CALL    mod_sqr128
        MOVW    R21:R20, R29:R28
        SUBI    R20, 192
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 192
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall mod_mul128
        CALL    mod_mul128
        MOVW    R19:R18, R29:R28
        SUBI    R18, 224
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 192
        SBCI    R17, 255
          CFI FunCall mod_sqr128
        CALL    mod_sqr128
        MOVW    R19:R18, R29:R28
        SUBI    R18, 224
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 224
        SBCI    R17, 255
          CFI FunCall mod_sqr128
        CALL    mod_sqr128
        MOVW    R19:R18, R29:R28
        SUBI    R18, 224
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 224
        SBCI    R17, 255
          CFI FunCall mod_sqr128
        CALL    mod_sqr128
        MOVW    R19:R18, R29:R28
        SUBI    R18, 224
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 224
        SBCI    R17, 255
          CFI FunCall mod_sqr128
        CALL    mod_sqr128
        MOVW    R21:R20, R29:R28
        SUBI    R20, 224
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 224
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 192
        SBCI    R17, 255
          CFI FunCall mod_mul128
        CALL    mod_mul128
        MOVW    R19:R18, R29:R28
        SUBI    R18, 208
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 224
        SBCI    R17, 255
          CFI FunCall mod_sqr128
        CALL    mod_sqr128
        LDI     R16, 7
        MOV     R4, R16
??fpexp1251_0:
        MOVW    R19:R18, R29:R28
        SUBI    R18, 208
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 208
        SBCI    R17, 255
          CFI FunCall mod_sqr128
        CALL    mod_sqr128
        DEC     R4
        BRNE    ??fpexp1251_0
        MOVW    R21:R20, R29:R28
        SUBI    R20, 208
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 208
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 224
        SBCI    R17, 255
          CFI FunCall mod_mul128
        CALL    mod_mul128
        MOVW    R19:R18, R29:R28
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 208
        SBCI    R17, 255
          CFI FunCall mod_sqr128
        CALL    mod_sqr128
        LDI     R16, 15
        MOV     R4, R16
??fpexp1251_1:
        MOVW    R19:R18, R29:R28
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall mod_sqr128
        CALL    mod_sqr128
        DEC     R4
        BRNE    ??fpexp1251_1
        MOVW    R21:R20, R29:R28
        SUBI    R20, 240
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 208
        SBCI    R17, 255
          CFI FunCall mod_mul128
        CALL    mod_mul128
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R29:R28
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall mod_sqr128
        CALL    mod_sqr128
        LDI     R16, 31
        MOV     R4, R16
??fpexp1251_2:
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R29:R28
          CFI FunCall mod_sqr128
        CALL    mod_sqr128
        DEC     R4
        BRNE    ??fpexp1251_2
        MOVW    R21:R20, R29:R28
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R29:R28
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall mod_mul128
        CALL    mod_mul128
        LDI     R16, 32
        MOV     R4, R16
??fpexp1251_3:
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R29:R28
          CFI FunCall mod_sqr128
        CALL    mod_sqr128
        DEC     R4
        BRNE    ??fpexp1251_3
        MOVW    R21:R20, R29:R28
        MOVW    R19:R18, R29:R28
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
          CFI FunCall mod_mul128
        CALL    mod_mul128
        LDI     R16, 16
        MOV     R4, R16
??fpexp1251_4:
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R29:R28
          CFI FunCall mod_sqr128
        CALL    mod_sqr128
        DEC     R4
        BRNE    ??fpexp1251_4
        MOVW    R21:R20, R29:R28
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R29:R28
        SUBI    R16, 208
        SBCI    R17, 255
          CFI FunCall mod_mul128
        CALL    mod_mul128
        LDI     R16, 8
        MOV     R4, R16
??fpexp1251_5:
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R29:R28
          CFI FunCall mod_sqr128
        CALL    mod_sqr128
        DEC     R4
        BRNE    ??fpexp1251_5
        MOVW    R21:R20, R29:R28
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R29:R28
        SUBI    R16, 224
        SBCI    R17, 255
          CFI FunCall mod_mul128
        CALL    mod_mul128
        LDI     R16, 4
        MOV     R4, R16
??fpexp1251_6:
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R29:R28
          CFI FunCall mod_sqr128
        CALL    mod_sqr128
        DEC     R4
        BRNE    ??fpexp1251_6
        MOVW    R21:R20, R29:R28
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R29:R28
        SUBI    R16, 192
        SBCI    R17, 255
          CFI FunCall mod_mul128
        CALL    mod_mul128
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R29:R28
          CFI FunCall mod_sqr128
        CALL    mod_sqr128
        MOVW    R21:R20, R27:R26
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R25:R24
          CFI FunCall mod_mul128
        CALL    mod_mul128
        ADIW    R29:R28, 63
          CFI CFA_Y Y+22
        ADIW    R29:R28, 17
          CFI CFA_Y Y+5
        LD      R24, Y+
          CFI R24 SameValue
          CFI CFA_Y Y+4
        LD      R25, Y+
          CFI R25 SameValue
          CFI CFA_Y Y+3
        LD      R26, Y+
          CFI R26 SameValue
          CFI CFA_Y Y+2
        LD      R27, Y+
          CFI R27 SameValue
          CFI CFA_Y Y+1
        LD      R4, Y+
          CFI R4 SameValue
          CFI CFA_Y Y+0
        RET
          CFI EndBlock cfiBlock5

        RSEG FARCODE:CODE:NOROOT(1)
// __farfunc __version_3 void fpinv1271(digit_t *)
fpinv1271:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function fpinv1271
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        SBIW    R29:R28, 16
          CFI CFA_Y Y+18
        MOVW    R25:R24, R17:R16
        MOVW    R19:R18, R29:R28
          CFI FunCall fpexp1251
        RCALL   fpexp1251
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R29:R28
          CFI FunCall mod_sqr128
        CALL    mod_sqr128
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R29:R28
          CFI FunCall mod_sqr128
        CALL    mod_sqr128
        MOVW    R21:R20, R25:R24
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R25:R24
          CFI FunCall mod_mul128
        CALL    mod_mul128
        ADIW    R29:R28, 16
          CFI CFA_Y Y+2
        LD      R24, Y+
          CFI R24 SameValue
          CFI CFA_Y Y+1
        LD      R25, Y+
          CFI R25 SameValue
          CFI CFA_Y Y+0
        RET
          CFI EndBlock cfiBlock6

        RSEG FARCODE:CODE:NOROOT(1)
// __farfunc __version_3 void fpsqr1271(digit_t *, digit_t *)
fpsqr1271:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function fpsqr1271
          CFI FunCall mod_sqr128
        JMP     mod_sqr128
          CFI EndBlock cfiBlock7

        RSEG FARCODE:CODE:NOROOT(1)
// __farfunc __version_3 void mp_mul(digit_t const *, digit_t const *, digit_t *, unsigned int const)
mp_mul:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function mp_mul
        ST      -Y, R13
          CFI R13 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R12
          CFI R12 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R11
          CFI R11 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        ST      -Y, R10
          CFI R10 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        ST      -Y, R9
          CFI R9 Frame(CFA_Y, -5)
          CFI CFA_Y Y+5
        ST      -Y, R8
          CFI R8 Frame(CFA_Y, -6)
          CFI CFA_Y Y+6
        ST      -Y, R7
          CFI R7 Frame(CFA_Y, -7)
          CFI CFA_Y Y+7
        ST      -Y, R6
          CFI R6 Frame(CFA_Y, -8)
          CFI CFA_Y Y+8
        ST      -Y, R5
          CFI R5 Frame(CFA_Y, -9)
          CFI CFA_Y Y+9
        ST      -Y, R4
          CFI R4 Frame(CFA_Y, -10)
          CFI CFA_Y Y+10
        ST      -Y, R27
          CFI R27 Frame(CFA_Y, -11)
          CFI CFA_Y Y+11
        ST      -Y, R26
          CFI R26 Frame(CFA_Y, -12)
          CFI CFA_Y Y+12
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -13)
          CFI CFA_Y Y+13
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -14)
          CFI CFA_Y Y+14
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        REQUIRE ?Register_R6_is_cg_reg
        REQUIRE ?Register_R7_is_cg_reg
        REQUIRE ?Register_R8_is_cg_reg
        REQUIRE ?Register_R9_is_cg_reg
        REQUIRE ?Register_R10_is_cg_reg
        REQUIRE ?Register_R11_is_cg_reg
        REQUIRE ?Register_R12_is_cg_reg
        REQUIRE ?Register_R13_is_cg_reg
        SBIW    R29:R28, 34
          CFI CFA_Y Y+48
        STD     Y+2, R18
        STD     Y+3, R19
        ST      Y, R22
        STD     Y+1, R23
        MOV     R24, R22
        LDD     R25, Y+1
        SBIW    R25:R24, 2
        BRNE    ??mp_mul_0
        LDD     R18, Y+2
        LDD     R19, Y+3
          CFI FunCall mul64
        CALL    mul64
        RJMP    ??mp_mul_1
??mp_mul_0:
        LD      R24, Y
        LDD     R25, Y+1
        SBIW    R25:R24, 8
        BRNE    ??mp_mul_2
        LDD     R18, Y+2
        LDD     R19, Y+3
          CFI FunCall mul256
        CALL    mul256
        RJMP    ??mp_mul_1
??mp_mul_2:
        LD      R18, Y
        LDD     R19, Y+1
        ANDI    R19, 0x7F
        OR      R18, R19
        BREQ    ??mp_mul_3
        MOVW    R27:R26, R21:R20
        LD      R30, Y
        LDD     R31, Y+1
        LSL     R30
        ROL     R31
        CLR     R0
??mp_mul_4:
        ST      X+, R0
        ST      X+, R0
        ST      X+, R0
        ST      X+, R0
        SBIW    R31:R30, 1
        BRNE    ??mp_mul_4
??mp_mul_3:
        LD      R18, Y
        LDD     R19, Y+1
        OR      R18, R19
        BRNE    $+2+2
        RJMP    ??mp_mul_1
        STD     Y+8, R20
        STD     Y+9, R21
        LD      R18, Y
        LDD     R19, Y+1
        LSL     R18
        ROL     R19
        LSL     R18
        ROL     R19
        ADD     R20, R18
        ADC     R21, R19
        STD     Y+16, R20
        STD     Y+17, R21
        STD     Y+6, R16
        STD     Y+7, R17
        LD      R16, Y
        LDD     R17, Y+1
        STD     Y+14, R16
        STD     Y+15, R17
??mp_mul_5:
        LDI     R24, 0
        LDI     R25, 0
        LDI     R26, 0
        LDI     R27, 0
        LDD     R16, Y+2
        LDD     R17, Y+3
        STD     Y+12, R16
        STD     Y+13, R17
        LDD     R16, Y+8
        LDD     R17, Y+9
        STD     Y+4, R16
        STD     Y+5, R17
        LD      R16, Y
        LDD     R17, Y+1
        STD     Y+10, R16
        STD     Y+11, R17
??mp_mul_6:
        LDD     R30, Y+12
        LDD     R31, Y+13
        LD      R20, Z+
        LD      R21, Z+
        LD      R22, Z+
        LD      R23, Z+
        STD     Y+12, R30
        STD     Y+13, R31
        STD     Y+22, R20
        STD     Y+23, R21
        STD     Y+24, R22
        STD     Y+25, R23
        LDD     R30, Y+6
        LDD     R31, Y+7
        LD      R16, Z
        LDD     R17, Z+1
        LDD     R18, Z+2
        LDD     R19, Z+3
        STD     Y+18, R16
        STD     Y+19, R17
        STD     Y+20, R18
        STD     Y+21, R19
        MOVW    R21:R20, R29:R28
        SUBI    R20, 230
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 234
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 238
        SBCI    R17, 255
          CFI FunCall mul32
        CALL    mul32
        LDD     R16, Y+26
        LDD     R17, Y+27
        LDD     R18, Y+28
        LDD     R19, Y+29
        ADD     R24, R16
        ADC     R25, R17
        ADC     R26, R18
        ADC     R27, R19
        LDD     R30, Y+4
        LDD     R31, Y+5
        LD      R0, Z
        LDD     R1, Z+1
        LDD     R2, Z+2
        LDD     R3, Z+3
        MOVW    R21:R20, R25:R24
        MOVW    R23:R22, R27:R26
        ADD     R20, R0
        ADC     R21, R1
        ADC     R22, R2
        ADC     R23, R3
        LDD     R4, Y+30
        LDD     R5, Y+31
        LDD     R6, Y+32
        LDD     R7, Y+33
        ST      -Y, R7
          CFI CFA_Y Y+49
        ST      -Y, R6
          CFI CFA_Y Y+50
        ST      -Y, R5
          CFI CFA_Y Y+51
        ST      -Y, R4
          CFI CFA_Y Y+52
        BST     R27, 7
        CLR     R12
        CLR     R13
        BLD     R12, 0
        CLR     R8
        BLD     R8, 0
        BST     R19, 7
        CLR     R4
        BLD     R4, 0
        EOR     R8, R4
        SUB     R24, R16
        SBC     R25, R17
        SBC     R26, R18
        SBC     R27, R19
        LSL     R27
        LDI     R24, 0
        ROL     R24
        CLR     R4
        BLD     R4, 0
        EOR     R24, R4
        OR      R8, R24
        EOR     R12, R8
        LD      R24, Y+
          CFI CFA_Y Y+51
        LD      R25, Y+
          CFI CFA_Y Y+50
        LD      R26, Y+
          CFI CFA_Y Y+49
        LD      R27, Y+
          CFI CFA_Y Y+48
        ADD     R24, R12
        ADC     R25, R13
        ADC     R26, R13
        ADC     R27, R13
        BST     R23, 7
        LDI     R16, 0
        BLD     R16, 0
        CLR     R4
        BLD     R4, 0
        BST     R3, 7
        CLR     R8
        BLD     R8, 0
        EOR     R4, R8
        MOVW    R9:R8, R21:R20
        MOVW    R11:R10, R23:R22
        SUB     R8, R0
        SBC     R9, R1
        SBC     R10, R2
        SBC     R11, R3
        LSL     R11
        CLR     R8
        ROL     R8
        CLR     R12
        BLD     R12, 0
        EOR     R8, R12
        OR      R4, R8
        EOR     R16, R4
        ADD     R24, R16
        ADC     R25, R13
        ADC     R26, R13
        ADC     R27, R13
        LDD     R30, Y+4
        LDD     R31, Y+5
        ST      Z+, R20
        ST      Z+, R21
        ST      Z+, R22
        ST      Z+, R23
        STD     Y+4, R30
        STD     Y+5, R31
        LDD     R16, Y+10
        LDD     R17, Y+11
        SUBI    R16, 1
        SBCI    R17, 0
        STD     Y+10, R16
        STD     Y+11, R17
        OR      R16, R17
        BREQ    $+2+2
        RJMP    ??mp_mul_6
        LDD     R30, Y+16
        LDD     R31, Y+17
        ST      Z+, R24
        ST      Z+, R25
        ST      Z+, R26
        ST      Z+, R27
        STD     Y+16, R30
        STD     Y+17, R31
        LDD     R16, Y+6
        LDD     R17, Y+7
        SUBI    R16, 252
        SBCI    R17, 255
        STD     Y+6, R16
        STD     Y+7, R17
        LDD     R16, Y+8
        LDD     R17, Y+9
        SUBI    R16, 252
        SBCI    R17, 255
        STD     Y+8, R16
        STD     Y+9, R17
        LDD     R16, Y+14
        LDD     R17, Y+15
        SUBI    R16, 1
        SBCI    R17, 0
        STD     Y+14, R16
        STD     Y+15, R17
        OR      R16, R17
        BREQ    $+2+2
        RJMP    ??mp_mul_5
??mp_mul_1:
        ADIW    R29:R28, 34
          CFI CFA_Y Y+14
        LD      R24, Y+
          CFI R24 SameValue
          CFI CFA_Y Y+13
        LD      R25, Y+
          CFI R25 SameValue
          CFI CFA_Y Y+12
        LD      R26, Y+
          CFI R26 SameValue
          CFI CFA_Y Y+11
        LD      R27, Y+
          CFI R27 SameValue
          CFI CFA_Y Y+10
        LD      R4, Y+
          CFI R4 SameValue
          CFI CFA_Y Y+9
        LD      R5, Y+
          CFI R5 SameValue
          CFI CFA_Y Y+8
        LD      R6, Y+
          CFI R6 SameValue
          CFI CFA_Y Y+7
        LD      R7, Y+
          CFI R7 SameValue
          CFI CFA_Y Y+6
        LD      R8, Y+
          CFI R8 SameValue
          CFI CFA_Y Y+5
        LD      R9, Y+
          CFI R9 SameValue
          CFI CFA_Y Y+4
        LD      R10, Y+
          CFI R10 SameValue
          CFI CFA_Y Y+3
        LD      R11, Y+
          CFI R11 SameValue
          CFI CFA_Y Y+2
        LD      R12, Y+
          CFI R12 SameValue
          CFI CFA_Y Y+1
        LD      R13, Y+
          CFI R13 SameValue
          CFI CFA_Y Y+0
        RET
          CFI EndBlock cfiBlock8

        RSEG FARCODE:CODE:NOROOT(1)
// __farfunc __version_3 unsigned int subtract(digit_t const *, digit_t const *, digit_t *, unsigned int const)
subtract:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function subtract
          CFI FunCall mp_sub
        JMP     mp_sub
          CFI EndBlock cfiBlock9

        RSEG FARCODE:CODE:NOROOT(1)
// __farfunc __version_3 void subtract_mod_order(digit_t const *, digit_t const *, digit_t *)
subtract_mod_order:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function subtract_mod_order
        ST      -Y, R14
          CFI R14 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R12
          CFI R12 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R11
          CFI R11 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        ST      -Y, R10
          CFI R10 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        ST      -Y, R9
          CFI R9 Frame(CFA_Y, -5)
          CFI CFA_Y Y+5
        ST      -Y, R8
          CFI R8 Frame(CFA_Y, -6)
          CFI CFA_Y Y+6
        ST      -Y, R7
          CFI R7 Frame(CFA_Y, -7)
          CFI CFA_Y Y+7
        ST      -Y, R6
          CFI R6 Frame(CFA_Y, -8)
          CFI CFA_Y Y+8
        ST      -Y, R5
          CFI R5 Frame(CFA_Y, -9)
          CFI CFA_Y Y+9
        ST      -Y, R4
          CFI R4 Frame(CFA_Y, -10)
          CFI CFA_Y Y+10
        ST      -Y, R26
          CFI R26 Frame(CFA_Y, -11)
          CFI CFA_Y Y+11
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -12)
          CFI CFA_Y Y+12
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -13)
          CFI CFA_Y Y+13
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        REQUIRE ?Register_R6_is_cg_reg
        REQUIRE ?Register_R7_is_cg_reg
        REQUIRE ?Register_R8_is_cg_reg
        REQUIRE ?Register_R9_is_cg_reg
        REQUIRE ?Register_R10_is_cg_reg
        REQUIRE ?Register_R11_is_cg_reg
        REQUIRE ?Register_R12_is_cg_reg
        REQUIRE ?Register_R14_is_cg_reg
        MOVW    R5:R4, R21:R20
        LDI     R24, 0
        LDI     R25, 0
        LDI     R26, 0
        LDI     R22, 8
        LDI     R23, 0
          CFI FunCall mp_sub
        CALL    mp_sub
        MOVW    R21:R20, R17:R16
        COM     R21
        LDI     R22, 255
        LDI     R23, 255
        NEG     R20
        SBCI    R21, 255
        SBCI    R22, 255
        SBCI    R23, 255
        LDI     R16, LOW(curve_order)
        LDI     R17, (curve_order) >> 8
        MOVW    R7:R6, R17:R16
        LDI     R16, 8
        MOV     R12, R16
??subtract_mod_order_0:
        MOVW    R31:R30, R5:R4
        LD      R16, Z
        LDD     R17, Z+1
        LDD     R18, Z+2
        LDD     R19, Z+3
        ADD     R16, R24
        ADC     R17, R25
        ADC     R18, R25
        ADC     R19, R25
        MOVW    R31:R30, R7:R6
        LD      R0, Z+
        LD      R1, Z+
        LD      R2, Z+
        LD      R3, Z+
        MOVW    R7:R6, R31:R30
        MOVW    R9:R8, R21:R20
        MOVW    R11:R10, R23:R22
        AND     R8, R0
        AND     R9, R1
        AND     R10, R2
        AND     R11, R3
        ADD     R8, R16
        ADC     R9, R17
        ADC     R10, R18
        ADC     R11, R19
        MOVW    R31:R30, R5:R4
        ST      Z, R8
        STD     Z+1, R9
        STD     Z+2, R10
        STD     Z+3, R11
        LD      R0, Z+
        LD      R1, Z+
        LD      R2, Z+
        LD      R3, Z+
        MOVW    R5:R4, R31:R30
        BST     R19, 7
        LDI     R30, 0
        BLD     R30, 0
        CLR     R14
        BLD     R14, 0
        MOVW    R9:R8, R17:R16
        MOVW    R11:R10, R19:R18
        SUB     R8, R24
        SBC     R9, R25
        SBC     R10, R25
        SBC     R11, R25
        LSL     R11
        CLR     R8
        ROL     R8
        OR      R14, R8
        EOR     R30, R14
        MOV     R24, R30
        BST     R3, 7
        BLD     R26, 0
        CLR     R8
        BLD     R8, 0
        BST     R19, 7
        LDI     R30, 0
        BLD     R30, 0
        EOR     R8, R30
        SUB     R0, R16
        SBC     R1, R17
        SBC     R2, R18
        SBC     R3, R19
        LSL     R3
        CLR     R0
        ROL     R0
        EOR     R0, R30
        OR      R8, R0
        EOR     R26, R8
        OR      R24, R26
        LDI     R26, 0
        DEC     R12
        BREQ    $+2+2
        RJMP    ??subtract_mod_order_0
        LD      R24, Y+
          CFI R24 SameValue
          CFI CFA_Y Y+12
        LD      R25, Y+
          CFI R25 SameValue
          CFI CFA_Y Y+11
        LD      R26, Y+
          CFI R26 SameValue
          CFI CFA_Y Y+10
        LD      R4, Y+
          CFI R4 SameValue
          CFI CFA_Y Y+9
        LD      R5, Y+
          CFI R5 SameValue
          CFI CFA_Y Y+8
        LD      R6, Y+
          CFI R6 SameValue
          CFI CFA_Y Y+7
        LD      R7, Y+
          CFI EndBlock cfiBlock10
        REQUIRE ?Subroutine6
        ;               // Fall through to label ?Subroutine6

        RSEG FARCODE:CODE:NOROOT(1)
?Subroutine6:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI NoFunction
          CFI CFA_Y Y+6
          CFI R8 Frame(CFA_Y, -6)
          CFI R9 Frame(CFA_Y, -5)
          CFI R10 Frame(CFA_Y, -4)
          CFI R11 Frame(CFA_Y, -3)
          CFI R12 Frame(CFA_Y, -2)
          CFI R14 Frame(CFA_Y, -1)
          CFI Invalid
        LD      R8, Y+
          CFI CFA_Y Y+5
          CFI R8 SameValue
        LD      R9, Y+
          CFI CFA_Y Y+4
          CFI R9 SameValue
        LD      R10, Y+
          CFI CFA_Y Y+3
          CFI R10 SameValue
        LD      R11, Y+
          CFI CFA_Y Y+2
          CFI R11 SameValue
        LD      R12, Y+
          CFI CFA_Y Y+1
          CFI R12 SameValue
        LD      R14, Y+
          CFI CFA_Y Y+0
          CFI R14 SameValue
        RET
          CFI EndBlock cfiBlock11

        RSEG FARCODE:CODE:NOROOT(1)
// __farfunc __version_3 void add_mod_order(digit_t *, digit_t *, digit_t *)
add_mod_order:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI Function add_mod_order
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        MOVW    R25:R24, R21:R20
        LDI     R22, 8
        LDI     R23, 0
          CFI FunCall mp_add
        CALL    mp_add
        MOVW    R21:R20, R25:R24
        LDI     R18, LOW(curve_order)
        LDI     R19, (curve_order) >> 8
        MOVW    R17:R16, R25:R24
          CFI FunCall subtract_mod_order
        RCALL   subtract_mod_order
        LD      R24, Y+
          CFI R24 SameValue
          CFI CFA_Y Y+1
        LD      R25, Y+
          CFI R25 SameValue
          CFI CFA_Y Y+0
        RET
          CFI EndBlock cfiBlock12

        RSEG FARCODE:CODE:NOROOT(1)
// __farfunc __version_3 void Montgomery_multiply_mod_order(digit_t const *, digit_t const *, digit_t *)
Montgomery_multiply_mod_order:
          CFI Block cfiBlock13 Using cfiCommon0
          CFI Function Montgomery_multiply_mod_order
        ST      -Y, R7
          CFI R7 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R6
          CFI R6 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R5
          CFI R5 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        ST      -Y, R4
          CFI R4 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        ST      -Y, R27
          CFI R27 Frame(CFA_Y, -5)
          CFI CFA_Y Y+5
        ST      -Y, R26
          CFI R26 Frame(CFA_Y, -6)
          CFI CFA_Y Y+6
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -7)
          CFI CFA_Y Y+7
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -8)
          CFI CFA_Y Y+8
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        REQUIRE ?Register_R6_is_cg_reg
        REQUIRE ?Register_R7_is_cg_reg
        SBIW    R29:R28, 63
          CFI CFA_Y Y+71
        SBIW    R29:R28, 63
          CFI CFA_Y Y+134
        SBIW    R29:R28, 63
          CFI CFA_Y Y+197
        SBIW    R29:R28, 3
          CFI CFA_Y Y+200
        MOVW    R25:R24, R21:R20
        LDI     R22, 8
        LDI     R23, 0
        MOVW    R21:R20, R29:R28
        SUBI    R20, 128
        SBCI    R21, 255
          CFI FunCall mp_mul
        RCALL   mp_mul
        LDI     R22, 8
        LDI     R23, 0
        MOVW    R21:R20, R29:R28
        SUBI    R20, 192
        SBCI    R21, 255
        LDI     R18, LOW((curve_order + 32))
        LDI     R19, HIGH((curve_order + 32))
        MOVW    R17:R16, R29:R28
        SUBI    R16, 128
        SBCI    R17, 255
          CFI FunCall mp_mul
        RCALL   mp_mul
        LDI     R22, 8
        LDI     R23, 0
        MOVW    R21:R20, R29:R28
        LDI     R18, LOW(curve_order)
        LDI     R19, (curve_order) >> 8
        MOVW    R17:R16, R29:R28
        SUBI    R16, 192
        SBCI    R17, 255
          CFI FunCall mp_mul
        RCALL   mp_mul
        LDI     R22, 16
        LDI     R23, 0
        MOVW    R21:R20, R29:R28
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R29:R28
        SUBI    R16, 128
        SBCI    R17, 255
          CFI FunCall mp_add
        CALL    mp_add
        MOVW    R5:R4, R17:R16
        MOVW    R31:R30, R25:R24
        MOVW    R27:R26, R29:R28
        ADIW    R27:R26, 32
        LDI     R16, 8
??Montgomery_multiply_mod_order_0:
        LD      R20, X+
        LD      R21, X+
        LD      R22, X+
        LD      R23, X+
        ST      Z+, R20
        ST      Z+, R21
        ST      Z+, R22
        ST      Z+, R23
        DEC     R16
        BRNE    ??Montgomery_multiply_mod_order_0
        CLR     R6
        CLR     R7
        LDI     R22, 8
        LDI     R23, 0
        MOVW    R21:R20, R25:R24
        LDI     R18, LOW(curve_order)
        LDI     R19, (curve_order) >> 8
        MOVW    R17:R16, R25:R24
          CFI FunCall mp_sub
        CALL    mp_sub
        SUB     R4, R16
        SBC     R5, R17
        SBC     R6, R6
        SBC     R7, R7
        MOVW    R31:R30, R29:R28
        LDI     R26, LOW(curve_order)
        LDI     R27, (curve_order) >> 8
        LDI     R20, 8
??Montgomery_multiply_mod_order_1:
        LD      R16, X+
        LD      R17, X+
        LD      R18, X+
        LD      R19, X+
        AND     R16, R4
        AND     R17, R5
        AND     R18, R6
        AND     R19, R7
        ST      Z+, R16
        ST      Z+, R17
        ST      Z+, R18
        ST      Z+, R19
        DEC     R20
        BRNE    ??Montgomery_multiply_mod_order_1
        LDI     R22, 8
        LDI     R23, 0
        MOVW    R21:R20, R25:R24
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R25:R24
          CFI FunCall mp_add
        CALL    mp_add
        RJMP    ?Subroutine9
          CFI EndBlock cfiBlock13

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
ctau1:
        DS8 32
        REQUIRE `?<Initializer for ctau1>`

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
ctaudual1:
        DS8 32
        REQUIRE `?<Initializer for ctaudual1>`

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
cphi0:
        DS8 32
        REQUIRE `?<Initializer for cphi0>`
        DS8 32
        REQUIRE `?<Initializer for cphi1>`
        DS8 32
        REQUIRE `?<Initializer for cphi2>`
        DS8 32
        REQUIRE `?<Initializer for cphi3>`
        DS8 32
        REQUIRE `?<Initializer for cphi4>`
        DS8 32
        REQUIRE `?<Initializer for cphi5>`
        DS8 32
        REQUIRE `?<Initializer for cphi6>`
        DS8 32
        REQUIRE `?<Initializer for cphi7>`
        DS8 32
        REQUIRE `?<Initializer for cphi8>`
        DS8 32
        REQUIRE `?<Initializer for cphi9>`

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
cpsi1:
        DS8 32
        REQUIRE `?<Initializer for cpsi1>`
        DS8 32
        REQUIRE `?<Initializer for cpsi2>`
        DS8 32
        REQUIRE `?<Initializer for cpsi3>`
        DS8 32
        REQUIRE `?<Initializer for cpsi4>`

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
b41:
        DS8 8
        REQUIRE `?<Initializer for b41>`
        DS8 8
        REQUIRE `?<Initializer for b42>`
        DS8 8
        REQUIRE `?<Initializer for b43>`
        DS8 8
        REQUIRE `?<Initializer for b44>`
        DS8 8
        REQUIRE `?<Initializer for c1>`
        DS8 8
        REQUIRE `?<Initializer for c2>`
        DS8 8
        REQUIRE `?<Initializer for c3>`
        DS8 8
        REQUIRE `?<Initializer for c4>`
        DS8 8
        REQUIRE `?<Initializer for b11>`
        DS8 8
        REQUIRE `?<Initializer for b12>`
        DS8 8
        REQUIRE `?<Initializer for b13>`
        DS8 8
        REQUIRE `?<Initializer for b14>`
        DS8 8
        REQUIRE `?<Initializer for b21>`
        DS8 8
        REQUIRE `?<Initializer for b24>`
        DS8 8
        REQUIRE `?<Initializer for b31>`
        DS8 8
        REQUIRE `?<Initializer for b32>`
        DS8 8
        REQUIRE `?<Initializer for b33>`
        DS8 8
        REQUIRE `?<Initializer for b34>`
        DS8 32
        REQUIRE `?<Initializer for ell1>`
        DS8 32
        REQUIRE `?<Initializer for ell2>`
        DS8 32
        REQUIRE `?<Initializer for ell3>`
        DS8 32
        REQUIRE `?<Initializer for ell4>`

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
__Constant_0_0:
        DS8 8
        REQUIRE `?<Initializer for 64 Bit Constant>_0`

        RSEG FARCODE:CODE:NOROOT(1)
?Subroutine0:
          CFI Block cfiBlock14 Using cfiCommon0
          CFI NoFunction
          CFI CFA_Y Y+8
          CFI R4 Frame(CFA_Y, -4)
          CFI R5 Frame(CFA_Y, -3)
          CFI R6 Frame(CFA_Y, -2)
          CFI R7 Frame(CFA_Y, -1)
          CFI R24 Frame(CFA_Y, -8)
          CFI R25 Frame(CFA_Y, -7)
          CFI R26 Frame(CFA_Y, -6)
          CFI R27 Frame(CFA_Y, -5)
        SUBI    R26, 192
        SBCI    R27, 255
        SUBI    R24, 192
        SBCI    R25, 255
          CFI EndBlock cfiBlock14
        REQUIRE ??Subroutine11_0
        ;               // Fall through to label ??Subroutine11_0

        RSEG FARCODE:CODE:NOROOT(1)
??Subroutine11_0:
          CFI Block cfiBlock15 Using cfiCommon0
          CFI NoFunction
          CFI CFA_Y Y+8
          CFI R4 Frame(CFA_Y, -4)
          CFI R5 Frame(CFA_Y, -3)
          CFI R6 Frame(CFA_Y, -2)
          CFI R7 Frame(CFA_Y, -1)
          CFI R24 Frame(CFA_Y, -8)
          CFI R25 Frame(CFA_Y, -7)
          CFI R26 Frame(CFA_Y, -6)
          CFI R27 Frame(CFA_Y, -5)
        MOVW    R19:R18, R27:R26
        MOVW    R17:R16, R25:R24
          CFI FunCall R5_to_R1 fpcopy1271
          CFI FunCall R1_to_R3 fpcopy1271
          CFI FunCall R2_to_R4 fpcopy1271
        CALL    fpcopy1271
        ADIW    R27:R26, 16
        MOVW    R19:R18, R27:R26
        ADIW    R25:R24, 16
        MOVW    R17:R16, R25:R24
          CFI FunCall R5_to_R1 fpcopy1271
          CFI FunCall R1_to_R3 fpcopy1271
          CFI FunCall R2_to_R4 fpcopy1271
        CALL    fpcopy1271
          CFI EndBlock cfiBlock15
        REQUIRE ??Subroutine12_0
        ;               // Fall through to label ??Subroutine12_0

        RSEG FARCODE:CODE:NOROOT(1)
??Subroutine12_0:
          CFI Block cfiBlock16 Using cfiCommon0
          CFI NoFunction
          CFI CFA_Y Y+8
          CFI R4 Frame(CFA_Y, -4)
          CFI R5 Frame(CFA_Y, -3)
          CFI R6 Frame(CFA_Y, -2)
          CFI R7 Frame(CFA_Y, -1)
          CFI R24 Frame(CFA_Y, -8)
          CFI R25 Frame(CFA_Y, -7)
          CFI R26 Frame(CFA_Y, -6)
          CFI R27 Frame(CFA_Y, -5)
        LD      R24, Y+
          CFI CFA_Y Y+7
          CFI R24 SameValue
        LD      R25, Y+
          CFI CFA_Y Y+6
          CFI R25 SameValue
        LD      R26, Y+
          CFI CFA_Y Y+5
          CFI R26 SameValue
        LD      R27, Y+
          CFI CFA_Y Y+4
          CFI R27 SameValue
        LD      R4, Y+
          CFI CFA_Y Y+3
          CFI R4 SameValue
        LD      R5, Y+
          CFI CFA_Y Y+2
          CFI R5 SameValue
        LD      R6, Y+
          CFI CFA_Y Y+1
          CFI R6 SameValue
        LD      R7, Y+
          CFI CFA_Y Y+0
          CFI R7 SameValue
        RET
          CFI EndBlock cfiBlock16

        RSEG FARCODE:CODE:NOROOT(1)
// __farfunc __version_3 void modulo_order(digit_t *, digit_t *)
modulo_order:
          CFI Block cfiBlock17 Using cfiCommon0
          CFI Function modulo_order
        ST      -Y, R26
          CFI R26 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        SBIW    R29:R28, 63
          CFI CFA_Y Y+66
        SBIW    R29:R28, 1
          CFI CFA_Y Y+67
        MOVW    R25:R24, R19:R18
        MOVW    R31:R30, R29:R28
        LDI     R20, 0
        LDI     R26, 32
??modulo_order_0:
        ST      Z+, R20
        DEC     R26
        BRNE    ??modulo_order_0
        LDI     R18, 1
        ST      Y, R18
        STD     Y+1, R20
        STD     Y+2, R20
        STD     Y+3, R20
        MOVW    R21:R20, R29:R28
        SUBI    R20, 224
        SBCI    R21, 255
        LDI     R18, LOW(Montgomery_Rprime)
        LDI     R19, (Montgomery_Rprime) >> 8
          CFI FunCall Montgomery_multiply_mod_order
        RCALL   Montgomery_multiply_mod_order
        MOVW    R21:R20, R25:R24
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R29:R28
        SUBI    R16, 224
        SBCI    R17, 255
          CFI FunCall Montgomery_multiply_mod_order
        RCALL   Montgomery_multiply_mod_order
        ADIW    R29:R28, 63
          CFI CFA_Y Y+4
        ADIW    R29:R28, 1
          CFI CFA_Y Y+3
        LD      R24, Y+
          CFI R24 SameValue
          CFI CFA_Y Y+2
        LD      R25, Y+
          CFI R25 SameValue
          CFI CFA_Y Y+1
        LD      R26, Y+
          CFI R26 SameValue
          CFI CFA_Y Y+0
        RET
          CFI EndBlock cfiBlock17

        RSEG FARCODE:CODE:NOROOT(1)
// __farfunc __version_3 void conversion_to_odd(digit_t *, digit_t *)
conversion_to_odd:
          CFI Block cfiBlock18 Using cfiCommon0
          CFI Function conversion_to_odd
          CFI NoCalls
        ST      -Y, R15
          CFI R15 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R14
          CFI R14 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R12
          CFI R12 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        ST      -Y, R11
          CFI R11 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        ST      -Y, R10
          CFI R10 Frame(CFA_Y, -5)
          CFI CFA_Y Y+5
        ST      -Y, R9
          CFI R9 Frame(CFA_Y, -6)
          CFI CFA_Y Y+6
        ST      -Y, R8
          CFI R8 Frame(CFA_Y, -7)
          CFI CFA_Y Y+7
        ST      -Y, R6
          CFI R6 Frame(CFA_Y, -8)
          CFI CFA_Y Y+8
        ST      -Y, R5
          CFI R5 Frame(CFA_Y, -9)
          CFI CFA_Y Y+9
        ST      -Y, R4
          CFI R4 Frame(CFA_Y, -10)
          CFI CFA_Y Y+10
        ST      -Y, R27
          CFI R27 Frame(CFA_Y, -11)
          CFI CFA_Y Y+11
        ST      -Y, R26
          CFI R26 Frame(CFA_Y, -12)
          CFI CFA_Y Y+12
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -13)
          CFI CFA_Y Y+13
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -14)
          CFI CFA_Y Y+14
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        REQUIRE ?Register_R6_is_cg_reg
        REQUIRE ?Register_R8_is_cg_reg
        REQUIRE ?Register_R9_is_cg_reg
        REQUIRE ?Register_R10_is_cg_reg
        REQUIRE ?Register_R11_is_cg_reg
        REQUIRE ?Register_R12_is_cg_reg
        REQUIRE ?Register_R14_is_cg_reg
        REQUIRE ?Register_R15_is_cg_reg
        SBIW    R29:R28, 1
          CFI CFA_Y Y+15
        MOVW    R31:R30, R17:R16
        CLR     R4
        CLR     R5
        LD      R20, Z
        ANDI    R20, 0x01
        LDI     R21, 255
        LDI     R22, 255
        LDI     R23, 255
        NEG     R20
        SBCI    R21, 255
        SBCI    R22, 255
        SBCI    R23, 255
        COM     R20
        COM     R21
        COM     R22
        COM     R23
        LDI     R24, LOW(curve_order)
        LDI     R25, (curve_order) >> 8
        MOVW    R27:R26, R19:R18
        MOVW    R15:R14, R17:R16
        LDI     R16, 8
        ST      Y, R16
??conversion_to_odd_0:
        MOVW    R31:R30, R25:R24
        LD      R16, Z+
        LD      R17, Z+
        LD      R18, Z+
        LD      R19, Z+
        MOVW    R25:R24, R31:R30
        AND     R16, R20
        AND     R17, R21
        AND     R18, R22
        AND     R19, R23
        CLR     R6
        ADD     R16, R4
        ADC     R17, R5
        ADC     R18, R5
        ADC     R19, R5
        MOVW    R31:R30, R15:R14
        LD      R0, Z+
        LD      R1, Z+
        LD      R2, Z+
        LD      R3, Z+
        MOVW    R15:R14, R31:R30
        ADD     R0, R16
        ADC     R1, R17
        ADC     R2, R18
        ADC     R3, R19
        MOVW    R31:R30, R27:R26
        ST      Z, R0
        STD     Z+1, R1
        STD     Z+2, R2
        STD     Z+3, R3
        ADIW    R27:R26, 4
        LDD     R1, Z+1
        LDD     R2, Z+2
        BST     R19, 7
        LDI     R30, 0
        BLD     R30, 0
        CLR     R12
        BLD     R12, 0
        MOVW    R9:R8, R17:R16
        MOVW    R11:R10, R19:R18
        SUB     R8, R4
        SBC     R9, R5
        SBC     R10, R5
        SBC     R11, R5
        LSL     R11
        CLR     R8
        ROL     R8
        OR      R12, R8
        EOR     R30, R12
        BST     R3, 7
        BLD     R6, 0
        CLR     R8
        BLD     R8, 0
        BST     R19, 7
        CLR     R4
        BLD     R4, 0
        EOR     R8, R4
        SUB     R0, R16
        SBC     R1, R17
        SBC     R2, R18
        SBC     R3, R19
        LSL     R3
        CLR     R0
        ROL     R0
        EOR     R0, R4
        OR      R8, R0
        EOR     R6, R8
        OR      R30, R6
        MOV     R4, R30
        LD      R16, Y
        DEC     R16
        ST      Y, R16
        BREQ    $+2+2
        RJMP    ??conversion_to_odd_0
        ADIW    R29:R28, 1
          CFI CFA_Y Y+14
        LD      R24, Y+
          CFI R24 SameValue
          CFI CFA_Y Y+13
        LD      R25, Y+
          CFI R25 SameValue
          CFI CFA_Y Y+12
        LD      R26, Y+
          CFI R26 SameValue
          CFI CFA_Y Y+11
        LD      R27, Y+
          CFI R27 SameValue
          CFI CFA_Y Y+10
        LD      R4, Y+
          CFI R4 SameValue
          CFI CFA_Y Y+9
        LD      R5, Y+
          CFI R5 SameValue
          CFI CFA_Y Y+8
        LD      R6, Y+
          CFI R6 SameValue
          CFI CFA_Y Y+7
        LD      R8, Y+
          CFI R8 SameValue
          CFI CFA_Y Y+6
        LD      R9, Y+
          CFI R9 SameValue
          CFI CFA_Y Y+5
        LD      R10, Y+
          CFI R10 SameValue
          CFI CFA_Y Y+4
        LD      R11, Y+
          CFI R11 SameValue
          CFI CFA_Y Y+3
        LD      R12, Y+
          CFI R12 SameValue
          CFI CFA_Y Y+2
        LD      R14, Y+
          CFI R14 SameValue
          CFI CFA_Y Y+1
        LD      R15, Y+
          CFI R15 SameValue
          CFI CFA_Y Y+0
        RET
          CFI EndBlock cfiBlock18

        RSEG FARCODE:CODE:NOROOT(1)
// __farfunc __version_3 void fpdiv1271(digit_t *)
fpdiv1271:
          CFI Block cfiBlock19 Using cfiCommon0
          CFI Function fpdiv1271
          CFI NoCalls
        ST      -Y, R14
          CFI R14 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R12
          CFI R12 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R11
          CFI R11 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        ST      -Y, R10
          CFI R10 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        ST      -Y, R9
          CFI R9 Frame(CFA_Y, -5)
          CFI CFA_Y Y+5
        ST      -Y, R8
          CFI R8 Frame(CFA_Y, -6)
          CFI CFA_Y Y+6
        ST      -Y, R6
          CFI R6 Frame(CFA_Y, -7)
          CFI CFA_Y Y+7
        ST      -Y, R5
          CFI R5 Frame(CFA_Y, -8)
          CFI CFA_Y Y+8
        ST      -Y, R4
          CFI R4 Frame(CFA_Y, -9)
          CFI CFA_Y Y+9
        ST      -Y, R27
          CFI R27 Frame(CFA_Y, -10)
          CFI CFA_Y Y+10
        ST      -Y, R26
          CFI R26 Frame(CFA_Y, -11)
          CFI CFA_Y Y+11
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -12)
          CFI CFA_Y Y+12
        MOV     R3, R24
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        REQUIRE ?Register_R6_is_cg_reg
        REQUIRE ?Register_R8_is_cg_reg
        REQUIRE ?Register_R9_is_cg_reg
        REQUIRE ?Register_R10_is_cg_reg
        REQUIRE ?Register_R11_is_cg_reg
        REQUIRE ?Register_R12_is_cg_reg
        REQUIRE ?Register_R14_is_cg_reg
        MOVW    R1:R0, R17:R16
        CLR     R4
        CLR     R5
        MOVW    R31:R30, R17:R16
        LD      R24, Z
        ANDI    R24, 0x01
        LDI     R25, 255
        LDI     R26, 255
        LDI     R27, 255
        NEG     R24
        SBCI    R25, 255
        SBCI    R26, 255
        SBCI    R27, 255
        LDI     R16, 3
        MOV     R14, R16
??fpdiv1271_0:
        CLR     R6
        MOVW    R17:R16, R25:R24
        MOVW    R19:R18, R27:R26
        ADD     R16, R4
        ADC     R17, R5
        ADC     R18, R5
        ADC     R19, R5
        LD      R20, Z
        LDD     R21, Z+1
        LDD     R22, Z+2
        LDD     R23, Z+3
        ADD     R20, R16
        ADC     R21, R17
        ADC     R22, R18
        ADC     R23, R19
        ST      Z, R20
        STD     Z+1, R21
        STD     Z+2, R22
        STD     Z+3, R23
        LD      R20, Z+
        LD      R21, Z+
        LD      R22, Z+
        ADIW    R31:R30, 1
        BST     R19, 7
        CLR     R2
        BLD     R2, 0
        CLR     R12
        BLD     R12, 0
        MOVW    R9:R8, R17:R16
        MOVW    R11:R10, R19:R18
        SUB     R8, R4
        SBC     R9, R5
        SBC     R10, R5
        SBC     R11, R5
        LSL     R11
        CLR     R8
        ROL     R8
        OR      R12, R8
        EOR     R2, R12
        BST     R23, 7
        BLD     R6, 0
        CLR     R8
        BLD     R8, 0
        BST     R19, 7
        CLR     R4
        BLD     R4, 0
        EOR     R8, R4
        SUB     R20, R16
        SBC     R21, R17
        SBC     R22, R18
        SBC     R23, R19
        LSL     R23
        LDI     R20, 0
        ROL     R20
        EOR     R20, R4
        OR      R8, R20
        EOR     R6, R8
        OR      R2, R6
        MOV     R4, R2
        DEC     R14
        BRNE    ??fpdiv1271_0
        LSR     R27
        ROR     R26
        ROR     R25
        ROR     R24
        ADD     R24, R2
        ADC     R25, R5
        ADC     R26, R5
        ADC     R27, R5
        MOVW    R31:R30, R1:R0
        LDD     R16, Z+12
        LDD     R17, Z+13
        LDD     R18, Z+14
        LDD     R19, Z+15
        ADD     R16, R24
        ADC     R17, R25
        ADC     R18, R26
        ADC     R19, R27
        STD     Z+12, R16
        STD     Z+13, R17
        STD     Z+14, R18
        STD     Z+15, R19
        LDI     R16, 3
??fpdiv1271_1:
        LD      R24, Z
        LDD     R25, Z+1
        LDD     R26, Z+2
        LDD     R27, Z+3
        LSR     R27
        ROR     R26
        ROR     R25
        ROR     R24
        LDD     R20, Z+4
        ANDI    R20, 0x01
        LSR     R20
        LDI     R23, 0
        ROR     R23
        EOR     R27, R23
        ST      Z, R24
        STD     Z+1, R25
        STD     Z+2, R26
        STD     Z+3, R27
        ADIW    R31:R30, 4
        DEC     R16
        BRNE    ??fpdiv1271_1
        MOVW    R31:R30, R1:R0
        LDD     R16, Z+12
        LDD     R17, Z+13
        LDD     R18, Z+14
        LDD     R19, Z+15
        LSR     R19
        ROR     R18
        ROR     R17
        ROR     R16
        STD     Z+12, R16
        STD     Z+13, R17
        STD     Z+14, R18
        STD     Z+15, R19
        MOV     R24, R3
          CFI R24 R3
        LD      R25, Y+
          CFI R25 SameValue
          CFI CFA_Y Y+11
        LD      R26, Y+
          CFI R26 SameValue
          CFI CFA_Y Y+10
        LD      R27, Y+
          CFI R27 SameValue
          CFI CFA_Y Y+9
        LD      R4, Y+
          CFI R4 SameValue
          CFI CFA_Y Y+8
        LD      R5, Y+
          CFI R5 SameValue
          CFI CFA_Y Y+7
        LD      R6, Y+
          CFI R6 SameValue
          CFI CFA_Y Y+6
        RJMP    ?Subroutine6
          CFI EndBlock cfiBlock19
//   15 
//   16 
//   17 /***********************************************/
//   18 /************* GF(p^2) FUNCTIONS ***************/
//   19 

        RSEG FARCODE:CODE:NOROOT(1)
//   20 void fp2copy1271(f2elm_t a, f2elm_t c)
fp2copy1271:
          CFI Block cfiBlock20 Using cfiCommon0
          CFI Function fp2copy1271
//   21 {// Copy of a GF(p^2) element, c = a
        ST      -Y, R27
          CFI R27 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R26
          CFI R26 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        MOVW    R27:R26, R17:R16
        MOVW    R25:R24, R19:R18
//   22     fpcopy1271(a[0], c[0]);
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
//   23     fpcopy1271(a[1], c[1]);
        ADIW    R25:R24, 16
        MOVW    R19:R18, R25:R24
        ADIW    R27:R26, 16
        MOVW    R17:R16, R27:R26
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
//   24 }
        RJMP    ??Subroutine13_0
          CFI EndBlock cfiBlock20

        RSEG FARCODE:CODE:NOROOT(1)
?Subroutine5:
          CFI Block cfiBlock21 Using cfiCommon0
          CFI NoFunction
          CFI CFA_Y Y+132
          CFI R24 Frame(CFA_Y, -4)
          CFI R25 Frame(CFA_Y, -3)
          CFI R26 Frame(CFA_Y, -2)
          CFI R27 Frame(CFA_Y, -1)
        ADIW    R29:R28, 63
          CFI CFA_Y Y+69
        ADIW    R29:R28, 63
          CFI CFA_Y Y+6
        ADIW    R29:R28, 2
          CFI EndBlock cfiBlock21
        REQUIRE ??Subroutine13_0
        ;               // Fall through to label ??Subroutine13_0

        RSEG FARCODE:CODE:NOROOT(1)
??Subroutine13_0:
          CFI Block cfiBlock22 Using cfiCommon0
          CFI NoFunction
          CFI CFA_Y Y+4
          CFI R24 Frame(CFA_Y, -4)
          CFI R25 Frame(CFA_Y, -3)
          CFI R26 Frame(CFA_Y, -2)
          CFI R27 Frame(CFA_Y, -1)
        LD      R24, Y+
          CFI CFA_Y Y+3
          CFI R24 SameValue
        LD      R25, Y+
          CFI CFA_Y Y+2
          CFI R25 SameValue
        LD      R26, Y+
          CFI CFA_Y Y+1
          CFI R26 SameValue
        LD      R27, Y+
          CFI CFA_Y Y+0
          CFI R27 SameValue
        RET
          CFI EndBlock cfiBlock22
//   25 

        RSEG FARCODE:CODE:NOROOT(1)
//   26 void fp2copy1271_flash(f2elm_t a, f2elm_t c)
fp2copy1271_flash:
          CFI Block cfiBlock23 Using cfiCommon0
          CFI Function fp2copy1271_flash
//   27 {// Copy of a GF(p^2) element, c = a
        ST      -Y, R27
          CFI R27 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R26
          CFI R26 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        MOVW    R27:R26, R17:R16
        MOVW    R25:R24, R19:R18
//   28     fpcopy1271_flash(a[0], c[0]);
          CFI FunCall fpcopy1271_flash
        CALL    fpcopy1271_flash
//   29     fpcopy1271_flash(a[1], c[1]);
        ADIW    R25:R24, 16
        MOVW    R19:R18, R25:R24
        ADIW    R27:R26, 16
        MOVW    R17:R16, R27:R26
          CFI FunCall fpcopy1271_flash
        CALL    fpcopy1271_flash
//   30 }
        RJMP    ??Subroutine13_0
          CFI EndBlock cfiBlock23
//   31 

        RSEG FARCODE:CODE:NOROOT(1)
//   32 void fp2zero1271(f2elm_t a)
fp2zero1271:
          CFI Block cfiBlock24 Using cfiCommon0
          CFI Function fp2zero1271
//   33 {// Zeroing a GF(p^2) element, a = 0
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        MOVW    R25:R24, R17:R16
//   34     fpzero1271(a[0]);
          CFI FunCall fpzero1271
        CALL    fpzero1271
//   35     fpzero1271(a[1]);
        ADIW    R25:R24, 16
        MOVW    R17:R16, R25:R24
          CFI FunCall fpzero1271
        CALL    fpzero1271
//   36 }
        LD      R24, Y+
          CFI R24 SameValue
          CFI CFA_Y Y+1
        LD      R25, Y+
          CFI R25 SameValue
          CFI CFA_Y Y+0
        RET
          CFI EndBlock cfiBlock24
//   37 
//   38 

        RSEG FARCODE:CODE:NOROOT(1)
//   39 void fp2neg1271(f2elm_t a)
fp2neg1271:
          CFI Block cfiBlock25 Using cfiCommon0
          CFI Function fp2neg1271
//   40 {// GF(p^2) negation, a = -a in GF((2^127-1)^2)
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        MOVW    R25:R24, R17:R16
//   41     fpneg1271(a[0]);
          CFI FunCall fpneg1271
        CALL    fpneg1271
//   42     fpneg1271(a[1]);
        ADIW    R25:R24, 16
        MOVW    R17:R16, R25:R24
          CFI FunCall fpneg1271
        CALL    fpneg1271
//   43 }
        LD      R24, Y+
          CFI R24 SameValue
          CFI CFA_Y Y+1
        LD      R25, Y+
          CFI R25 SameValue
          CFI CFA_Y Y+0
        RET
          CFI EndBlock cfiBlock25
//   44 
//   45 

        RSEG FARCODE:CODE:NOROOT(1)
//   46 void fp2sqr1271(f2elm_t a, f2elm_t c)
fp2sqr1271:
          CFI Block cfiBlock26 Using cfiCommon0
          CFI Function fp2sqr1271
//   47 {// GF(p^2) squaring, c = a^2 in GF((2^127-1)^2)
        ST      -Y, R27
          CFI R27 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R26
          CFI R26 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        SBIW    R29:R28, 32
          CFI CFA_Y Y+36
        MOVW    R25:R24, R17:R16
        MOVW    R27:R26, R19:R18
//   48     felm_t t1, t2;
//   49 
//   50     fpadd1271(a[0], a[1], t1);           // t1 = a0+a1 
        MOVW    R21:R20, R29:R28
        SUBI    R20, 240
        SBCI    R21, 255
        MOVW    R19:R18, R17:R16
        SUBI    R18, 240
        SBCI    R19, 255
          CFI FunCall fpadd1271
        CALL    fpadd1271
//   51     fpsub1271(a[0], a[1], t2);           // t2 = a0-a1
        MOVW    R21:R20, R29:R28
        MOVW    R19:R18, R25:R24
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
          CFI FunCall fpsub1271
        CALL    fpsub1271
//   52     mod_mul_dbl128(a[0], a[1], c[1]);    // c1 = 2a0*a1 
        MOVW    R21:R20, R27:R26
        SUBI    R20, 240
        SBCI    R21, 255
        MOVW    R19:R18, R25:R24
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
          CFI FunCall mod_mul_dbl128
        CALL    mod_mul_dbl128
//   53     fpmul1271(t1, t2, c[0]);             // c0 = (a0+a1)(a0-a1)
        MOVW    R21:R20, R27:R26
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R29:R28
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall mod_mul128
        CALL    mod_mul128
//   54 }
        ADIW    R29:R28, 32
          CFI CFA_Y Y+4
        RJMP    ??Subroutine13_0
          CFI EndBlock cfiBlock26
//   55 
//   56 

        RSEG FARCODE:CODE:NOROOT(1)
//   57 void fp2mul1271(f2elm_t a, f2elm_t b, f2elm_t c)
fp2mul1271:
          CFI Block cfiBlock27 Using cfiCommon0
          CFI Function fp2mul1271
//   58 {// GF(p^2) multiplication, c = a*b in GF((2^127-1)^2)       
        ST      -Y, R5
          CFI R5 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R4
          CFI R4 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R27
          CFI R27 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        ST      -Y, R26
          CFI R26 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -5)
          CFI CFA_Y Y+5
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -6)
          CFI CFA_Y Y+6
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        SBIW    R29:R28, 63
          CFI CFA_Y Y+69
        SBIW    R29:R28, 1
          CFI CFA_Y Y+70
        MOVW    R27:R26, R17:R16
        MOVW    R25:R24, R19:R18
        MOVW    R5:R4, R21:R20
//   59     felm_t t1, t2, t3, t4;
//   60     
//   61     fpmul1271(a[0], b[0], t1);          // t1 = a0*b0
        MOVW    R21:R20, R29:R28
        SUBI    R20, 224
        SBCI    R21, 255
          CFI FunCall mod_mul128
        CALL    mod_mul128
//   62     fpmul1271(a[1], b[1], t2);          // t2 = a1*b1
        MOVW    R21:R20, R29:R28
        SUBI    R20, 240
        SBCI    R21, 255
        MOVW    R19:R18, R25:R24
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall mod_mul128
        CALL    mod_mul128
//   63     fpadd1271(a[0], a[1], t3);          // t3 = a0+a1
        MOVW    R21:R20, R29:R28
        MOVW    R19:R18, R27:R26
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
          CFI FunCall fpadd1271
        CALL    fpadd1271
//   64     fpadd1271(b[0], b[1], t4);          // t4 = b0+b1
        MOVW    R21:R20, R29:R28
        SUBI    R20, 208
        SBCI    R21, 255
        MOVW    R19:R18, R25:R24
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
          CFI FunCall fpadd1271
        CALL    fpadd1271
//   65     fpsub1271(t1, t2, c[0]);            // c[0] = a0*b0 - a1*b1
        MOVW    R21:R20, R5:R4
        MOVW    R19:R18, R29:R28
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 224
        SBCI    R17, 255
          CFI FunCall fpsub1271
        CALL    fpsub1271
//   66     fpmul1271(t3, t4, t3);              // t3 = (a0+a1)*(b0+b1)
        MOVW    R21:R20, R29:R28
        MOVW    R19:R18, R29:R28
        SUBI    R18, 208
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
          CFI FunCall mod_mul128
        CALL    mod_mul128
//   67     fpsub1271(t3, t1, t3);              // t3 = (a0+a1)*(b0+b1) - a0*b0
        MOVW    R21:R20, R29:R28
        MOVW    R19:R18, R29:R28
        SUBI    R18, 224
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
          CFI FunCall fpsub1271
        CALL    fpsub1271
//   68     fpsub1271(t3, t2, c[1]);            // c[1] = (a0+a1)*(b0+b1) - a0*b0 - a1*b1      
        LDI     R16, 16
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
        MOVW    R21:R20, R5:R4
        MOVW    R19:R18, R29:R28
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
          CFI FunCall fpsub1271
        CALL    fpsub1271
//   69 }
        ADIW    R29:R28, 63
          CFI CFA_Y Y+7
        ADIW    R29:R28, 1
          CFI CFA_Y Y+6
        RJMP    ??Subroutine14_0
          CFI EndBlock cfiBlock27
//   70 
//   71 

        RSEG FARCODE:CODE:NOROOT(1)
//   72 void fp2add1271(f2elm_t a, f2elm_t b, f2elm_t c)
fp2add1271:
          CFI Block cfiBlock28 Using cfiCommon0
          CFI Function fp2add1271
//   73 {// GF(p^2) addition, c = a+b in GF((2^127-1)^2)
        ST      -Y, R5
          CFI R5 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R4
          CFI R4 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R27
          CFI R27 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        ST      -Y, R26
          CFI R26 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -5)
          CFI CFA_Y Y+5
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -6)
          CFI CFA_Y Y+6
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        MOVW    R5:R4, R17:R16
        MOVW    R27:R26, R19:R18
        MOVW    R25:R24, R21:R20
//   74     fpadd1271(a[0], b[0], c[0]);
          CFI FunCall fpadd1271
        CALL    fpadd1271
//   75     fpadd1271(a[1], b[1], c[1]);  
        ADIW    R25:R24, 16
        MOVW    R21:R20, R25:R24
        ADIW    R27:R26, 16
        MOVW    R19:R18, R27:R26
        LDI     R16, 16
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
        MOVW    R17:R16, R5:R4
          CFI FunCall fpadd1271
        CALL    fpadd1271
//   76 }
        RJMP    ??Subroutine14_0
          CFI EndBlock cfiBlock28
//   77 
//   78 

        RSEG FARCODE:CODE:NOROOT(1)
?Subroutine4:
          CFI Block cfiBlock29 Using cfiCommon0
          CFI NoFunction
          CFI CFA_Y Y+6
          CFI R4 Frame(CFA_Y, -2)
          CFI R5 Frame(CFA_Y, -1)
          CFI R24 Frame(CFA_Y, -6)
          CFI R25 Frame(CFA_Y, -5)
          CFI R26 Frame(CFA_Y, -4)
          CFI R27 Frame(CFA_Y, -3)
          CFI FunCall fp2sub1271 fpsub1271
          CFI FunCall fp2addsub1271 fpsub1271
        CALL    fpsub1271
          CFI EndBlock cfiBlock29
        REQUIRE ??Subroutine14_0
        ;               // Fall through to label ??Subroutine14_0

        RSEG FARCODE:CODE:NOROOT(1)
??Subroutine14_0:
          CFI Block cfiBlock30 Using cfiCommon0
          CFI NoFunction
          CFI CFA_Y Y+6
          CFI R4 Frame(CFA_Y, -2)
          CFI R5 Frame(CFA_Y, -1)
          CFI R24 Frame(CFA_Y, -6)
          CFI R25 Frame(CFA_Y, -5)
          CFI R26 Frame(CFA_Y, -4)
          CFI R27 Frame(CFA_Y, -3)
        LD      R24, Y+
          CFI CFA_Y Y+5
          CFI R24 SameValue
        LD      R25, Y+
          CFI CFA_Y Y+4
          CFI R25 SameValue
        LD      R26, Y+
          CFI CFA_Y Y+3
          CFI R26 SameValue
        LD      R27, Y+
          CFI CFA_Y Y+2
          CFI R27 SameValue
        LD      R4, Y+
          CFI CFA_Y Y+1
          CFI R4 SameValue
        LD      R5, Y+
          CFI CFA_Y Y+0
          CFI R5 SameValue
        RET
          CFI EndBlock cfiBlock30

        RSEG FARCODE:CODE:NOROOT(1)
//   79 void fp2sub1271(f2elm_t a, f2elm_t b, f2elm_t c)
fp2sub1271:
          CFI Block cfiBlock31 Using cfiCommon0
          CFI Function fp2sub1271
//   80 {// GF(p^2) subtraction, c = a-b in GF((2^127-1)^2)
        ST      -Y, R5
          CFI R5 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R4
          CFI R4 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R27
          CFI R27 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        ST      -Y, R26
          CFI R26 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -5)
          CFI CFA_Y Y+5
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -6)
          CFI CFA_Y Y+6
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        MOVW    R5:R4, R17:R16
        MOVW    R27:R26, R19:R18
        MOVW    R25:R24, R21:R20
//   81     fpsub1271(a[0], b[0], c[0]);
          CFI FunCall fpsub1271
        CALL    fpsub1271
//   82     fpsub1271(a[1], b[1], c[1]);  
        ADIW    R25:R24, 16
        MOVW    R21:R20, R25:R24
        ADIW    R27:R26, 16
        MOVW    R19:R18, R27:R26
        LDI     R16, 16
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
        MOVW    R17:R16, R5:R4
        RJMP    ?Subroutine4
//   83 }
          CFI EndBlock cfiBlock31
//   84 
//   85 

        RSEG FARCODE:CODE:NOROOT(1)
//   86 __inline void fp2addsub1271(f2elm_t a, f2elm_t b, f2elm_t c)
fp2addsub1271:
          CFI Block cfiBlock32 Using cfiCommon0
          CFI Function fp2addsub1271
//   87 {// GF(p^2) addition followed by subtraction, c = 2a-b in GF((2^127-1)^2)	
        ST      -Y, R5
          CFI R5 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R4
          CFI R4 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R27
          CFI R27 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        ST      -Y, R26
          CFI R26 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -5)
          CFI CFA_Y Y+5
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -6)
          CFI CFA_Y Y+6
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        MOVW    R25:R24, R17:R16
        MOVW    R5:R4, R19:R18
        MOVW    R27:R26, R21:R20
//   88     fp2add1271(a, a, a);
        MOVW    R21:R20, R17:R16
        MOVW    R19:R18, R17:R16
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R21:R20, R25:R24
        SUBI    R20, 240
        SBCI    R21, 255
        MOVW    R19:R18, R25:R24
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpadd1271
        CALL    fpadd1271
//   89     fp2sub1271(a, b, c);
        MOVW    R21:R20, R27:R26
        MOVW    R19:R18, R5:R4
        MOVW    R17:R16, R25:R24
          CFI FunCall fpsub1271
        CALL    fpsub1271
        ADIW    R27:R26, 16
        MOVW    R21:R20, R27:R26
        LDI     R16, 16
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
        MOVW    R19:R18, R5:R4
        ADIW    R25:R24, 16
        MOVW    R17:R16, R25:R24
        RJMP    ?Subroutine4
//   90 }
          CFI EndBlock cfiBlock32
//   91 
//   92 

        RSEG FARCODE:CODE:NOROOT(1)
//   93 void fp2inv1271(f2elm_t a)
fp2inv1271:
          CFI Block cfiBlock33 Using cfiCommon0
          CFI Function fp2inv1271
//   94 {// GF(p^2) inversion, a = (a0-i*a1)/(a0^2+a1^2)
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        SBIW    R29:R28, 48
          CFI CFA_Y Y+50
        MOVW    R25:R24, R17:R16
//   95     f2elm_t t1;
//   96 
//   97     fpsqr1271(a[0], t1[0]);             // t10 = a0^2
        MOVW    R19:R18, R29:R28
        SUBI    R18, 240
        SBCI    R19, 255
          CFI FunCall mod_sqr128
        CALL    mod_sqr128
//   98     fpsqr1271(a[1], t1[1]);             // t11 = a1^2
        MOVW    R19:R18, R29:R28
        SUBI    R18, 224
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall mod_sqr128
        CALL    mod_sqr128
//   99     fpadd1271(t1[0], t1[1], t1[0]);     // t10 = a0^2+a1^2
        MOVW    R21:R20, R29:R28
        SUBI    R20, 240
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 224
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpadd1271
        CALL    fpadd1271
//  100     fpinv1271(t1[0]);                   // t10 = (a0^2+a1^2)^-1
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R29:R28
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpexp1251
        RCALL   fpexp1251
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R29:R28
          CFI FunCall mod_sqr128
        CALL    mod_sqr128
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R29:R28
          CFI FunCall mod_sqr128
        CALL    mod_sqr128
        MOVW    R21:R20, R29:R28
        SUBI    R20, 240
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R29:R28
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall mod_mul128
        CALL    mod_mul128
//  101     fpneg1271(a[1]);                    // a = a0-i*a1
        MOVW    R17:R16, R25:R24
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpneg1271
        CALL    fpneg1271
//  102     fpmul1271(a[0], t1[0], a[0]);
        MOVW    R21:R20, R25:R24
        MOVW    R19:R18, R29:R28
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
          CFI FunCall mod_mul128
        CALL    mod_mul128
//  103     fpmul1271(a[1], t1[0], a[1]);       // a = (a0-i*a1)*(a0^2+a1^2)^-1
        MOVW    R21:R20, R25:R24
        SUBI    R20, 240
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 240
        SBCI    R19, 255
        ADIW    R25:R24, 16
        MOVW    R17:R16, R25:R24
          CFI FunCall mod_mul128
        CALL    mod_mul128
//  104 }
        ADIW    R29:R28, 48
          CFI CFA_Y Y+2
        LD      R24, Y+
          CFI R24 SameValue
          CFI CFA_Y Y+1
        LD      R25, Y+
          CFI R25 SameValue
          CFI CFA_Y Y+0
        RET
          CFI EndBlock cfiBlock33
//  105 
//  106 

        RSEG FARCODE:CODE:NOROOT(1)
//  107 __inline void clear_words(void* mem, unsigned int nwords)
clear_words:
          CFI Block cfiBlock34 Using cfiCommon0
          CFI Function clear_words
          CFI NoCalls
//  108 { // Clear integer-size digits from memory. "nwords" indicates the number of integer digits to be zeroed.
//  109   // This function uses the volatile type qualifier to inform the compiler not to optimize out the memory clearing.
//  110   // It has been tested with MSVS 2013 and GNU GCC 4.6.3, 4.7.3, 4.8.2 and 4.8.4. Users are responsible for verifying correctness with different compilers.  
//  111   // See "Compliant Solution (C99)" at https://www.securecoding.cert.org/confluence/display/c/MSC06-C.+Beware+of+compiler+optimizations 
//  112       unsigned int i;
//  113       volatile unsigned int *v = mem;
//  114 
//  115       for (i = 0; i < nwords; i++)
        MOV     R20, R18
        OR      R20, R19
        BREQ    ??clear_words_0
        LDI     R20, 0
//  116             v[i] = 0;
??clear_words_1:
        MOVW    R31:R30, R17:R16
        ST      Z+, R20
        ST      Z+, R20
        MOVW    R17:R16, R31:R30
        SUBI    R18, 1
        SBCI    R19, 0
        BRNE    ??clear_words_1
//  117 }
??clear_words_0:
        RET
          CFI EndBlock cfiBlock34
//  118 
//  119 
//  120 #if (USE_ENDO == true)
//  121 
//  122 // Fixed GF(p^2) constants for the endomorphisms 
//  123 static uint64_t ctau1[4]     = {0x74DCD57CEBCE74C3, 0x1964DE2C3AFAD20C, 0x12, 0x0C};         
//  124 static uint64_t ctaudual1[4] = {0x9ECAA6D9DECDF034, 0x4AA740EB23058652, 0x11, 0x7FFFFFFFFFFFFFF4};
//  125 static uint64_t cphi0[4] = {0xFFFFFFFFFFFFFFF7, 0x05, 0x4F65536CEF66F81A, 0x2553A0759182C329};
//  126 static uint64_t cphi1[4] = {0x07, 0x05, 0x334D90E9E28296F9, 0x62C8CAA0C50C62CF};
//  127 static uint64_t cphi2[4] = {0x15, 0x0F, 0x2C2CB7154F1DF391, 0x78DF262B6C9B5C98};
//  128 static uint64_t cphi3[4] = {0x03, 0x02, 0x92440457A7962EA4, 0x5084C6491D76342A};
//  129 static uint64_t cphi4[4] = {0x03, 0x03, 0xA1098C923AEC6855, 0x12440457A7962EA4};
//  130 static uint64_t cphi5[4] = {0x0F, 0x0A, 0x669B21D3C5052DF3, 0x459195418A18C59E};
//  131 static uint64_t cphi6[4] = {0x18, 0x12, 0xCD3643A78A0A5BE7, 0x0B232A8314318B3C};
//  132 static uint64_t cphi7[4] = {0x23, 0x18, 0x66C183035F48781A, 0x3963BC1C99E2EA1A};
//  133 static uint64_t cphi8[4] = {0xF0, 0xAA, 0x44E251582B5D0EF0, 0x1F529F860316CBE5};
//  134 static uint64_t cphi9[4] = {0xBEF, 0x870, 0x14D3E48976E2505, 0xFD52E9CFE00375B};
//  135 static uint64_t cpsi1[4] = {0xEDF07F4767E346EF, 0x2AF99E9A83D54A02, 0x13A, 0xDE};
//  136 static uint64_t cpsi2[4] = {0x143, 0xE4, 0x4C7DEB770E03F372, 0x21B8D07B99A81F03};
//  137 static uint64_t cpsi3[4] = {0x09, 0x06, 0x3A6E6ABE75E73A61, 0x4CB26F161D7D6906};
//  138 static uint64_t cpsi4[4] = {0xFFFFFFFFFFFFFFF6, 0x7FFFFFFFFFFFFFF9, 0xC59195418A18C59E, 0x334D90E9E28296F9};
//  139 
//  140 // Fixed integer constants for the decomposition
//  141 // Close "offset" vector
//  142 static uint64_t c1  = {0x72482C5251A4559C};
//  143 static uint64_t c2  = {0x59F95B0ADD276F6C};
//  144 static uint64_t c3  = {0x7DD2D17C4625FA78};
//  145 static uint64_t c4  = {0x6BC57DEF56CE8877};
//  146 // Optimal basis vectors 
//  147 static uint64_t b11 = {0x0906FF27E0A0A196};   
//  148 static uint64_t b12 = {0x1363E862C22A2DA0};                                              
//  149 static uint64_t b13 = {0x07426031ECC8030F};                                              
//  150 static uint64_t b14 = {0x084F739986B9E651};   
//  151 static uint64_t b21 = {0x1D495BEA84FCC2D4};
//  152 static uint64_t b24 = {0x25DBC5BC8DD167D0};
//  153 static uint64_t b31 = {0x17ABAD1D231F0302};
//  154 static uint64_t b32 = {0x02C4211AE388DA51};
//  155 static uint64_t b33 = {0x2E4D21C98927C49F};
//  156 static uint64_t b34 = {0x0A9E6F44C02ECD97};
//  157 static uint64_t b41 = {0x136E340A9108C83F};
//  158 static uint64_t b42 = {0x3122DF2DC3E0FF32};
//  159 static uint64_t b43 = {0x068A49F02AA8A9B5};
//  160 static uint64_t b44 = {0x18D5087896DE0AEA};
//  161 // Precomputed integers for fast-Babai rounding
//  162 static uint64_t ell1[4] = {0x259686E09D1A7D4F, 0xF75682ACE6A6BD66, 0xFC5BB5C5EA2BE5DF, 0x07};
//  163 static uint64_t ell2[4] = {0xD1BA1D84DD627AFB, 0x2BD235580F468D8D, 0x8FD4B04CAA6C0F8A, 0x03};
//  164 static uint64_t ell3[4] = {0x9B291A33678C203C, 0xC42BD6C965DCA902, 0xD038BF8D0BFFBAF6, 0x00};
//  165 static uint64_t ell4[4] = {0x12E5666B77E7FDC0, 0x81CBDC3714983D82, 0x1B073877A22D8410, 0x03};
//  166 
//  167 
//  168 /***********************************************/
//  169 /**********  CURVE/SCALAR FUNCTIONS  ***********/
//  170 

        RSEG FARCODE:CODE:NOROOT(1)
//  171 static __inline void ecc_tau(point_extproj_t P)
ecc_tau:
          CFI Block cfiBlock35 Using cfiCommon0
          CFI Function ecc_tau
//  172 { // Apply tau mapping to a point, P = tau(P)
        ST      -Y, R9
          CFI R9 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R8
          CFI R8 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R7
          CFI R7 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        ST      -Y, R6
          CFI R6 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        ST      -Y, R5
          CFI R5 Frame(CFA_Y, -5)
          CFI CFA_Y Y+5
        ST      -Y, R4
          CFI R4 Frame(CFA_Y, -6)
          CFI CFA_Y Y+6
        ST      -Y, R27
          CFI R27 Frame(CFA_Y, -7)
          CFI CFA_Y Y+7
        ST      -Y, R26
          CFI R26 Frame(CFA_Y, -8)
          CFI CFA_Y Y+8
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -9)
          CFI CFA_Y Y+9
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -10)
          CFI CFA_Y Y+10
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        REQUIRE ?Register_R6_is_cg_reg
        REQUIRE ?Register_R7_is_cg_reg
        REQUIRE ?Register_R8_is_cg_reg
        REQUIRE ?Register_R9_is_cg_reg
        SBIW    R29:R28, 63
          CFI CFA_Y Y+73
        SBIW    R29:R28, 33
          CFI CFA_Y Y+106
        MOVW    R25:R24, R17:R16
//  173   // Input: P = (X1:Y1:Z1) on E in twisted Edwards coordinates
//  174   // Output: P = (Xfinal:Yfinal:Zfinal) on Ehat in twisted Edwards coordinates
//  175     f2elm_t t0, t1; 
//  176 
//  177     fp2sqr1271(P->x, t0);                     // t0 = X1^2
        MOVW    R21:R20, R29:R28
        SUBI    R20, 208
        SBCI    R21, 255
        MOVW    R19:R18, R17:R16
        SUBI    R18, 240
        SBCI    R19, 255
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 224
        SBCI    R21, 255
        MOVW    R19:R18, R25:R24
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
          CFI FunCall fpsub1271
        CALL    fpsub1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 240
        SBCI    R21, 255
        MOVW    R19:R18, R25:R24
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
          CFI FunCall mod_mul_dbl128
        CALL    mod_mul_dbl128
        MOVW    R21:R20, R29:R28
        MOVW    R19:R18, R29:R28
        SUBI    R18, 224
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 208
        SBCI    R17, 255
          CFI FunCall mod_mul128
        CALL    mod_mul128
//  178     fp2sqr1271(P->y, t1);                     // t1 = Y1^2
        MOVW    R27:R26, R25:R24
        ADIW    R27:R26, 32
        MOVW    R21:R20, R29:R28
        SUBI    R20, 208
        SBCI    R21, 255
        MOVW    R19:R18, R27:R26
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 224
        SBCI    R21, 255
        MOVW    R19:R18, R27:R26
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
          CFI FunCall fpsub1271
        CALL    fpsub1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 176
        SBCI    R21, 255
        MOVW    R19:R18, R27:R26
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
          CFI FunCall mod_mul_dbl128
        CALL    mod_mul_dbl128
        MOVW    R21:R20, R29:R28
        SUBI    R20, 192
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 224
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 208
        SBCI    R17, 255
          CFI FunCall mod_mul128
        CALL    mod_mul128
//  179     fp2mul1271(P->x, P->y, P->x);             // X = X1*Y1
        MOVW    R21:R20, R25:R24
        MOVW    R19:R18, R25:R24
        SUBI    R18, 224
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
          CFI FunCall fp2mul1271
        RCALL   fp2mul1271
//  180     fp2sqr1271(P->z, P->y);                   // Y = Z1^2
        MOVW    R5:R4, R25:R24
        LDI     R16, 32
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
        MOVW    R27:R26, R25:R24
        SUBI    R26, 192
        SBCI    R27, 255
        MOVW    R21:R20, R29:R28
        SUBI    R20, 208
        SBCI    R21, 255
        MOVW    R19:R18, R27:R26
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 224
        SBCI    R21, 255
        MOVW    R19:R18, R27:R26
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
          CFI FunCall fpsub1271
        CALL    fpsub1271
        MOVW    R21:R20, R5:R4
        SUBI    R20, 240
        SBCI    R21, 255
        MOVW    R19:R18, R27:R26
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
          CFI FunCall mod_mul_dbl128
        CALL    mod_mul_dbl128
        MOVW    R21:R20, R5:R4
        MOVW    R19:R18, R29:R28
        SUBI    R18, 224
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 208
        SBCI    R17, 255
          CFI FunCall mod_mul128
        CALL    mod_mul128
//  181     fp2add1271(t0, t1, P->z);                 // Z = X1^2+Y1^2
        MOVW    R21:R20, R27:R26
        MOVW    R19:R18, R29:R28
        SUBI    R18, 192
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R21:R20, R27:R26
        SUBI    R20, 240
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 176
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpadd1271
        CALL    fpadd1271
//  182     fp2add1271(P->y, P->y, P->y);             // Y = 2*Z1^2
        MOVW    R9:R8, R25:R24
        LDI     R16, 32
        ADD     R8, R16
        LDI     R16, 0
        ADC     R9, R16
        MOVW    R7:R6, R25:R24
        LDI     R16, 32
        ADD     R6, R16
        LDI     R16, 0
        ADC     R7, R16
        MOVW    R5:R4, R25:R24
        LDI     R16, 32
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
        MOVW    R21:R20, R9:R8
        MOVW    R19:R18, R7:R6
        MOVW    R17:R16, R5:R4
          CFI FunCall fpadd1271
        CALL    fpadd1271
        LDI     R16, 16
        ADD     R8, R16
        LDI     R16, 0
        ADC     R9, R16
        MOVW    R21:R20, R9:R8
        LDI     R16, 16
        ADD     R6, R16
        LDI     R16, 0
        ADC     R7, R16
        MOVW    R19:R18, R7:R6
        LDI     R16, 16
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
        MOVW    R17:R16, R5:R4
          CFI FunCall fpadd1271
        CALL    fpadd1271
//  183     fp2sub1271(t1, t0, t0);                   // t0 = Y1^2-X1^2
        MOVW    R21:R20, R29:R28
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R29:R28
        SUBI    R16, 192
        SBCI    R17, 255
          CFI FunCall fpsub1271
        CALL    fpsub1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 240
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 176
        SBCI    R17, 255
          CFI FunCall fpsub1271
        CALL    fpsub1271
//  184     fp2mul1271(P->x, t0, P->x);               // X = X1*Y1*(Y1^2-X1^2)
        MOVW    R21:R20, R25:R24
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R25:R24
          CFI FunCall fp2mul1271
        RCALL   fp2mul1271
//  185     fp2sub1271(P->y, t0, P->y);               // Y = 2*Z1^2-(Y1^2-X1^2)
        MOVW    R7:R6, R25:R24
        LDI     R16, 32
        ADD     R6, R16
        LDI     R16, 0
        ADC     R7, R16
        MOVW    R5:R4, R25:R24
        LDI     R16, 32
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
        MOVW    R21:R20, R7:R6
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R5:R4
          CFI FunCall fpsub1271
        CALL    fpsub1271
        LDI     R16, 16
        ADD     R6, R16
        LDI     R16, 0
        ADC     R7, R16
        MOVW    R21:R20, R7:R6
        MOVW    R19:R18, R29:R28
        SUBI    R18, 240
        SBCI    R19, 255
        LDI     R16, 16
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
        MOVW    R17:R16, R5:R4
          CFI FunCall fpsub1271
        CALL    fpsub1271
//  186     fp2mul1271(P->x, (felm_t*)&ctau1, P->x);  // Xfinal = X*ctau1
        MOVW    R21:R20, R25:R24
        LDI     R18, LOW(ctau1)
        LDI     R19, (ctau1) >> 8
        MOVW    R17:R16, R25:R24
          CFI FunCall fp2mul1271
        RCALL   fp2mul1271
//  187     fp2mul1271(P->y, P->z, P->y);             // Yfinal = Y*Z
        MOVW    R21:R20, R25:R24
        SUBI    R20, 224
        SBCI    R21, 255
        MOVW    R19:R18, R27:R26
        ADIW    R25:R24, 32
        MOVW    R17:R16, R25:R24
          CFI FunCall fp2mul1271
        RCALL   fp2mul1271
//  188     fp2mul1271(P->z, t0, P->z);               // Zfinal = t0*Z
        MOVW    R21:R20, R27:R26
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R27:R26
          CFI FunCall fp2mul1271
        RCALL   fp2mul1271
//  189 }
        ADIW    R29:R28, 63
          CFI CFA_Y Y+43
        ADIW    R29:R28, 33
          CFI EndBlock cfiBlock35
        REQUIRE ?Subroutine3
        ;               // Fall through to label ?Subroutine3

        RSEG FARCODE:CODE:NOROOT(1)
?Subroutine3:
          CFI Block cfiBlock36 Using cfiCommon0
          CFI NoFunction
          CFI CFA_Y Y+10
          CFI R4 Frame(CFA_Y, -6)
          CFI R5 Frame(CFA_Y, -5)
          CFI R6 Frame(CFA_Y, -4)
          CFI R7 Frame(CFA_Y, -3)
          CFI R8 Frame(CFA_Y, -2)
          CFI R9 Frame(CFA_Y, -1)
          CFI R24 Frame(CFA_Y, -10)
          CFI R25 Frame(CFA_Y, -9)
          CFI R26 Frame(CFA_Y, -8)
          CFI R27 Frame(CFA_Y, -7)
        LD      R24, Y+
          CFI CFA_Y Y+9
          CFI R24 SameValue
        LD      R25, Y+
          CFI CFA_Y Y+8
          CFI R25 SameValue
        LD      R26, Y+
          CFI CFA_Y Y+7
          CFI R26 SameValue
        LD      R27, Y+
          CFI CFA_Y Y+6
          CFI R27 SameValue
        LD      R4, Y+
          CFI CFA_Y Y+5
          CFI R4 SameValue
        LD      R5, Y+
          CFI CFA_Y Y+4
          CFI R5 SameValue
        LD      R6, Y+
          CFI CFA_Y Y+3
          CFI R6 SameValue
        LD      R7, Y+
          CFI CFA_Y Y+2
          CFI R7 SameValue
        LD      R8, Y+
          CFI CFA_Y Y+1
          CFI R8 SameValue
        LD      R9, Y+
          CFI CFA_Y Y+0
          CFI R9 SameValue
        RET
          CFI EndBlock cfiBlock36
//  190 
//  191 

        RSEG FARCODE:CODE:NOROOT(1)
//  192 static __inline void ecc_tau_dual(point_extproj_t P)
ecc_tau_dual:
          CFI Block cfiBlock37 Using cfiCommon0
          CFI Function ecc_tau_dual
//  193 { // Apply tau_dual mapping to a point, P = tau_dual(P)
        ST      -Y, R7
          CFI R7 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R6
          CFI R6 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R5
          CFI R5 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        ST      -Y, R4
          CFI R4 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        ST      -Y, R27
          CFI R27 Frame(CFA_Y, -5)
          CFI CFA_Y Y+5
        ST      -Y, R26
          CFI R26 Frame(CFA_Y, -6)
          CFI CFA_Y Y+6
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -7)
          CFI CFA_Y Y+7
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -8)
          CFI CFA_Y Y+8
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        REQUIRE ?Register_R6_is_cg_reg
        REQUIRE ?Register_R7_is_cg_reg
        SBIW    R29:R28, 63
          CFI CFA_Y Y+71
        SBIW    R29:R28, 33
          CFI CFA_Y Y+104
        MOVW    R25:R24, R17:R16
//  194   // Input: P = (X1:Y1:Z1) on Ehat in twisted Edwards coordinates
//  195   // Output: P = (Xfinal,Yfinal,Zfinal,Tafinal,Tbfinal) on E, where Tfinal = Tafinal*Tbfinal,
//  196   //         corresponding to (Xfinal:Yfinal:Zfinal:Tfinal) in extended twisted Edwards coordinates
//  197     f2elm_t t0, t1;
//  198 
//  199     fp2sqr1271(P->x, t0);                          // t0 = X1^2
        MOVW    R21:R20, R29:R28
        SUBI    R20, 208
        SBCI    R21, 255
        MOVW    R19:R18, R17:R16
        SUBI    R18, 240
        SBCI    R19, 255
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 224
        SBCI    R21, 255
        MOVW    R19:R18, R25:R24
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
          CFI FunCall fpsub1271
        CALL    fpsub1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 240
        SBCI    R21, 255
        MOVW    R19:R18, R25:R24
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
          CFI FunCall mod_mul_dbl128
        CALL    mod_mul_dbl128
        MOVW    R21:R20, R29:R28
        MOVW    R19:R18, R29:R28
        SUBI    R18, 224
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 208
        SBCI    R17, 255
          CFI FunCall mod_mul128
        CALL    mod_mul128
//  200     fp2sqr1271(P->z, P->ta);                       // Ta = Z1^2
        MOVW    R7:R6, R25:R24
        LDI     R16, 96
        ADD     R6, R16
        LDI     R16, 0
        ADC     R7, R16
        MOVW    R27:R26, R25:R24
        SUBI    R26, 192
        SBCI    R27, 255
        MOVW    R21:R20, R29:R28
        SUBI    R20, 208
        SBCI    R21, 255
        MOVW    R19:R18, R27:R26
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 224
        SBCI    R21, 255
        MOVW    R19:R18, R27:R26
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
          CFI FunCall fpsub1271
        CALL    fpsub1271
        MOVW    R21:R20, R7:R6
        SUBI    R20, 240
        SBCI    R21, 255
        MOVW    R19:R18, R27:R26
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
          CFI FunCall mod_mul_dbl128
        CALL    mod_mul_dbl128
        MOVW    R21:R20, R7:R6
        MOVW    R19:R18, R29:R28
        SUBI    R18, 224
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 208
        SBCI    R17, 255
          CFI FunCall mod_mul128
        CALL    mod_mul128
//  201     fp2sqr1271(P->y, t1);                          // t1 = Y1^2
        MOVW    R5:R4, R25:R24
        LDI     R16, 32
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
        MOVW    R21:R20, R29:R28
        SUBI    R20, 208
        SBCI    R21, 255
        MOVW    R19:R18, R5:R4
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R5:R4
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 224
        SBCI    R21, 255
        MOVW    R19:R18, R5:R4
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R5:R4
          CFI FunCall fpsub1271
        CALL    fpsub1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 176
        SBCI    R21, 255
        MOVW    R19:R18, R5:R4
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R5:R4
          CFI FunCall mod_mul_dbl128
        CALL    mod_mul_dbl128
        MOVW    R21:R20, R29:R28
        SUBI    R20, 192
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 224
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 208
        SBCI    R17, 255
          CFI FunCall mod_mul128
        CALL    mod_mul128
//  202     fp2add1271(P->ta, P->ta, P->z);                // Z = 2*Z1^2
        MOVW    R21:R20, R27:R26
        MOVW    R19:R18, R7:R6
        MOVW    R17:R16, R7:R6
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R21:R20, R27:R26
        SUBI    R20, 240
        SBCI    R21, 255
        MOVW    R19:R18, R7:R6
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R7:R6
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpadd1271
        CALL    fpadd1271
//  203     fp2sub1271(t1, t0, P->ta);                     // Tafinal = Y1^2-X1^2
        MOVW    R21:R20, R7:R6
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R29:R28
        SUBI    R16, 192
        SBCI    R17, 255
          CFI FunCall fpsub1271
        CALL    fpsub1271
        MOVW    R21:R20, R7:R6
        SUBI    R20, 240
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 176
        SBCI    R17, 255
          CFI FunCall fpsub1271
        CALL    fpsub1271
//  204     fp2add1271(t0, t1, t0);                        // t0 = X1^2+Y1^2
        MOVW    R21:R20, R29:R28
        MOVW    R19:R18, R29:R28
        SUBI    R18, 192
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 240
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 176
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpadd1271
        CALL    fpadd1271
//  205     fp2mul1271(P->x, P->y, P->x);                  // X = X1*Y1
        MOVW    R21:R20, R25:R24
        MOVW    R19:R18, R25:R24
        SUBI    R18, 224
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
          CFI FunCall fp2mul1271
        RCALL   fp2mul1271
//  206     fp2sub1271(P->z, P->ta, P->z);                 // Z = 2*Z1^2-(Y1^2-X1^2)
        MOVW    R21:R20, R27:R26
        MOVW    R19:R18, R7:R6
        MOVW    R17:R16, R27:R26
          CFI FunCall fpsub1271
        CALL    fpsub1271
        MOVW    R21:R20, R27:R26
        SUBI    R20, 240
        SBCI    R21, 255
        MOVW    R19:R18, R7:R6
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpsub1271
        CALL    fpsub1271
//  207     fp2mul1271(P->x, (felm_t*)&ctaudual1, P->tb);  // Tbfinal = ctaudual1*X1*X1
        MOVW    R5:R4, R25:R24
        LDI     R16, 128
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
        MOVW    R21:R20, R5:R4
        LDI     R18, LOW(ctaudual1)
        LDI     R19, (ctaudual1) >> 8
        MOVW    R17:R16, R25:R24
          CFI FunCall fp2mul1271
        RCALL   fp2mul1271
//  208     fp2mul1271(P->z, P->ta, P->y);                 // Yfinal = Z*Tafinal
        MOVW    R21:R20, R25:R24
        SUBI    R20, 224
        SBCI    R21, 255
        MOVW    R19:R18, R7:R6
        MOVW    R17:R16, R27:R26
          CFI FunCall fp2mul1271
        RCALL   fp2mul1271
//  209     fp2mul1271(P->tb, t0, P->x);                   // Xfinal = Tbfinal*t0
        MOVW    R21:R20, R25:R24
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R5:R4
          CFI FunCall fp2mul1271
        RCALL   fp2mul1271
//  210     fp2mul1271(P->z, t0, P->z);                    // Zfinal = Z*t0
        MOVW    R21:R20, R27:R26
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R27:R26
          CFI EndBlock cfiBlock37
        REQUIRE ?Subroutine10
        ;               // Fall through to label ?Subroutine10
//  211 }

        RSEG FARCODE:CODE:NOROOT(1)
?Subroutine10:
          CFI Block cfiBlock38 Using cfiCommon0
          CFI NoFunction
          CFI CFA_Y Y+104
          CFI R4 Frame(CFA_Y, -4)
          CFI R5 Frame(CFA_Y, -3)
          CFI R6 Frame(CFA_Y, -2)
          CFI R7 Frame(CFA_Y, -1)
          CFI R24 Frame(CFA_Y, -8)
          CFI R25 Frame(CFA_Y, -7)
          CFI R26 Frame(CFA_Y, -6)
          CFI R27 Frame(CFA_Y, -5)
          CFI FunCall ecc_tau_dual fp2mul1271
          CFI FunCall eccdouble fp2mul1271
        RCALL   fp2mul1271
        ADIW    R29:R28, 63
          CFI CFA_Y Y+41
        ADIW    R29:R28, 33
          CFI CFA_Y Y+8
        RJMP    ??Subroutine12_0
          CFI EndBlock cfiBlock38
//  212 
//  213 

        RSEG FARCODE:CODE:NOROOT(1)
//  214 static __inline void ecc_delphidel(point_extproj_t P)
ecc_delphidel:
          CFI Block cfiBlock39 Using cfiCommon0
          CFI Function ecc_delphidel
//  215 { // Apply delta_phi_delta mapping to a point, P = delta(phi_W(delta_inv(P))), 
        ST      -Y, R5
          CFI R5 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R4
          CFI R4 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R27
          CFI R27 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        ST      -Y, R26
          CFI R26 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -5)
          CFI CFA_Y Y+5
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -6)
          CFI CFA_Y Y+6
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        DEC     R29
          CFI CFA_Y Y+262
        MOVW    R25:R24, R17:R16
//  216   // where phi_W is the endomorphism on the Weierstrass form.
//  217   // Input: P = (X1:Y1:Z1) on Ehat in twisted Edwards coordinates
//  218   // Output: P = (Xfinal:Yfinal:Zfinal) on Ehat in twisted Edwards coordinates
//  219     f2elm_t t0, t1, t2, t3, t4, t5, t6; 
//  220 
//  221     fp2sqr1271(P->z, t4);                          // t4 = Z1^2
        MOVW    R5:R4, R17:R16
        LDI     R16, 64
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
        MOVW    R21:R20, R29:R28
        SUBI    R20, 16
        SBCI    R21, 255
        MOVW    R19:R18, R5:R4
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R5:R4
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 32
        SBCI    R21, 255
        MOVW    R19:R18, R5:R4
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R5:R4
          CFI FunCall fpsub1271
        CALL    fpsub1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 48
        SBCI    R21, 255
        MOVW    R19:R18, R5:R4
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R5:R4
          CFI FunCall mod_mul_dbl128
        CALL    mod_mul_dbl128
        MOVW    R21:R20, R29:R28
        SUBI    R20, 64
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 32
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 16
        SBCI    R17, 255
          CFI FunCall mod_mul128
        CALL    mod_mul128
//  222     fp2mul1271(P->y, P->z, t3);                    // t3 = Y1*Z1
        MOVW    R21:R20, R29:R28
        SUBI    R20, 160
        SBCI    R21, 255
        MOVW    R19:R18, R5:R4
        MOVW    R17:R16, R25:R24
        SUBI    R16, 224
        SBCI    R17, 255
          CFI FunCall fp2mul1271
        RCALL   fp2mul1271
//  223     fp2mul1271(t4, (felm_t*)&cphi4, t0);           // t0 = cphi4*t4
        MOVW    R21:R20, R29:R28
        SUBI    R20, 128
        SBCI    R21, 255
        LDI     R18, LOW((cphi0 + 128))
        LDI     R19, HIGH((cphi0 + 128))
        MOVW    R17:R16, R29:R28
        SUBI    R16, 64
        SBCI    R17, 255
          CFI FunCall fp2mul1271
        RCALL   fp2mul1271
//  224     fp2sqr1271(P->y, t2);                          // t2 = Y1^2
        MOVW    R27:R26, R25:R24
        ADIW    R27:R26, 32
        MOVW    R21:R20, R29:R28
        SUBI    R20, 16
        SBCI    R21, 255
        MOVW    R19:R18, R27:R26
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 32
        SBCI    R21, 255
        MOVW    R19:R18, R27:R26
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
          CFI FunCall fpsub1271
        CALL    fpsub1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 240
        SBCI    R21, 255
        MOVW    R19:R18, R27:R26
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
          CFI FunCall mod_mul_dbl128
        CALL    mod_mul_dbl128
        MOVW    R21:R20, R29:R28
        MOVW    R19:R18, R29:R28
        SUBI    R18, 32
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 16
        SBCI    R17, 255
          CFI FunCall mod_mul128
        CALL    mod_mul128
//  225     fp2add1271(t0, t2, t0);                        // t0 = t0+t2
        MOVW    R21:R20, R29:R28
        SUBI    R20, 128
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R29:R28
        SUBI    R16, 128
        SBCI    R17, 255
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 112
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 112
        SBCI    R17, 255
          CFI FunCall fpadd1271
        CALL    fpadd1271
//  226     fp2mul1271(t3, (felm_t*)&cphi3, t1);           // t1 = cphi3*t3
        MOVW    R21:R20, R29:R28
        SUBI    R20, 224
        SBCI    R21, 255
        LDI     R18, LOW((cphi0 + 96))
        LDI     R19, HIGH((cphi0 + 96))
        MOVW    R17:R16, R29:R28
        SUBI    R16, 160
        SBCI    R17, 255
          CFI FunCall fp2mul1271
        RCALL   fp2mul1271
//  227     fp2sub1271(t0, t1, t5);                        // t5 = t0-t1
        MOVW    R21:R20, R29:R28
        SUBI    R20, 192
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 224
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 128
        SBCI    R17, 255
          CFI FunCall fpsub1271
        CALL    fpsub1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 176
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 208
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 112
        SBCI    R17, 255
          CFI FunCall fpsub1271
        CALL    fpsub1271
//  228     fp2add1271(t0, t1, t0);                        // t0 = t0+t1
        MOVW    R21:R20, R29:R28
        SUBI    R20, 128
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 224
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 128
        SBCI    R17, 255
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 112
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 208
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 112
        SBCI    R17, 255
          CFI FunCall fpadd1271
        CALL    fpadd1271
//  229     fp2mul1271(t0, P->z, t0);                      // t0 = t0*Z1
        MOVW    R21:R20, R29:R28
        SUBI    R20, 128
        SBCI    R21, 255
        MOVW    R19:R18, R5:R4
        MOVW    R17:R16, R29:R28
        SUBI    R16, 128
        SBCI    R17, 255
          CFI FunCall fp2mul1271
        RCALL   fp2mul1271
//  230     fp2mul1271(t3, (felm_t*)&cphi1, t1);           // t1 = cphi1*t3
        MOVW    R21:R20, R29:R28
        SUBI    R20, 224
        SBCI    R21, 255
        LDI     R18, LOW((cphi0 + 32))
        LDI     R19, HIGH((cphi0 + 32))
        MOVW    R17:R16, R29:R28
        SUBI    R16, 160
        SBCI    R17, 255
          CFI FunCall fp2mul1271
        RCALL   fp2mul1271
//  231     fp2mul1271(t0, t5, t0);                        // t0 = t0*t5
        MOVW    R21:R20, R29:R28
        SUBI    R20, 128
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 192
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 128
        SBCI    R17, 255
          CFI FunCall fp2mul1271
        RCALL   fp2mul1271
//  232     fp2mul1271(t4, (felm_t*)&cphi2, t5);           // t5 = cphi2*t4
        MOVW    R21:R20, R29:R28
        SUBI    R20, 192
        SBCI    R21, 255
        LDI     R18, LOW((cphi0 + 64))
        LDI     R19, HIGH((cphi0 + 64))
        MOVW    R17:R16, R29:R28
        SUBI    R16, 64
        SBCI    R17, 255
          CFI FunCall fp2mul1271
        RCALL   fp2mul1271
//  233     fp2add1271(t2, t5, t5);                        // t5 = t2+t5
        MOVW    R21:R20, R29:R28
        SUBI    R20, 192
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 192
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 176
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 176
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpadd1271
        CALL    fpadd1271
//  234     fp2sub1271(t1, t5, t6);                        // t6 = t1-t5
        MOVW    R21:R20, R29:R28
        SUBI    R20, 96
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 192
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 224
        SBCI    R17, 255
          CFI FunCall fpsub1271
        CALL    fpsub1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 80
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 176
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 208
        SBCI    R17, 255
          CFI FunCall fpsub1271
        CALL    fpsub1271
//  235     fp2add1271(t1, t5, t1);                        // t1 = t1+t5
        MOVW    R21:R20, R29:R28
        SUBI    R20, 224
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 192
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 224
        SBCI    R17, 255
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 208
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 176
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 208
        SBCI    R17, 255
          CFI FunCall fpadd1271
        CALL    fpadd1271
//  236     fp2mul1271(t6, t1, t6);                        // t6 = t1*t6
        MOVW    R21:R20, R29:R28
        SUBI    R20, 96
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 224
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 96
        SBCI    R17, 255
          CFI FunCall fp2mul1271
        RCALL   fp2mul1271
//  237     fp2mul1271(t6, (felm_t*)&cphi0, t6);           // t6 = cphi0*t6
        MOVW    R21:R20, R29:R28
        SUBI    R20, 96
        SBCI    R21, 255
        LDI     R18, LOW(cphi0)
        LDI     R19, (cphi0) >> 8
        MOVW    R17:R16, R29:R28
        SUBI    R16, 96
        SBCI    R17, 255
          CFI FunCall fp2mul1271
        RCALL   fp2mul1271
//  238     fp2mul1271(P->x, t6, P->x);                    // X = X1*t6
        MOVW    R21:R20, R25:R24
        MOVW    R19:R18, R29:R28
        SUBI    R18, 96
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
          CFI FunCall fp2mul1271
        RCALL   fp2mul1271
//  239     fp2sqr1271(t2, t6);                            // t6 = t2^2
        MOVW    R21:R20, R29:R28
        SUBI    R20, 16
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 32
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
          CFI FunCall fpsub1271
        CALL    fpsub1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 80
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
          CFI FunCall mod_mul_dbl128
        CALL    mod_mul_dbl128
        MOVW    R21:R20, R29:R28
        SUBI    R20, 96
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 32
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 16
        SBCI    R17, 255
          CFI FunCall mod_mul128
        CALL    mod_mul128
//  240     fp2sqr1271(t3, t2);                            // t2 = t3^2
        MOVW    R21:R20, R29:R28
        SUBI    R20, 16
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 144
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 160
        SBCI    R17, 255
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 32
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 144
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 160
        SBCI    R17, 255
          CFI FunCall fpsub1271
        CALL    fpsub1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 240
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 144
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 160
        SBCI    R17, 255
          CFI FunCall mod_mul_dbl128
        CALL    mod_mul_dbl128
        MOVW    R21:R20, R29:R28
        MOVW    R19:R18, R29:R28
        SUBI    R18, 32
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 16
        SBCI    R17, 255
          CFI FunCall mod_mul128
        CALL    mod_mul128
//  241     fp2sqr1271(t4, t3);                            // t3 = t4^2
        MOVW    R21:R20, R29:R28
        SUBI    R20, 16
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 48
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 64
        SBCI    R17, 255
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 32
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 48
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 64
        SBCI    R17, 255
          CFI FunCall fpsub1271
        CALL    fpsub1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 144
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 48
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 64
        SBCI    R17, 255
          CFI FunCall mod_mul_dbl128
        CALL    mod_mul_dbl128
        MOVW    R21:R20, R29:R28
        SUBI    R20, 160
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 32
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 16
        SBCI    R17, 255
          CFI FunCall mod_mul128
        CALL    mod_mul128
//  242     fp2mul1271(t2, (felm_t*)&cphi8, t1);           // t1 = cphi8*t2
        MOVW    R21:R20, R29:R28
        SUBI    R20, 224
        SBCI    R21, 255
        LDI     R18, LOW((cphi0 + 256))
        LDI     R19, HIGH((cphi0 + 256))
        MOVW    R17:R16, R29:R28
          CFI FunCall fp2mul1271
        RCALL   fp2mul1271
//  243     fp2mul1271(t3, (felm_t*)&cphi9, t5);           // t5 = cphi9*t3
        MOVW    R21:R20, R29:R28
        SUBI    R20, 192
        SBCI    R21, 255
        LDI     R18, LOW((cphi0 + 288))
        LDI     R19, HIGH((cphi0 + 288))
        MOVW    R17:R16, R29:R28
        SUBI    R16, 160
        SBCI    R17, 255
          CFI FunCall fp2mul1271
        RCALL   fp2mul1271
//  244     fp2add1271(t1, t6, t1);                        // t1 = t1+t6
        MOVW    R21:R20, R29:R28
        SUBI    R20, 224
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 96
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 224
        SBCI    R17, 255
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 208
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 80
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 208
        SBCI    R17, 255
          CFI FunCall fpadd1271
        CALL    fpadd1271
//  245     fp2mul1271(t2, (felm_t*)&cphi6, t2);           // t2 = cphi6*t2
        MOVW    R21:R20, R29:R28
        LDI     R18, LOW((cphi0 + 192))
        LDI     R19, HIGH((cphi0 + 192))
        MOVW    R17:R16, R29:R28
          CFI FunCall fp2mul1271
        RCALL   fp2mul1271
//  246     fp2mul1271(t3, (felm_t*)&cphi7, t3);           // t3 = cphi7*t3
        MOVW    R21:R20, R29:R28
        SUBI    R20, 160
        SBCI    R21, 255
        LDI     R18, LOW((cphi0 + 224))
        LDI     R19, HIGH((cphi0 + 224))
        MOVW    R17:R16, R29:R28
        SUBI    R16, 160
        SBCI    R17, 255
          CFI FunCall fp2mul1271
        RCALL   fp2mul1271
//  247     fp2add1271(t1, t5, t1);                        // t1 = t1+t5
        MOVW    R21:R20, R29:R28
        SUBI    R20, 224
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 192
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 224
        SBCI    R17, 255
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 208
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 176
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 208
        SBCI    R17, 255
          CFI FunCall fpadd1271
        CALL    fpadd1271
//  248     fp2add1271(t2, t3, t2);                        // t2 = t2+t3
        MOVW    R21:R20, R29:R28
        MOVW    R19:R18, R29:R28
        SUBI    R18, 160
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 240
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 144
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpadd1271
        CALL    fpadd1271
//  249     fp2mul1271(t1, P->y, t1);                      // t1 = Y1*t1
        MOVW    R21:R20, R29:R28
        SUBI    R20, 224
        SBCI    R21, 255
        MOVW    R19:R18, R25:R24
        SUBI    R18, 224
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 224
        SBCI    R17, 255
          CFI FunCall fp2mul1271
        RCALL   fp2mul1271
//  250     fp2add1271(t6, t2, P->y);                      // Y = t6+t2
        MOVW    R27:R26, R25:R24
        ADIW    R27:R26, 32
        MOVW    R21:R20, R27:R26
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R29:R28
        SUBI    R16, 96
        SBCI    R17, 255
          CFI FunCall fpadd1271
        CALL    fpadd1271
        ADIW    R27:R26, 16
        MOVW    R21:R20, R27:R26
        MOVW    R19:R18, R29:R28
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 80
        SBCI    R17, 255
          CFI FunCall fpadd1271
        CALL    fpadd1271
//  251     fp2mul1271(P->x, t1, P->x);                    // X = X*t1
        MOVW    R21:R20, R25:R24
        MOVW    R19:R18, R29:R28
        SUBI    R18, 224
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
          CFI FunCall fp2mul1271
        RCALL   fp2mul1271
//  252     fp2mul1271(P->y, (felm_t*)&cphi5, P->y);       // Y = cphi5*Y
        MOVW    R21:R20, R25:R24
        SUBI    R20, 224
        SBCI    R21, 255
        LDI     R18, LOW((cphi0 + 160))
        LDI     R19, HIGH((cphi0 + 160))
        MOVW    R17:R16, R25:R24
        SUBI    R16, 224
        SBCI    R17, 255
          CFI FunCall fp2mul1271
        RCALL   fp2mul1271
//  253     fpneg1271(P->x[1]);                            // Xfinal = X^p
        MOVW    R17:R16, R25:R24
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpneg1271
        CALL    fpneg1271
//  254     fp2mul1271(P->y, P->z, P->y);                  // Y = Y*Z1
        MOVW    R21:R20, R25:R24
        SUBI    R20, 224
        SBCI    R21, 255
        MOVW    R19:R18, R5:R4
        MOVW    R17:R16, R25:R24
        SUBI    R16, 224
        SBCI    R17, 255
          CFI FunCall fp2mul1271
        RCALL   fp2mul1271
//  255     fp2mul1271(t0, t1, P->z);                      // Z = t0*t1
        MOVW    R21:R20, R5:R4
        MOVW    R19:R18, R29:R28
        SUBI    R18, 224
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 128
        SBCI    R17, 255
          CFI FunCall fp2mul1271
        RCALL   fp2mul1271
//  256     fp2mul1271(P->y, t0, P->y);                    // Y = Y*t0
        MOVW    R21:R20, R25:R24
        SUBI    R20, 224
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 128
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
        SUBI    R16, 224
        SBCI    R17, 255
          CFI FunCall fp2mul1271
        RCALL   fp2mul1271
//  257     fpneg1271(P->z[1]);                            // Zfinal = Z^p
        MOVW    R17:R16, R25:R24
        SUBI    R16, 176
        SBCI    R17, 255
          CFI FunCall fpneg1271
        CALL    fpneg1271
//  258     fpneg1271(P->y[1]);                            // Yfinal = Y^p
        ADIW    R25:R24, 48
        MOVW    R17:R16, R25:R24
          CFI FunCall fpneg1271
        CALL    fpneg1271
//  259 }
        INC     R29
          CFI CFA_Y Y+6
        RJMP    ??Subroutine14_0
          CFI EndBlock cfiBlock39
//  260 
//  261 

        RSEG FARCODE:CODE:NOROOT(1)
//  262 static __inline void ecc_delpsidel(point_extproj_t P)
ecc_delpsidel:
          CFI Block cfiBlock40 Using cfiCommon0
          CFI Function ecc_delpsidel
//  263 { // Apply delta_psi_delta mapping to a point, P = delta(psi_W(delta_inv(P))), 
        ST      -Y, R27
          CFI R27 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R26
          CFI R26 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        SBIW    R29:R28, 63
          CFI CFA_Y Y+67
        SBIW    R29:R28, 63
          CFI CFA_Y Y+130
        SBIW    R29:R28, 2
          CFI CFA_Y Y+132
        MOVW    R25:R24, R17:R16
//  264   // where psi_W is the endomorphism on the Weierstrass form.
//  265   // Input: P = (X1:Y1:Z1) on Ehat in twisted Edwards coordinates
//  266   // Output: P = (Xfinal:Yfinal:Zfinal) on Ehat in twisted Edwards coordinates
//  267     f2elm_t t0, t1, t2; 
//  268 
//  269     fpneg1271(P->x[1]);                            // X = X1^p
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpneg1271
        CALL    fpneg1271
//  270     fpneg1271(P->z[1]);                            // Z = Z1^p
        MOVW    R17:R16, R25:R24
        SUBI    R16, 176
        SBCI    R17, 255
          CFI FunCall fpneg1271
        CALL    fpneg1271
//  271     fpneg1271(P->y[1]);                            // Y = Y1^p
        MOVW    R17:R16, R25:R24
        SUBI    R16, 208
        SBCI    R17, 255
          CFI FunCall fpneg1271
        CALL    fpneg1271
//  272     fp2sqr1271(P->z, t2);                          // t2 = Z1^p^2
        MOVW    R27:R26, R25:R24
        SUBI    R26, 192
        SBCI    R27, 255
        MOVW    R21:R20, R29:R28
        SUBI    R20, 176
        SBCI    R21, 255
        MOVW    R19:R18, R27:R26
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 192
        SBCI    R21, 255
        MOVW    R19:R18, R27:R26
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
          CFI FunCall fpsub1271
        CALL    fpsub1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 240
        SBCI    R21, 255
        MOVW    R19:R18, R27:R26
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
          CFI FunCall mod_mul_dbl128
        CALL    mod_mul_dbl128
        MOVW    R21:R20, R29:R28
        MOVW    R19:R18, R29:R28
        SUBI    R18, 192
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 176
        SBCI    R17, 255
          CFI FunCall mod_mul128
        CALL    mod_mul128
//  273     fp2sqr1271(P->x, t0);                          // t0 = X1^p^2
        MOVW    R21:R20, R29:R28
        SUBI    R20, 176
        SBCI    R21, 255
        MOVW    R19:R18, R25:R24
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 192
        SBCI    R21, 255
        MOVW    R19:R18, R25:R24
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
          CFI FunCall fpsub1271
        CALL    fpsub1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 208
        SBCI    R21, 255
        MOVW    R19:R18, R25:R24
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
          CFI FunCall mod_mul_dbl128
        CALL    mod_mul_dbl128
        MOVW    R21:R20, R29:R28
        SUBI    R20, 224
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 192
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 176
        SBCI    R17, 255
          CFI FunCall mod_mul128
        CALL    mod_mul128
//  274     fp2mul1271(P->x, t2, P->x);                    // X = X1^p*Z1^p^2
        MOVW    R21:R20, R25:R24
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R25:R24
          CFI FunCall fp2mul1271
        RCALL   fp2mul1271
//  275     fp2mul1271(t2, (felm_t*)&cpsi2, P->z);         // Z = cpsi2*Z1^p^2
        MOVW    R21:R20, R27:R26
        LDI     R18, LOW((cpsi1 + 32))
        LDI     R19, HIGH((cpsi1 + 32))
        MOVW    R17:R16, R29:R28
          CFI FunCall fp2mul1271
        RCALL   fp2mul1271
//  276     fp2mul1271(t2, (felm_t*)&cpsi3, t1);           // t1 = cpsi3*Z1^p^2
        MOVW    R21:R20, R29:R28
        SUBI    R20, 160
        SBCI    R21, 255
        LDI     R18, LOW((cpsi1 + 64))
        LDI     R19, HIGH((cpsi1 + 64))
        MOVW    R17:R16, R29:R28
          CFI FunCall fp2mul1271
        RCALL   fp2mul1271
//  277     fp2mul1271(t2, (felm_t*)&cpsi4, t2);           // t2 = cpsi4*Z1^p^2
        MOVW    R21:R20, R29:R28
        LDI     R18, LOW((cpsi1 + 96))
        LDI     R19, HIGH((cpsi1 + 96))
        MOVW    R17:R16, R29:R28
          CFI FunCall fp2mul1271
        RCALL   fp2mul1271
//  278     fp2add1271(t0, P->z, P->z);                    // Z = X1^p^2 + cpsi2*Z1^p^2
        MOVW    R21:R20, R27:R26
        MOVW    R19:R18, R27:R26
        MOVW    R17:R16, R29:R28
        SUBI    R16, 224
        SBCI    R17, 255
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R21:R20, R27:R26
        SUBI    R20, 240
        SBCI    R21, 255
        MOVW    R19:R18, R27:R26
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 208
        SBCI    R17, 255
          CFI FunCall fpadd1271
        CALL    fpadd1271
//  279     fp2add1271(t0, t2, t2);                        // t2 = X1^p^2 + cpsi4*Z1^p^2
        MOVW    R21:R20, R29:R28
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R29:R28
        SUBI    R16, 224
        SBCI    R17, 255
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 240
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 208
        SBCI    R17, 255
          CFI FunCall fpadd1271
        CALL    fpadd1271
//  280     fp2add1271(t0, t1, t1);                        // t1 = X1^p^2 + cpsi3*Z1^p^2
        MOVW    R21:R20, R29:R28
        SUBI    R20, 160
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 160
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 224
        SBCI    R17, 255
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 144
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 144
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 208
        SBCI    R17, 255
          CFI FunCall fpadd1271
        CALL    fpadd1271
//  281     fp2neg1271(t2);                                // t2 = -(X1^p^2 + cpsi4*Z1^p^2)
        MOVW    R17:R16, R29:R28
          CFI FunCall fpneg1271
        CALL    fpneg1271
        MOVW    R17:R16, R29:R28
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpneg1271
        CALL    fpneg1271
//  282     fp2mul1271(P->z, P->y, P->z);                  // Z = Y1^p*(X1^p^2 + cpsi2*Z1^p^2)
        MOVW    R21:R20, R27:R26
        MOVW    R19:R18, R25:R24
        SUBI    R18, 224
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
          CFI FunCall fp2mul1271
        RCALL   fp2mul1271
//  283     fp2mul1271(P->x, t2, P->x);                    // X = -X1^p*Z1^p^2*(X1^p^2 + cpsi4*Z1^p^2)
        MOVW    R21:R20, R25:R24
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R25:R24
          CFI FunCall fp2mul1271
        RCALL   fp2mul1271
//  284     fp2mul1271(t1, P->z, P->y);                    // Yfinal = t1*Z
        MOVW    R21:R20, R25:R24
        SUBI    R20, 224
        SBCI    R21, 255
        MOVW    R19:R18, R27:R26
        MOVW    R17:R16, R29:R28
        SUBI    R16, 160
        SBCI    R17, 255
          CFI FunCall fp2mul1271
        RCALL   fp2mul1271
//  285     fp2mul1271(P->x, (felm_t*)&cpsi1, P->x);       // Xfinal = cpsi1*X
        MOVW    R21:R20, R25:R24
        LDI     R18, LOW(cpsi1)
        LDI     R19, (cpsi1) >> 8
        MOVW    R17:R16, R25:R24
          CFI FunCall fp2mul1271
        RCALL   fp2mul1271
//  286     fp2mul1271(P->z, t2, P->z);                    // Zfinal = Z*t2
        MOVW    R21:R20, R27:R26
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R27:R26
          CFI FunCall fp2mul1271
        RCALL   fp2mul1271
//  287 }
        RJMP    ?Subroutine5
          CFI EndBlock cfiBlock40
//  288 
//  289 

        RSEG FARCODE:CODE:NOROOT(1)
//  290 void ecc_psi(point_extproj_t P)
ecc_psi:
          CFI Block cfiBlock41 Using cfiCommon0
          CFI Function ecc_psi
//  291 { // Apply psi mapping to a point, P = psi(P)
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        MOVW    R25:R24, R17:R16
//  292   // Input: P = (X1:Y1:Z1) on E in twisted Edwards coordinates
//  293   // Output: P = (Xfinal,Yfinal,Zfinal,Tafinal,Tbfinal) on E, where Tfinal = Tafinal*Tbfinal,
//  294   //         corresponding to (Xfinal:Yfinal:Zfinal:Tfinal) in extended twisted Edwards coordinates
//  295 
//  296     ecc_tau(P);                            
          CFI FunCall ecc_tau
        RCALL   ecc_tau
//  297     ecc_delpsidel(P);                      		
        MOVW    R17:R16, R25:R24
          CFI FunCall ecc_delpsidel
        RCALL   ecc_delpsidel
//  298     ecc_tau_dual(P);                        
          CFI EndBlock cfiBlock41
        REQUIRE ?Subroutine7
        ;               // Fall through to label ?Subroutine7
//  299 }

        RSEG FARCODE:CODE:NOROOT(1)
?Subroutine7:
          CFI Block cfiBlock42 Using cfiCommon0
          CFI NoFunction
          CFI CFA_Y Y+2
          CFI R24 Frame(CFA_Y, -2)
          CFI R25 Frame(CFA_Y, -1)
        MOVW    R17:R16, R25:R24
          CFI FunCall ecc_psi ecc_tau_dual
          CFI FunCall ecc_phi ecc_tau_dual
        RCALL   ecc_tau_dual
        LD      R24, Y+
          CFI CFA_Y Y+1
          CFI R24 SameValue
        LD      R25, Y+
          CFI CFA_Y Y+0
          CFI R25 SameValue
        RET
          CFI EndBlock cfiBlock42
//  300 
//  301 

        RSEG FARCODE:CODE:NOROOT(1)
//  302 void ecc_phi(point_extproj_t P)
ecc_phi:
          CFI Block cfiBlock43 Using cfiCommon0
          CFI Function ecc_phi
//  303 { // Apply phi mapping to a point, P = phi(P)
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        MOVW    R25:R24, R17:R16
//  304   // Input: P = (X1:Y1:Z1) on E in twisted Edwards coordinates
//  305   // Output: P = (Xfinal,Yfinal,Zfinal,Tafinal,Tbfinal) on E, where Tfinal = Tafinal*Tbfinal,
//  306   //         corresponding to (Xfinal:Yfinal:Zfinal:Tfinal) in extended twisted Edwards coordinates
//  307 
//  308     ecc_tau(P);                            
          CFI FunCall ecc_tau
        RCALL   ecc_tau
//  309     ecc_delphidel(P);                      		
        MOVW    R17:R16, R25:R24
          CFI FunCall ecc_delphidel
        RCALL   ecc_delphidel
//  310     ecc_tau_dual(P);  
        RJMP    ?Subroutine7
//  311 }
          CFI EndBlock cfiBlock43

        RSEG FARCODE:CODE:NOROOT(1)
eccadd_core:
          CFI Block cfiBlock44 Using cfiCommon0
          CFI Function eccadd_core
        ST      -Y, R9
          CFI R9 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R8
          CFI R8 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R7
          CFI R7 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        ST      -Y, R6
          CFI R6 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        ST      -Y, R5
          CFI R5 Frame(CFA_Y, -5)
          CFI CFA_Y Y+5
        ST      -Y, R4
          CFI R4 Frame(CFA_Y, -6)
          CFI CFA_Y Y+6
        ST      -Y, R27
          CFI R27 Frame(CFA_Y, -7)
          CFI CFA_Y Y+7
        ST      -Y, R26
          CFI R26 Frame(CFA_Y, -8)
          CFI CFA_Y Y+8
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -9)
          CFI CFA_Y Y+9
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -10)
          CFI CFA_Y Y+10
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        REQUIRE ?Register_R6_is_cg_reg
        REQUIRE ?Register_R7_is_cg_reg
        REQUIRE ?Register_R8_is_cg_reg
        REQUIRE ?Register_R9_is_cg_reg
        SBIW    R29:R28, 63
          CFI CFA_Y Y+73
        SBIW    R29:R28, 1
          CFI CFA_Y Y+74
        MOVW    R5:R4, R17:R16
        MOVW    R27:R26, R19:R18
        MOVW    R25:R24, R21:R20
        MOVW    R7:R6, R21:R20
        LDI     R16, 64
        ADD     R6, R16
        LDI     R16, 0
        ADC     R7, R16
        MOVW    R21:R20, R7:R6
        SUBI    R18, 160
        SBCI    R19, 255
        MOV     R16, R4
        SUBI    R16, 160
        SBCI    R17, 255
          CFI FunCall fp2mul1271
        RCALL   fp2mul1271
        MOVW    R21:R20, R29:R28
        MOVW    R19:R18, R27:R26
        SUBI    R18, 192
        SBCI    R19, 255
        MOVW    R17:R16, R5:R4
        SUBI    R16, 192
        SBCI    R17, 255
          CFI FunCall fp2mul1271
        RCALL   fp2mul1271
        MOVW    R21:R20, R25:R24
        MOVW    R19:R18, R27:R26
        MOVW    R17:R16, R5:R4
          CFI FunCall fp2mul1271
        RCALL   fp2mul1271
        MOVW    R21:R20, R25:R24
        SUBI    R20, 224
        SBCI    R21, 255
        ADIW    R27:R26, 32
        MOVW    R19:R18, R27:R26
        LDI     R16, 32
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
        MOVW    R17:R16, R5:R4
          CFI FunCall fp2mul1271
        RCALL   fp2mul1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 224
        SBCI    R21, 255
        MOVW    R19:R18, R7:R6
        MOVW    R17:R16, R29:R28
          CFI FunCall fpsub1271
        CALL    fpsub1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 208
        SBCI    R21, 255
        MOVW    R19:R18, R7:R6
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpsub1271
        CALL    fpsub1271
        MOVW    R21:R20, R29:R28
        MOVW    R19:R18, R7:R6
        MOVW    R17:R16, R29:R28
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 240
        SBCI    R21, 255
        MOVW    R19:R18, R7:R6
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R9:R8, R25:R24
        LDI     R16, 128
        ADD     R8, R16
        LDI     R16, 0
        ADC     R9, R16
        MOVW    R27:R26, R25:R24
        ADIW    R27:R26, 32
        MOVW    R21:R20, R9:R8
        MOVW    R19:R18, R27:R26
        MOVW    R17:R16, R25:R24
          CFI FunCall fpsub1271
        CALL    fpsub1271
        MOVW    R21:R20, R9:R8
        SUBI    R20, 240
        SBCI    R21, 255
        ADIW    R27:R26, 16
        MOVW    R19:R18, R27:R26
        MOVW    R17:R16, R25:R24
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpsub1271
        CALL    fpsub1271
        MOVW    R5:R4, R25:R24
        LDI     R16, 96
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
        MOVW    R27:R26, R25:R24
        ADIW    R27:R26, 32
        MOVW    R21:R20, R5:R4
        MOVW    R19:R18, R27:R26
        MOVW    R17:R16, R25:R24
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R21:R20, R5:R4
        SUBI    R20, 240
        SBCI    R21, 255
        ADIW    R27:R26, 16
        MOVW    R19:R18, R27:R26
        MOVW    R17:R16, R25:R24
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R21:R20, R25:R24
        MOVW    R19:R18, R29:R28
        SUBI    R18, 224
        SBCI    R19, 255
        MOVW    R17:R16, R9:R8
          CFI FunCall fp2mul1271
        RCALL   fp2mul1271
        MOVW    R21:R20, R7:R6
        MOVW    R19:R18, R29:R28
        SUBI    R18, 224
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
          CFI FunCall fp2mul1271
        RCALL   fp2mul1271
        ADIW    R25:R24, 32
        MOVW    R21:R20, R25:R24
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R5:R4
          CFI FunCall fp2mul1271
        RCALL   fp2mul1271
        ADIW    R29:R28, 63
          CFI CFA_Y Y+11
        ADIW    R29:R28, 1
          CFI CFA_Y Y+10
        RJMP    ?Subroutine3
          CFI EndBlock cfiBlock44
//  312 
//  313 
//  314 static __inline void mul_truncate(digit_t* s, uint64_t* C, digit_t* out)       
//  315 { // 256-bit multiplication with truncation for the scalar decomposition
//  316   // Outputs 64-bit value "out" = (uint64_t)((s*C) >> 256).
//  317     digit_t res[16];
//  318     
//  319     mp_mul(s, (digit_t *)C, res, 8);
//  320 
//  321     *out = res[8];    
//  322     *(out+1) = res[9];
//  323 }
//  324 
//  325 
//  326 void ecc_precomp(point_extproj_t P, point_extproj_precomp_t *T)
//  327 { // Generation of the precomputation table used by the variable-base scalar multiplication ecc_mul().
//  328   // Input: P = (X1,Y1,Z1,Ta,Tb), where T1 = Ta*Tb, corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates
//  329   // Output: table T containing 8 points: P, P+phi(P), P+psi(P), P+phi(P)+psi(P), P+psi(phi(P)), P+phi(P)+psi(phi(P)), P+psi(P)+psi(phi(P)), P+phi(P)+psi(P)+psi(phi(P))
//  330   // Precomputed points use the representation (X+Y,Y-X,2Z,2dT) corresponding to (X:Y:Z:T) in extended twisted Edwards coordinates
//  331 	point_extproj_precomp_t Q, R, S;
//  332 	point_extproj_t PP;
//  333 
//  334 	// Generating Q = phi(P) = (XQ+YQ,YQ-XQ,ZQ,TQ)
//  335 	ecccopy(P, PP);
//  336 	ecc_phi(PP);
//  337 	R1_to_R3(PP, Q);                       // Converting from (X,Y,Z,Ta,Tb) to (X+Y,Y-X,Z,T) 
//  338 
//  339     // Generating S = psi(Q) = (XS+YS,YS-XS,ZS,TS)
//  340 	ecc_psi(PP);
//  341 	R1_to_R3(PP, S);                       // Converting from (X,Y,Z,Ta,Tb) to (X+Y,Y-X,Z,T) 
//  342 
//  343 	// Generating T[0] = P = (XP+YP,YP-XP,2ZP,2dTP) 
//  344 	R1_to_R2(P, T[0]);                     // Converting from (X,Y,Z,Ta,Tb) to (X+Y,Y-X,2Z,2dT)
//  345 
//  346 	// Generating R = psi(P) = (XR+YR,YR-XR,ZR,TR)
//  347 	ecc_psi(P);
//  348 	R1_to_R3(P, R);                        // Converting from (X,Y,Z,Ta,Tb) to (X+Y,Y-X,Z,T)  
//  349 
//  350 	eccadd_core(T[0], Q, PP);              // T[1] = P+Q using the representations (X,Y,Z,Ta,Tb) <- (X+Y,Y-X,2Z,2dT) + (X+Y,Y-X,Z,T)
//  351 	R1_to_R2(PP, T[1]);                    // Converting from (X,Y,Z,Ta,Tb) to (X+Y,Y-X,2Z,2dT)
//  352 	eccadd_core(T[0], R, PP);              // T[2] = P+R 
//  353 	R1_to_R2(PP, T[2]);
//  354 	eccadd_core(T[1], R, PP);              // T[3] = P+Q+R 
//  355 	R1_to_R2(PP, T[3]);
//  356 	eccadd_core(T[0], S, PP);              // T[4] = P+S 
//  357 	R1_to_R2(PP, T[4]);
//  358 	eccadd_core(T[1], S, PP);              // T[5] = P+Q+S 
//  359 	R1_to_R2(PP, T[5]);
//  360 	eccadd_core(T[2], S, PP);              // T[6] = P+R+S 
//  361 	R1_to_R2(PP, T[6]);
//  362 	eccadd_core(T[3], S, PP);              // T[7] = P+Q+R+S 
//  363 	R1_to_R2(PP, T[7]);
//  364 }
//  365 
//  366 
//  367 void decompose(digit_t* k, digit_t* scalars)
//  368 { // Scalar decomposition for the variable-base scalar multiplication
//  369   // Input: scalar in the range [0, 2^256-1].
//  370   // Output: 4 64-bit sub-scalars. 
//  371     digit_t a1[2], a2[2], a3[2], a4[2];
//  372     digit_t temp[4], temp2[4], mask;
//  373 
//  374     mul_truncate(k, ell1, a1);
//  375     mul_truncate(k, ell2, a2);
//  376     mul_truncate(k, ell3, a3);
//  377     mul_truncate(k, ell4, a4);
//  378 
//  379     mp_mul(a1, (digit_t *)&b11, temp2, 2);
//  380     subtract(k, temp2, temp2, 2);
//  381     mp_mul(a2, (digit_t *)&b21, temp, 2);
//  382     subtract(temp2, temp, temp2, 2);
//  383     mp_mul(a3, (digit_t *)&b31, temp, 2);
//  384     subtract(temp2, temp, temp2, 2);
//  385     mp_mul(a4, (digit_t *)&b41, temp, 2);
//  386     subtract(temp2, temp, temp2, 2);
//  387     add(temp2, (digit_t *)&c1, temp, 2); //temp = (uint64_t)k[0] - (uint64_t)a1*b11 - (uint64_t)a2*b21 - (uint64_t)a3*b31 - (uint64_t)a4*b41 + c1;
//  388     
//  389     mask = ~(0 - (temp[0] & 1));         // If temp is even then mask = 0xFF...FF, else mask = 0
//  390     
//  391     temp2[0] = (mask & ((digit_t) b41));
//  392     temp2[1] = (mask & ((digit_t *) &b41)[1]);
//  393     add(temp, temp2, scalars, 2); //scalars[0] = temp + (mask & b41);
//  394 
//  395     mp_mul(a1, (digit_t *)&b12, temp2, 2);
//  396     add(temp2, a2, temp2, 2);
//  397     mp_mul(a3, (digit_t *)&b32, temp, 2);
//  398     subtract(temp2, temp, temp2, 2);
//  399     mp_mul(a4, (digit_t *)&b42, temp, 2);
//  400     subtract(temp2, temp, temp2, 2);
//  401     add(temp2, (digit_t *)&c2, temp2, 2);
//  402     temp[0] = (mask & ((digit_t) b42));
//  403     temp[1] = (mask & ((digit_t *) &b42)[1]);
//  404     add(temp2, temp, &scalars[2], 2); //scalars[1] = (uint64_t)a1*b12 + (uint64_t)a2 - (uint64_t)a3*b32 - (uint64_t)a4*b42 + c2 + (mask & b42);
//  405     
//  406     mp_mul(a3, (digit_t *)&b33, temp2, 2);
//  407     mp_mul(a1, (digit_t *)&b13, temp, 2);
//  408     subtract(temp2, temp, temp2, 2);
//  409     subtract(temp2, a2, temp2, 2);
//  410     mp_mul(a4, (digit_t *)&b43, temp, 2);
//  411     add(temp2, temp, temp2, 2);
//  412     add(temp2, (digit_t *)&c3, temp2, 2);
//  413     temp[0] = (mask & ((digit_t) b43));
//  414     temp[1] = (mask & ((digit_t *) &b43)[1]);   
//  415     subtract(temp2, temp, &scalars[4], 2); //scalars[2] = (uint64_t)a3*b33 - (uint64_t)a1*b13 - (uint64_t)a2 + (uint64_t)a4*b43 + c3 - (mask & b43);
//  416     
//  417     mp_mul(a1, (digit_t *)&b14, temp2, 2);
//  418     mp_mul(a2, (digit_t *)&b24, temp, 2);
//  419     subtract(temp2, temp, temp2, 2);
//  420     mp_mul(a3, (digit_t *)&b34, temp, 2);
//  421     subtract(temp2, temp, temp2, 2);
//  422     mp_mul(a4, (digit_t *)&b44, temp, 2);
//  423     add(temp2, temp, temp2, 2);
//  424     add(temp2, (digit_t *)&c4, temp2, 2);
//  425     temp[0] = (mask & ((digit_t) b44));
//  426     temp[1] = (mask & ((digit_t*) &b44)[1]);      
//  427     subtract(temp2, temp, &scalars[6], 2); //scalars[3] = (uint64_t)a1*b14 - (uint64_t)a2*b24 - (uint64_t)a3*b34 + (uint64_t)a4*b44 + c4 - (mask & b44);
//  428 
//  429 }
//  430 
//  431 
//  432 void recode(digit_t* scalars, unsigned int* digits, unsigned int* sign_masks)
//  433 { // Recoding sub-scalars for use in the variable-base scalar multiplication. See Algorithm 1 in "Efficient and Secure Methods for GLV-Based Scalar 
//  434   // Multiplication and their Implementation on GLV-GLS Curves (Extended Version)", A. Faz-Hernandez, P. Longa, and A.H. Sanchez, in Journal
//  435   // of Cryptographic Engineering, Vol. 5(1), 2015.
//  436   //Input: 8 32-bit sub-scalars passed through "scalars", which are obtained after calling decompose().
//  437   // Outputs: "digits" array with 65 nonzero entries. Each entry is in the range [0, 7], corresponding to one entry in the precomputed table.
//  438   //          "sign_masks" array with 65 entries storing the signs for their corresponding digits in "digits". 
//  439   //          Notation: if the corresponding digit > 0 then sign_mask = 0xFF...FF, else if digit < 0 then sign_mask = 0.
//  440     unsigned int i, bit, bit0, carry;
//  441     sign_masks[64] = (unsigned int)-1; 
//  442 
//  443     for (i = 0; i < 64; i++)
//  444     {
//  445         scalars[0] >>= 1;
//  446         scalars[0] = scalars[0] | ((scalars[1] & 1) << 31);
//  447         scalars[1] >>= 1;
//  448         bit0 = (unsigned int)scalars[0] & 1;
//  449         sign_masks[i] = 0 - bit0;
//  450 
//  451         bit = (unsigned int)scalars[2] & 1;
//  452         carry = (bit0 | bit) ^ bit0; 
//  453         scalars[2] = (scalars[2] >> 1) + (digit_t)carry;
//  454         scalars[2] = scalars[2] | ((scalars[3] & 1) << 31);
//  455         scalars[3] >>= 1;
//  456         digits[i] = bit;
//  457 
//  458         bit = (unsigned int)scalars[4] & 1;
//  459         carry = (bit0 | bit) ^ bit0; 
//  460         scalars[4] = (scalars[4] >> 1) + (digit_t)carry; 
//  461         scalars[4] = scalars[4] | ((scalars[5] & 1) << 31);
//  462         scalars[5] >>= 1;        
//  463         digits[i] += (bit << 1);
//  464 
//  465         bit = (unsigned int)scalars[6] & 1;
//  466         carry = (bit0 | bit) ^ bit0; 
//  467         scalars[6] = (scalars[6] >> 1) + (digit_t)carry; 
//  468         scalars[6] = scalars[6] | ((scalars[7] & 1) << 31);
//  469         scalars[7] >>= 1;        
//  470         digits[i] += (bit << 2);
//  471         
//  472     }
//  473     digits[64] = (unsigned int)(scalars[2] + (scalars[4] << 1) + (scalars[6] << 2));    
//  474     
//  475 }
//  476 
//  477 
//  478 void cofactor_clearing(point_extproj_t P)
//  479 { // Co-factor clearing
//  480   // Input: P = (X1,Y1,Z1,Ta,Tb), where T1 = Ta*Tb, corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates
//  481   // Output: P = 392*P = (Xfinal,Yfinal,Zfinal,Tafinal,Tbfinal), where Tfinal = Tafinal*Tbfinal,
//  482   //         corresponding to (Xfinal:Yfinal:Zfinal:Tfinal) in extended twisted Edwards coordinates
//  483       point_extproj_precomp_t Q;
//  484 
//  485       R1_to_R2(P, Q);                      // Converting from (X,Y,Z,Ta,Tb) to (X+Y,Y-X,2Z,2dT)
//  486       eccdouble(P);                        // P = 2*P using representations (X,Y,Z,Ta,Tb) <- 2*(X,Y,Z)
//  487       eccadd(Q, P);                        // P = P+Q using representations (X,Y,Z,Ta,Tb) <- (X,Y,Z,Ta,Tb) + (X+Y,Y-X,2Z,2dT)
//  488       eccdouble(P);
//  489       eccdouble(P);
//  490       eccdouble(P);
//  491       eccdouble(P);
//  492       eccadd(Q, P);
//  493       eccdouble(P);
//  494       eccdouble(P);
//  495       eccdouble(P);
//  496 }
//  497 
//  498 
//  499 bool ecc_mul(point_t P, digit_t* k, point_t Q, bool clear_cofactor)
//  500 { // Variable-base scalar multiplication Q = k*P using a 4-dimensional decomposition
//  501   // Inputs: scalar "k" in [0, 2^256-1],
//  502   //         point P = (x,y) in affine coordinates,
//  503   //         clear_cofactor = 1 (TRUE) or 0 (FALSE) whether cofactor clearing is required or not, respectively.
//  504   // Output: Q = k*P in affine coordinates (x,y).
//  505   // This function performs point validation and (if selected) cofactor clearing.
//  506       point_extproj_t R;
//  507       point_extproj_precomp_t S, Table[8];
//  508       digit_t scalars[2*NWORDS64_ORDER];
//  509       unsigned int digits[65], sign_masks[65];
//  510       int i;
//  511 
//  512       point_setup(P, R);                                        // Convert to representation (X,Y,1,Ta,Tb)
//  513       decompose(k, scalars);                         // Scalar decomposition
//  514 
//  515       if (ecc_point_validate(R) == false) {                     // Check if point lies on the curve
//  516               return false;
//  517       }
//  518 
//  519       if (clear_cofactor == true) {
//  520               cofactor_clearing(R);
//  521       }
//  522       recode(scalars, digits, sign_masks);                      // Scalar recoding
//  523       ecc_precomp(R, Table);                                    // Precomputation
//  524       table_lookup_1x8(Table, S, digits[64], sign_masks[64]);   // Extract initial point in (X+Y,Y-X,2Z,2dT) representation
//  525       R2_to_R4(S, R);                                           // Conversion to representation (2X,2Y,2Z)
//  526 
//  527       for (i = 63; i >= 0; i--)
//  528       {
//  529               table_lookup_1x8(Table, S, digits[i], sign_masks[i]); // Extract point S in (X+Y,Y-X,2Z,2dT) representation
//  530               eccdouble(R);                                         // P = 2*P using representations (X,Y,Z,Ta,Tb) <- 2*(X,Y,Z)
//  531               eccadd(S, R);                                         // P = P+S using representations (X,Y,Z,Ta,Tb) <- (X,Y,Z,Ta,Tb) + (X+Y,Y-X,2Z,2dT)
//  532       }
//  533       eccnorm(R, Q);                                            // Conversion to affine coordinates (x,y) and modular correction. 
//  534 
//  535   return true;
//  536 }
//  537 
//  538 #endif
//  539 
//  540 
//  541 void eccset(point_t P)
//  542 { // Set generator  
//  543   // Output: P = (x,y)
//  544 
//  545       fp2copy1271((felm_t*)&GENERATOR_x, P->x);    // X1
//  546       fp2copy1271((felm_t*)&GENERATOR_y, P->y);    // Y1
//  547 }
//  548 
//  549 
//  550 void eccnorm(point_extproj_t P, point_t Q)
//  551 { // Normalize a projective point (X1:Y1:Z1), including full reduction
//  552   // Input: P = (X1:Y1:Z1) in twisted Edwards coordinates    
//  553   // Output: Q = (X1/Z1,Y1/Z1), corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates
//  554     
//  555     fp2inv1271(P->z);                      // Z1 = Z1^-1
//  556     fp2mul1271(P->x, P->z, Q->x);          // X1 = X1/Z1
//  557     fp2mul1271(P->y, P->z, Q->y);          // Y1 = Y1/Z1
//  558     mod1271(Q->x[0]); mod1271(Q->x[1]); 
//  559     mod1271(Q->y[0]); mod1271(Q->y[1]); 
//  560 }
//  561 
//  562 

        RSEG FARCODE:CODE:NOROOT(1)
//  563 void R1_to_R2(point_extproj_t P, point_extproj_precomp_t Q)
R1_to_R2:
          CFI Block cfiBlock45 Using cfiCommon0
          CFI Function R1_to_R2
//  564 { // Conversion from representation (X,Y,Z,Ta,Tb) to (X+Y,Y-X,2Z,2dT), where T = Ta*Tb
        ST      -Y, R9
          CFI R9 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R8
          CFI R8 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R7
          CFI R7 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        ST      -Y, R6
          CFI R6 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        ST      -Y, R5
          CFI R5 Frame(CFA_Y, -5)
          CFI CFA_Y Y+5
        ST      -Y, R4
          CFI R4 Frame(CFA_Y, -6)
          CFI CFA_Y Y+6
        ST      -Y, R27
          CFI R27 Frame(CFA_Y, -7)
          CFI CFA_Y Y+7
        ST      -Y, R26
          CFI R26 Frame(CFA_Y, -8)
          CFI CFA_Y Y+8
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -9)
          CFI CFA_Y Y+9
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -10)
          CFI CFA_Y Y+10
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        REQUIRE ?Register_R6_is_cg_reg
        REQUIRE ?Register_R7_is_cg_reg
        REQUIRE ?Register_R8_is_cg_reg
        REQUIRE ?Register_R9_is_cg_reg
        MOVW    R25:R24, R17:R16
        MOVW    R27:R26, R19:R18
//  565   // Input:  P = (X1,Y1,Z1,Ta,Tb), where T1 = Ta*Tb, corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates
//  566   // Output: Q = (X1+Y1,Y1-X1,2Z1,2dT1) corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates
//  567 
//  568     fp2add1271(P->ta, P->ta, Q->t2);                  // T = 2*Ta
        MOVW    R5:R4, R19:R18
        LDI     R16, 96
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
        MOVW    R7:R6, R25:R24
        LDI     R16, 96
        ADD     R6, R16
        LDI     R16, 0
        ADC     R7, R16
        MOVW    R21:R20, R5:R4
        MOVW    R19:R18, R7:R6
        MOVW    R17:R16, R7:R6
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R21:R20, R5:R4
        SUBI    R20, 240
        SBCI    R21, 255
        MOVW    R19:R18, R7:R6
        SUBI    R18, 240
        SBCI    R19, 255
        LDI     R16, 16
        ADD     R6, R16
        LDI     R16, 0
        ADC     R7, R16
        MOVW    R17:R16, R7:R6
          CFI FunCall fpadd1271
        CALL    fpadd1271
//  569     fp2add1271(P->x, P->y, Q->xy);                    // QX = X+Y
        MOVW    R7:R6, R25:R24
        LDI     R16, 32
        ADD     R6, R16
        LDI     R16, 0
        ADC     R7, R16
        MOVW    R21:R20, R27:R26
        MOVW    R19:R18, R7:R6
        MOVW    R17:R16, R25:R24
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R21:R20, R27:R26
        SUBI    R20, 240
        SBCI    R21, 255
        LDI     R16, 16
        ADD     R6, R16
        LDI     R16, 0
        ADC     R7, R16
        MOVW    R19:R18, R7:R6
        MOVW    R17:R16, R25:R24
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpadd1271
        CALL    fpadd1271
//  570     fp2sub1271(P->y, P->x, Q->yx);                    // QY = Y-X 
        MOVW    R9:R8, R27:R26
        LDI     R16, 32
        ADD     R8, R16
        LDI     R16, 0
        ADC     R9, R16
        MOVW    R7:R6, R25:R24
        LDI     R16, 32
        ADD     R6, R16
        LDI     R16, 0
        ADC     R7, R16
        MOVW    R21:R20, R9:R8
        MOVW    R19:R18, R25:R24
        MOVW    R17:R16, R7:R6
          CFI FunCall fpsub1271
        CALL    fpsub1271
        LDI     R16, 16
        ADD     R8, R16
        LDI     R16, 0
        ADC     R9, R16
        MOVW    R21:R20, R9:R8
        MOVW    R19:R18, R25:R24
        SUBI    R18, 240
        SBCI    R19, 255
        LDI     R16, 16
        ADD     R6, R16
        LDI     R16, 0
        ADC     R7, R16
        MOVW    R17:R16, R7:R6
          CFI FunCall fpsub1271
        CALL    fpsub1271
//  571     fp2mul1271(Q->t2, P->tb, Q->t2);                  // T = 2*T
        MOVW    R21:R20, R5:R4
        MOVW    R19:R18, R25:R24
        SUBI    R18, 128
        SBCI    R19, 255
        MOVW    R17:R16, R5:R4
          CFI FunCall fp2mul1271
        RCALL   fp2mul1271
//  572     fp2add1271(P->z, P->z, Q->z2);                    // QZ = 2*Z
        SUBI    R26, 192
        SBCI    R27, 255
        SUBI    R24, 192
        SBCI    R25, 255
        MOVW    R21:R20, R27:R26
        MOVW    R19:R18, R25:R24
        MOVW    R17:R16, R25:R24
          CFI FunCall fpadd1271
        CALL    fpadd1271
        ADIW    R27:R26, 16
        MOVW    R21:R20, R27:R26
        MOVW    R19:R18, R25:R24
        SUBI    R18, 240
        SBCI    R19, 255
        ADIW    R25:R24, 16
        MOVW    R17:R16, R25:R24
          CFI FunCall fpadd1271
        CALL    fpadd1271
//  573     fp2mul1271(Q->t2, (felm_t*)&PARAMETER_d, Q->t2);  // QT = 2d*T
        MOVW    R21:R20, R5:R4
        LDI     R18, LOW(PARAMETER_d)
        LDI     R19, (PARAMETER_d) >> 8
        MOVW    R17:R16, R5:R4
          CFI FunCall fp2mul1271
        RCALL   fp2mul1271
//  574 }
        RJMP    ?Subroutine3
          CFI EndBlock cfiBlock45

        RSEG FARCODE:CODE:NOROOT(1)
R1_to_R3:
          CFI Block cfiBlock46 Using cfiCommon0
          CFI Function R1_to_R3
        ST      -Y, R7
          CFI R7 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R6
          CFI R6 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R5
          CFI R5 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        ST      -Y, R4
          CFI R4 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        ST      -Y, R27
          CFI R27 Frame(CFA_Y, -5)
          CFI CFA_Y Y+5
        ST      -Y, R26
          CFI R26 Frame(CFA_Y, -6)
          CFI CFA_Y Y+6
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -7)
          CFI CFA_Y Y+7
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -8)
          CFI CFA_Y Y+8
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        REQUIRE ?Register_R6_is_cg_reg
        REQUIRE ?Register_R7_is_cg_reg
        MOVW    R25:R24, R17:R16
        MOVW    R27:R26, R19:R18
        MOVW    R5:R4, R17:R16
        LDI     R16, 32
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
        MOVW    R21:R20, R19:R18
        MOVW    R19:R18, R5:R4
        MOV     R16, R24
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R21:R20, R27:R26
        SUBI    R20, 240
        SBCI    R21, 255
        LDI     R16, 16
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
        MOVW    R19:R18, R5:R4
        MOVW    R17:R16, R25:R24
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R7:R6, R27:R26
        LDI     R16, 32
        ADD     R6, R16
        LDI     R16, 0
        ADC     R7, R16
        MOVW    R5:R4, R25:R24
        LDI     R16, 32
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
        MOVW    R21:R20, R7:R6
        MOVW    R19:R18, R25:R24
        MOVW    R17:R16, R5:R4
          CFI FunCall fpsub1271
        CALL    fpsub1271
        LDI     R16, 16
        ADD     R6, R16
        LDI     R16, 0
        ADC     R7, R16
        MOVW    R21:R20, R7:R6
        MOVW    R19:R18, R25:R24
        SUBI    R18, 240
        SBCI    R19, 255
        LDI     R16, 16
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
        MOVW    R17:R16, R5:R4
          CFI FunCall fpsub1271
        CALL    fpsub1271
        MOVW    R21:R20, R27:R26
        SUBI    R20, 160
        SBCI    R21, 255
        MOVW    R19:R18, R25:R24
        SUBI    R18, 128
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
        SUBI    R16, 160
        SBCI    R17, 255
          CFI FunCall fp2mul1271
        RCALL   fp2mul1271
        JMP     ?Subroutine0
          CFI EndBlock cfiBlock46

        RSEG FARCODE:CODE:NOROOT(1)
ecc_precomp:
          CFI Block cfiBlock47 Using cfiCommon0
          CFI Function ecc_precomp
        ST      -Y, R7
          CFI R7 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R6
          CFI R6 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R5
          CFI R5 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        ST      -Y, R4
          CFI R4 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        ST      -Y, R27
          CFI R27 Frame(CFA_Y, -5)
          CFI CFA_Y Y+5
        ST      -Y, R26
          CFI R26 Frame(CFA_Y, -6)
          CFI CFA_Y Y+6
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -7)
          CFI CFA_Y Y+7
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -8)
          CFI CFA_Y Y+8
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        REQUIRE ?Register_R6_is_cg_reg
        REQUIRE ?Register_R7_is_cg_reg
        SBIW    R29:R28, 32
          CFI CFA_Y Y+40
        SUBI    R29, 2
          CFI CFA_Y Y+552
        MOVW    R25:R24, R17:R16
        MOVW    R27:R26, R19:R18
        MOVW    R19:R18, R29:R28
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R5:R4, R25:R24
        LDI     R16, 32
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
        MOVW    R19:R18, R29:R28
        SUBI    R18, 224
        SBCI    R19, 255
        MOVW    R17:R16, R5:R4
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 208
        SBCI    R19, 255
        LDI     R16, 16
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
        MOVW    R17:R16, R5:R4
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R5:R4, R25:R24
        LDI     R16, 64
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
        MOVW    R19:R18, R29:R28
        SUBI    R18, 192
        SBCI    R19, 255
        MOVW    R17:R16, R5:R4
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 176
        SBCI    R19, 255
        LDI     R16, 16
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
        MOVW    R17:R16, R5:R4
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R5:R4, R25:R24
        LDI     R16, 96
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
        MOVW    R19:R18, R29:R28
        SUBI    R18, 160
        SBCI    R19, 255
        MOVW    R17:R16, R5:R4
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 144
        SBCI    R19, 255
        LDI     R16, 16
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
        MOVW    R17:R16, R5:R4
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R5:R4, R25:R24
        LDI     R16, 128
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
        MOVW    R19:R18, R29:R28
        SUBI    R18, 128
        SBCI    R19, 255
        MOVW    R17:R16, R5:R4
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 112
        SBCI    R19, 255
        LDI     R16, 16
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
        MOVW    R17:R16, R5:R4
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R17:R16, R29:R28
          CFI FunCall ecc_tau
        RCALL   ecc_tau
        MOVW    R17:R16, R29:R28
          CFI FunCall ecc_delphidel
        RCALL   ecc_delphidel
        MOVW    R17:R16, R29:R28
          CFI FunCall ecc_tau_dual
        RCALL   ecc_tau_dual
        MOVW    R19:R18, R29:R28
        SUBI    R18, 96
        SBCI    R19, 254
        MOVW    R17:R16, R29:R28
          CFI FunCall R1_to_R3
        RCALL   R1_to_R3
        MOVW    R17:R16, R29:R28
          CFI FunCall ecc_tau
        RCALL   ecc_tau
        MOVW    R17:R16, R29:R28
          CFI FunCall ecc_delpsidel
        RCALL   ecc_delpsidel
        MOVW    R17:R16, R29:R28
          CFI FunCall ecc_tau_dual
        RCALL   ecc_tau_dual
        MOVW    R19:R18, R29:R28
        SUBI    R18, 96
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
          CFI FunCall R1_to_R3
        RCALL   R1_to_R3
        MOVW    R19:R18, R27:R26
        MOVW    R17:R16, R25:R24
          CFI FunCall R1_to_R2
        RCALL   R1_to_R2
        MOVW    R17:R16, R25:R24
          CFI FunCall ecc_tau
        RCALL   ecc_tau
        MOVW    R17:R16, R25:R24
          CFI FunCall ecc_delpsidel
        RCALL   ecc_delpsidel
        MOVW    R17:R16, R25:R24
          CFI FunCall ecc_tau_dual
        RCALL   ecc_tau_dual
        MOVW    R19:R18, R29:R28
        SUBI    R18, 224
        SBCI    R19, 254
        MOVW    R17:R16, R25:R24
          CFI FunCall R1_to_R3
        RCALL   R1_to_R3
        MOVW    R21:R20, R29:R28
        MOVW    R19:R18, R29:R28
        SUBI    R18, 96
        SBCI    R19, 254
        MOVW    R17:R16, R27:R26
          CFI FunCall eccadd_core
        RCALL   eccadd_core
        MOVW    R25:R24, R27:R26
        SUBI    R24, 128
        SBCI    R25, 255
        MOVW    R19:R18, R25:R24
        MOVW    R17:R16, R29:R28
          CFI FunCall R1_to_R2
        RCALL   R1_to_R2
        MOVW    R21:R20, R29:R28
        MOVW    R19:R18, R29:R28
        SUBI    R18, 224
        SBCI    R19, 254
        MOVW    R17:R16, R27:R26
          CFI FunCall eccadd_core
        RCALL   eccadd_core
        MOVW    R7:R6, R27:R26
        INC     R7
        MOVW    R19:R18, R7:R6
        MOVW    R17:R16, R29:R28
          CFI FunCall R1_to_R2
        RCALL   R1_to_R2
        MOVW    R21:R20, R29:R28
        MOVW    R19:R18, R29:R28
        SUBI    R18, 224
        SBCI    R19, 254
        MOVW    R17:R16, R25:R24
          CFI FunCall eccadd_core
        RCALL   eccadd_core
        MOVW    R5:R4, R27:R26
        LDI     R16, 128
        ADD     R4, R16
        LDI     R16, 1
        ADC     R5, R16
        MOVW    R19:R18, R5:R4
        MOVW    R17:R16, R29:R28
          CFI FunCall R1_to_R2
        RCALL   R1_to_R2
        MOVW    R21:R20, R29:R28
        MOVW    R19:R18, R29:R28
        SUBI    R18, 96
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
          CFI FunCall eccadd_core
        RCALL   eccadd_core
        MOVW    R19:R18, R27:R26
        SUBI    R19, 254
        MOVW    R17:R16, R29:R28
          CFI FunCall R1_to_R2
        RCALL   R1_to_R2
        MOVW    R21:R20, R29:R28
        MOVW    R19:R18, R29:R28
        SUBI    R18, 96
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
          CFI FunCall eccadd_core
        RCALL   eccadd_core
        MOVW    R19:R18, R27:R26
        SUBI    R18, 128
        SBCI    R19, 253
        MOVW    R17:R16, R29:R28
          CFI FunCall R1_to_R2
        RCALL   R1_to_R2
        MOVW    R21:R20, R29:R28
        MOVW    R19:R18, R29:R28
        SUBI    R18, 96
        SBCI    R19, 255
        MOVW    R17:R16, R7:R6
          CFI FunCall eccadd_core
        RCALL   eccadd_core
        MOVW    R19:R18, R27:R26
        SUBI    R19, 253
        MOVW    R17:R16, R29:R28
          CFI FunCall R1_to_R2
        RCALL   R1_to_R2
        MOVW    R21:R20, R29:R28
        MOVW    R19:R18, R29:R28
        SUBI    R18, 96
        SBCI    R19, 255
        MOVW    R17:R16, R5:R4
          CFI FunCall eccadd_core
        RCALL   eccadd_core
        SUBI    R26, 128
        SBCI    R27, 252
        MOVW    R19:R18, R27:R26
        MOVW    R17:R16, R29:R28
          CFI FunCall R1_to_R2
        RCALL   R1_to_R2
        ADIW    R29:R28, 32
          CFI CFA_Y Y+520
        SUBI    R29, 254
          CFI CFA_Y Y+8
        JMP     ??Subroutine12_0
          CFI EndBlock cfiBlock47

        RSEG FARCODE:CODE:NOROOT(1)
decompose:
          CFI Block cfiBlock48 Using cfiCommon0
          CFI Function decompose
        ST      -Y, R5
          CFI R5 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R4
          CFI R4 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R27
          CFI R27 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        ST      -Y, R26
          CFI R26 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -5)
          CFI CFA_Y Y+5
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -6)
          CFI CFA_Y Y+6
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        SBIW    R29:R28, 63
          CFI CFA_Y Y+69
        SBIW    R29:R28, 63
          CFI CFA_Y Y+132
        SBIW    R29:R28, 2
          CFI CFA_Y Y+134
        MOVW    R25:R24, R17:R16
        MOVW    R5:R4, R19:R18
        LDI     R22, 8
        LDI     R23, 0
        MOVW    R21:R20, R29:R28
        SUBI    R20, 192
        SBCI    R21, 255
        LDI     R18, LOW((b41 + 144))
        LDI     R19, HIGH((b41 + 144))
          CFI FunCall mp_mul
        CALL    mp_mul
        MOVW    R31:R30, R29:R28
        ADIW    R31:R30, 63
        LDD     R16, Z+33
        LDD     R17, Z+34
        LDD     R18, Z+35
        LDD     R19, Z+36
        STD     Y+56, R16
        STD     Y+57, R17
        STD     Y+58, R18
        STD     Y+59, R19
        MOVW    R31:R30, R29:R28
        ADIW    R31:R30, 63
        LDD     R16, Z+37
        LDD     R17, Z+38
        LDD     R18, Z+39
        LDD     R19, Z+40
        STD     Y+60, R16
        STD     Y+61, R17
        STD     Y+62, R18
        STD     Y+63, R19
        LDI     R22, 8
        LDI     R23, 0
        MOVW    R21:R20, R29:R28
        SUBI    R20, 192
        SBCI    R21, 255
        LDI     R18, LOW((b41 + 176))
        LDI     R19, HIGH((b41 + 176))
        MOVW    R17:R16, R25:R24
          CFI FunCall mp_mul
        CALL    mp_mul
        MOVW    R31:R30, R29:R28
        ADIW    R31:R30, 63
        LDD     R16, Z+33
        LDD     R17, Z+34
        LDD     R18, Z+35
        LDD     R19, Z+36
        STD     Y+48, R16
        STD     Y+49, R17
        STD     Y+50, R18
        STD     Y+51, R19
        MOVW    R31:R30, R29:R28
        ADIW    R31:R30, 63
        LDD     R16, Z+37
        LDD     R17, Z+38
        LDD     R18, Z+39
        LDD     R19, Z+40
        STD     Y+52, R16
        STD     Y+53, R17
        STD     Y+54, R18
        STD     Y+55, R19
        LDI     R22, 8
        LDI     R23, 0
        MOVW    R21:R20, R29:R28
        SUBI    R20, 192
        SBCI    R21, 255
        LDI     R18, LOW((b41 + 208))
        LDI     R19, HIGH((b41 + 208))
        MOVW    R17:R16, R25:R24
          CFI FunCall mp_mul
        CALL    mp_mul
        MOVW    R31:R30, R29:R28
        ADIW    R31:R30, 63
        LDD     R16, Z+33
        LDD     R17, Z+34
        LDD     R18, Z+35
        LDD     R19, Z+36
        STD     Y+40, R16
        STD     Y+41, R17
        STD     Y+42, R18
        STD     Y+43, R19
        MOVW    R31:R30, R29:R28
        ADIW    R31:R30, 63
        LDD     R16, Z+37
        LDD     R17, Z+38
        LDD     R18, Z+39
        LDD     R19, Z+40
        STD     Y+44, R16
        STD     Y+45, R17
        STD     Y+46, R18
        STD     Y+47, R19
        LDI     R22, 8
        LDI     R23, 0
        MOVW    R21:R20, R29:R28
        SUBI    R20, 192
        SBCI    R21, 255
        LDI     R18, LOW((b41 + 240))
        LDI     R19, HIGH((b41 + 240))
        MOVW    R17:R16, R25:R24
          CFI FunCall mp_mul
        CALL    mp_mul
        MOVW    R31:R30, R29:R28
        ADIW    R31:R30, 63
        LDD     R16, Z+33
        LDD     R17, Z+34
        LDD     R18, Z+35
        LDD     R19, Z+36
        STD     Y+32, R16
        STD     Y+33, R17
        STD     Y+34, R18
        STD     Y+35, R19
        MOVW    R31:R30, R29:R28
        ADIW    R31:R30, 63
        LDD     R16, Z+37
        LDD     R17, Z+38
        LDD     R18, Z+39
        LDD     R19, Z+40
        STD     Y+36, R16
        STD     Y+37, R17
        STD     Y+38, R18
        STD     Y+39, R19
        LDI     R22, 2
        LDI     R23, 0
        MOVW    R21:R20, R29:R28
        LDI     R18, LOW((b41 + 64))
        LDI     R19, HIGH((b41 + 64))
        MOVW    R17:R16, R29:R28
        SUBI    R16, 200
        SBCI    R17, 255
          CFI FunCall mp_mul
        CALL    mp_mul
        LDI     R22, 2
        LDI     R23, 0
        MOVW    R21:R20, R29:R28
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R25:R24
          CFI FunCall mp_sub
        CALL    mp_sub
        LDI     R22, 2
        LDI     R23, 0
        MOVW    R21:R20, R29:R28
        SUBI    R20, 240
        SBCI    R21, 255
        LDI     R18, LOW((b41 + 96))
        LDI     R19, HIGH((b41 + 96))
        MOVW    R17:R16, R29:R28
        SUBI    R16, 208
        SBCI    R17, 255
          CFI FunCall mp_mul
        CALL    mp_mul
        LDI     R22, 2
        LDI     R23, 0
        MOVW    R21:R20, R29:R28
        MOVW    R19:R18, R29:R28
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
          CFI FunCall mp_sub
        CALL    mp_sub
        LDI     R22, 2
        LDI     R23, 0
        MOVW    R21:R20, R29:R28
        SUBI    R20, 240
        SBCI    R21, 255
        LDI     R18, LOW((b41 + 112))
        LDI     R19, HIGH((b41 + 112))
        MOVW    R17:R16, R29:R28
        SUBI    R16, 216
        SBCI    R17, 255
          CFI FunCall mp_mul
        CALL    mp_mul
        LDI     R22, 2
        LDI     R23, 0
        MOVW    R21:R20, R29:R28
        MOVW    R19:R18, R29:R28
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
          CFI FunCall mp_sub
        CALL    mp_sub
        LDI     R22, 2
        LDI     R23, 0
        MOVW    R21:R20, R29:R28
        SUBI    R20, 240
        SBCI    R21, 255
        LDI     R18, LOW(b41)
        LDI     R19, (b41) >> 8
        MOVW    R17:R16, R29:R28
        SUBI    R16, 224
        SBCI    R17, 255
          CFI FunCall mp_mul
        CALL    mp_mul
        LDI     R22, 2
        LDI     R23, 0
        MOVW    R21:R20, R29:R28
        MOVW    R19:R18, R29:R28
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
          CFI FunCall mp_sub
        CALL    mp_sub
        LDI     R22, 2
        LDI     R23, 0
        MOVW    R21:R20, R29:R28
        SUBI    R20, 240
        SBCI    R21, 255
        LDI     R18, LOW((b41 + 32))
        LDI     R19, HIGH((b41 + 32))
        MOVW    R17:R16, R29:R28
          CFI FunCall mp_add
        CALL    mp_add
        LDD     R24, Y+16
        ANDI    R24, 0x01
        LDI     R25, 255
        LDI     R26, 255
        LDI     R27, 255
        NEG     R24
        SBCI    R25, 255
        SBCI    R26, 255
        SBCI    R27, 255
        COM     R24
        COM     R25
        COM     R26
        COM     R27
        LDS     R16, b41
        LDS     R17, (b41 + 1)
        LDS     R18, (b41 + 2)
        LDS     R19, (b41 + 3)
        MOVW    R21:R20, R25:R24
        MOVW    R23:R22, R27:R26
        AND     R20, R16
        AND     R21, R17
        AND     R22, R18
        AND     R23, R19
        ST      Y, R20
        STD     Y+1, R21
        STD     Y+2, R22
        STD     Y+3, R23
        LDS     R16, (b41 + 4)
        LDS     R17, (b41 + 5)
        LDS     R18, (b41 + 6)
        LDS     R19, (b41 + 7)
        MOVW    R21:R20, R25:R24
        MOVW    R23:R22, R27:R26
        AND     R20, R16
        AND     R21, R17
        AND     R22, R18
        AND     R23, R19
        STD     Y+4, R20
        STD     Y+5, R21
        STD     Y+6, R22
        STD     Y+7, R23
        LDI     R22, 2
        LDI     R23, 0
        MOVW    R21:R20, R5:R4
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R29:R28
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall mp_add
        CALL    mp_add
        LDI     R22, 2
        LDI     R23, 0
        MOVW    R21:R20, R29:R28
        LDI     R18, LOW((b41 + 72))
        LDI     R19, HIGH((b41 + 72))
        MOVW    R17:R16, R29:R28
        SUBI    R16, 200
        SBCI    R17, 255
          CFI FunCall mp_mul
        CALL    mp_mul
        LDI     R22, 2
        LDI     R23, 0
        MOVW    R21:R20, R29:R28
        MOVW    R19:R18, R29:R28
        SUBI    R18, 208
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
          CFI FunCall mp_add
        CALL    mp_add
        LDI     R22, 2
        LDI     R23, 0
        MOVW    R21:R20, R29:R28
        SUBI    R20, 240
        SBCI    R21, 255
        LDI     R18, LOW((b41 + 120))
        LDI     R19, HIGH((b41 + 120))
        MOVW    R17:R16, R29:R28
        SUBI    R16, 216
        SBCI    R17, 255
          CFI FunCall mp_mul
        CALL    mp_mul
        LDI     R22, 2
        LDI     R23, 0
        MOVW    R21:R20, R29:R28
        MOVW    R19:R18, R29:R28
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
          CFI FunCall mp_sub
        CALL    mp_sub
        LDI     R22, 2
        LDI     R23, 0
        MOVW    R21:R20, R29:R28
        SUBI    R20, 240
        SBCI    R21, 255
        LDI     R18, LOW((b41 + 8))
        LDI     R19, HIGH((b41 + 8))
        MOVW    R17:R16, R29:R28
        SUBI    R16, 224
        SBCI    R17, 255
          CFI FunCall mp_mul
        CALL    mp_mul
        LDI     R22, 2
        LDI     R23, 0
        MOVW    R21:R20, R29:R28
        MOVW    R19:R18, R29:R28
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
          CFI FunCall mp_sub
        CALL    mp_sub
        LDI     R22, 2
        LDI     R23, 0
        MOVW    R21:R20, R29:R28
        LDI     R18, LOW((b41 + 40))
        LDI     R19, HIGH((b41 + 40))
        MOVW    R17:R16, R29:R28
          CFI FunCall mp_add
        CALL    mp_add
        LDS     R16, (b41 + 8)
        LDS     R17, (b41 + 9)
        LDS     R18, (b41 + 10)
        LDS     R19, (b41 + 11)
        MOVW    R21:R20, R25:R24
        MOVW    R23:R22, R27:R26
        AND     R20, R16
        AND     R21, R17
        AND     R22, R18
        AND     R23, R19
        STD     Y+16, R20
        STD     Y+17, R21
        STD     Y+18, R22
        STD     Y+19, R23
        LDS     R16, (b41 + 12)
        LDS     R17, (b41 + 13)
        LDS     R18, (b41 + 14)
        LDS     R19, (b41 + 15)
        MOVW    R21:R20, R25:R24
        MOVW    R23:R22, R27:R26
        AND     R20, R16
        AND     R21, R17
        AND     R22, R18
        AND     R23, R19
        STD     Y+20, R20
        STD     Y+21, R21
        STD     Y+22, R22
        STD     Y+23, R23
        LDI     R22, 2
        LDI     R23, 0
        MOVW    R21:R20, R5:R4
        SUBI    R20, 248
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
          CFI FunCall mp_add
        CALL    mp_add
        LDI     R22, 2
        LDI     R23, 0
        MOVW    R21:R20, R29:R28
        LDI     R18, LOW((b41 + 128))
        LDI     R19, HIGH((b41 + 128))
        MOVW    R17:R16, R29:R28
        SUBI    R16, 216
        SBCI    R17, 255
          CFI FunCall mp_mul
        CALL    mp_mul
        LDI     R22, 2
        LDI     R23, 0
        MOVW    R21:R20, R29:R28
        SUBI    R20, 240
        SBCI    R21, 255
        LDI     R18, LOW((b41 + 80))
        LDI     R19, HIGH((b41 + 80))
        MOVW    R17:R16, R29:R28
        SUBI    R16, 200
        SBCI    R17, 255
          CFI FunCall mp_mul
        CALL    mp_mul
        LDI     R22, 2
        LDI     R23, 0
        MOVW    R21:R20, R29:R28
        MOVW    R19:R18, R29:R28
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
          CFI FunCall mp_sub
        CALL    mp_sub
        LDI     R22, 2
        LDI     R23, 0
        MOVW    R21:R20, R29:R28
        MOVW    R19:R18, R29:R28
        SUBI    R18, 208
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
          CFI FunCall mp_sub
        CALL    mp_sub
        LDI     R22, 2
        LDI     R23, 0
        MOVW    R21:R20, R29:R28
        SUBI    R20, 240
        SBCI    R21, 255
        LDI     R18, LOW((b41 + 16))
        LDI     R19, HIGH((b41 + 16))
        MOVW    R17:R16, R29:R28
        SUBI    R16, 224
        SBCI    R17, 255
          CFI FunCall mp_mul
        CALL    mp_mul
        LDI     R22, 2
        LDI     R23, 0
        MOVW    R21:R20, R29:R28
        MOVW    R19:R18, R29:R28
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
          CFI FunCall mp_add
        CALL    mp_add
        LDI     R22, 2
        LDI     R23, 0
        MOVW    R21:R20, R29:R28
        LDI     R18, LOW((b41 + 48))
        LDI     R19, HIGH((b41 + 48))
        MOVW    R17:R16, R29:R28
          CFI FunCall mp_add
        CALL    mp_add
        LDS     R16, (b41 + 16)
        LDS     R17, (b41 + 17)
        LDS     R18, (b41 + 18)
        LDS     R19, (b41 + 19)
        MOVW    R21:R20, R25:R24
        MOVW    R23:R22, R27:R26
        AND     R20, R16
        AND     R21, R17
        AND     R22, R18
        AND     R23, R19
        STD     Y+16, R20
        STD     Y+17, R21
        STD     Y+18, R22
        STD     Y+19, R23
        LDS     R16, (b41 + 20)
        LDS     R17, (b41 + 21)
        LDS     R18, (b41 + 22)
        LDS     R19, (b41 + 23)
        MOVW    R21:R20, R25:R24
        MOVW    R23:R22, R27:R26
        AND     R20, R16
        AND     R21, R17
        AND     R22, R18
        AND     R23, R19
        STD     Y+20, R20
        STD     Y+21, R21
        STD     Y+22, R22
        STD     Y+23, R23
        LDI     R22, 2
        LDI     R23, 0
        MOVW    R21:R20, R5:R4
        SUBI    R20, 240
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
          CFI FunCall mp_sub
        CALL    mp_sub
        LDI     R22, 2
        LDI     R23, 0
        MOVW    R21:R20, R29:R28
        LDI     R18, LOW((b41 + 88))
        LDI     R19, HIGH((b41 + 88))
        MOVW    R17:R16, R29:R28
        SUBI    R16, 200
        SBCI    R17, 255
          CFI FunCall mp_mul
        CALL    mp_mul
        LDI     R22, 2
        LDI     R23, 0
        MOVW    R21:R20, R29:R28
        SUBI    R20, 240
        SBCI    R21, 255
        LDI     R18, LOW((b41 + 104))
        LDI     R19, HIGH((b41 + 104))
        MOVW    R17:R16, R29:R28
        SUBI    R16, 208
        SBCI    R17, 255
          CFI FunCall mp_mul
        CALL    mp_mul
        LDI     R22, 2
        LDI     R23, 0
        MOVW    R21:R20, R29:R28
        MOVW    R19:R18, R29:R28
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
          CFI FunCall mp_sub
        CALL    mp_sub
        LDI     R22, 2
        LDI     R23, 0
        MOVW    R21:R20, R29:R28
        SUBI    R20, 240
        SBCI    R21, 255
        LDI     R18, LOW((b41 + 136))
        LDI     R19, HIGH((b41 + 136))
        MOVW    R17:R16, R29:R28
        SUBI    R16, 216
        SBCI    R17, 255
          CFI FunCall mp_mul
        CALL    mp_mul
        LDI     R22, 2
        LDI     R23, 0
        MOVW    R21:R20, R29:R28
        MOVW    R19:R18, R29:R28
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
          CFI FunCall mp_sub
        CALL    mp_sub
        LDI     R22, 2
        LDI     R23, 0
        MOVW    R21:R20, R29:R28
        SUBI    R20, 240
        SBCI    R21, 255
        LDI     R18, LOW((b41 + 24))
        LDI     R19, HIGH((b41 + 24))
        MOVW    R17:R16, R29:R28
        SUBI    R16, 224
        SBCI    R17, 255
          CFI FunCall mp_mul
        CALL    mp_mul
        LDI     R22, 2
        LDI     R23, 0
        MOVW    R21:R20, R29:R28
        MOVW    R19:R18, R29:R28
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
          CFI FunCall mp_add
        CALL    mp_add
        LDI     R22, 2
        LDI     R23, 0
        MOVW    R21:R20, R29:R28
        LDI     R18, LOW((b41 + 56))
        LDI     R19, HIGH((b41 + 56))
        MOVW    R17:R16, R29:R28
          CFI FunCall mp_add
        CALL    mp_add
        LDS     R16, (b41 + 24)
        LDS     R17, (b41 + 25)
        LDS     R18, (b41 + 26)
        LDS     R19, (b41 + 27)
        MOVW    R21:R20, R25:R24
        MOVW    R23:R22, R27:R26
        AND     R20, R16
        AND     R21, R17
        AND     R22, R18
        AND     R23, R19
        STD     Y+16, R20
        STD     Y+17, R21
        STD     Y+18, R22
        STD     Y+19, R23
        LDS     R16, (b41 + 28)
        LDS     R17, (b41 + 29)
        LDS     R18, (b41 + 30)
        LDS     R19, (b41 + 31)
        AND     R24, R16
        AND     R25, R17
        AND     R26, R18
        AND     R27, R19
        STD     Y+20, R24
        STD     Y+21, R25
        STD     Y+22, R26
        STD     Y+23, R27
        LDI     R22, 2
        LDI     R23, 0
        LDI     R16, 24
        ADD     R4, R16
        ADC     R5, R23
        MOVW    R21:R20, R5:R4
        MOVW    R19:R18, R29:R28
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
          CFI FunCall mp_sub
        CALL    mp_sub
        ADIW    R29:R28, 63
          CFI CFA_Y Y+71
        ADIW    R29:R28, 63
          CFI CFA_Y Y+8
        ADIW    R29:R28, 2
          CFI CFA_Y Y+6
        JMP     ??Subroutine14_0
          CFI EndBlock cfiBlock48

        RSEG FARCODE:CODE:NOROOT(1)
recode:
          CFI Block cfiBlock49 Using cfiCommon0
          CFI Function recode
          CFI NoCalls
        ST      -Y, R10
          CFI R10 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R9
          CFI R9 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R8
          CFI R8 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        ST      -Y, R7
          CFI R7 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        ST      -Y, R4
          CFI R4 Frame(CFA_Y, -5)
          CFI CFA_Y Y+5
        ST      -Y, R27
          CFI R27 Frame(CFA_Y, -6)
          CFI CFA_Y Y+6
        ST      -Y, R26
          CFI R26 Frame(CFA_Y, -7)
          CFI CFA_Y Y+7
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -8)
          CFI CFA_Y Y+8
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -9)
          CFI CFA_Y Y+9
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R7_is_cg_reg
        REQUIRE ?Register_R8_is_cg_reg
        REQUIRE ?Register_R9_is_cg_reg
        REQUIRE ?Register_R10_is_cg_reg
        MOVW    R23:R22, R17:R16
        MOVW    R9:R8, R19:R18
        MOVW    R31:R30, R21:R20
        SUBI    R30, 128
        SBCI    R31, 255
        LDI     R16, 255
        ST      Z, R16
        STD     Z+1, R16
        MOVW    R25:R24, R21:R20
        MOVW    R27:R26, R19:R18
        LDI     R16, 64
        MOV     R10, R16
??recode_0:
        MOVW    R31:R30, R23:R22
        LD      R16, Z
        LDD     R17, Z+1
        LDD     R18, Z+2
        LDD     R19, Z+3
        LSR     R19
        ROR     R18
        ROR     R17
        ROR     R16
        ST      Z, R16
        STD     Z+1, R17
        STD     Z+2, R18
        STD     Z+3, R19
        LDD     R16, Z+4
        ANDI    R16, 0x01
        LSR     R16
        ROR     R16
        OR      R19, R16
        STD     Z+3, R19
        LDD     R16, Z+4
        LDD     R17, Z+5
        LDD     R18, Z+6
        LDD     R19, Z+7
        LSR     R19
        ROR     R18
        ROR     R17
        ROR     R16
        STD     Z+4, R16
        STD     Z+5, R17
        STD     Z+6, R18
        STD     Z+7, R19
        LD      R16, Z
        ANDI    R16, 0x01
        LDI     R17, 0
        MOVW    R19:R18, R17:R16
        NEG     R18
        SBCI    R19, 0
        MOVW    R31:R30, R25:R24
        ST      Z+, R18
        ST      Z+, R19
        MOVW    R25:R24, R31:R30
        MOVW    R31:R30, R23:R22
        LDD     R18, Z+8
        ANDI    R18, 0x01
        LDI     R19, 0
        LDD     R0, Z+8
        LDD     R1, Z+9
        LDD     R2, Z+10
        LDD     R3, Z+11
        LSR     R3
        ROR     R2
        ROR     R1
        ROR     R0
        MOV     R4, R16
        OR      R4, R18
        EOR     R4, R16
        ADD     R0, R4
        ADC     R1, R17
        ADC     R2, R17
        ADC     R3, R17
        STD     Z+8, R0
        STD     Z+9, R1
        STD     Z+10, R2
        STD     Z+11, R3
        LDD     R0, Z+12
        BST     R0, 0
        CLR     R0
        BLD     R0, 0
        LSR     R0
        CLR     R3
        ROR     R3
        LDD     R7, Z+11
        OR      R7, R3
        STD     Z+11, R7
        LDD     R0, Z+12
        LDD     R1, Z+13
        LDD     R2, Z+14
        LDD     R3, Z+15
        LSR     R3
        ROR     R2
        ROR     R1
        ROR     R0
        STD     Z+12, R0
        STD     Z+13, R1
        STD     Z+14, R2
        STD     Z+15, R3
        MOV     R20, R18
        LDD     R18, Z+16
        ANDI    R18, 0x01
        LDD     R0, Z+16
        LDD     R1, Z+17
        LDD     R2, Z+18
        LDD     R3, Z+19
        LSR     R3
        ROR     R2
        ROR     R1
        ROR     R0
        MOV     R4, R16
        OR      R4, R18
        EOR     R4, R16
        ADD     R0, R4
        ADC     R1, R17
        ADC     R2, R17
        ADC     R3, R17
        STD     Z+16, R0
        STD     Z+17, R1
        STD     Z+18, R2
        STD     Z+19, R3
        LDD     R0, Z+20
        BST     R0, 0
        CLR     R0
        BLD     R0, 0
        LSR     R0
        CLR     R3
        ROR     R3
        LDD     R7, Z+19
        OR      R7, R3
        STD     Z+19, R7
        LDD     R0, Z+20
        LDD     R1, Z+21
        LDD     R2, Z+22
        LDD     R3, Z+23
        LSR     R3
        ROR     R2
        ROR     R1
        ROR     R0
        STD     Z+20, R0
        STD     Z+21, R1
        STD     Z+22, R2
        STD     Z+23, R3
        LSL     R18
        ADD     R20, R18
        LDD     R18, Z+24
        ANDI    R18, 0x01
        LDD     R0, Z+24
        LDD     R1, Z+25
        LDD     R2, Z+26
        LDD     R3, Z+27
        LSR     R3
        ROR     R2
        ROR     R1
        ROR     R0
        MOV     R4, R16
        OR      R4, R18
        EOR     R4, R16
        ADD     R0, R4
        ADC     R1, R17
        ADC     R2, R17
        ADC     R3, R17
        STD     Z+24, R0
        STD     Z+25, R1
        STD     Z+26, R2
        STD     Z+27, R3
        LDD     R0, Z+28
        BST     R0, 0
        CLR     R0
        BLD     R0, 0
        LSR     R0
        CLR     R3
        ROR     R3
        LDD     R7, Z+27
        OR      R7, R3
        STD     Z+27, R7
        LDD     R0, Z+28
        LDD     R1, Z+29
        LDD     R2, Z+30
        LDD     R3, Z+31
        LSR     R3
        ROR     R2
        ROR     R1
        ROR     R0
        STD     Z+28, R0
        STD     Z+29, R1
        STD     Z+30, R2
        STD     Z+31, R3
        LSL     R18
        LSL     R18
        ADD     R20, R18
        ADC     R17, R17
        ST      X+, R20
        ST      X+, R17
        DEC     R10
        BREQ    $+2+2
        RJMP    ??recode_0
        LDD     R16, Z+8
        LDD     R17, Z+9
        LDD     R0, Z+16
        LDD     R1, Z+17
        LSL     R0
        ROL     R1
        ADD     R16, R0
        ADC     R17, R1
        LDD     R20, Z+24
        LDD     R21, Z+25
        LSL     R20
        ROL     R21
        LSL     R20
        ROL     R21
        ADD     R16, R20
        ADC     R17, R21
        LDI     R18, 128
        ADD     R8, R18
        ADC     R9, R19
        MOVW    R31:R30, R9:R8
        ST      Z, R16
        STD     Z+1, R17
        LD      R24, Y+
          CFI R24 SameValue
          CFI CFA_Y Y+8
        LD      R25, Y+
          CFI R25 SameValue
          CFI CFA_Y Y+7
        LD      R26, Y+
          CFI R26 SameValue
          CFI CFA_Y Y+6
        LD      R27, Y+
          CFI R27 SameValue
          CFI CFA_Y Y+5
        LD      R4, Y+
          CFI EndBlock cfiBlock49
        REQUIRE ?Subroutine8
        ;               // Fall through to label ?Subroutine8

        RSEG FARCODE:CODE:NOROOT(1)
?Subroutine8:
          CFI Block cfiBlock50 Using cfiCommon0
          CFI NoFunction
          CFI CFA_Y Y+4
          CFI R7 Frame(CFA_Y, -4)
          CFI R8 Frame(CFA_Y, -3)
          CFI R9 Frame(CFA_Y, -2)
          CFI R10 Frame(CFA_Y, -1)
        LD      R7, Y+
          CFI CFA_Y Y+3
          CFI R7 SameValue
        LD      R8, Y+
          CFI CFA_Y Y+2
          CFI R8 SameValue
        LD      R9, Y+
          CFI CFA_Y Y+1
          CFI R9 SameValue
        LD      R10, Y+
          CFI CFA_Y Y+0
          CFI R10 SameValue
        RET
          CFI EndBlock cfiBlock50

        RSEG FARCODE:CODE:NOROOT(1)
eccdouble:
          CFI Block cfiBlock51 Using cfiCommon0
          CFI Function eccdouble
        ST      -Y, R7
          CFI R7 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R6
          CFI R6 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R5
          CFI R5 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        ST      -Y, R4
          CFI R4 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        ST      -Y, R27
          CFI R27 Frame(CFA_Y, -5)
          CFI CFA_Y Y+5
        ST      -Y, R26
          CFI R26 Frame(CFA_Y, -6)
          CFI CFA_Y Y+6
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -7)
          CFI CFA_Y Y+7
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -8)
          CFI CFA_Y Y+8
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        REQUIRE ?Register_R6_is_cg_reg
        REQUIRE ?Register_R7_is_cg_reg
        SBIW    R29:R28, 63
          CFI CFA_Y Y+71
        SBIW    R29:R28, 33
          CFI CFA_Y Y+104
        MOVW    R25:R24, R17:R16
        MOVW    R21:R20, R29:R28
        SUBI    R20, 176
        SBCI    R21, 255
        MOVW    R19:R18, R17:R16
        SUBI    R18, 240
        SBCI    R19, 255
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 192
        SBCI    R21, 255
        MOVW    R19:R18, R25:R24
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
          CFI FunCall fpsub1271
        CALL    fpsub1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 208
        SBCI    R21, 255
        MOVW    R19:R18, R25:R24
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
          CFI FunCall mod_mul_dbl128
        CALL    mod_mul_dbl128
        MOVW    R21:R20, R29:R28
        SUBI    R20, 224
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 192
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 176
        SBCI    R17, 255
          CFI FunCall mod_mul128
        CALL    mod_mul128
        MOVW    R27:R26, R25:R24
        ADIW    R27:R26, 32
        MOVW    R21:R20, R29:R28
        SUBI    R20, 176
        SBCI    R21, 255
        MOVW    R19:R18, R27:R26
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 192
        SBCI    R21, 255
        MOVW    R19:R18, R27:R26
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
          CFI FunCall fpsub1271
        CALL    fpsub1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 240
        SBCI    R21, 255
        MOVW    R19:R18, R27:R26
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
          CFI FunCall mod_mul_dbl128
        CALL    mod_mul_dbl128
        MOVW    R21:R20, R29:R28
        MOVW    R19:R18, R29:R28
        SUBI    R18, 192
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 176
        SBCI    R17, 255
          CFI FunCall mod_mul128
        CALL    mod_mul128
        MOVW    R27:R26, R25:R24
        ADIW    R27:R26, 32
        MOVW    R21:R20, R25:R24
        MOVW    R19:R18, R27:R26
        MOVW    R17:R16, R25:R24
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R21:R20, R25:R24
        SUBI    R20, 240
        SBCI    R21, 255
        ADIW    R27:R26, 16
        MOVW    R19:R18, R27:R26
        MOVW    R17:R16, R25:R24
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R5:R4, R25:R24
        LDI     R16, 128
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
        MOVW    R21:R20, R5:R4
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R29:R28
        SUBI    R16, 224
        SBCI    R17, 255
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R21:R20, R5:R4
        SUBI    R20, 240
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 208
        SBCI    R17, 255
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 224
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 224
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
          CFI FunCall fpsub1271
        CALL    fpsub1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 208
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 208
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpsub1271
        CALL    fpsub1271
        MOVW    R27:R26, R25:R24
        SUBI    R26, 160
        SBCI    R27, 255
        MOVW    R21:R20, R29:R28
        SUBI    R20, 176
        SBCI    R21, 255
        MOVW    R19:R18, R25:R24
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 192
        SBCI    R21, 255
        MOVW    R19:R18, R25:R24
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
          CFI FunCall fpsub1271
        CALL    fpsub1271
        MOVW    R21:R20, R27:R26
        SUBI    R20, 240
        SBCI    R21, 255
        MOVW    R19:R18, R25:R24
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
          CFI FunCall mod_mul_dbl128
        CALL    mod_mul_dbl128
        MOVW    R21:R20, R27:R26
        MOVW    R19:R18, R29:R28
        SUBI    R18, 192
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 176
        SBCI    R17, 255
          CFI FunCall mod_mul128
        CALL    mod_mul128
        MOVW    R7:R6, R25:R24
        LDI     R16, 64
        ADD     R6, R16
        LDI     R16, 0
        ADC     R7, R16
        MOVW    R21:R20, R29:R28
        SUBI    R20, 176
        SBCI    R21, 255
        MOVW    R19:R18, R7:R6
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R7:R6
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 192
        SBCI    R21, 255
        MOVW    R19:R18, R7:R6
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R7:R6
          CFI FunCall fpsub1271
        CALL    fpsub1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 240
        SBCI    R21, 255
        MOVW    R19:R18, R7:R6
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R7:R6
          CFI FunCall mod_mul_dbl128
        CALL    mod_mul_dbl128
        MOVW    R21:R20, R29:R28
        MOVW    R19:R18, R29:R28
        SUBI    R18, 192
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 176
        SBCI    R17, 255
          CFI FunCall mod_mul128
        CALL    mod_mul128
        MOVW    R21:R20, R27:R26
        MOVW    R19:R18, R5:R4
        MOVW    R17:R16, R27:R26
          CFI FunCall fpsub1271
        CALL    fpsub1271
        MOVW    R21:R20, R27:R26
        SUBI    R20, 240
        SBCI    R21, 255
        MOVW    R19:R18, R5:R4
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpsub1271
        CALL    fpsub1271
        MOVW    R21:R20, R29:R28
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R29:R28
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 240
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R21:R20, R29:R28
        MOVW    R19:R18, R29:R28
        SUBI    R18, 224
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
          CFI FunCall fpsub1271
        CALL    fpsub1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 240
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 208
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpsub1271
        CALL    fpsub1271
        MOVW    R21:R20, R25:R24
        SUBI    R20, 224
        SBCI    R21, 255
        MOVW    R19:R18, R5:R4
        MOVW    R17:R16, R29:R28
        SUBI    R16, 224
        SBCI    R17, 255
          CFI FunCall fp2mul1271
        CALL    fp2mul1271
        MOVW    R21:R20, R25:R24
        MOVW    R19:R18, R27:R26
        MOVW    R17:R16, R29:R28
          CFI FunCall fp2mul1271
        CALL    fp2mul1271
        MOVW    R21:R20, R7:R6
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R29:R28
        SUBI    R16, 224
        SBCI    R17, 255
        JMP     ?Subroutine10
          CFI EndBlock cfiBlock51

        RSEG FARCODE:CODE:NOROOT(1)
cofactor_clearing:
          CFI Block cfiBlock52 Using cfiCommon0
          CFI Function cofactor_clearing
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        DEC     R29
          CFI CFA_Y Y+258
        MOVW    R25:R24, R17:R16
        MOVW    R19:R18, R29:R28
        SUBI    R18, 128
        SBCI    R19, 255
          CFI FunCall R1_to_R2
        RCALL   R1_to_R2
        MOVW    R17:R16, R25:R24
          CFI FunCall eccdouble
        RCALL   eccdouble
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R25:R24
          CFI FunCall R1_to_R3
        RCALL   R1_to_R3
        MOVW    R21:R20, R25:R24
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R29:R28
        SUBI    R16, 128
        SBCI    R17, 255
          CFI FunCall eccadd_core
        RCALL   eccadd_core
        MOVW    R17:R16, R25:R24
          CFI FunCall eccdouble
        RCALL   eccdouble
        MOVW    R17:R16, R25:R24
          CFI FunCall eccdouble
        RCALL   eccdouble
        MOVW    R17:R16, R25:R24
          CFI FunCall eccdouble
        RCALL   eccdouble
        MOVW    R17:R16, R25:R24
          CFI FunCall eccdouble
        RCALL   eccdouble
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R25:R24
          CFI FunCall R1_to_R3
        RCALL   R1_to_R3
        MOVW    R21:R20, R25:R24
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R29:R28
        SUBI    R16, 128
        SBCI    R17, 255
          CFI FunCall eccadd_core
        RCALL   eccadd_core
        MOVW    R17:R16, R25:R24
          CFI FunCall eccdouble
        RCALL   eccdouble
        MOVW    R17:R16, R25:R24
          CFI FunCall eccdouble
        RCALL   eccdouble
        MOVW    R17:R16, R25:R24
          CFI FunCall eccdouble
        RCALL   eccdouble
        INC     R29
          CFI CFA_Y Y+2
        LD      R24, Y+
          CFI R24 SameValue
          CFI CFA_Y Y+1
        LD      R25, Y+
          CFI R25 SameValue
          CFI CFA_Y Y+0
        RET
          CFI EndBlock cfiBlock52

        RSEG FARCODE:CODE:NOROOT(1)
eccnorm:
          CFI Block cfiBlock53 Using cfiCommon0
          CFI Function eccnorm
        ST      -Y, R27
          CFI R27 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R26
          CFI R26 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        MOVW    R27:R26, R17:R16
        MOVW    R25:R24, R19:R18
        SUBI    R16, 192
        SBCI    R17, 255
          CFI FunCall fp2inv1271
        CALL    fp2inv1271
        MOVW    R21:R20, R25:R24
        MOVW    R19:R18, R27:R26
        SUBI    R18, 192
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
          CFI FunCall fp2mul1271
        CALL    fp2mul1271
        MOVW    R21:R20, R25:R24
        SUBI    R20, 224
        SBCI    R21, 255
        MOVW    R19:R18, R27:R26
        SUBI    R18, 192
        SBCI    R19, 255
        ADIW    R27:R26, 32
        MOVW    R17:R16, R27:R26
          CFI FunCall fp2mul1271
        CALL    fp2mul1271
        MOVW    R17:R16, R25:R24
          CFI FunCall mod1271
        CALL    mod1271
        MOVW    R17:R16, R25:R24
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall mod1271
        CALL    mod1271
        MOVW    R17:R16, R25:R24
        SUBI    R16, 224
        SBCI    R17, 255
          CFI FunCall mod1271
        CALL    mod1271
        ADIW    R25:R24, 48
        MOVW    R17:R16, R25:R24
          CFI FunCall mod1271
        CALL    mod1271
        JMP     ??Subroutine13_0
          CFI EndBlock cfiBlock53

        RSEG FARCODE:CODE:NOROOT(1)
point_setup:
          CFI Block cfiBlock54 Using cfiCommon0
          CFI Function point_setup
        ST      -Y, R5
          CFI R5 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R4
          CFI R4 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R27
          CFI R27 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        ST      -Y, R26
          CFI R26 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -5)
          CFI CFA_Y Y+5
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -6)
          CFI CFA_Y Y+6
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        MOVW    R27:R26, R17:R16
        MOVW    R25:R24, R19:R18
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R25:R24
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R5:R4, R25:R24
        LDI     R16, 32
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
        ADIW    R27:R26, 32
        MOVW    R19:R18, R5:R4
        MOVW    R17:R16, R27:R26
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        LDI     R16, 16
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
        MOVW    R19:R18, R5:R4
        ADIW    R27:R26, 16
        MOVW    R17:R16, R27:R26
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R27:R26, R25:R24
        SUBI    R26, 160
        SBCI    R27, 255
        MOVW    R19:R18, R27:R26
        MOVW    R17:R16, R25:R24
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        ADIW    R27:R26, 16
        MOVW    R19:R18, R27:R26
        MOVW    R17:R16, R25:R24
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R5:R4, R25:R24
        LDI     R16, 128
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
        MOVW    R27:R26, R25:R24
        ADIW    R27:R26, 32
        MOVW    R19:R18, R5:R4
        MOVW    R17:R16, R27:R26
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        LDI     R16, 16
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
        MOVW    R19:R18, R5:R4
        ADIW    R27:R26, 16
        MOVW    R17:R16, R27:R26
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        SUBI    R24, 192
        SBCI    R25, 255
        MOVW    R27:R26, R25:R24
        MOVW    R17:R16, R25:R24
          CFI FunCall fpzero1271
        CALL    fpzero1271
        MOVW    R17:R16, R25:R24
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpzero1271
        CALL    fpzero1271
        LDI     R16, 1
        ST      X+, R16
        LDI     R16, 0
        ST      X+, R16
        ST      X+, R16
        ST      X, R16
        JMP     ??Subroutine14_0
          CFI EndBlock cfiBlock54

        RSEG FARCODE:CODE:NOROOT(1)
ecc_mul:
          CFI Block cfiBlock55 Using cfiCommon0
          CFI Function ecc_mul
        ST      -Y, R6
          CFI R6 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R5
          CFI R5 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R4
          CFI R4 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        ST      -Y, R27
          CFI R27 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        ST      -Y, R26
          CFI R26 Frame(CFA_Y, -5)
          CFI CFA_Y Y+5
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -6)
          CFI CFA_Y Y+6
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -7)
          CFI CFA_Y Y+7
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        REQUIRE ?Register_R6_is_cg_reg
        SBIW    R29:R28, 63
          CFI CFA_Y Y+70
        SBIW    R29:R28, 63
          CFI CFA_Y Y+133
        SBIW    R29:R28, 63
          CFI CFA_Y Y+196
        SBIW    R29:R28, 7
          CFI CFA_Y Y+203
        SUBI    R29, 6
          CFI CFA_Y Y+1739
        MOVW    R27:R26, R19:R18
        MOVW    R5:R4, R21:R20
        MOVW    R25:R24, R23:R22
        MOVW    R19:R18, R29:R28
        SUBI    R18, 220
        SBCI    R19, 249
          CFI FunCall point_setup
        RCALL   point_setup
        MOVW    R19:R18, R29:R28
        SUBI    R18, 124
        SBCI    R19, 254
        MOVW    R17:R16, R27:R26
          CFI FunCall decompose
        RCALL   decompose
        MOVW    R17:R16, R29:R28
        SUBI    R16, 220
        SBCI    R17, 249
          CFI FunCall ecc_point_validate
        RCALL   ecc_point_validate
        OR      R16, R17
        BRNE    ??ecc_mul_0
        LDI     R16, 0
        RJMP    ??ecc_mul_1
??ecc_mul_0:
        SBIW    R25:R24, 1
        BRNE    ??ecc_mul_2
        MOVW    R17:R16, R29:R28
        SUBI    R16, 220
        SBCI    R17, 249
          CFI FunCall cofactor_clearing
        RCALL   cofactor_clearing
??ecc_mul_2:
        MOVW    R21:R20, R29:R28
        SUBI    R20, 128
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 254
        SBCI    R19, 254
        MOVW    R17:R16, R29:R28
        SUBI    R16, 124
        SBCI    R17, 254
          CFI FunCall recode
        RCALL   recode
        MOVW    R19:R18, R29:R28
        SUBI    R18, 92
        SBCI    R19, 254
        MOVW    R17:R16, R29:R28
        SUBI    R16, 220
        SBCI    R17, 249
          CFI FunCall ecc_precomp
        RCALL   ecc_precomp
        MOVW    R31:R30, R29:R28
        INC     R31
        LD      R22, Z
        LDD     R23, Z+1
        MOV     R31, R29
        SUBI    R30, 126
        SBCI    R31, 254
        LD      R20, Z
        LDD     R21, Z+1
        MOVW    R19:R18, R29:R28
        SUBI    R18, 92
        SBCI    R19, 250
        MOVW    R17:R16, R29:R28
        SUBI    R16, 92
        SBCI    R17, 254
          CFI FunCall table_lookup_1x8
        CALL    table_lookup_1x8
        MOVW    R21:R20, R29:R28
        SUBI    R20, 220
        SBCI    R21, 249
        MOVW    R19:R18, R29:R28
        SUBI    R18, 60
        SBCI    R19, 250
        MOVW    R17:R16, R29:R28
        SUBI    R16, 92
        SBCI    R17, 250
          CFI FunCall fpsub1271
        CALL    fpsub1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 204
        SBCI    R21, 249
        MOVW    R19:R18, R29:R28
        SUBI    R18, 44
        SBCI    R19, 250
        MOVW    R17:R16, R29:R28
        SUBI    R16, 76
        SBCI    R17, 250
          CFI FunCall fpsub1271
        CALL    fpsub1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 188
        SBCI    R21, 249
        MOVW    R19:R18, R29:R28
        SUBI    R18, 60
        SBCI    R19, 250
        MOVW    R17:R16, R29:R28
        SUBI    R16, 92
        SBCI    R17, 250
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 172
        SBCI    R21, 249
        MOVW    R19:R18, R29:R28
        SUBI    R18, 44
        SBCI    R19, 250
        MOVW    R17:R16, R29:R28
        SUBI    R16, 76
        SBCI    R17, 250
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 156
        SBCI    R19, 249
        MOVW    R17:R16, R29:R28
        SUBI    R16, 28
        SBCI    R17, 250
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 140
        SBCI    R19, 249
        MOVW    R17:R16, R29:R28
        SUBI    R16, 12
        SBCI    R17, 250
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R25:R24, R29:R28
        SUBI    R24, 2
        SBCI    R25, 255
        MOVW    R27:R26, R29:R28
        SUBI    R26, 128
        SBCI    R27, 254
        LDI     R16, 64
        MOV     R6, R16
??ecc_mul_3:
        MOVW    R31:R30, R25:R24
        LD      R22, Z
        LDD     R23, Z+1
        LD      R20, X+
        LD      R21, X
        SBIW    R27:R26, 3
        MOVW    R19:R18, R29:R28
        SUBI    R18, 92
        SBCI    R19, 250
        MOVW    R17:R16, R29:R28
        SUBI    R16, 92
        SBCI    R17, 254
          CFI FunCall table_lookup_1x8
        CALL    table_lookup_1x8
        MOVW    R17:R16, R29:R28
        SUBI    R16, 220
        SBCI    R17, 249
          CFI FunCall eccdouble
        RCALL   eccdouble
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R29:R28
        SUBI    R16, 220
        SBCI    R17, 249
          CFI FunCall R1_to_R3
        RCALL   R1_to_R3
        MOVW    R21:R20, R29:R28
        SUBI    R20, 220
        SBCI    R21, 249
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R29:R28
        SUBI    R16, 92
        SBCI    R17, 250
          CFI FunCall eccadd_core
        CALL    eccadd_core
        SBIW    R25:R24, 2
        DEC     R6
        BRNE    ??ecc_mul_3
        MOVW    R19:R18, R5:R4
        MOVW    R17:R16, R29:R28
        SUBI    R16, 220
        SBCI    R17, 249
          CFI FunCall eccnorm
        RCALL   eccnorm
        LDI     R16, 1
??ecc_mul_1:
        LDI     R17, 0
        ADIW    R29:R28, 63
          CFI CFA_Y Y+1676
        ADIW    R29:R28, 63
          CFI CFA_Y Y+1613
        ADIW    R29:R28, 63
          CFI CFA_Y Y+1550
        ADIW    R29:R28, 7
          CFI CFA_Y Y+1543
        SUBI    R29, 250
          CFI CFA_Y Y+7
        LD      R24, Y+
          CFI R24 SameValue
          CFI CFA_Y Y+6
        LD      R25, Y+
          CFI R25 SameValue
          CFI CFA_Y Y+5
        LD      R26, Y+
          CFI R26 SameValue
          CFI CFA_Y Y+4
        LD      R27, Y+
          CFI R27 SameValue
          CFI CFA_Y Y+3
        LD      R4, Y+
          CFI R4 SameValue
          CFI CFA_Y Y+2
        LD      R5, Y+
          CFI R5 SameValue
          CFI CFA_Y Y+1
        LD      R6, Y+
          CFI R6 SameValue
          CFI CFA_Y Y+0
        RET
          CFI EndBlock cfiBlock55

        RSEG FARCODE:CODE:NOROOT(1)
eccset:
          CFI Block cfiBlock56 Using cfiCommon0
          CFI Function eccset
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        MOVW    R25:R24, R17:R16
        MOVW    R19:R18, R17:R16
        LDI     R16, LOW(GENERATOR_x)
        LDI     R17, (GENERATOR_x) >> 8
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R25:R24
        SUBI    R18, 240
        SBCI    R19, 255
        LDI     R16, LOW((GENERATOR_x + 16))
        LDI     R17, HIGH((GENERATOR_x + 16))
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        ADIW    R25:R24, 32
        MOVW    R19:R18, R25:R24
        LDI     R16, LOW((GENERATOR_x + 32))
        LDI     R17, HIGH((GENERATOR_x + 32))
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        ADIW    R25:R24, 16
        MOVW    R19:R18, R25:R24
        LDI     R16, LOW((GENERATOR_x + 48))
        LDI     R17, HIGH((GENERATOR_x + 48))
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        LD      R24, Y+
          CFI R24 SameValue
          CFI CFA_Y Y+1
        LD      R25, Y+
          CFI R25 SameValue
          CFI CFA_Y Y+0
        RET
          CFI EndBlock cfiBlock56
//  575 
//  576 
//  577 __inline void R1_to_R3(point_extproj_t P, point_extproj_precomp_t Q)      
//  578 { // Conversion from representation (X,Y,Z,Ta,Tb) to (X+Y,Y-X,Z,T), where T = Ta*Tb 
//  579   // Input:  P = (X1,Y1,Z1,Ta,Tb), where T1 = Ta*Tb, corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates
//  580   // Output: Q = (X1+Y1,Y1-X1,Z1,T1) corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates 
//  581     
//  582     fp2add1271(P->x, P->y, Q->xy);         // XQ = (X1+Y1) 
//  583     fp2sub1271(P->y, P->x, Q->yx);         // YQ = (Y1-X1) 
//  584     fp2mul1271(P->ta, P->tb, Q->t2);       // TQ = T1
//  585     fp2copy1271(P->z, Q->z2);              // ZQ = Z1 
//  586 }
//  587 
//  588 

        RSEG FARCODE:CODE:NOROOT(1)
//  589 void R2_to_R4(point_extproj_precomp_t P, point_extproj_t Q)      
R2_to_R4:
          CFI Block cfiBlock57 Using cfiCommon0
          CFI Function R2_to_R4
//  590 { // Conversion from representation (X+Y,Y-X,2Z,2dT) to (2X,2Y,2Z,2dT) 
        ST      -Y, R7
          CFI R7 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R6
          CFI R6 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R5
          CFI R5 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        ST      -Y, R4
          CFI R4 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        ST      -Y, R27
          CFI R27 Frame(CFA_Y, -5)
          CFI CFA_Y Y+5
        ST      -Y, R26
          CFI R26 Frame(CFA_Y, -6)
          CFI CFA_Y Y+6
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -7)
          CFI CFA_Y Y+7
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -8)
          CFI CFA_Y Y+8
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        REQUIRE ?Register_R6_is_cg_reg
        REQUIRE ?Register_R7_is_cg_reg
        MOVW    R25:R24, R17:R16
        MOVW    R27:R26, R19:R18
//  591   // Input:  P = (X1+Y1,Y1-X1,2Z1,2dT1) corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates
//  592   // Output: Q = (2X1,2Y1,2Z1) corresponding to (X1:Y1:Z1) in twisted Edwards coordinates 
//  593     
//  594     fp2sub1271(P->xy, P->yx, Q->x);        // XQ = 2*X1
        MOVW    R5:R4, R17:R16
        LDI     R16, 32
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
        MOVW    R21:R20, R19:R18
        MOVW    R19:R18, R5:R4
        MOV     R16, R24
          CFI FunCall fpsub1271
        CALL    fpsub1271
        MOVW    R21:R20, R27:R26
        SUBI    R20, 240
        SBCI    R21, 255
        LDI     R16, 16
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
        MOVW    R19:R18, R5:R4
        MOVW    R17:R16, R25:R24
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpsub1271
        CALL    fpsub1271
//  595     fp2add1271(P->xy, P->yx, Q->y);        // YQ = 2*Y1
        MOVW    R7:R6, R27:R26
        LDI     R16, 32
        ADD     R6, R16
        LDI     R16, 0
        ADC     R7, R16
        MOVW    R5:R4, R25:R24
        LDI     R16, 32
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
        MOVW    R21:R20, R7:R6
        MOVW    R19:R18, R5:R4
        MOVW    R17:R16, R25:R24
          CFI FunCall fpadd1271
        CALL    fpadd1271
        LDI     R16, 16
        ADD     R6, R16
        LDI     R16, 0
        ADC     R7, R16
        MOVW    R21:R20, R7:R6
        LDI     R16, 16
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
        MOVW    R19:R18, R5:R4
        MOVW    R17:R16, R25:R24
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpadd1271
        CALL    fpadd1271
//  596     fp2copy1271(P->z2, Q->z);              // ZQ = 2*Z1
        JMP     ?Subroutine0
//  597 }
          CFI EndBlock cfiBlock57
//  598 
//  599 
//  600 void eccdouble(point_extproj_t P)
//  601 { // Point doubling 2P
//  602   // Input: P = (X1:Y1:Z1) in twisted Edwards coordinates
//  603   // Output: 2P = (Xfinal,Yfinal,Zfinal,Tafinal,Tbfinal), where Tfinal = Tafinal*Tbfinal,
//  604   //         corresponding to (Xfinal:Yfinal:Zfinal:Tfinal) in extended twisted Edwards coordinates
//  605     f2elm_t t1, t2;  
//  606 
//  607     fp2sqr1271(P->x, t1);                  // t1 = X1^2
//  608     fp2sqr1271(P->y, t2);                  // t2 = Y1^2
//  609     fp2add1271(P->x, P->y, P->x);          // t3 = X1+Y1
//  610     fp2add1271(t1, t2, P->tb);             // Tbfinal = X1^2+Y1^2      
//  611     fp2sub1271(t2, t1, t1);                // t1 = Y1^2-X1^2       
//  612     fp2sqr1271(P->x, P->ta);               // Ta = (X1+Y1)^2 
//  613     fp2sqr1271(P->z, t2);                  // t2 = Z1^2 
//  614     fp2sub1271(P->ta, P->tb, P->ta);       // Tafinal = 2X1*Y1 = (X1+Y1)^2-(X1^2+Y1^2)  
//  615     fp2addsub1271(t2, t1, t2);             // t2 = 2Z1^2-(Y1^2-X1^2) 
//  616     fp2mul1271(t1, P->tb, P->y);           // Yfinal = (X1^2+Y1^2)(Y1^2-X1^2)  
//  617     fp2mul1271(t2, P->ta, P->x);           // Xfinal = 2X1*Y1*[2Z1^2-(Y1^2-X1^2)]
//  618     fp2mul1271(t1, t2, P->z);              // Zfinal = (Y1^2-X1^2)[2Z1^2-(Y1^2-X1^2)]
//  619 }
//  620 
//  621 
//  622 __inline void eccadd_core(point_extproj_precomp_t P, point_extproj_precomp_t Q, point_extproj_t R)      
//  623 { // Basic point addition R = P+Q or R = P+P
//  624   // Inputs: P = (X1+Y1,Y1-X1,2Z1,2dT1) corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates
//  625   //         Q = (X2+Y2,Y2-X2,Z2,T2) corresponding to (X2:Y2:Z2:T2) in extended twisted Edwards coordinates    
//  626   // Output: R = (Xfinal,Yfinal,Zfinal,Tafinal,Tbfinal), where Tfinal = Tafinal*Tbfinal,
//  627   //         corresponding to (Xfinal:Yfinal:Zfinal:Tfinal) in extended twisted Edwards coordinates
//  628     f2elm_t t1, t2; 
//  629           
//  630     fp2mul1271(P->t2, Q->t2, R->z);        // Z = 2dT1*T2 
//  631     fp2mul1271(P->z2, Q->z2, t1);          // t1 = 2Z1*Z2  
//  632     fp2mul1271(P->xy, Q->xy, R->x);        // X = (X1+Y1)(X2+Y2) 
//  633     fp2mul1271(P->yx, Q->yx, R->y);        // Y = (Y1-X1)(Y2-X2) 
//  634     fp2sub1271(t1, R->z, t2);              // t2 = theta
//  635     fp2add1271(t1, R->z, t1);              // t1 = alpha
//  636     fp2sub1271(R->x, R->y, R->tb);         // Tbfinal = beta
//  637     fp2add1271(R->x, R->y, R->ta);         // Tafinal = omega
//  638     fp2mul1271(R->tb, t2, R->x);           // Xfinal = beta*theta
//  639     fp2mul1271(t1, t2, R->z);              // Zfinal = theta*alpha
//  640     fp2mul1271(R->ta, t1, R->y);           // Yfinal = alpha*omega
//  641 }
//  642 
//  643 

        RSEG FARCODE:CODE:NOROOT(1)
//  644 void eccadd(point_extproj_precomp_t Q, point_extproj_t P)      
eccadd:
          CFI Block cfiBlock58 Using cfiCommon0
          CFI Function eccadd
//  645 { // Complete point addition P = P+Q or P = P+P
        ST      -Y, R27
          CFI R27 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R26
          CFI R26 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        SBIW    R29:R28, 63
          CFI CFA_Y Y+67
        SBIW    R29:R28, 63
          CFI CFA_Y Y+130
        SBIW    R29:R28, 2
          CFI CFA_Y Y+132
        MOVW    R27:R26, R17:R16
        MOVW    R25:R24, R19:R18
//  646   // Inputs: P = (X1,Y1,Z1,Ta,Tb), where T1 = Ta*Tb, corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates
//  647   //         Q = (X2+Y2,Y2-X2,2Z2,2dT2) corresponding to (X2:Y2:Z2:T2) in extended twisted Edwards coordinates   
//  648   // Output: P = (Xfinal,Yfinal,Zfinal,Tafinal,Tbfinal), where Tfinal = Tafinal*Tbfinal, 
//  649   //         corresponding to (Xfinal:Yfinal:Zfinal:Tfinal) in extended twisted Edwards coordinates
//  650     point_extproj_precomp_t R;
//  651     
//  652     R1_to_R3(P, R);                        // R = (X1+Y1,Y1-Z1,Z1,T1)
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R25:R24
          CFI FunCall R1_to_R3
        RCALL   R1_to_R3
//  653     eccadd_core(Q, R, P);                  // P = (X2+Y2,Y2-X2,2Z2,2dT2) + (X1+Y1,Y1-Z1,Z1,T1)
        MOVW    R21:R20, R25:R24
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R27:R26
          CFI FunCall eccadd_core
        CALL    eccadd_core
//  654 }
        JMP     ?Subroutine5
          CFI EndBlock cfiBlock58
//  655 
//  656 
//  657 void point_setup(point_t P, point_extproj_t Q)
//  658 { // Point conversion to representation (X,Y,Z,Ta,Tb) 
//  659   // Input: P = (x,y) in affine coordinates
//  660   // Output: P = (X,Y,1,Ta,Tb), where Ta=X, Tb=Y and T=Ta*Tb, corresponding to (X:Y:Z:T) in extended twisted Edwards coordinates
//  661 
//  662     fp2copy1271(P->x, Q->x);
//  663     fp2copy1271(P->y, Q->y);
//  664     fp2copy1271(Q->x, Q->ta);              // Ta = X1
//  665     fp2copy1271(Q->y, Q->tb);              // Tb = Y1
//  666     fp2zero1271(Q->z); Q->z[0][0]=1;       // Z1 = 1
//  667 }
//  668 
//  669 

        RSEG FARCODE:CODE:NOROOT(1)
//  670 bool ecc_point_validate(point_extproj_t P)
ecc_point_validate:
          CFI Block cfiBlock59 Using cfiCommon0
          CFI Function ecc_point_validate
//  671 { // Point validation: check if point lies on the curve
        ST      -Y, R27
          CFI R27 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R26
          CFI R26 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        SBIW    R29:R28, 63
          CFI CFA_Y Y+67
        SBIW    R29:R28, 63
          CFI CFA_Y Y+130
        SBIW    R29:R28, 2
          CFI CFA_Y Y+132
        MOVW    R25:R24, R17:R16
//  672   // Input: P = (x,y) in affine coordinates, where x, y in [0, 2^127-1]. 
//  673   // Output: TRUE (1) if point lies on the curve E: -x^2+y^2-1-dx^2*y^2 = 0, FALSE (0) otherwise. 
//  674   // SECURITY NOTE: this function does not run in constant time (input point P is assumed to be public).
//  675     f2elm_t t1, t2, t3;
//  676 
//  677     fp2sqr1271(P->y, t1);
        MOVW    R27:R26, R17:R16
        ADIW    R27:R26, 32
        MOVW    R21:R20, R29:R28
        SUBI    R20, 176
        SBCI    R21, 255
        MOVW    R19:R18, R27:R26
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 192
        SBCI    R21, 255
        MOVW    R19:R18, R27:R26
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
          CFI FunCall fpsub1271
        CALL    fpsub1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 240
        SBCI    R21, 255
        MOVW    R19:R18, R27:R26
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
          CFI FunCall mod_mul_dbl128
        CALL    mod_mul_dbl128
        MOVW    R21:R20, R29:R28
        MOVW    R19:R18, R29:R28
        SUBI    R18, 192
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 176
        SBCI    R17, 255
          CFI FunCall mod_mul128
        CALL    mod_mul128
//  678     fp2sqr1271(P->x, t2);
        MOVW    R21:R20, R29:R28
        SUBI    R20, 176
        SBCI    R21, 255
        MOVW    R19:R18, R25:R24
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 192
        SBCI    R21, 255
        MOVW    R19:R18, R25:R24
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
          CFI FunCall fpsub1271
        CALL    fpsub1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 208
        SBCI    R21, 255
        MOVW    R19:R18, R25:R24
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
          CFI FunCall mod_mul_dbl128
        CALL    mod_mul_dbl128
        MOVW    R21:R20, R29:R28
        SUBI    R20, 224
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 192
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 176
        SBCI    R17, 255
          CFI FunCall mod_mul128
        CALL    mod_mul128
//  679     fp2sub1271(t1, t2, t3);                     // -x^2 + y^2 
        MOVW    R21:R20, R29:R28
        SUBI    R20, 160
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 224
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
          CFI FunCall fpsub1271
        CALL    fpsub1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 144
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 208
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpsub1271
        CALL    fpsub1271
//  680     fp2mul1271(t1, t2, t1);                     // x^2*y^2
        MOVW    R21:R20, R29:R28
        MOVW    R19:R18, R29:R28
        SUBI    R18, 224
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
          CFI FunCall fp2mul1271
        CALL    fp2mul1271
//  681     fp2mul1271((felm_t*)&PARAMETER_d, t1, t2);  // dx^2*y^2
        MOVW    R21:R20, R29:R28
        SUBI    R20, 224
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        LDI     R16, LOW(PARAMETER_d)
        LDI     R17, (PARAMETER_d) >> 8
          CFI FunCall fp2mul1271
        CALL    fp2mul1271
//  682     fp2zero1271(t1);  t1[0][0] = 1;             // t1 = 1
        MOVW    R17:R16, R29:R28
          CFI FunCall fpzero1271
        CALL    fpzero1271
        MOVW    R17:R16, R29:R28
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpzero1271
        CALL    fpzero1271
        LDI     R16, 1
        ST      Y, R16
        LDI     R16, 0
        STD     Y+1, R16
        STD     Y+2, R16
        STD     Y+3, R16
//  683     fp2add1271(t2, t1, t2);                     // 1 + dx^2*y^2
        MOVW    R21:R20, R29:R28
        SUBI    R20, 224
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R29:R28
        SUBI    R16, 224
        SBCI    R17, 255
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 208
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 208
        SBCI    R17, 255
          CFI FunCall fpadd1271
        CALL    fpadd1271
//  684     fp2sub1271(t3, t2, t1);                     // -x^2 + y^2 - 1 - dx^2*y^2
        MOVW    R21:R20, R29:R28
        MOVW    R19:R18, R29:R28
        SUBI    R18, 224
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 160
        SBCI    R17, 255
          CFI FunCall fpsub1271
        CALL    fpsub1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 240
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 208
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 144
        SBCI    R17, 255
          CFI FunCall fpsub1271
        CALL    fpsub1271
//  685 
//  686     return ((is_digit_zero_ct(t1[0][0] | t1[0][1]) || is_digit_zero_ct((t1[0][0] + 1) | (t1[0][1] + 1))) &
//  687             (is_digit_zero_ct(t1[1][0] | t1[1][1]) || is_digit_zero_ct((t1[1][0] + 1) | (t1[1][1] + 1))));	
        LD      R16, Y
        LDD     R17, Y+1
        LDD     R18, Y+2
        LDD     R19, Y+3
        LDD     R20, Y+4
        LDD     R21, Y+5
        LDD     R22, Y+6
        LDD     R23, Y+7
        OR      R16, R20
        OR      R17, R21
        OR      R18, R22
        OR      R19, R23
        BST     R19, 7
        LDI     R20, 0
        BLD     R20, 0
        COM     R17
        COM     R18
        COM     R19
        NEG     R16
        SBCI    R17, 255
        SBCI    R18, 255
        SBCI    R19, 255
        LSL     R19
        LDI     R16, 0
        ROL     R16
        OR      R20, R16
        LDI     R16, 1
        EOR     R20, R16
        BRNE    ??ecc_point_validate_0
        LD      R16, Y
        LDD     R17, Y+1
        LDD     R18, Y+2
        LDD     R19, Y+3
        SUBI    R16, 255
        SBCI    R17, 255
        SBCI    R18, 255
        SBCI    R19, 255
        LDD     R20, Y+4
        SUBI    R20, 255
        SBCI    R21, 255
        SBCI    R22, 255
        SBCI    R23, 255
        OR      R16, R20
        OR      R17, R21
        OR      R18, R22
        OR      R19, R23
        BST     R19, 7
        LDI     R20, 0
        BLD     R20, 0
        COM     R17
        COM     R18
        COM     R19
        NEG     R16
        SBCI    R17, 255
        SBCI    R18, 255
        SBCI    R19, 255
        LSL     R19
        LDI     R16, 0
        ROL     R16
        OR      R20, R16
        LDI     R16, 1
        EOR     R20, R16
        BREQ    ??ecc_point_validate_1
??ecc_point_validate_0:
        LDI     R24, 1
        RJMP    ??ecc_point_validate_2
??ecc_point_validate_1:
        LDI     R24, 0
??ecc_point_validate_2:
        LDD     R16, Y+16
        LDD     R17, Y+17
        LDD     R18, Y+18
        LDD     R19, Y+19
        LDD     R20, Y+20
        LDD     R21, Y+21
        LDD     R22, Y+22
        LDD     R23, Y+23
        OR      R16, R20
        OR      R17, R21
        OR      R18, R22
        OR      R19, R23
        BST     R19, 7
        LDI     R20, 0
        BLD     R20, 0
        COM     R17
        COM     R18
        COM     R19
        NEG     R16
        SBCI    R17, 255
        SBCI    R18, 255
        SBCI    R19, 255
        LSL     R19
        LDI     R16, 0
        ROL     R16
        OR      R20, R16
        LDI     R16, 1
        EOR     R20, R16
        BRNE    ??ecc_point_validate_3
        LDD     R16, Y+16
        LDD     R17, Y+17
        LDD     R18, Y+18
        LDD     R19, Y+19
        SUBI    R16, 255
        SBCI    R17, 255
        SBCI    R18, 255
        SBCI    R19, 255
        LDD     R20, Y+20
        SUBI    R20, 255
        SBCI    R21, 255
        SBCI    R22, 255
        SBCI    R23, 255
        OR      R16, R20
        OR      R17, R21
        OR      R18, R22
        OR      R19, R23
        BST     R19, 7
        LDI     R20, 0
        BLD     R20, 0
        COM     R17
        COM     R18
        COM     R19
        NEG     R16
        SBCI    R17, 255
        SBCI    R18, 255
        SBCI    R19, 255
        LSL     R19
        LDI     R16, 0
        ROL     R16
        OR      R20, R16
        LDI     R16, 1
        EOR     R20, R16
        BRNE    ??ecc_point_validate_3
        LDI     R16, 0
??ecc_point_validate_3:
        AND     R16, R24
        LDI     R17, 0
        JMP     ?Subroutine5
//  688 }
          CFI EndBlock cfiBlock59
//  689 
//  690 

        RSEG FARCODE:CODE:NOROOT(1)
//  691 __inline void R5_to_R1(point_precomp_t P, point_extproj_t Q)
R5_to_R1:
          CFI Block cfiBlock60 Using cfiCommon0
          CFI Function R5_to_R1
//  692 { // Conversion from representation (x+y,y-x,2dt) to (X,Y,Z,Ta,Tb) 
        ST      -Y, R7
          CFI R7 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R6
          CFI R6 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R5
          CFI R5 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        ST      -Y, R4
          CFI R4 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        ST      -Y, R27
          CFI R27 Frame(CFA_Y, -5)
          CFI CFA_Y Y+5
        ST      -Y, R26
          CFI R26 Frame(CFA_Y, -6)
          CFI CFA_Y Y+6
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -7)
          CFI CFA_Y Y+7
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -8)
          CFI CFA_Y Y+8
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        REQUIRE ?Register_R6_is_cg_reg
        REQUIRE ?Register_R7_is_cg_reg
        MOVW    R27:R26, R17:R16
        MOVW    R25:R24, R19:R18
//  693   // Input:  P = (x1+y1,y1-x1,2dt1) corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates, where Z1=1
//  694   // Output: Q = (x1,y1,z1,x1,y1), where z1=1, corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates 
//  695 
//  696     fp2sub1271(P->xy, P->yx, Q->x);        // 2*x1
        MOVW    R5:R4, R17:R16
        LDI     R16, 32
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
        MOVW    R21:R20, R19:R18
        MOVW    R19:R18, R5:R4
        MOV     R16, R26
          CFI FunCall fpsub1271
        CALL    fpsub1271
        MOVW    R21:R20, R25:R24
        SUBI    R20, 240
        SBCI    R21, 255
        LDI     R16, 16
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
        MOVW    R19:R18, R5:R4
        MOVW    R17:R16, R27:R26
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpsub1271
        CALL    fpsub1271
//  697     fp2add1271(P->xy, P->yx, Q->y);        // 2*y1
        MOVW    R7:R6, R25:R24
        LDI     R16, 32
        ADD     R6, R16
        LDI     R16, 0
        ADC     R7, R16
        MOVW    R5:R4, R27:R26
        LDI     R16, 32
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
        MOVW    R21:R20, R7:R6
        MOVW    R19:R18, R5:R4
        MOVW    R17:R16, R27:R26
          CFI FunCall fpadd1271
        CALL    fpadd1271
        LDI     R16, 16
        ADD     R6, R16
        LDI     R16, 0
        ADC     R7, R16
        MOVW    R21:R20, R7:R6
        LDI     R16, 16
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
        MOVW    R19:R18, R5:R4
        ADIW    R27:R26, 16
        MOVW    R17:R16, R27:R26
          CFI FunCall fpadd1271
        CALL    fpadd1271
//  698     fp2div1271(Q->x);                      // XQ = x1
        MOVW    R17:R16, R25:R24
          CFI FunCall fpdiv1271
        CALL    fpdiv1271
        MOVW    R17:R16, R25:R24
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpdiv1271
        CALL    fpdiv1271
//  699     fp2div1271(Q->y);                      // YQ = y1 
        MOVW    R27:R26, R25:R24
        ADIW    R27:R26, 32
        MOVW    R17:R16, R27:R26
          CFI FunCall fpdiv1271
        CALL    fpdiv1271
        ADIW    R27:R26, 16
        MOVW    R17:R16, R27:R26
          CFI FunCall fpdiv1271
        CALL    fpdiv1271
//  700     fp2zero1271(Q->z); Q->z[0][0] = 1;     // ZQ = 1
        MOVW    R27:R26, R25:R24
        SUBI    R26, 192
        SBCI    R27, 255
        MOVW    R17:R16, R27:R26
          CFI FunCall fpzero1271
        CALL    fpzero1271
        MOVW    R17:R16, R27:R26
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpzero1271
        CALL    fpzero1271
        LDI     R16, 1
        ST      X+, R16
        LDI     R16, 0
        ST      X+, R16
        ST      X+, R16
        ST      X, R16
//  701     fp2copy1271(Q->x, Q->ta);              // TaQ = x1
        MOVW    R27:R26, R25:R24
        SUBI    R26, 160
        SBCI    R27, 255
        MOVW    R19:R18, R27:R26
        MOVW    R17:R16, R25:R24
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        ADIW    R27:R26, 16
        MOVW    R19:R18, R27:R26
        MOVW    R17:R16, R25:R24
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
//  702     fp2copy1271(Q->y, Q->tb);              // TbQ = y1
        MOVW    R27:R26, R25:R24
        SUBI    R26, 128
        SBCI    R27, 255
        ADIW    R25:R24, 32
        JMP     ??Subroutine11_0
//  703 }
          CFI EndBlock cfiBlock60
//  704 

        RSEG FARCODE:CODE:NOROOT(1)
//  705 static __inline void eccmadd(point_precomp_t Q, point_extproj_t P)
eccmadd:
          CFI Block cfiBlock61 Using cfiCommon0
          CFI Function eccmadd
//  706 { // Mixed point addition P = P+Q or P = P+P
        ST      -Y, R11
          CFI R11 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R10
          CFI R10 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R9
          CFI R9 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        ST      -Y, R8
          CFI R8 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        ST      -Y, R7
          CFI R7 Frame(CFA_Y, -5)
          CFI CFA_Y Y+5
        ST      -Y, R6
          CFI R6 Frame(CFA_Y, -6)
          CFI CFA_Y Y+6
        ST      -Y, R5
          CFI R5 Frame(CFA_Y, -7)
          CFI CFA_Y Y+7
        ST      -Y, R4
          CFI R4 Frame(CFA_Y, -8)
          CFI CFA_Y Y+8
        ST      -Y, R27
          CFI R27 Frame(CFA_Y, -9)
          CFI CFA_Y Y+9
        ST      -Y, R26
          CFI R26 Frame(CFA_Y, -10)
          CFI CFA_Y Y+10
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -11)
          CFI CFA_Y Y+11
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -12)
          CFI CFA_Y Y+12
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        REQUIRE ?Register_R6_is_cg_reg
        REQUIRE ?Register_R7_is_cg_reg
        REQUIRE ?Register_R8_is_cg_reg
        REQUIRE ?Register_R9_is_cg_reg
        REQUIRE ?Register_R10_is_cg_reg
        REQUIRE ?Register_R11_is_cg_reg
        SBIW    R29:R28, 63
          CFI CFA_Y Y+75
        SBIW    R29:R28, 1
          CFI CFA_Y Y+76
        MOVW    R9:R8, R17:R16
        MOVW    R25:R24, R19:R18
//  707   // Inputs: P = (X1,Y1,Z1,Ta,Tb), where T1 = Ta*Tb, corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates
//  708   //         Q = (x2+y2,y2-x2,2dt2) corresponding to (X2:Y2:Z2:T2) in extended twisted Edwards coordinates, where Z2=1  
//  709   // Output: P = (Xfinal,Yfinal,Zfinal,Tafinal,Tbfinal), where Tfinal = Tafinal*Tbfinal, 
//  710   //         corresponding to (Xfinal:Yfinal:Zfinal:Tfinal) in extended twisted Edwards coordinates
//  711     f2elm_t t1, t2;
//  712     
//  713     fp2mul1271(P->ta, P->tb, P->ta);        // Ta = T1
        MOVW    R7:R6, R19:R18
        LDI     R16, 128
        ADD     R6, R16
        LDI     R16, 0
        ADC     R7, R16
        MOVW    R27:R26, R19:R18
        SUBI    R26, 160
        SBCI    R27, 255
        MOVW    R21:R20, R27:R26
        MOVW    R19:R18, R7:R6
        MOVW    R17:R16, R27:R26
          CFI FunCall fp2mul1271
        CALL    fp2mul1271
//  714     fp2add1271(P->z, P->z, t1);             // t1 = 2Z1        
        MOVW    R5:R4, R25:R24
        LDI     R16, 64
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
        MOVW    R21:R20, R29:R28
        MOVW    R19:R18, R5:R4
        MOVW    R17:R16, R5:R4
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 240
        SBCI    R21, 255
        MOVW    R19:R18, R5:R4
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R5:R4
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpadd1271
        CALL    fpadd1271
//  715     fp2mul1271(P->ta, Q->t2, P->ta);        // Ta = 2dT1*t2
        MOVW    R21:R20, R27:R26
        MOVW    R19:R18, R9:R8
        SUBI    R18, 192
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
          CFI FunCall fp2mul1271
        CALL    fp2mul1271
//  716     fp2add1271(P->x, P->y, P->z);           // Z = (X1+Y1) 
        MOVW    R17:R16, R25:R24
        SUBI    R16, 224
        SBCI    R17, 255
        MOVW    R11:R10, R17:R16
        MOVW    R21:R20, R5:R4
        MOVW    R19:R18, R17:R16
        MOVW    R17:R16, R25:R24
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R21:R20, R5:R4
        SUBI    R20, 240
        SBCI    R21, 255
        MOVW    R19:R18, R11:R10
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpadd1271
        CALL    fpadd1271
//  717     fp2sub1271(P->y, P->x, P->tb);          // Tb = (Y1-X1)
        MOVW    R17:R16, R25:R24
        SUBI    R16, 224
        SBCI    R17, 255
        MOVW    R21:R20, R7:R6
        MOVW    R19:R18, R25:R24
          CFI FunCall fpsub1271
        CALL    fpsub1271
        MOVW    R21:R20, R7:R6
        SUBI    R20, 240
        SBCI    R21, 255
        MOVW    R19:R18, R25:R24
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R11:R10
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpsub1271
        CALL    fpsub1271
//  718     fp2sub1271(t1, P->ta, t2);              // t2 = theta
        MOVW    R21:R20, R29:R28
        SUBI    R20, 224
        SBCI    R21, 255
        MOVW    R19:R18, R27:R26
        MOVW    R17:R16, R29:R28
          CFI FunCall fpsub1271
        CALL    fpsub1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 208
        SBCI    R21, 255
        MOVW    R19:R18, R27:R26
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpsub1271
        CALL    fpsub1271
//  719     fp2add1271(t1, P->ta, t1);              // t1 = alpha
        MOVW    R21:R20, R29:R28
        MOVW    R19:R18, R27:R26
        MOVW    R17:R16, R29:R28
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 240
        SBCI    R21, 255
        MOVW    R19:R18, R27:R26
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpadd1271
        CALL    fpadd1271
//  720     fp2mul1271(Q->xy, P->z, P->ta);         // Ta = (X1+Y1)(x2+y2)
        MOVW    R21:R20, R27:R26
        MOVW    R19:R18, R5:R4
        MOVW    R17:R16, R9:R8
          CFI FunCall fp2mul1271
        CALL    fp2mul1271
//  721     fp2mul1271(Q->yx, P->tb, P->x);         // X = (Y1-X1)(y2-x2)
        MOVW    R21:R20, R25:R24
        MOVW    R19:R18, R7:R6
        MOVW    R17:R16, R9:R8
        SUBI    R16, 224
        SBCI    R17, 255
          CFI FunCall fp2mul1271
        CALL    fp2mul1271
//  722     fp2mul1271(t1, t2, P->z);               // Zfinal = theta*alpha
        MOVW    R21:R20, R5:R4
        MOVW    R19:R18, R29:R28
        SUBI    R18, 224
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
          CFI FunCall fp2mul1271
        CALL    fp2mul1271
//  723     fp2sub1271(P->ta, P->x, P->tb);         // Tbfinal = beta
        MOVW    R21:R20, R7:R6
        MOVW    R19:R18, R25:R24
        MOVW    R17:R16, R27:R26
          CFI FunCall fpsub1271
        CALL    fpsub1271
        MOVW    R21:R20, R7:R6
        SUBI    R20, 240
        SBCI    R21, 255
        MOVW    R19:R18, R25:R24
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpsub1271
        CALL    fpsub1271
//  724     fp2add1271(P->ta, P->x, P->ta);         // Tafinal = omega
        MOVW    R21:R20, R27:R26
        MOVW    R19:R18, R25:R24
        MOVW    R17:R16, R27:R26
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R21:R20, R27:R26
        SUBI    R20, 240
        SBCI    R21, 255
        MOVW    R19:R18, R25:R24
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpadd1271
        CALL    fpadd1271
//  725     fp2mul1271(P->tb, t2, P->x);            // Xfinal = beta*theta
        MOVW    R21:R20, R25:R24
        MOVW    R19:R18, R29:R28
        SUBI    R18, 224
        SBCI    R19, 255
        MOVW    R17:R16, R7:R6
          CFI FunCall fp2mul1271
        CALL    fp2mul1271
//  726     fp2mul1271(P->ta, t1, P->y);            // Yfinal = alpha*omega
        ADIW    R25:R24, 32
        MOVW    R21:R20, R25:R24
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R27:R26
          CFI FunCall fp2mul1271
        CALL    fp2mul1271
//  727 }
        ADIW    R29:R28, 63
          CFI CFA_Y Y+13
        ADIW    R29:R28, 1
          CFI EndBlock cfiBlock61
        REQUIRE ?Subroutine2
        ;               // Fall through to label ?Subroutine2

        RSEG FARCODE:CODE:NOROOT(1)
?Subroutine2:
          CFI Block cfiBlock62 Using cfiCommon0
          CFI NoFunction
          CFI CFA_Y Y+12
          CFI R4 Frame(CFA_Y, -8)
          CFI R5 Frame(CFA_Y, -7)
          CFI R6 Frame(CFA_Y, -6)
          CFI R7 Frame(CFA_Y, -5)
          CFI R8 Frame(CFA_Y, -4)
          CFI R9 Frame(CFA_Y, -3)
          CFI R10 Frame(CFA_Y, -2)
          CFI R11 Frame(CFA_Y, -1)
          CFI R24 Frame(CFA_Y, -12)
          CFI R25 Frame(CFA_Y, -11)
          CFI R26 Frame(CFA_Y, -10)
          CFI R27 Frame(CFA_Y, -9)
        LD      R24, Y+
          CFI CFA_Y Y+11
          CFI R24 SameValue
        LD      R25, Y+
          CFI CFA_Y Y+10
          CFI R25 SameValue
        LD      R26, Y+
          CFI CFA_Y Y+9
          CFI R26 SameValue
        LD      R27, Y+
          CFI CFA_Y Y+8
          CFI R27 SameValue
        LD      R4, Y+
          CFI CFA_Y Y+7
          CFI R4 SameValue
        LD      R5, Y+
          CFI CFA_Y Y+6
          CFI R5 SameValue
        LD      R6, Y+
          CFI CFA_Y Y+5
          CFI R6 SameValue
        LD      R7, Y+
          CFI CFA_Y Y+4
          CFI R7 SameValue
        LD      R8, Y+
          CFI CFA_Y Y+3
          CFI R8 SameValue
        LD      R9, Y+
          CFI CFA_Y Y+2
          CFI R9 SameValue
        LD      R10, Y+
          CFI CFA_Y Y+1
          CFI R10 SameValue
        LD      R11, Y+
          CFI CFA_Y Y+0
          CFI R11 SameValue
        RET
          CFI EndBlock cfiBlock62
//  728 

        RSEG FARCODE:CODE:NOROOT(1)
//  729 static __inline void eccmadd2(point_precomp_t Q, point_extproj_t P)
eccmadd2:
          CFI Block cfiBlock63 Using cfiCommon0
          CFI Function eccmadd2
//  730 { // Mixed point addition P = P+Q or P = P+P
        ST      -Y, R11
          CFI R11 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R10
          CFI R10 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R9
          CFI R9 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        ST      -Y, R8
          CFI R8 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        ST      -Y, R7
          CFI R7 Frame(CFA_Y, -5)
          CFI CFA_Y Y+5
        ST      -Y, R6
          CFI R6 Frame(CFA_Y, -6)
          CFI CFA_Y Y+6
        ST      -Y, R5
          CFI R5 Frame(CFA_Y, -7)
          CFI CFA_Y Y+7
        ST      -Y, R4
          CFI R4 Frame(CFA_Y, -8)
          CFI CFA_Y Y+8
        ST      -Y, R27
          CFI R27 Frame(CFA_Y, -9)
          CFI CFA_Y Y+9
        ST      -Y, R26
          CFI R26 Frame(CFA_Y, -10)
          CFI CFA_Y Y+10
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -11)
          CFI CFA_Y Y+11
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -12)
          CFI CFA_Y Y+12
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        REQUIRE ?Register_R6_is_cg_reg
        REQUIRE ?Register_R7_is_cg_reg
        REQUIRE ?Register_R8_is_cg_reg
        REQUIRE ?Register_R9_is_cg_reg
        REQUIRE ?Register_R10_is_cg_reg
        REQUIRE ?Register_R11_is_cg_reg
        SBIW    R29:R28, 63
          CFI CFA_Y Y+75
        SBIW    R29:R28, 33
          CFI CFA_Y Y+108
        MOVW    R5:R4, R17:R16
        MOVW    R25:R24, R19:R18
//  731   // Inputs: P = (X1,Y1,Z1,Ta,Tb), where T1 = Ta*Tb, corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates
//  732   //         Q = (x2+y2,y2-x2,2dt2) corresponding to (X2:Y2:Z2:T2) in extended twisted Edwards coordinates, where Z2=1  
//  733   // Output: P = (Xfinal,Yfinal,Zfinal,Tafinal,Tbfinal), where Tfinal = Tafinal*Tbfinal, 
//  734   //         corresponding to (Xfinal:Yfinal:Zfinal:Tfinal) in extended twisted Edwards coordinates
//  735     f2elm_t t1, t2, t3;
//  736     
//  737     fp2mul1271(P->ta, P->tb, P->ta);        // Ta = T1
        MOVW    R9:R8, R19:R18
        LDI     R16, 128
        ADD     R8, R16
        LDI     R16, 0
        ADC     R9, R16
        MOVW    R27:R26, R19:R18
        SUBI    R26, 160
        SBCI    R27, 255
        MOVW    R21:R20, R27:R26
        MOVW    R19:R18, R9:R8
        MOVW    R17:R16, R27:R26
          CFI FunCall fp2mul1271
        CALL    fp2mul1271
//  738     fp2add1271(P->z, P->z, t1);             // t1 = 2Z1      
        MOVW    R7:R6, R25:R24
        LDI     R16, 64
        ADD     R6, R16
        LDI     R16, 0
        ADC     R7, R16
        MOVW    R21:R20, R29:R28
        SUBI    R20, 224
        SBCI    R21, 255
        MOVW    R19:R18, R7:R6
        MOVW    R17:R16, R7:R6
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 208
        SBCI    R21, 255
        MOVW    R19:R18, R7:R6
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R7:R6
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpadd1271
        CALL    fpadd1271
//  739     fp2copy1271_flash(Q->t2, t3);
        MOVW    R11:R10, R5:R4
        LDI     R16, 64
        ADD     R10, R16
        LDI     R16, 0
        ADC     R11, R16
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R11:R10
          CFI FunCall fpcopy1271_flash
        CALL    fpcopy1271_flash
        MOVW    R19:R18, R29:R28
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R11:R10
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpcopy1271_flash
        CALL    fpcopy1271_flash
//  740     fp2mul1271(P->ta, t3, P->ta);           // Ta = 2dT1*t2 
        MOVW    R21:R20, R27:R26
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R27:R26
          CFI FunCall fp2mul1271
        CALL    fp2mul1271
//  741     fp2add1271(P->x, P->y, P->z);           // Z = (X1+Y1) 
        MOVW    R17:R16, R25:R24
        SUBI    R16, 224
        SBCI    R17, 255
        MOVW    R11:R10, R17:R16
        MOVW    R21:R20, R7:R6
        MOVW    R19:R18, R17:R16
        MOVW    R17:R16, R25:R24
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R21:R20, R7:R6
        SUBI    R20, 240
        SBCI    R21, 255
        MOVW    R19:R18, R11:R10
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpadd1271
        CALL    fpadd1271
//  742     fp2sub1271(P->y, P->x, P->tb);          // Tb = (Y1-X1)
        MOVW    R17:R16, R25:R24
        SUBI    R16, 224
        SBCI    R17, 255
        MOVW    R21:R20, R9:R8
        MOVW    R19:R18, R25:R24
          CFI FunCall fpsub1271
        CALL    fpsub1271
        MOVW    R21:R20, R9:R8
        SUBI    R20, 240
        SBCI    R21, 255
        MOVW    R19:R18, R25:R24
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R11:R10
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpsub1271
        CALL    fpsub1271
//  743     fp2sub1271(t1, P->ta, t2);              // t2 = theta
        MOVW    R21:R20, R29:R28
        SUBI    R20, 192
        SBCI    R21, 255
        MOVW    R19:R18, R27:R26
        MOVW    R17:R16, R29:R28
        SUBI    R16, 224
        SBCI    R17, 255
          CFI FunCall fpsub1271
        CALL    fpsub1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 176
        SBCI    R21, 255
        MOVW    R19:R18, R27:R26
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 208
        SBCI    R17, 255
          CFI FunCall fpsub1271
        CALL    fpsub1271
//  744     fp2add1271(t1, P->ta, t1);              // t1 = alpha
        MOVW    R21:R20, R29:R28
        SUBI    R20, 224
        SBCI    R21, 255
        MOVW    R19:R18, R27:R26
        MOVW    R17:R16, R29:R28
        SUBI    R16, 224
        SBCI    R17, 255
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R21:R20, R29:R28
        SUBI    R20, 208
        SBCI    R21, 255
        MOVW    R19:R18, R27:R26
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 208
        SBCI    R17, 255
          CFI FunCall fpadd1271
        CALL    fpadd1271
//  745     fp2copy1271_flash(Q->xy, t3);
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R5:R4
          CFI FunCall fpcopy1271_flash
        CALL    fpcopy1271_flash
        MOVW    R19:R18, R29:R28
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R5:R4
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpcopy1271_flash
        CALL    fpcopy1271_flash
//  746     fp2mul1271(t3, P->z, P->ta);            // Ta = (X1+Y1)(x2+y2)   
        MOVW    R21:R20, R27:R26
        MOVW    R19:R18, R7:R6
        MOVW    R17:R16, R29:R28
          CFI FunCall fp2mul1271
        CALL    fp2mul1271
//  747     fp2copy1271_flash(Q->yx, t3);
        LDI     R16, 32
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R5:R4
          CFI FunCall fpcopy1271_flash
        CALL    fpcopy1271_flash
        MOVW    R19:R18, R29:R28
        SUBI    R18, 240
        SBCI    R19, 255
        LDI     R16, 16
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
        MOVW    R17:R16, R5:R4
          CFI FunCall fpcopy1271_flash
        CALL    fpcopy1271_flash
//  748     fp2mul1271(t3, P->tb, P->x);            // X = (Y1-X1)(y2-x2)       
        MOVW    R21:R20, R25:R24
        MOVW    R19:R18, R9:R8
        MOVW    R17:R16, R29:R28
          CFI FunCall fp2mul1271
        CALL    fp2mul1271
//  749     fp2mul1271(t1, t2, P->z);               // Zfinal = theta*alpha
        MOVW    R21:R20, R7:R6
        MOVW    R19:R18, R29:R28
        SUBI    R18, 192
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 224
        SBCI    R17, 255
          CFI FunCall fp2mul1271
        CALL    fp2mul1271
//  750     fp2sub1271(P->ta, P->x, P->tb);         // Tbfinal = beta
        MOVW    R21:R20, R9:R8
        MOVW    R19:R18, R25:R24
        MOVW    R17:R16, R27:R26
          CFI FunCall fpsub1271
        CALL    fpsub1271
        MOVW    R21:R20, R9:R8
        SUBI    R20, 240
        SBCI    R21, 255
        MOVW    R19:R18, R25:R24
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpsub1271
        CALL    fpsub1271
//  751     fp2add1271(P->ta, P->x, P->ta);         // Tafinal = omega
        MOVW    R21:R20, R27:R26
        MOVW    R19:R18, R25:R24
        MOVW    R17:R16, R27:R26
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R21:R20, R27:R26
        SUBI    R20, 240
        SBCI    R21, 255
        MOVW    R19:R18, R25:R24
        SUBI    R18, 240
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpadd1271
        CALL    fpadd1271
//  752     fp2mul1271(P->tb, t2, P->x);            // Xfinal = beta*theta
        MOVW    R21:R20, R25:R24
        MOVW    R19:R18, R29:R28
        SUBI    R18, 192
        SBCI    R19, 255
        MOVW    R17:R16, R9:R8
          CFI FunCall fp2mul1271
        CALL    fp2mul1271
//  753     fp2mul1271(P->ta, t1, P->y);            // Yfinal = alpha*omega
        ADIW    R25:R24, 32
        MOVW    R21:R20, R25:R24
        MOVW    R19:R18, R29:R28
        SUBI    R18, 224
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
          CFI FunCall fp2mul1271
        CALL    fp2mul1271
//  754 }
        ADIW    R29:R28, 63
          CFI CFA_Y Y+45
        ADIW    R29:R28, 33
          CFI CFA_Y Y+12
        RJMP    ?Subroutine2
          CFI EndBlock cfiBlock63

        RSEG FARCODE:CODE:NOROOT(1)
mLSB_set_recode:
          CFI Block cfiBlock64 Using cfiCommon0
          CFI Function mLSB_set_recode
        ST      -Y, R10
          CFI R10 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R9
          CFI R9 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R8
          CFI R8 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        ST      -Y, R7
          CFI R7 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        ST      -Y, R6
          CFI R6 Frame(CFA_Y, -5)
          CFI CFA_Y Y+5
        ST      -Y, R5
          CFI R5 Frame(CFA_Y, -6)
          CFI CFA_Y Y+6
        ST      -Y, R4
          CFI R4 Frame(CFA_Y, -7)
          CFI CFA_Y Y+7
        ST      -Y, R27
          CFI R27 Frame(CFA_Y, -8)
          CFI CFA_Y Y+8
        ST      -Y, R26
          CFI R26 Frame(CFA_Y, -9)
          CFI CFA_Y Y+9
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -10)
          CFI CFA_Y Y+10
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -11)
          CFI CFA_Y Y+11
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        REQUIRE ?Register_R6_is_cg_reg
        REQUIRE ?Register_R7_is_cg_reg
        REQUIRE ?Register_R8_is_cg_reg
        REQUIRE ?Register_R9_is_cg_reg
        REQUIRE ?Register_R10_is_cg_reg
        SBIW    R29:R28, 24
          CFI CFA_Y Y+35
        MOVW    R3:R2, R17:R16
        MOVW    R9:R8, R19:R18
        MOVW    R31:R30, R19:R18
        SUBI    R30, 158
        SBCI    R31, 255
        LDI     R16, 0
        ST      Z, R16
        STD     Z+1, R16
        MOVW    R27:R26, R3:R2
        LDI     R25, 3
??mLSB_set_recode_0:
        MOVW    R31:R30, R27:R26
        LDD     R16, Z+8
        ANDI    R16, 0x01
        LSR     R16
        LDI     R23, 0
        ROR     R23
        ST      Y, R16
        STD     Y+1, R16
        STD     Y+2, R16
        STD     Y+3, R16
        STD     Y+4, R16
        STD     Y+5, R16
        STD     Y+6, R16
        STD     Y+7, R23
        LD      R16, Z
        LDD     R17, Z+1
        LDD     R18, Z+2
        LDD     R19, Z+3
        LDD     R20, Z+4
        LDD     R21, Z+5
        LDD     R22, Z+6
        LDD     R23, Z+7
        LSR     R23
        ROR     R22
        ROR     R21
        ROR     R20
        ROR     R19
        ROR     R18
        ROR     R17
        ROR     R16
        MOVW    R31:R30, R29:R28
          CFI FunCall ?LL_XOR_L12
        CALL    ?LL_XOR_L12
        MOVW    R31:R30, R27:R26
        ST      Z, R16
        STD     Z+1, R17
        STD     Z+2, R18
        STD     Z+3, R19
        STD     Z+4, R20
        STD     Z+5, R21
        STD     Z+6, R22
        STD     Z+7, R23
        ADIW    R27:R26, 8
        DEC     R25
        BRNE    ??mLSB_set_recode_0
        MOVW    R31:R30, R3:R2
        LDD     R16, Z+24
        LDD     R17, Z+25
        LDD     R18, Z+26
        LDD     R19, Z+27
        LDD     R20, Z+28
        LDD     R21, Z+29
        LDD     R22, Z+30
        LDD     R23, Z+31
        LSR     R23
        ROR     R22
        ROR     R21
        ROR     R20
        ROR     R19
        ROR     R18
        ROR     R17
        ROR     R16
        STD     Z+24, R16
        STD     Z+25, R17
        STD     Z+26, R18
        STD     Z+27, R19
        STD     Z+28, R20
        STD     Z+29, R21
        STD     Z+30, R22
        STD     Z+31, R23
        CLR     R4
        CLR     R5
        MOVW    R1:R0, R9:R8
??mLSB_set_recode_1:
        LD      R24, Z
        ANDI    R24, 0x01
        LDI     R25, 0
        SBIW    R25:R24, 1
        MOVW    R31:R30, R1:R0
        ST      Z, R24
        STD     Z+1, R25
        MOVW    R27:R26, R3:R2
        LDI     R25, 3
??mLSB_set_recode_2:
        MOVW    R31:R30, R27:R26
        LDD     R16, Z+8
        ANDI    R16, 0x01
        LSR     R16
        LDI     R23, 0
        ROR     R23
        ST      Y, R16
        STD     Y+1, R16
        STD     Y+2, R16
        STD     Y+3, R16
        STD     Y+4, R16
        STD     Y+5, R16
        STD     Y+6, R16
        STD     Y+7, R23
        LD      R16, Z
        LDD     R17, Z+1
        LDD     R18, Z+2
        LDD     R19, Z+3
        LDD     R20, Z+4
        LDD     R21, Z+5
        LDD     R22, Z+6
        LDD     R23, Z+7
        LSR     R23
        ROR     R22
        ROR     R21
        ROR     R20
        ROR     R19
        ROR     R18
        ROR     R17
        ROR     R16
        MOVW    R31:R30, R29:R28
          CFI FunCall ?LL_XOR_L12
        CALL    ?LL_XOR_L12
        MOVW    R31:R30, R27:R26
        ST      Z, R16
        STD     Z+1, R17
        STD     Z+2, R18
        STD     Z+3, R19
        STD     Z+4, R20
        STD     Z+5, R21
        STD     Z+6, R22
        STD     Z+7, R23
        ADIW    R27:R26, 8
        DEC     R25
        BRNE    ??mLSB_set_recode_2
        MOVW    R31:R30, R3:R2
        LDD     R16, Z+24
        LDD     R17, Z+25
        LDD     R18, Z+26
        LDD     R19, Z+27
        LDD     R20, Z+28
        LDD     R21, Z+29
        LDD     R22, Z+30
        LDD     R23, Z+31
        LSR     R23
        ROR     R22
        ROR     R21
        ROR     R20
        ROR     R19
        ROR     R18
        ROR     R17
        ROR     R16
        STD     Z+24, R16
        STD     Z+25, R17
        STD     Z+26, R18
        STD     Z+27, R19
        STD     Z+28, R20
        STD     Z+29, R21
        STD     Z+30, R22
        STD     Z+31, R23
        LDI     R16, 1
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
        LDI     R16, 2
        ADD     R0, R16
        LDI     R16, 0
        ADC     R1, R16
        LDI     R16, 49
        CP      R4, R16
        LDI     R16, 0
        CPC     R5, R16
        BRCC    $+2+2
        RJMP    ??mLSB_set_recode_1
        LDI     R16, 50
        MOV     R4, R16
        CLR     R5
        MOVW    R7:R6, R9:R8
        LDI     R16, 100
        ADD     R6, R16
        ADC     R7, R5
        LDI     R16, 200
        MOV     R10, R16
??mLSB_set_recode_3:
        MOVW    R31:R30, R3:R2
        LD      R16, Z
        ANDI    R16, 0x01
        LDI     R17, 0
        MOVW    R31:R30, R7:R6
        ST      Z, R16
        STD     Z+1, R17
        MOVW    R27:R26, R3:R2
        LDI     R25, 3
??mLSB_set_recode_4:
        MOVW    R31:R30, R27:R26
        LDD     R16, Z+8
        ANDI    R16, 0x01
        LSR     R16
        LDI     R23, 0
        ROR     R23
        ST      Y, R16
        STD     Y+1, R16
        STD     Y+2, R16
        STD     Y+3, R16
        STD     Y+4, R16
        STD     Y+5, R16
        STD     Y+6, R16
        STD     Y+7, R23
        LD      R16, Z
        LDD     R17, Z+1
        LDD     R18, Z+2
        LDD     R19, Z+3
        LDD     R20, Z+4
        LDD     R21, Z+5
        LDD     R22, Z+6
        LDD     R23, Z+7
        LSR     R23
        ROR     R22
        ROR     R21
        ROR     R20
        ROR     R19
        ROR     R18
        ROR     R17
        ROR     R16
        MOVW    R31:R30, R29:R28
          CFI FunCall ?LL_XOR_L12
        CALL    ?LL_XOR_L12
        MOVW    R31:R30, R27:R26
        ST      Z, R16
        STD     Z+1, R17
        STD     Z+2, R18
        STD     Z+3, R19
        STD     Z+4, R20
        STD     Z+5, R21
        STD     Z+6, R22
        STD     Z+7, R23
        ADIW    R27:R26, 8
        DEC     R25
        BRNE    ??mLSB_set_recode_4
        MOVW    R31:R30, R3:R2
        LDD     R16, Z+24
        LDD     R17, Z+25
        LDD     R18, Z+26
        LDD     R19, Z+27
        LDD     R20, Z+28
        LDD     R21, Z+29
        LDD     R22, Z+30
        LDD     R23, Z+31
        LSR     R23
        ROR     R22
        ROR     R21
        ROR     R20
        ROR     R19
        ROR     R18
        ROR     R17
        ROR     R16
        STD     Z+24, R16
        STD     Z+25, R17
        STD     Z+26, R18
        STD     Z+27, R19
        STD     Z+28, R20
        STD     Z+29, R21
        STD     Z+30, R22
        STD     Z+31, R23
        LDI     R20, 50
        LDI     R21, 0
        MOVW    R17:R16, R5:R4
          CFI FunCall ?US_DIVMOD_S_L02
        CALL    ?US_DIVMOD_S_L02
        MOVW    R19:R18, R17:R16
        LDI     R16, 50
        MUL     R19, R16
        MOV     R19, R0
        MUL     R18, R16
        ADD     R19, R1
        MOVW    R17:R16, R5:R4
        SUB     R16, R0
        SBC     R17, R19
        LSL     R16
        ROL     R17
        MOVW    R31:R30, R9:R8
        ADD     R30, R16
        ADC     R31, R17
        LD      R16, Z
        LDD     R17, Z+1
        NEG     R17
        NEG     R16
        SBCI    R17, 0
        MOVW    R31:R30, R7:R6
        LD      R18, Z
        LDD     R19, Z+1
        AND     R16, R18
        AND     R17, R19
        LDI     R18, 0
        STD     Y+16, R16
        STD     Y+17, R17
        STD     Y+18, R18
        STD     Y+19, R18
        STD     Y+20, R18
        STD     Y+21, R18
        STD     Y+22, R18
        STD     Y+23, R18
        MOVW    R31:R30, R3:R2
        LD      R16, Z
        LDD     R17, Z+1
        LDD     R18, Z+2
        LDD     R19, Z+3
        LDD     R20, Z+4
        LDD     R21, Z+5
        LDD     R22, Z+6
        LDD     R23, Z+7
        MOVW    R31:R30, R29:R28
        ADIW    R31:R30, 16
          CFI FunCall ?LL_ADD_L12
        CALL    ?LL_ADD_L12
        MOVW    R31:R30, R3:R2
        ST      Z, R16
        STD     Z+1, R17
        STD     Z+2, R18
        STD     Z+3, R19
        STD     Z+4, R20
        STD     Z+5, R21
        STD     Z+6, R22
        STD     Z+7, R23
        BST     R19, 7
        LDI     R20, 0
        LDI     R21, 0
        BLD     R20, 0
        COM     R17
        COM     R18
        COM     R19
        NEG     R16
        SBCI    R17, 255
        SBCI    R18, 255
        SBCI    R19, 255
        LSL     R19
        LDI     R16, 0
        ROL     R16
        OR      R20, R16
        LDI     R16, 1
        EOR     R16, R20
        ST      Y, R16
        STD     Y+1, R21
        STD     Y+2, R21
        STD     Y+3, R21
        STD     Y+4, R21
        STD     Y+5, R21
        STD     Y+6, R21
        STD     Y+7, R21
        LDD     R16, Y+16
        LDD     R17, Y+17
        LDD     R18, Y+18
        LDD     R19, Y+19
        LDD     R20, Y+20
        LDD     R21, Y+21
        LDD     R22, Y+22
        LDD     R23, Y+23
        MOVW    R31:R30, R29:R28
          CFI FunCall ?LL_AND_L12
        CALL    ?LL_AND_L12
        STD     Y+8, R16
        STD     Y+9, R17
        STD     Y+10, R18
        STD     Y+11, R19
        STD     Y+12, R20
        STD     Y+13, R21
        STD     Y+14, R22
        STD     Y+15, R23
        MOVW    R27:R26, R3:R2
        ADIW    R27:R26, 8
        LDI     R25, 3
??mLSB_set_recode_5:
        LD      R16, X+
        LD      R17, X+
        LD      R18, X+
        LD      R19, X+
        LD      R20, X+
        LD      R21, X+
        LD      R22, X+
        LD      R23, X
        SBIW    R27:R26, 7
        ADIW    R31:R30, 8
          CFI FunCall ?LL_ADD_L12
        CALL    ?LL_ADD_L12
        MOVW    R31:R30, R27:R26
        ST      Z, R16
        STD     Z+1, R17
        STD     Z+2, R18
        STD     Z+3, R19
        STD     Z+4, R20
        STD     Z+5, R21
        STD     Z+6, R22
        STD     Z+7, R23
        ADIW    R27:R26, 8
        LDD     R17, Z+1
        LDD     R18, Z+2
        LDD     R19, Z+3
        BST     R19, 7
        LDI     R20, 0
        LDI     R21, 0
        BLD     R20, 0
        COM     R17
        COM     R18
        COM     R19
        NEG     R16
        SBCI    R17, 255
        SBCI    R18, 255
        SBCI    R19, 255
        LSL     R19
        LDI     R16, 0
        ROL     R16
        OR      R20, R16
        LDI     R16, 1
        EOR     R16, R20
        ST      Y, R16
        STD     Y+1, R21
        STD     Y+2, R21
        STD     Y+3, R21
        STD     Y+4, R21
        STD     Y+5, R21
        STD     Y+6, R21
        STD     Y+7, R21
        LDD     R16, Y+8
        LDD     R17, Y+9
        LDD     R18, Y+10
        LDD     R19, Y+11
        LDD     R20, Y+12
        LDD     R21, Y+13
        LDD     R22, Y+14
        LDD     R23, Y+15
        MOVW    R31:R30, R29:R28
          CFI FunCall ?LL_AND_L12
        CALL    ?LL_AND_L12
        STD     Y+8, R16
        STD     Y+9, R17
        STD     Y+10, R18
        STD     Y+11, R19
        STD     Y+12, R20
        STD     Y+13, R21
        STD     Y+14, R22
        STD     Y+15, R23
        DEC     R25
        BREQ    $+2+2
        RJMP    ??mLSB_set_recode_5
        LDI     R16, 1
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
        LDI     R16, 2
        ADD     R6, R16
        LDI     R16, 0
        ADC     R7, R16
        DEC     R10
        BREQ    $+2+2
        RJMP    ??mLSB_set_recode_3
        ADIW    R29:R28, 24
          CFI CFA_Y Y+11
        LD      R24, Y+
          CFI R24 SameValue
          CFI CFA_Y Y+10
        LD      R25, Y+
          CFI R25 SameValue
          CFI CFA_Y Y+9
        LD      R26, Y+
          CFI R26 SameValue
          CFI CFA_Y Y+8
        LD      R27, Y+
          CFI R27 SameValue
          CFI CFA_Y Y+7
        LD      R4, Y+
          CFI R4 SameValue
          CFI CFA_Y Y+6
        LD      R5, Y+
          CFI R5 SameValue
          CFI CFA_Y Y+5
        LD      R6, Y+
          CFI R6 SameValue
          CFI CFA_Y Y+4
        JMP     ?Subroutine8
          CFI EndBlock cfiBlock64
//  755 
//  756 

        RSEG FARCODE:CODE:NOROOT(1)
//  757 bool ecc_mul_fixed(digit_t* k, point_t Q)
ecc_mul_fixed:
          CFI Block cfiBlock65 Using cfiCommon0
          CFI Function ecc_mul_fixed
//  758 { // Fixed-base scalar multiplication Q = k*G, where G is the generator. FIXED_BASE_TABLE stores v*2^(w-1) = 80 multiples of G.
        ST      -Y, R15
          CFI R15 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R14
          CFI R14 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R13
          CFI R13 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        ST      -Y, R12
          CFI R12 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        ST      -Y, R11
          CFI R11 Frame(CFA_Y, -5)
          CFI CFA_Y Y+5
        ST      -Y, R10
          CFI R10 Frame(CFA_Y, -6)
          CFI CFA_Y Y+6
        ST      -Y, R9
          CFI R9 Frame(CFA_Y, -7)
          CFI CFA_Y Y+7
        ST      -Y, R8
          CFI R8 Frame(CFA_Y, -8)
          CFI CFA_Y Y+8
        ST      -Y, R7
          CFI R7 Frame(CFA_Y, -9)
          CFI CFA_Y Y+9
        ST      -Y, R6
          CFI R6 Frame(CFA_Y, -10)
          CFI CFA_Y Y+10
        ST      -Y, R5
          CFI R5 Frame(CFA_Y, -11)
          CFI CFA_Y Y+11
        ST      -Y, R4
          CFI R4 Frame(CFA_Y, -12)
          CFI CFA_Y Y+12
        ST      -Y, R27
          CFI R27 Frame(CFA_Y, -13)
          CFI CFA_Y Y+13
        ST      -Y, R26
          CFI R26 Frame(CFA_Y, -14)
          CFI CFA_Y Y+14
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -15)
          CFI CFA_Y Y+15
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -16)
          CFI CFA_Y Y+16
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        REQUIRE ?Register_R6_is_cg_reg
        REQUIRE ?Register_R7_is_cg_reg
        REQUIRE ?Register_R8_is_cg_reg
        REQUIRE ?Register_R9_is_cg_reg
        REQUIRE ?Register_R10_is_cg_reg
        REQUIRE ?Register_R11_is_cg_reg
        REQUIRE ?Register_R12_is_cg_reg
        REQUIRE ?Register_R13_is_cg_reg
        REQUIRE ?Register_R14_is_cg_reg
        REQUIRE ?Register_R15_is_cg_reg
        SBIW    R29:R28, 2
          CFI CFA_Y Y+18
        SUBI    R29, 4
          CFI CFA_Y Y+1042
        STD     Y+2, R18
        STD     Y+3, R19
//  759   // Inputs: scalar "k" in [0, 2^256-1].
//  760   // Output: Q = k*G in affine coordinates (x,y).
//  761   // The function is based on the modified LSB-set comb method, which converts the scalar to an odd signed representation
//  762   // with (bitlength(order)+w*v) digits.
//  763 	unsigned int j, w = W_FIXEDBASE, v = V_FIXEDBASE, d = D_FIXEDBASE, e = E_FIXEDBASE;
//  764 	unsigned int digit = 0, digits[NBITS_ORDER_PLUS_ONE + (W_FIXEDBASE*V_FIXEDBASE) - 1] = {0};
        MOVW    R19:R18, R29:R28
        SUBI    R18, 28
        SBCI    R19, 254
        MOVW    R31:R30, R19:R18
        LDI     R20, 0
        LDI     R24, 30
        LDI     R25, 2
??ecc_mul_fixed_0:
        ST      Z+, R20
        SBIW    R25:R24, 1
        BRNE    ??ecc_mul_fixed_0
//  765 	digit_t temp[NWORDS_ORDER];
//  766 	point_extproj_t R;
//  767 	point_precomp_t S;
//  768 	int i, ii;
//  769 
//  770 	modulo_order(k, temp);                                      // temp = k mod (order) 
        MOVW    R19:R18, R29:R28
        SUBI    R18, 124
        SBCI    R19, 255
        MOVW    R31:R30, R19:R18
        LDI     R24, 32
??ecc_mul_fixed_1:
        ST      Z+, R20
        DEC     R24
        BRNE    ??ecc_mul_fixed_1
        MOVW    R31:R30, R29:R28
        SUBI    R30, 124
        SBCI    R31, 255
        LDI     R18, 1
        ST      Z, R18
        STD     Z+1, R20
        STD     Z+2, R20
        STD     Z+3, R20
        MOVW    R21:R20, R29:R28
        SUBI    R20, 92
        SBCI    R21, 255
        LDI     R18, LOW(Montgomery_Rprime)
        LDI     R19, (Montgomery_Rprime) >> 8
          CFI FunCall Montgomery_multiply_mod_order
        CALL    Montgomery_multiply_mod_order
        MOVW    R21:R20, R29:R28
        SUBI    R20, 156
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 124
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 92
        SBCI    R17, 255
          CFI FunCall Montgomery_multiply_mod_order
        CALL    Montgomery_multiply_mod_order
//  771 	conversion_to_odd(temp, temp);                              // Converting scalar to odd using the prime subgroup order
        MOVW    R19:R18, R29:R28
        SUBI    R18, 156
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 156
        SBCI    R17, 255
          CFI FunCall conversion_to_odd
        CALL    conversion_to_odd
//  772 	mLSB_set_recode((uint64_t*)temp, digits);                   // Scalar recoding
        MOVW    R19:R18, R29:R28
        SUBI    R18, 28
        SBCI    R19, 254
        MOVW    R17:R16, R29:R28
        SUBI    R16, 156
        SBCI    R17, 255
          CFI FunCall mLSB_set_recode
        RCALL   mLSB_set_recode
//  773 
//  774 	// Extracting initial digit 
//  775 	digit = digits[w*d-1];
        MOVW    R31:R30, R29:R28
        SUBI    R30, 42
        SBCI    R31, 252
        LD      R20, Z
        LDD     R21, Z+1
//  776 	for (i = (int)((w-1)*d-1); i >= (int)(2*d-1); i = i-d)
        MOVW    R31:R30, R29:R28
        SUBI    R30, 142
        SBCI    R31, 252
        LDI     R16, 3
//  777 	{
//  778 		digit = 2*digit + digits[i];
??ecc_mul_fixed_2:
        LSL     R20
        ROL     R21
        LD      R18, Z
        LDD     R19, Z+1
        ADD     R20, R18
        ADC     R21, R19
//  779 	}
        SUBI    R30, 100
        SBCI    R31, 0
        DEC     R16
        BRNE    ??ecc_mul_fixed_2
//  780 	// Initialize R = (x+y,y-x,2dt) with a point from the table
//  781 	table_lookup_fixed_base(((point_precomp_t*)&FIXED_BASE_TABLE)+(v-1)*(1 << (w-1)), S, digit, digits[d-1]);
        LDI     R16, LOW(FIXED_BASE_TABLE)
        LDI     R17, (FIXED_BASE_TABLE) >> 8
        MOVW    R15:R14, R17:R16
        LDI     R16, 24
        ADD     R15, R16
        MOVW    R31:R30, R29:R28
        SUBI    R30, 186
        SBCI    R31, 253
        LD      R22, Z
        LDD     R23, Z+1
        MOVW    R19:R18, R29:R28
        SUBI    R18, 252
        SBCI    R19, 255
        MOVW    R17:R16, R15:R14
          CFI FunCall table_lookup_fixed_base
        CALL    table_lookup_fixed_base
//  782 	R5_to_R1(S, R);                                             // Converting to representation (X:Y:1:Ta:Tb)
        MOVW    R19:R18, R29:R28
        SUBI    R18, 188
        SBCI    R19, 254
        MOVW    R17:R16, R29:R28
        SUBI    R16, 252
        SBCI    R17, 255
          CFI FunCall R5_to_R1
        RCALL   R5_to_R1
//  783 
//  784 	for (j = 0; j < (v-1); j++)
        CLR     R6
        CLR     R7
        LDI     R24, LOW(FIXED_BASE_TABLE)
        LDI     R25, (((FIXED_BASE_TABLE >> 8) + 18) & 0xff) & 0xFF
        LDI     R16, 189
        MOV     R4, R16
        CLR     R5
        MOVW    R27:R26, R29:R28
        SUBI    R26, 206
        SBCI    R27, 253
//  785 	{
//  786 		digit = digits[w*d-(j+1)*e-1];
??ecc_mul_fixed_3:
        MOVW    R31:R30, R27:R26
        SUBI    R30, 112
        SBCI    R31, 254
        LD      R20, Z
        LDD     R21, Z+1
//  787 		for (i = (int)((w-1)*d-(j+1)*e-1); i >= (int)(2*d-(j+1)*e-1); i = i-d)
        MOVW    R17:R16, R5:R4
        MOVW    R23:R22, R5:R4
        SUBI    R22, 100
        SBCI    R23, 0
        CP      R4, R22
        CPC     R5, R23
        BRLT    ??ecc_mul_fixed_4
        MOVW    R31:R30, R29:R28
        SUBI    R30, 28
        SBCI    R31, 254
        MOVW    R19:R18, R5:R4
        LSL     R18
        ROL     R19
        ADD     R30, R18
        ADC     R31, R19
//  788 		{
//  789 			digit = 2*digit + digits[i];
??ecc_mul_fixed_5:
        LSL     R20
        ROL     R21
        LD      R18, Z
        LDD     R19, Z+1
        ADD     R20, R18
        ADC     R21, R19
//  790 		}
        SUBI    R30, 100
        SBCI    R31, 0
        SUBI    R16, 50
        SBCI    R17, 0
        CP      R16, R22
        CPC     R17, R23
        BRGE    ??ecc_mul_fixed_5
//  791 		// Extract point in (x+y,y-x,2dt) representation
//  792 		table_lookup_fixed_base(((point_precomp_t*)&FIXED_BASE_TABLE)+(v-j-2)*(1 << (w-1)), S, digit, digits[d-(j+1)*e-1]);
??ecc_mul_fixed_4:
        LD      R22, X+
        LD      R23, X
        SBIW    R27:R26, 21
        MOVW    R19:R18, R29:R28
        SUBI    R18, 252
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
          CFI FunCall table_lookup_fixed_base
        CALL    table_lookup_fixed_base
//  793 		eccmadd(S, R);                                          // R = R+S using representations (X,Y,Z,Ta,Tb) <- (X,Y,Z,Ta,Tb) + (x+y,y-x,2dt) 
        MOVW    R19:R18, R29:R28
        SUBI    R18, 188
        SBCI    R19, 254
        MOVW    R17:R16, R29:R28
        SUBI    R16, 252
        SBCI    R17, 255
          CFI FunCall eccmadd
        RCALL   eccmadd
//  794 	}
        LDI     R16, 1
        ADD     R6, R16
        LDI     R16, 0
        ADC     R7, R16
        LDI     R16, 246
        ADD     R4, R16
        LDI     R16, 255
        ADC     R5, R16
        SUBI    R25, 6
        LDI     R16, 4
        CP      R6, R16
        LDI     R16, 0
        CPC     R7, R16
        BRCS    ??ecc_mul_fixed_3
//  795 
//  796 	for (ii = (e-2); ii >= 0; ii--)
        LDI     R16, 8
        ST      Y, R16
        LDI     R16, 0
        STD     Y+1, R16
        MOVW    R25:R24, R29:R28
        SUBI    R24, 188
        SBCI    R25, 253
        LDI     R16, 9
        MOV     R13, R16
//  797 	{
//  798 		eccdouble(R);                                           // R = 2*R using representations (X,Y,Z,Ta,Tb) <- 2*(X,Y,Z)
??ecc_mul_fixed_6:
        MOVW    R17:R16, R29:R28
        SUBI    R16, 188
        SBCI    R17, 254
          CFI FunCall eccdouble
        CALL    eccdouble
//  799 		for (j = 0; j < v; j++)
        MOVW    R11:R10, R15:R14
        MOVW    R9:R8, R25:R24
        LD      R4, Y
        LDD     R5, Y+1
        LDI     R16, 190
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
        LDI     R16, 5
        MOV     R12, R16
//  800 		{
//  801 			digit = digits[w*d-j*e+ii-e];
??ecc_mul_fixed_7:
        MOVW    R31:R30, R9:R8
        SUBI    R30, 112
        SBCI    R31, 254
        LD      R20, Z
        LDD     R21, Z+1
//  802 			for (i = (int)((w-1)*d-j*e+ii-e); i >= (int)(2*d-j*e+ii-e); i = i-d)
        MOVW    R17:R16, R5:R4
        MOVW    R23:R22, R5:R4
        SUBI    R22, 100
        SBCI    R23, 0
        CP      R4, R22
        CPC     R5, R23
        BRLT    ??ecc_mul_fixed_8
        MOVW    R31:R30, R29:R28
        SUBI    R30, 28
        SBCI    R31, 254
        MOVW    R19:R18, R5:R4
        LSL     R18
        ROL     R19
        ADD     R30, R18
        ADC     R31, R19
//  803 			{
//  804 				digit = 2*digit + digits[i];
??ecc_mul_fixed_9:
        LSL     R20
        ROL     R21
        LD      R18, Z
        LDD     R19, Z+1
        ADD     R20, R18
        ADC     R21, R19
//  805 			}
        SUBI    R30, 100
        SBCI    R31, 0
        SUBI    R16, 50
        SBCI    R17, 0
        CP      R16, R22
        CPC     R17, R23
        BRGE    ??ecc_mul_fixed_9
//  806 			// Extract point in (x+y,y-x,2dt) representation
//  807 			table_lookup_fixed_base(((point_precomp_t*)&FIXED_BASE_TABLE)+(v-j-1)*(1 << (w-1)), S, digit, digits[d-j*e+ii-e]);
??ecc_mul_fixed_8:
        MOVW    R31:R30, R9:R8
        LD      R6, Z
        LDI     R16, 96
        MUL     R21, R16
        MOV     R21, R0
        MUL     R20, R16
        ADD     R21, R1
        MOVW    R25:R24, R11:R10
        ADD     R24, R0
        ADC     R25, R21
        MOVW    R19:R18, R29:R28
        SUBI    R18, 124
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
          CFI FunCall fpcopy1271_flash
        CALL    fpcopy1271_flash
        MOVW    R19:R18, R29:R28
        SUBI    R18, 108
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpcopy1271_flash
        CALL    fpcopy1271_flash
        MOVW    R27:R26, R25:R24
        ADIW    R27:R26, 32
        MOVW    R19:R18, R29:R28
        SUBI    R18, 92
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
          CFI FunCall fpcopy1271_flash
        CALL    fpcopy1271_flash
        MOVW    R19:R18, R29:R28
        SUBI    R18, 76
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpcopy1271_flash
        CALL    fpcopy1271_flash
        SUBI    R24, 192
        SBCI    R25, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 60
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
          CFI FunCall fpcopy1271_flash
        CALL    fpcopy1271_flash
        MOVW    R19:R18, R29:R28
        SUBI    R18, 44
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpcopy1271_flash
        CALL    fpcopy1271_flash
        MOVW    R19:R18, R29:R28
        SUBI    R18, 252
        SBCI    R19, 254
        MOVW    R17:R16, R29:R28
        SUBI    R16, 124
        SBCI    R17, 255
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 236
        SBCI    R19, 254
        MOVW    R17:R16, R29:R28
        SUBI    R16, 108
        SBCI    R17, 255
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 28
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 92
        SBCI    R17, 255
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 12
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 76
        SBCI    R17, 255
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 220
        SBCI    R19, 254
        MOVW    R17:R16, R29:R28
        SUBI    R16, 60
        SBCI    R17, 255
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 204
        SBCI    R19, 254
        MOVW    R17:R16, R29:R28
        SUBI    R16, 44
        SBCI    R17, 255
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R17:R16, R29:R28
        SUBI    R16, 220
        SBCI    R17, 254
          CFI FunCall fpneg1271
        CALL    fpneg1271
        MOVW    R17:R16, R29:R28
        SUBI    R16, 204
        SBCI    R17, 254
          CFI FunCall fpneg1271
        CALL    fpneg1271
        MOVW    R25:R24, R29:R28
        SUBI    R24, 124
        SBCI    R25, 255
        MOV     R18, R6
        ANDI    R18, 0x01
        LDI     R16, 96
        MUL     R18, R16
        ADD     R24, R0
        ADC     R25, R1
        MOVW    R19:R18, R29:R28
        SUBI    R18, 252
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 236
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R27:R26, R25:R24
        ADIW    R27:R26, 32
        MOVW    R19:R18, R29:R28
        SUBI    R18, 220
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 204
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        SUBI    R24, 192
        SBCI    R25, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 188
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 172
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
//  808 			eccmadd(S, R);                                      // R = R+S using representations (X,Y,Z,Ta,Tb) <- (X,Y,Z,Ta,Tb) + (x+y,y-x,2dt)
        MOVW    R19:R18, R29:R28
        SUBI    R18, 188
        SBCI    R19, 254
        MOVW    R17:R16, R29:R28
        SUBI    R16, 252
        SBCI    R17, 255
          CFI FunCall eccmadd
        RCALL   eccmadd
//  809 		}
        LDI     R16, 246
        ADD     R4, R16
        LDI     R16, 255
        ADC     R5, R16
        LDI     R16, 236
        ADD     R8, R16
        LDI     R16, 255
        ADC     R9, R16
        LDI     R16, 250
        ADD     R11, R16
        DEC     R12
        BREQ    $+2+2
        RJMP    ??ecc_mul_fixed_7
//  810 	}
        LD      R16, Y
        LDD     R17, Y+1
        SUBI    R16, 1
        SBCI    R17, 0
        ST      Y, R16
        STD     Y+1, R17
        MOVW    R25:R24, R9:R8
        SUBI    R24, 158
        SBCI    R25, 255
        DEC     R13
        BREQ    $+2+2
        RJMP    ??ecc_mul_fixed_6
//  811 	eccnorm(R, Q);                                              // Conversion to affine coordinates (x,y) and modular correction.
        LDD     R18, Y+2
        LDD     R19, Y+3
        MOVW    R17:R16, R29:R28
        SUBI    R16, 188
        SBCI    R17, 254
          CFI FunCall eccnorm
        CALL    eccnorm
//  812 
//  813 	return true;
        LDI     R16, 1
        LDI     R17, 0
        ADIW    R29:R28, 2
          CFI CFA_Y Y+1040
        SUBI    R29, 252
          CFI EndBlock cfiBlock65
        REQUIRE ?Subroutine1
        ;               // Fall through to label ?Subroutine1
//  814 }

        RSEG FARCODE:CODE:NOROOT(1)
?Subroutine1:
          CFI Block cfiBlock66 Using cfiCommon0
          CFI NoFunction
          CFI CFA_Y Y+16
          CFI R4 Frame(CFA_Y, -12)
          CFI R5 Frame(CFA_Y, -11)
          CFI R6 Frame(CFA_Y, -10)
          CFI R7 Frame(CFA_Y, -9)
          CFI R8 Frame(CFA_Y, -8)
          CFI R9 Frame(CFA_Y, -7)
          CFI R10 Frame(CFA_Y, -6)
          CFI R11 Frame(CFA_Y, -5)
          CFI R12 Frame(CFA_Y, -4)
          CFI R13 Frame(CFA_Y, -3)
          CFI R14 Frame(CFA_Y, -2)
          CFI R15 Frame(CFA_Y, -1)
          CFI R24 Frame(CFA_Y, -16)
          CFI R25 Frame(CFA_Y, -15)
          CFI R26 Frame(CFA_Y, -14)
          CFI R27 Frame(CFA_Y, -13)
        LD      R24, Y+
          CFI CFA_Y Y+15
          CFI R24 SameValue
        LD      R25, Y+
          CFI CFA_Y Y+14
          CFI R25 SameValue
        LD      R26, Y+
          CFI CFA_Y Y+13
          CFI R26 SameValue
        LD      R27, Y+
          CFI CFA_Y Y+12
          CFI R27 SameValue
        LD      R4, Y+
          CFI CFA_Y Y+11
          CFI R4 SameValue
        LD      R5, Y+
          CFI CFA_Y Y+10
          CFI R5 SameValue
        LD      R6, Y+
          CFI CFA_Y Y+9
          CFI R6 SameValue
        LD      R7, Y+
          CFI CFA_Y Y+8
          CFI R7 SameValue
        LD      R8, Y+
          CFI CFA_Y Y+7
          CFI R8 SameValue
        LD      R9, Y+
          CFI CFA_Y Y+6
          CFI R9 SameValue
        LD      R10, Y+
          CFI CFA_Y Y+5
          CFI R10 SameValue
        LD      R11, Y+
          CFI CFA_Y Y+4
          CFI R11 SameValue
        LD      R12, Y+
          CFI CFA_Y Y+3
          CFI R12 SameValue
        LD      R13, Y+
          CFI CFA_Y Y+2
          CFI R13 SameValue
        LD      R14, Y+
          CFI CFA_Y Y+1
          CFI R14 SameValue
        LD      R15, Y+
          CFI CFA_Y Y+0
          CFI R15 SameValue
        RET
          CFI EndBlock cfiBlock66
//  815 
//  816 
//  817 void mLSB_set_recode(uint64_t* scalar, unsigned int *digits)
//  818 { // Computes the modified LSB-set representation of a scalar
//  819   // Inputs: scalar in [0, order-1], where the order of FourQ's subgroup is 246 bits.
//  820   // Output: digits, where the first "d" values (from index 0 to (d-1)) store the signs for the recoded values using the convention: -1 (negative), 0 (positive), and
//  821   //         the remaining values (from index d to (l-1)) store the recoded values in mLSB-set representation, excluding their sign, 
//  822   //         where l = d*w and d = ceil(bitlength(order)/(w*v))*v. The values v and w are fixed and must be in the range [1, 10] (see FourQ.h); they determine the size 
//  823   //         of the precomputed table "FIXED_BASE_TABLE" used by ecc_mul_fixed(). 
//  824     unsigned int i, j, d = D_FIXEDBASE, l = L_FIXEDBASE;
//  825     uint64_t temp, carry;
//  826     
//  827     digits[d-1] = 0;
//  828 
//  829     // Shift scalar to the right by 1   
//  830     for (j = 0; j < (NWORDS64_ORDER-1); j++) {
//  831         SHIFTR(scalar[j+1], scalar[j], 1, scalar[j], RADIX64);
//  832     }
//  833     scalar[NWORDS64_ORDER-1] >>= 1;
//  834 
//  835     for (i = 0; i < (d-1); i++)
//  836     {
//  837         digits[i] = (unsigned int)((scalar[0] & 1) - 1);  // Convention for the "sign" row: 
//  838                                                           // if scalar_(i+1) = 0 then digit_i = -1 (negative), else if scalar_(i+1) = 1 then digit_i = 0 (positive)
//  839         // Shift scalar to the right by 1   
//  840         for (j = 0; j < (NWORDS64_ORDER-1); j++) {
//  841             SHIFTR(scalar[j+1], scalar[j], 1, scalar[j], RADIX64);
//  842         }
//  843         scalar[NWORDS64_ORDER-1] >>= 1;
//  844     } 
//  845 
//  846     for (i = d; i < l; i++)
//  847     {
//  848         digits[i] = (unsigned int)(scalar[0] & 1);        // digits_i = k mod 2. Sign is determined by the "sign" row
//  849 
//  850         // Shift scalar to the right by 1  
//  851         for (j = 0; j < (NWORDS64_ORDER-1); j++) {
//  852             SHIFTR(scalar[j+1], scalar[j], 1, scalar[j], RADIX64);
//  853         }
//  854         scalar[NWORDS64_ORDER-1] >>= 1;
//  855 
//  856         temp = (0 - digits[i-(i/d)*d]) & digits[i];       // if (digits_i=0 \/ 1) then temp = 0, else if (digits_i=-1) then temp = 1 
//  857             
//  858         // floor(scalar/2) + temp
//  859         scalar[0] = scalar[0] + temp;
//  860         carry = (temp & (uint64_t)is_digit_zero_ct((digit_t)scalar[0]));       // carry = (scalar[0] < temp);
//  861         for (j = 1; j < NWORDS64_ORDER; j++)
//  862         {
//  863             scalar[j] = scalar[j] + carry; 
//  864             carry = (carry & (uint64_t)is_digit_zero_ct((digit_t)scalar[j]));  // carry = (scalar[j] < temp);
//  865         }
//  866     } 
//  867     return;              
//  868 }
//  869 
//  870 
//  871 static __inline void eccneg_extproj_precomp(point_extproj_precomp_t P, point_extproj_precomp_t Q)
//  872 { // Point negation
//  873   // Input : point P in coordinates (X+Y,Y-X,2Z,2dT)
//  874   // Output: point Q = -P = (Y-X,X+Y,2Z,-2dT)
//  875     fp2copy1271(P->t2, Q->t2);
//  876     fp2copy1271(P->xy, Q->yx);
//  877     fp2copy1271(P->yx, Q->xy);
//  878     fp2copy1271(P->z2, Q->z2);
//  879     fp2neg1271(Q->t2);
//  880 }
//  881 
//  882 
//  883 static __inline void eccneg_precomp(point_precomp_t P, point_precomp_t Q)
//  884 { // Point negation
//  885   // Input : point P in coordinates (x+y,y-x,2dt)
//  886   // Output: point Q = -P = (y-x,x+y,-2dt)
//  887     fp2copy1271_flash(P->t2, Q->t2);
//  888     fp2copy1271_flash(P->xy, Q->yx);
//  889     fp2copy1271_flash(P->yx, Q->xy);
//  890     fp2neg1271(Q->t2);
//  891 }
//  892 
//  893 

        RSEG FARCODE:CODE:NOROOT(1)
//  894 bool ecc_mul_double(digit_t* k, point_t Q, digit_t* l, point_t R)
ecc_mul_double:
          CFI Block cfiBlock67 Using cfiCommon0
          CFI Function ecc_mul_double
//  895 { // Double scalar multiplication R = k*G + l*Q, where the G is the generator. Uses DOUBLE_SCALAR_TABLE, which contains multiples of G, Phi(G), Psi(G) and Phi(Psi(G)).
        ST      -Y, R15
          CFI R15 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R14
          CFI R14 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R13
          CFI R13 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        ST      -Y, R12
          CFI R12 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        ST      -Y, R11
          CFI R11 Frame(CFA_Y, -5)
          CFI CFA_Y Y+5
        ST      -Y, R10
          CFI R10 Frame(CFA_Y, -6)
          CFI CFA_Y Y+6
        ST      -Y, R9
          CFI R9 Frame(CFA_Y, -7)
          CFI CFA_Y Y+7
        ST      -Y, R8
          CFI R8 Frame(CFA_Y, -8)
          CFI CFA_Y Y+8
        ST      -Y, R7
          CFI R7 Frame(CFA_Y, -9)
          CFI CFA_Y Y+9
        ST      -Y, R6
          CFI R6 Frame(CFA_Y, -10)
          CFI CFA_Y Y+10
        ST      -Y, R5
          CFI R5 Frame(CFA_Y, -11)
          CFI CFA_Y Y+11
        ST      -Y, R4
          CFI R4 Frame(CFA_Y, -12)
          CFI CFA_Y Y+12
        ST      -Y, R27
          CFI R27 Frame(CFA_Y, -13)
          CFI CFA_Y Y+13
        ST      -Y, R26
          CFI R26 Frame(CFA_Y, -14)
          CFI CFA_Y Y+14
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -15)
          CFI CFA_Y Y+15
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -16)
          CFI CFA_Y Y+16
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        REQUIRE ?Register_R6_is_cg_reg
        REQUIRE ?Register_R7_is_cg_reg
        REQUIRE ?Register_R8_is_cg_reg
        REQUIRE ?Register_R9_is_cg_reg
        REQUIRE ?Register_R10_is_cg_reg
        REQUIRE ?Register_R11_is_cg_reg
        REQUIRE ?Register_R12_is_cg_reg
        REQUIRE ?Register_R13_is_cg_reg
        REQUIRE ?Register_R14_is_cg_reg
        REQUIRE ?Register_R15_is_cg_reg
        SBIW    R29:R28, 63
          CFI CFA_Y Y+79
        SBIW    R29:R28, 58
          CFI CFA_Y Y+137
        SUBI    R29, 17
          CFI CFA_Y Y+4489
        STD     Y+7, R22
        STD     Y+8, R23
        MOVW    R27:R26, R17:R16
        MOVW    R23:R22, R19:R18
        MOVW    R25:R24, R21:R20
//  896   // Inputs: point Q in affine coordinates,
//  897   //         scalars "k" and "l" in [0, 2^256-1].
//  898   // Output: R = k*G + l*Q in affine coordinates (x,y).
//  899   // The function uses wNAF with interleaving.
//  900 
//  901   // SECURITY NOTE: this function is intended for a non-constant-time operation such as signature verification. 
//  902 
//  903 #if (USE_ENDO == true)
//  904 	unsigned int position;
//  905 	int i, digits_k1[65] = {0}, digits_k2[65] = {0}, digits_k3[65] = {0}, digits_k4[65] = {0};
        MOVW    R17:R16, R29:R28
        SUBI    R16, 9
        SBCI    R17, 239
        MOVW    R31:R30, R17:R16
        LDI     R20, 0
        LDI     R18, 130
??ecc_mul_double_0:
        ST      Z+, R20
        DEC     R18
        BRNE    ??ecc_mul_double_0
        MOVW    R17:R16, R29:R28
        SUBI    R16, 139
        SBCI    R17, 239
        LDI     R30, LOW((`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_1` + 130))
        LDI     R31, HIGH((`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_1` + 130))
        LDI     R19, BYTE3(`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_1`)
        LDI     R20, 130
        LDI     R21, 0
          CFI FunCall ?ML_FLASH_SRAM_24EC_16_L07
        CALL    ?ML_FLASH_SRAM_24EC_16_L07
        MOVW    R17:R16, R29:R28
        SUBI    R16, 13
        SBCI    R17, 240
        LDI     R31, HIGH((`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_1` + 260))
        LDI     R20, 130
          CFI FunCall ?ML_FLASH_SRAM_24EC_16_L07
        CALL    ?ML_FLASH_SRAM_24EC_16_L07
        MOVW    R17:R16, R29:R28
        SUBI    R16, 143
        SBCI    R17, 240
        LDI     R31, HIGH((`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_1` + 390))
        LDI     R20, 130
          CFI FunCall ?ML_FLASH_SRAM_24EC_16_L07
        CALL    ?ML_FLASH_SRAM_24EC_16_L07
//  906 	int digits_l1[65] = {0}, digits_l2[65] = {0}, digits_l3[65] = {0}, digits_l4[65] = {0};
        MOVW    R17:R16, R29:R28
        SUBI    R16, 17
        SBCI    R17, 241
        LDI     R31, HIGH((`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_1` + 520))
        LDI     R20, 130
          CFI FunCall ?ML_FLASH_SRAM_24EC_16_L07
        CALL    ?ML_FLASH_SRAM_24EC_16_L07
        MOVW    R17:R16, R29:R28
        SUBI    R16, 147
        SBCI    R17, 241
        LDI     R31, HIGH((`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_1` + 650))
        LDI     R20, 130
          CFI FunCall ?ML_FLASH_SRAM_24EC_16_L07
        CALL    ?ML_FLASH_SRAM_24EC_16_L07
        MOVW    R17:R16, R29:R28
        SUBI    R16, 21
        SBCI    R17, 242
        LDI     R31, HIGH((`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_1` + 780))
        LDI     R20, 130
          CFI FunCall ?ML_FLASH_SRAM_24EC_16_L07
        CALL    ?ML_FLASH_SRAM_24EC_16_L07
        MOVW    R17:R16, R29:R28
        SUBI    R16, 151
        SBCI    R17, 242
        LDI     R31, HIGH((`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_1` + 910))
        LDI     R20, 130
          CFI FunCall ?ML_FLASH_SRAM_24EC_16_L07
        CALL    ?ML_FLASH_SRAM_24EC_16_L07
//  907 	point_precomp_t V;
//  908 	point_extproj_t Q1, Q2, Q3, Q4, T;
//  909 	point_extproj_precomp_t U, Q_table1[NPOINTS_DOUBLEMUL_WQ], Q_table2[NPOINTS_DOUBLEMUL_WQ], Q_table3[NPOINTS_DOUBLEMUL_WQ], Q_table4[NPOINTS_DOUBLEMUL_WQ];
//  910 	uint64_t k_scalars[4], l_scalars[4];
//  911 
//  912 	point_setup(Q, Q1);                                        // Convert to representation (X,Y,1,Ta,Tb)
        MOVW    R19:R18, R29:R28
        SUBI    R18, 151
        SBCI    R19, 253
        MOVW    R17:R16, R23:R22
          CFI FunCall point_setup
        CALL    point_setup
//  913 
//  914 	if (ecc_point_validate(Q1) == false) {                     // Check if point lies on the curve
        MOVW    R17:R16, R29:R28
        SUBI    R16, 151
        SBCI    R17, 253
          CFI FunCall ecc_point_validate
        RCALL   ecc_point_validate
        OR      R16, R17
        BRNE    ??ecc_mul_double_1
//  915 		return false;
        LDI     R16, 0
        JMP     ??ecc_mul_double_2
//  916 	}
//  917 
//  918 	// Computing endomorphisms over point Q
//  919 	ecccopy(Q1, Q2);
??ecc_mul_double_1:
        MOVW    R19:R18, R29:R28
        SUBI    R18, 55
        SBCI    R19, 254
        MOVW    R17:R16, R29:R28
        SUBI    R16, 151
        SBCI    R17, 253
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 39
        SBCI    R19, 254
        MOVW    R17:R16, R29:R28
        SUBI    R16, 135
        SBCI    R17, 253
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 23
        SBCI    R19, 254
        MOVW    R17:R16, R29:R28
        SUBI    R16, 119
        SBCI    R17, 253
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 7
        SBCI    R19, 254
        MOVW    R17:R16, R29:R28
        SUBI    R16, 103
        SBCI    R17, 253
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 247
        SBCI    R19, 253
        MOVW    R17:R16, R29:R28
        SUBI    R16, 87
        SBCI    R17, 253
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 231
        SBCI    R19, 253
        MOVW    R17:R16, R29:R28
        SUBI    R16, 71
        SBCI    R17, 253
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 215
        SBCI    R19, 253
        MOVW    R17:R16, R29:R28
        SUBI    R16, 55
        SBCI    R17, 253
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 199
        SBCI    R19, 253
        MOVW    R17:R16, R29:R28
        SUBI    R16, 39
        SBCI    R17, 253
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 183
        SBCI    R19, 253
        MOVW    R17:R16, R29:R28
        SUBI    R16, 23
        SBCI    R17, 253
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 167
        SBCI    R19, 253
        MOVW    R17:R16, R29:R28
        SUBI    R16, 7
        SBCI    R17, 253
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
//  920 	ecc_phi(Q2);
        MOVW    R17:R16, R29:R28
        SUBI    R16, 55
        SBCI    R17, 254
          CFI FunCall ecc_tau
        CALL    ecc_tau
        MOVW    R17:R16, R29:R28
        SUBI    R16, 55
        SBCI    R17, 254
          CFI FunCall ecc_delphidel
        CALL    ecc_delphidel
        MOVW    R17:R16, R29:R28
        SUBI    R16, 55
        SBCI    R17, 254
          CFI FunCall ecc_tau_dual
        CALL    ecc_tau_dual
//  921 	ecccopy(Q1, Q3);
        MOVW    R19:R18, R29:R28
        SUBI    R18, 55
        SBCI    R19, 243
        MOVW    R17:R16, R29:R28
        SUBI    R16, 151
        SBCI    R17, 253
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 39
        SBCI    R19, 243
        MOVW    R17:R16, R29:R28
        SUBI    R16, 135
        SBCI    R17, 253
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 23
        SBCI    R19, 243
        MOVW    R17:R16, R29:R28
        SUBI    R16, 119
        SBCI    R17, 253
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 7
        SBCI    R19, 243
        MOVW    R17:R16, R29:R28
        SUBI    R16, 103
        SBCI    R17, 253
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 247
        SBCI    R19, 242
        MOVW    R17:R16, R29:R28
        SUBI    R16, 87
        SBCI    R17, 253
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 231
        SBCI    R19, 242
        MOVW    R17:R16, R29:R28
        SUBI    R16, 71
        SBCI    R17, 253
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 215
        SBCI    R19, 242
        MOVW    R17:R16, R29:R28
        SUBI    R16, 55
        SBCI    R17, 253
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 199
        SBCI    R19, 242
        MOVW    R17:R16, R29:R28
        SUBI    R16, 39
        SBCI    R17, 253
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 183
        SBCI    R19, 242
        MOVW    R17:R16, R29:R28
        SUBI    R16, 23
        SBCI    R17, 253
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 167
        SBCI    R19, 242
        MOVW    R17:R16, R29:R28
        SUBI    R16, 7
        SBCI    R17, 253
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
//  922 	ecc_psi(Q3);
        MOVW    R17:R16, R29:R28
        SUBI    R16, 55
        SBCI    R17, 243
          CFI FunCall ecc_tau
        CALL    ecc_tau
        MOVW    R17:R16, R29:R28
        SUBI    R16, 55
        SBCI    R17, 243
          CFI FunCall ecc_delpsidel
        CALL    ecc_delpsidel
        MOVW    R17:R16, R29:R28
        SUBI    R16, 55
        SBCI    R17, 243
          CFI FunCall ecc_tau_dual
        CALL    ecc_tau_dual
//  923 	ecccopy(Q2, Q4);
        MOVW    R19:R18, R29:R28
        SUBI    R18, 215
        SBCI    R19, 243
        MOVW    R17:R16, R29:R28
        SUBI    R16, 55
        SBCI    R17, 254
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 199
        SBCI    R19, 243
        MOVW    R17:R16, R29:R28
        SUBI    R16, 39
        SBCI    R17, 254
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 183
        SBCI    R19, 243
        MOVW    R17:R16, R29:R28
        SUBI    R16, 23
        SBCI    R17, 254
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 167
        SBCI    R19, 243
        MOVW    R17:R16, R29:R28
        SUBI    R16, 7
        SBCI    R17, 254
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 151
        SBCI    R19, 243
        MOVW    R17:R16, R29:R28
        SUBI    R16, 247
        SBCI    R17, 253
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 135
        SBCI    R19, 243
        MOVW    R17:R16, R29:R28
        SUBI    R16, 231
        SBCI    R17, 253
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 119
        SBCI    R19, 243
        MOVW    R17:R16, R29:R28
        SUBI    R16, 215
        SBCI    R17, 253
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 103
        SBCI    R19, 243
        MOVW    R17:R16, R29:R28
        SUBI    R16, 199
        SBCI    R17, 253
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 87
        SBCI    R19, 243
        MOVW    R17:R16, R29:R28
        SUBI    R16, 183
        SBCI    R17, 253
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 71
        SBCI    R19, 243
        MOVW    R17:R16, R29:R28
        SUBI    R16, 167
        SBCI    R17, 253
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
//  924 	ecc_psi(Q4);
        MOVW    R17:R16, R29:R28
        SUBI    R16, 215
        SBCI    R17, 243
          CFI FunCall ecc_tau
        CALL    ecc_tau
        MOVW    R17:R16, R29:R28
        SUBI    R16, 215
        SBCI    R17, 243
          CFI FunCall ecc_delpsidel
        CALL    ecc_delpsidel
        MOVW    R17:R16, R29:R28
        SUBI    R16, 215
        SBCI    R17, 243
          CFI FunCall ecc_tau_dual
        CALL    ecc_tau_dual
//  925 
//  926 	decompose(k, (digit_t*)k_scalars);                        // Scalar decomposition
        MOVW    R19:R18, R29:R28
        SUBI    R18, 247
        SBCI    R19, 254
        MOVW    R17:R16, R27:R26
          CFI FunCall decompose
        CALL    decompose
//  927 	decompose(l, (digit_t*)l_scalars);
        MOVW    R19:R18, R29:R28
        SUBI    R18, 23
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
          CFI FunCall decompose
        CALL    decompose
//  928 	wNAF_recode(k_scalars[0], WP_DOUBLEBASE, digits_k1);       // Scalar recoding
        LDI     R26, 0
        LDI     R27, 0
        MOVW    R31:R30, R29:R28
        SUBI    R30, 247
        SBCI    R31, 254
        LD      R0, Z
        LDD     R1, Z+1
        LDD     R2, Z+2
        LDD     R3, Z+3
        LDD     R4, Z+4
        LDD     R5, Z+5
        LDD     R6, Z+6
        LDD     R7, Z+7
        LDI     R30, LOW(__Constant_0_0)
        LDI     R31, (__Constant_0_0) >> 8
          CFI FunCall ?LL_CMP_R0_L12
        CALL    ?LL_CMP_R0_L12
        BRNE    $+2+2
        RJMP    ??ecc_mul_double_3
??ecc_mul_double_4:
        BST     R0, 0
        CLR     R8
        CLR     R17
        CLR     R18
        CLR     R19
        CLR     R20
        CLR     R21
        CLR     R22
        CLR     R23
        BLD     R8, 0
        LDI     R30, LOW(__Constant_0_0)
        LDI     R31, (__Constant_0_0) >> 8
        MOV     R16, R8
          CFI FunCall ?LL_CMP_L12
        CALL    ?LL_CMP_L12
        BRNE    ??ecc_mul_double_5
        LSR     R7
        ROR     R6
        ROR     R5
        ROR     R4
        ROR     R3
        ROR     R2
        ROR     R1
        ROR     R0
        MOVW    R31:R30, R29:R28
        SUBI    R30, 9
        SBCI    R31, 239
        MOVW    R17:R16, R27:R26
        LSL     R16
        ROL     R17
        ADD     R30, R16
        ADC     R31, R17
        ST      Z, R18
        STD     Z+1, R18
        RJMP    ??ecc_mul_double_6
??ecc_mul_double_5:
        MOV     R8, R0
        LDI     R16, 63
        AND     R8, R16
        CLR     R9
        LDI     R24, 6
        MOVW    R17:R16, R1:R0
        MOVW    R19:R18, R3:R2
        MOVW    R21:R20, R5:R4
        MOVW    R23:R22, R7:R6
          CFI FunCall ?ULL_SHR_L12
        CALL    ?ULL_SHR_L12
        MOVW    R1:R0, R17:R16
        MOVW    R3:R2, R19:R18
        MOVW    R5:R4, R21:R20
        MOVW    R7:R6, R23:R22
        LDI     R16, 32
        CP      R8, R16
        CPC     R9, R9
        BRLT    ??ecc_mul_double_7
        LDI     R16, 192
        ADD     R8, R16
        LDI     R16, 255
        ADC     R9, R16
??ecc_mul_double_7:
        TST     R9
        BRPL    ??ecc_mul_double_8
        LDI     R16, 1
        ADD     R0, R16
        LDI     R16, 0
        ADC     R1, R16
        ADC     R2, R16
        ADC     R3, R16
        ADC     R4, R16
        ADC     R5, R16
        ADC     R6, R16
        ADC     R7, R16
??ecc_mul_double_8:
        MOVW    R19:R18, R29:R28
        SUBI    R18, 9
        SBCI    R19, 239
        MOVW    R17:R16, R27:R26
        LSL     R16
        ROL     R17
        ADD     R18, R16
        ADC     R19, R17
        MOVW    R31:R30, R19:R18
        ST      Z, R8
        STD     Z+1, R9
        LDI     R30, LOW(__Constant_0_0)
        LDI     R31, (__Constant_0_0) >> 8
          CFI FunCall ?LL_CMP_R0_L12
        CALL    ?LL_CMP_R0_L12
        BREQ    ??ecc_mul_double_6
        LDI     R24, 0
        LDI     R25, 0
        SUBI    R18, 254
        SBCI    R19, 255
        LDI     R16, 0
??ecc_mul_double_9:
        ADIW    R27:R26, 1
        MOVW    R31:R30, R19:R18
        ST      Z+, R16
        ST      Z+, R16
        MOVW    R19:R18, R31:R30
        ADIW    R25:R24, 1
        CPI     R24, 5
        CPC     R25, R16
        BRCS    ??ecc_mul_double_9
??ecc_mul_double_6:
        ADIW    R27:R26, 1
        LDI     R30, LOW(__Constant_0_0)
        LDI     R31, (__Constant_0_0) >> 8
          CFI FunCall ?LL_CMP_R0_L12
        CALL    ?LL_CMP_R0_L12
        BREQ    $+2+2
        RJMP    ??ecc_mul_double_4
//  929 	wNAF_recode(k_scalars[1], WP_DOUBLEBASE, digits_k2);
??ecc_mul_double_3:
        LDI     R26, 0
        LDI     R27, 0
        MOVW    R31:R30, R29:R28
        SUBI    R30, 239
        SBCI    R31, 254
        LD      R0, Z
        LDD     R1, Z+1
        LDD     R2, Z+2
        LDD     R3, Z+3
        LDD     R4, Z+4
        LDD     R5, Z+5
        LDD     R6, Z+6
        LDD     R7, Z+7
        LDI     R30, LOW(__Constant_0_0)
        LDI     R31, (__Constant_0_0) >> 8
          CFI FunCall ?LL_CMP_R0_L12
        CALL    ?LL_CMP_R0_L12
        BRNE    $+2+2
        RJMP    ??ecc_mul_double_10
??ecc_mul_double_11:
        BST     R0, 0
        CLR     R8
        CLR     R17
        CLR     R18
        CLR     R19
        CLR     R20
        CLR     R21
        CLR     R22
        CLR     R23
        BLD     R8, 0
        LDI     R30, LOW(__Constant_0_0)
        LDI     R31, (__Constant_0_0) >> 8
        MOV     R16, R8
          CFI FunCall ?LL_CMP_L12
        CALL    ?LL_CMP_L12
        BRNE    ??ecc_mul_double_12
        LSR     R7
        ROR     R6
        ROR     R5
        ROR     R4
        ROR     R3
        ROR     R2
        ROR     R1
        ROR     R0
        MOVW    R31:R30, R29:R28
        SUBI    R30, 139
        SBCI    R31, 239
        MOVW    R17:R16, R27:R26
        LSL     R16
        ROL     R17
        ADD     R30, R16
        ADC     R31, R17
        ST      Z, R18
        STD     Z+1, R18
        RJMP    ??ecc_mul_double_13
??ecc_mul_double_12:
        MOV     R8, R0
        LDI     R16, 63
        AND     R8, R16
        CLR     R9
        LDI     R24, 6
        MOVW    R17:R16, R1:R0
        MOVW    R19:R18, R3:R2
        MOVW    R21:R20, R5:R4
        MOVW    R23:R22, R7:R6
          CFI FunCall ?ULL_SHR_L12
        CALL    ?ULL_SHR_L12
        MOVW    R1:R0, R17:R16
        MOVW    R3:R2, R19:R18
        MOVW    R5:R4, R21:R20
        MOVW    R7:R6, R23:R22
        LDI     R16, 32
        CP      R8, R16
        CPC     R9, R9
        BRLT    ??ecc_mul_double_14
        LDI     R16, 192
        ADD     R8, R16
        LDI     R16, 255
        ADC     R9, R16
??ecc_mul_double_14:
        TST     R9
        BRPL    ??ecc_mul_double_15
        LDI     R16, 1
        ADD     R0, R16
        LDI     R16, 0
        ADC     R1, R16
        ADC     R2, R16
        ADC     R3, R16
        ADC     R4, R16
        ADC     R5, R16
        ADC     R6, R16
        ADC     R7, R16
??ecc_mul_double_15:
        MOVW    R19:R18, R29:R28
        SUBI    R18, 139
        SBCI    R19, 239
        MOVW    R17:R16, R27:R26
        LSL     R16
        ROL     R17
        ADD     R18, R16
        ADC     R19, R17
        MOVW    R31:R30, R19:R18
        ST      Z, R8
        STD     Z+1, R9
        LDI     R30, LOW(__Constant_0_0)
        LDI     R31, (__Constant_0_0) >> 8
          CFI FunCall ?LL_CMP_R0_L12
        CALL    ?LL_CMP_R0_L12
        BREQ    ??ecc_mul_double_13
        LDI     R24, 0
        LDI     R25, 0
        SUBI    R18, 254
        SBCI    R19, 255
        LDI     R16, 0
??ecc_mul_double_16:
        ADIW    R27:R26, 1
        MOVW    R31:R30, R19:R18
        ST      Z+, R16
        ST      Z+, R16
        MOVW    R19:R18, R31:R30
        ADIW    R25:R24, 1
        CPI     R24, 5
        CPC     R25, R16
        BRCS    ??ecc_mul_double_16
??ecc_mul_double_13:
        ADIW    R27:R26, 1
        LDI     R30, LOW(__Constant_0_0)
        LDI     R31, (__Constant_0_0) >> 8
          CFI FunCall ?LL_CMP_R0_L12
        CALL    ?LL_CMP_R0_L12
        BREQ    $+2+2
        RJMP    ??ecc_mul_double_11
//  930 	wNAF_recode(k_scalars[2], WP_DOUBLEBASE, digits_k3);
??ecc_mul_double_10:
        LDI     R26, 0
        LDI     R27, 0
        MOVW    R31:R30, R29:R28
        SUBI    R30, 231
        SBCI    R31, 254
        LD      R0, Z
        LDD     R1, Z+1
        LDD     R2, Z+2
        LDD     R3, Z+3
        LDD     R4, Z+4
        LDD     R5, Z+5
        LDD     R6, Z+6
        LDD     R7, Z+7
        LDI     R30, LOW(__Constant_0_0)
        LDI     R31, (__Constant_0_0) >> 8
          CFI FunCall ?LL_CMP_R0_L12
        CALL    ?LL_CMP_R0_L12
        BRNE    $+2+2
        RJMP    ??ecc_mul_double_17
??ecc_mul_double_18:
        BST     R0, 0
        CLR     R8
        CLR     R17
        CLR     R18
        CLR     R19
        CLR     R20
        CLR     R21
        CLR     R22
        CLR     R23
        BLD     R8, 0
        LDI     R30, LOW(__Constant_0_0)
        LDI     R31, (__Constant_0_0) >> 8
        MOV     R16, R8
          CFI FunCall ?LL_CMP_L12
        CALL    ?LL_CMP_L12
        BRNE    ??ecc_mul_double_19
        LSR     R7
        ROR     R6
        ROR     R5
        ROR     R4
        ROR     R3
        ROR     R2
        ROR     R1
        ROR     R0
        MOVW    R31:R30, R29:R28
        SUBI    R30, 13
        SBCI    R31, 240
        MOVW    R17:R16, R27:R26
        LSL     R16
        ROL     R17
        ADD     R30, R16
        ADC     R31, R17
        ST      Z, R18
        STD     Z+1, R18
        RJMP    ??ecc_mul_double_20
??ecc_mul_double_19:
        MOV     R8, R0
        LDI     R16, 63
        AND     R8, R16
        CLR     R9
        LDI     R24, 6
        MOVW    R17:R16, R1:R0
        MOVW    R19:R18, R3:R2
        MOVW    R21:R20, R5:R4
        MOVW    R23:R22, R7:R6
          CFI FunCall ?ULL_SHR_L12
        CALL    ?ULL_SHR_L12
        MOVW    R1:R0, R17:R16
        MOVW    R3:R2, R19:R18
        MOVW    R5:R4, R21:R20
        MOVW    R7:R6, R23:R22
        LDI     R16, 32
        CP      R8, R16
        CPC     R9, R9
        BRLT    ??ecc_mul_double_21
        LDI     R16, 192
        ADD     R8, R16
        LDI     R16, 255
        ADC     R9, R16
??ecc_mul_double_21:
        TST     R9
        BRPL    ??ecc_mul_double_22
        LDI     R16, 1
        ADD     R0, R16
        LDI     R16, 0
        ADC     R1, R16
        ADC     R2, R16
        ADC     R3, R16
        ADC     R4, R16
        ADC     R5, R16
        ADC     R6, R16
        ADC     R7, R16
??ecc_mul_double_22:
        MOVW    R19:R18, R29:R28
        SUBI    R18, 13
        SBCI    R19, 240
        MOVW    R17:R16, R27:R26
        LSL     R16
        ROL     R17
        ADD     R18, R16
        ADC     R19, R17
        MOVW    R31:R30, R19:R18
        ST      Z, R8
        STD     Z+1, R9
        LDI     R30, LOW(__Constant_0_0)
        LDI     R31, (__Constant_0_0) >> 8
          CFI FunCall ?LL_CMP_R0_L12
        CALL    ?LL_CMP_R0_L12
        BREQ    ??ecc_mul_double_20
        LDI     R24, 0
        LDI     R25, 0
        SUBI    R18, 254
        SBCI    R19, 255
        LDI     R16, 0
??ecc_mul_double_23:
        ADIW    R27:R26, 1
        MOVW    R31:R30, R19:R18
        ST      Z+, R16
        ST      Z+, R16
        MOVW    R19:R18, R31:R30
        ADIW    R25:R24, 1
        CPI     R24, 5
        CPC     R25, R16
        BRCS    ??ecc_mul_double_23
??ecc_mul_double_20:
        ADIW    R27:R26, 1
        LDI     R30, LOW(__Constant_0_0)
        LDI     R31, (__Constant_0_0) >> 8
          CFI FunCall ?LL_CMP_R0_L12
        CALL    ?LL_CMP_R0_L12
        BREQ    $+2+2
        RJMP    ??ecc_mul_double_18
//  931 	wNAF_recode(k_scalars[3], WP_DOUBLEBASE, digits_k4);
??ecc_mul_double_17:
        LDI     R26, 0
        LDI     R27, 0
        MOVW    R31:R30, R29:R28
        SUBI    R30, 223
        SBCI    R31, 254
        LD      R0, Z
        LDD     R1, Z+1
        LDD     R2, Z+2
        LDD     R3, Z+3
        LDD     R4, Z+4
        LDD     R5, Z+5
        LDD     R6, Z+6
        LDD     R7, Z+7
        LDI     R30, LOW(__Constant_0_0)
        LDI     R31, (__Constant_0_0) >> 8
          CFI FunCall ?LL_CMP_R0_L12
        CALL    ?LL_CMP_R0_L12
        BRNE    $+2+2
        RJMP    ??ecc_mul_double_24
??ecc_mul_double_25:
        BST     R0, 0
        CLR     R8
        CLR     R17
        CLR     R18
        CLR     R19
        CLR     R20
        CLR     R21
        CLR     R22
        CLR     R23
        BLD     R8, 0
        LDI     R30, LOW(__Constant_0_0)
        LDI     R31, (__Constant_0_0) >> 8
        MOV     R16, R8
          CFI FunCall ?LL_CMP_L12
        CALL    ?LL_CMP_L12
        BRNE    ??ecc_mul_double_26
        LSR     R7
        ROR     R6
        ROR     R5
        ROR     R4
        ROR     R3
        ROR     R2
        ROR     R1
        ROR     R0
        MOVW    R31:R30, R29:R28
        SUBI    R30, 143
        SBCI    R31, 240
        MOVW    R17:R16, R27:R26
        LSL     R16
        ROL     R17
        ADD     R30, R16
        ADC     R31, R17
        ST      Z, R18
        STD     Z+1, R18
        RJMP    ??ecc_mul_double_27
??ecc_mul_double_26:
        MOV     R8, R0
        LDI     R16, 63
        AND     R8, R16
        CLR     R9
        LDI     R24, 6
        MOVW    R17:R16, R1:R0
        MOVW    R19:R18, R3:R2
        MOVW    R21:R20, R5:R4
        MOVW    R23:R22, R7:R6
          CFI FunCall ?ULL_SHR_L12
        CALL    ?ULL_SHR_L12
        MOVW    R1:R0, R17:R16
        MOVW    R3:R2, R19:R18
        MOVW    R5:R4, R21:R20
        MOVW    R7:R6, R23:R22
        LDI     R16, 32
        CP      R8, R16
        CPC     R9, R9
        BRLT    ??ecc_mul_double_28
        LDI     R16, 192
        ADD     R8, R16
        LDI     R16, 255
        ADC     R9, R16
??ecc_mul_double_28:
        TST     R9
        BRPL    ??ecc_mul_double_29
        LDI     R16, 1
        ADD     R0, R16
        LDI     R16, 0
        ADC     R1, R16
        ADC     R2, R16
        ADC     R3, R16
        ADC     R4, R16
        ADC     R5, R16
        ADC     R6, R16
        ADC     R7, R16
??ecc_mul_double_29:
        MOVW    R19:R18, R29:R28
        SUBI    R18, 143
        SBCI    R19, 240
        MOVW    R17:R16, R27:R26
        LSL     R16
        ROL     R17
        ADD     R18, R16
        ADC     R19, R17
        MOVW    R31:R30, R19:R18
        ST      Z, R8
        STD     Z+1, R9
        LDI     R30, LOW(__Constant_0_0)
        LDI     R31, (__Constant_0_0) >> 8
          CFI FunCall ?LL_CMP_R0_L12
        CALL    ?LL_CMP_R0_L12
        BREQ    ??ecc_mul_double_27
        LDI     R24, 0
        LDI     R25, 0
        SUBI    R18, 254
        SBCI    R19, 255
        LDI     R16, 0
??ecc_mul_double_30:
        ADIW    R27:R26, 1
        MOVW    R31:R30, R19:R18
        ST      Z+, R16
        ST      Z+, R16
        MOVW    R19:R18, R31:R30
        ADIW    R25:R24, 1
        CPI     R24, 5
        CPC     R25, R16
        BRCS    ??ecc_mul_double_30
??ecc_mul_double_27:
        ADIW    R27:R26, 1
        LDI     R30, LOW(__Constant_0_0)
        LDI     R31, (__Constant_0_0) >> 8
          CFI FunCall ?LL_CMP_R0_L12
        CALL    ?LL_CMP_R0_L12
        BREQ    $+2+2
        RJMP    ??ecc_mul_double_25
//  932 	wNAF_recode(l_scalars[0], WQ_DOUBLEBASE, digits_l1);
??ecc_mul_double_24:
        LDI     R26, 0
        LDI     R27, 0
        MOVW    R31:R30, R29:R28
        SUBI    R30, 23
        SBCI    R31, 255
        LD      R0, Z
        LDD     R1, Z+1
        LDD     R2, Z+2
        LDD     R3, Z+3
        LDD     R4, Z+4
        LDD     R5, Z+5
        LDD     R6, Z+6
        LDD     R7, Z+7
        LDI     R30, LOW(__Constant_0_0)
        LDI     R31, (__Constant_0_0) >> 8
          CFI FunCall ?LL_CMP_R0_L12
        CALL    ?LL_CMP_R0_L12
        BRNE    $+2+2
        RJMP    ??ecc_mul_double_31
??ecc_mul_double_32:
        BST     R0, 0
        CLR     R8
        CLR     R17
        CLR     R18
        CLR     R19
        CLR     R20
        CLR     R21
        CLR     R22
        CLR     R23
        BLD     R8, 0
        LDI     R30, LOW(__Constant_0_0)
        LDI     R31, (__Constant_0_0) >> 8
        MOV     R16, R8
          CFI FunCall ?LL_CMP_L12
        CALL    ?LL_CMP_L12
        BRNE    ??ecc_mul_double_33
        LSR     R7
        ROR     R6
        ROR     R5
        ROR     R4
        ROR     R3
        ROR     R2
        ROR     R1
        ROR     R0
        MOVW    R31:R30, R29:R28
        SUBI    R30, 17
        SBCI    R31, 241
        MOVW    R17:R16, R27:R26
        LSL     R16
        ROL     R17
        ADD     R30, R16
        ADC     R31, R17
        ST      Z, R18
        STD     Z+1, R18
        RJMP    ??ecc_mul_double_34
??ecc_mul_double_33:
        MOV     R24, R0
        ANDI    R24, 0x0F
        LDI     R25, 0
        LSR     R7
        ROR     R6
        ROR     R5
        ROR     R4
        ROR     R3
        ROR     R2
        ROR     R1
        ROR     R0
        LSR     R7
        ROR     R6
        ROR     R5
        ROR     R4
        ROR     R3
        ROR     R2
        ROR     R1
        ROR     R0
        LSR     R7
        ROR     R6
        ROR     R5
        ROR     R4
        ROR     R3
        ROR     R2
        ROR     R1
        ROR     R0
        LSR     R7
        ROR     R6
        ROR     R5
        ROR     R4
        ROR     R3
        ROR     R2
        ROR     R1
        ROR     R0
        CPI     R24, 8
        CPC     R17, R17
        BRLT    ??ecc_mul_double_35
        SBIW    R25:R24, 16
??ecc_mul_double_35:
        TST     R25
        BRPL    ??ecc_mul_double_36
        LDI     R16, 1
        ADD     R0, R16
        ADC     R1, R17
        ADC     R2, R17
        ADC     R3, R17
        ADC     R4, R17
        ADC     R5, R17
        ADC     R6, R17
        ADC     R7, R17
??ecc_mul_double_36:
        MOVW    R19:R18, R29:R28
        SUBI    R18, 17
        SBCI    R19, 241
        MOVW    R17:R16, R27:R26
        LSL     R16
        ROL     R17
        ADD     R18, R16
        ADC     R19, R17
        MOVW    R31:R30, R19:R18
        ST      Z, R24
        STD     Z+1, R25
        LDI     R30, LOW(__Constant_0_0)
        LDI     R31, (__Constant_0_0) >> 8
          CFI FunCall ?LL_CMP_R0_L12
        CALL    ?LL_CMP_R0_L12
        BREQ    ??ecc_mul_double_34
        LDI     R24, 0
        LDI     R25, 0
        SUBI    R18, 254
        SBCI    R19, 255
??ecc_mul_double_37:
        ADIW    R27:R26, 1
        MOVW    R31:R30, R19:R18
        ST      Z+, R20
        ST      Z+, R20
        MOVW    R19:R18, R31:R30
        ADIW    R25:R24, 1
        CPI     R24, 3
        CPC     R25, R20
        BRCS    ??ecc_mul_double_37
??ecc_mul_double_34:
        ADIW    R27:R26, 1
        LDI     R30, LOW(__Constant_0_0)
        LDI     R31, (__Constant_0_0) >> 8
          CFI FunCall ?LL_CMP_R0_L12
        CALL    ?LL_CMP_R0_L12
        BREQ    $+2+2
        RJMP    ??ecc_mul_double_32
//  933 	wNAF_recode(l_scalars[1], WQ_DOUBLEBASE, digits_l2);
??ecc_mul_double_31:
        LDI     R26, 0
        LDI     R27, 0
        MOVW    R31:R30, R29:R28
        SUBI    R30, 15
        SBCI    R31, 255
        LD      R0, Z
        LDD     R1, Z+1
        LDD     R2, Z+2
        LDD     R3, Z+3
        LDD     R4, Z+4
        LDD     R5, Z+5
        LDD     R6, Z+6
        LDD     R7, Z+7
        LDI     R30, LOW(__Constant_0_0)
        LDI     R31, (__Constant_0_0) >> 8
          CFI FunCall ?LL_CMP_R0_L12
        CALL    ?LL_CMP_R0_L12
        BRNE    $+2+2
        RJMP    ??ecc_mul_double_38
??ecc_mul_double_39:
        BST     R0, 0
        CLR     R8
        CLR     R17
        CLR     R18
        CLR     R19
        CLR     R20
        CLR     R21
        CLR     R22
        CLR     R23
        BLD     R8, 0
        LDI     R30, LOW(__Constant_0_0)
        LDI     R31, (__Constant_0_0) >> 8
        MOV     R16, R8
          CFI FunCall ?LL_CMP_L12
        CALL    ?LL_CMP_L12
        BRNE    ??ecc_mul_double_40
        LSR     R7
        ROR     R6
        ROR     R5
        ROR     R4
        ROR     R3
        ROR     R2
        ROR     R1
        ROR     R0
        MOVW    R31:R30, R29:R28
        SUBI    R30, 147
        SBCI    R31, 241
        MOVW    R17:R16, R27:R26
        LSL     R16
        ROL     R17
        ADD     R30, R16
        ADC     R31, R17
        ST      Z, R18
        STD     Z+1, R18
        RJMP    ??ecc_mul_double_41
??ecc_mul_double_40:
        MOV     R24, R0
        ANDI    R24, 0x0F
        LDI     R25, 0
        LSR     R7
        ROR     R6
        ROR     R5
        ROR     R4
        ROR     R3
        ROR     R2
        ROR     R1
        ROR     R0
        LSR     R7
        ROR     R6
        ROR     R5
        ROR     R4
        ROR     R3
        ROR     R2
        ROR     R1
        ROR     R0
        LSR     R7
        ROR     R6
        ROR     R5
        ROR     R4
        ROR     R3
        ROR     R2
        ROR     R1
        ROR     R0
        LSR     R7
        ROR     R6
        ROR     R5
        ROR     R4
        ROR     R3
        ROR     R2
        ROR     R1
        ROR     R0
        CPI     R24, 8
        CPC     R17, R17
        BRLT    ??ecc_mul_double_42
        SBIW    R25:R24, 16
??ecc_mul_double_42:
        TST     R25
        BRPL    ??ecc_mul_double_43
        LDI     R16, 1
        ADD     R0, R16
        ADC     R1, R17
        ADC     R2, R17
        ADC     R3, R17
        ADC     R4, R17
        ADC     R5, R17
        ADC     R6, R17
        ADC     R7, R17
??ecc_mul_double_43:
        MOVW    R19:R18, R29:R28
        SUBI    R18, 147
        SBCI    R19, 241
        MOVW    R17:R16, R27:R26
        LSL     R16
        ROL     R17
        ADD     R18, R16
        ADC     R19, R17
        MOVW    R31:R30, R19:R18
        ST      Z, R24
        STD     Z+1, R25
        LDI     R30, LOW(__Constant_0_0)
        LDI     R31, (__Constant_0_0) >> 8
          CFI FunCall ?LL_CMP_R0_L12
        CALL    ?LL_CMP_R0_L12
        BREQ    ??ecc_mul_double_41
        LDI     R24, 0
        LDI     R25, 0
        SUBI    R18, 254
        SBCI    R19, 255
??ecc_mul_double_44:
        ADIW    R27:R26, 1
        MOVW    R31:R30, R19:R18
        ST      Z+, R20
        ST      Z+, R20
        MOVW    R19:R18, R31:R30
        ADIW    R25:R24, 1
        CPI     R24, 3
        CPC     R25, R20
        BRCS    ??ecc_mul_double_44
??ecc_mul_double_41:
        ADIW    R27:R26, 1
        LDI     R30, LOW(__Constant_0_0)
        LDI     R31, (__Constant_0_0) >> 8
          CFI FunCall ?LL_CMP_R0_L12
        CALL    ?LL_CMP_R0_L12
        BREQ    $+2+2
        RJMP    ??ecc_mul_double_39
//  934 	wNAF_recode(l_scalars[2], WQ_DOUBLEBASE, digits_l3);
??ecc_mul_double_38:
        LDI     R26, 0
        LDI     R27, 0
        MOVW    R31:R30, R29:R28
        SUBI    R30, 7
        SBCI    R31, 255
        LD      R0, Z
        LDD     R1, Z+1
        LDD     R2, Z+2
        LDD     R3, Z+3
        LDD     R4, Z+4
        LDD     R5, Z+5
        LDD     R6, Z+6
        LDD     R7, Z+7
        LDI     R30, LOW(__Constant_0_0)
        LDI     R31, (__Constant_0_0) >> 8
          CFI FunCall ?LL_CMP_R0_L12
        CALL    ?LL_CMP_R0_L12
        BRNE    $+2+2
        RJMP    ??ecc_mul_double_45
??ecc_mul_double_46:
        BST     R0, 0
        CLR     R8
        CLR     R17
        CLR     R18
        CLR     R19
        CLR     R20
        CLR     R21
        CLR     R22
        CLR     R23
        BLD     R8, 0
        LDI     R30, LOW(__Constant_0_0)
        LDI     R31, (__Constant_0_0) >> 8
        MOV     R16, R8
          CFI FunCall ?LL_CMP_L12
        CALL    ?LL_CMP_L12
        BRNE    ??ecc_mul_double_47
        LSR     R7
        ROR     R6
        ROR     R5
        ROR     R4
        ROR     R3
        ROR     R2
        ROR     R1
        ROR     R0
        MOVW    R31:R30, R29:R28
        SUBI    R30, 21
        SBCI    R31, 242
        MOVW    R17:R16, R27:R26
        LSL     R16
        ROL     R17
        ADD     R30, R16
        ADC     R31, R17
        ST      Z, R18
        STD     Z+1, R18
        RJMP    ??ecc_mul_double_48
??ecc_mul_double_47:
        MOV     R24, R0
        ANDI    R24, 0x0F
        LDI     R25, 0
        LSR     R7
        ROR     R6
        ROR     R5
        ROR     R4
        ROR     R3
        ROR     R2
        ROR     R1
        ROR     R0
        LSR     R7
        ROR     R6
        ROR     R5
        ROR     R4
        ROR     R3
        ROR     R2
        ROR     R1
        ROR     R0
        LSR     R7
        ROR     R6
        ROR     R5
        ROR     R4
        ROR     R3
        ROR     R2
        ROR     R1
        ROR     R0
        LSR     R7
        ROR     R6
        ROR     R5
        ROR     R4
        ROR     R3
        ROR     R2
        ROR     R1
        ROR     R0
        CPI     R24, 8
        CPC     R17, R17
        BRLT    ??ecc_mul_double_49
        SBIW    R25:R24, 16
??ecc_mul_double_49:
        TST     R25
        BRPL    ??ecc_mul_double_50
        LDI     R16, 1
        ADD     R0, R16
        ADC     R1, R17
        ADC     R2, R17
        ADC     R3, R17
        ADC     R4, R17
        ADC     R5, R17
        ADC     R6, R17
        ADC     R7, R17
??ecc_mul_double_50:
        MOVW    R19:R18, R29:R28
        SUBI    R18, 21
        SBCI    R19, 242
        MOVW    R17:R16, R27:R26
        LSL     R16
        ROL     R17
        ADD     R18, R16
        ADC     R19, R17
        MOVW    R31:R30, R19:R18
        ST      Z, R24
        STD     Z+1, R25
        LDI     R30, LOW(__Constant_0_0)
        LDI     R31, (__Constant_0_0) >> 8
          CFI FunCall ?LL_CMP_R0_L12
        CALL    ?LL_CMP_R0_L12
        BREQ    ??ecc_mul_double_48
        LDI     R24, 0
        LDI     R25, 0
        SUBI    R18, 254
        SBCI    R19, 255
??ecc_mul_double_51:
        ADIW    R27:R26, 1
        MOVW    R31:R30, R19:R18
        ST      Z+, R20
        ST      Z+, R20
        MOVW    R19:R18, R31:R30
        ADIW    R25:R24, 1
        CPI     R24, 3
        CPC     R25, R20
        BRCS    ??ecc_mul_double_51
??ecc_mul_double_48:
        ADIW    R27:R26, 1
        LDI     R30, LOW(__Constant_0_0)
        LDI     R31, (__Constant_0_0) >> 8
          CFI FunCall ?LL_CMP_R0_L12
        CALL    ?LL_CMP_R0_L12
        BREQ    $+2+2
        RJMP    ??ecc_mul_double_46
//  935 	wNAF_recode(l_scalars[3], WQ_DOUBLEBASE, digits_l4);
??ecc_mul_double_45:
        LDI     R26, 0
        LDI     R27, 0
        MOVW    R31:R30, R29:R28
        SUBI    R30, 255
        SBCI    R31, 254
        LD      R0, Z
        LDD     R1, Z+1
        LDD     R2, Z+2
        LDD     R3, Z+3
        LDD     R4, Z+4
        LDD     R5, Z+5
        LDD     R6, Z+6
        LDD     R7, Z+7
        LDI     R30, LOW(__Constant_0_0)
        LDI     R31, (__Constant_0_0) >> 8
          CFI FunCall ?LL_CMP_R0_L12
        CALL    ?LL_CMP_R0_L12
        BRNE    $+2+2
        RJMP    ??ecc_mul_double_52
??ecc_mul_double_53:
        BST     R0, 0
        CLR     R8
        CLR     R17
        CLR     R18
        CLR     R19
        CLR     R20
        CLR     R21
        CLR     R22
        CLR     R23
        BLD     R8, 0
        LDI     R30, LOW(__Constant_0_0)
        LDI     R31, (__Constant_0_0) >> 8
        MOV     R16, R8
          CFI FunCall ?LL_CMP_L12
        CALL    ?LL_CMP_L12
        BRNE    ??ecc_mul_double_54
        LSR     R7
        ROR     R6
        ROR     R5
        ROR     R4
        ROR     R3
        ROR     R2
        ROR     R1
        ROR     R0
        MOVW    R31:R30, R29:R28
        SUBI    R30, 151
        SBCI    R31, 242
        MOVW    R17:R16, R27:R26
        LSL     R16
        ROL     R17
        ADD     R30, R16
        ADC     R31, R17
        ST      Z, R18
        STD     Z+1, R18
        RJMP    ??ecc_mul_double_55
??ecc_mul_double_54:
        MOV     R24, R0
        ANDI    R24, 0x0F
        LDI     R25, 0
        LSR     R7
        ROR     R6
        ROR     R5
        ROR     R4
        ROR     R3
        ROR     R2
        ROR     R1
        ROR     R0
        LSR     R7
        ROR     R6
        ROR     R5
        ROR     R4
        ROR     R3
        ROR     R2
        ROR     R1
        ROR     R0
        LSR     R7
        ROR     R6
        ROR     R5
        ROR     R4
        ROR     R3
        ROR     R2
        ROR     R1
        ROR     R0
        LSR     R7
        ROR     R6
        ROR     R5
        ROR     R4
        ROR     R3
        ROR     R2
        ROR     R1
        ROR     R0
        CPI     R24, 8
        CPC     R17, R17
        BRLT    ??ecc_mul_double_56
        SBIW    R25:R24, 16
??ecc_mul_double_56:
        TST     R25
        BRPL    ??ecc_mul_double_57
        LDI     R16, 1
        ADD     R0, R16
        ADC     R1, R17
        ADC     R2, R17
        ADC     R3, R17
        ADC     R4, R17
        ADC     R5, R17
        ADC     R6, R17
        ADC     R7, R17
??ecc_mul_double_57:
        MOVW    R19:R18, R29:R28
        SUBI    R18, 151
        SBCI    R19, 242
        MOVW    R17:R16, R27:R26
        LSL     R16
        ROL     R17
        ADD     R18, R16
        ADC     R19, R17
        MOVW    R31:R30, R19:R18
        ST      Z, R24
        STD     Z+1, R25
        LDI     R30, LOW(__Constant_0_0)
        LDI     R31, (__Constant_0_0) >> 8
          CFI FunCall ?LL_CMP_R0_L12
        CALL    ?LL_CMP_R0_L12
        BREQ    ??ecc_mul_double_55
        LDI     R24, 0
        LDI     R25, 0
        SUBI    R18, 254
        SBCI    R19, 255
??ecc_mul_double_58:
        ADIW    R27:R26, 1
        MOVW    R31:R30, R19:R18
        ST      Z+, R20
        ST      Z+, R20
        MOVW    R19:R18, R31:R30
        ADIW    R25:R24, 1
        CPI     R24, 3
        CPC     R25, R20
        BRCS    ??ecc_mul_double_58
??ecc_mul_double_55:
        ADIW    R27:R26, 1
        LDI     R30, LOW(__Constant_0_0)
        LDI     R31, (__Constant_0_0) >> 8
          CFI FunCall ?LL_CMP_R0_L12
        CALL    ?LL_CMP_R0_L12
        BREQ    $+2+2
        RJMP    ??ecc_mul_double_53
//  936 	ecc_precomp_double(Q1, Q_table1, NPOINTS_DOUBLEMUL_WQ);    // Precomputation
??ecc_mul_double_52:
        MOVW    R19:R18, R29:R28
        SUBI    R18, 215
        SBCI    R19, 245
        MOVW    R17:R16, R29:R28
        SUBI    R16, 151
        SBCI    R17, 253
        RCALL   ?Subroutine17
??CrossCallReturnLabel_22:
        MOVW    R17:R16, R29:R28
        SUBI    R16, 151
        SBCI    R17, 253
        RCALL   ?Subroutine18
??CrossCallReturnLabel_31:
        MOVW    R19:R18, R29:R28
        SUBI    R18, 247
        SBCI    R19, 252
        MOVW    R17:R16, R29:R28
        SUBI    R16, 151
        SBCI    R17, 253
        RCALL   ?Subroutine15
??CrossCallReturnLabel_0:
        MOVW    R25:R24, R29:R28
        SUBI    R24, 87
        SBCI    R25, 245
        LDI     R26, 3
??ecc_mul_double_59:
        MOVW    R21:R20, R29:R28
        SUBI    R20, 119
        SBCI    R21, 252
        MOVW    R19:R18, R29:R28
        SUBI    R18, 247
        SBCI    R19, 252
        MOVW    R17:R16, R25:R24
        SUBI    R16, 128
        SBCI    R17, 0
        RCALL   ?Subroutine16
??CrossCallReturnLabel_13:
        MOVW    R19:R18, R25:R24
        MOVW    R17:R16, R29:R28
        SUBI    R16, 119
        SBCI    R17, 252
        RCALL   ?Subroutine17
??CrossCallReturnLabel_23:
        SUBI    R24, 128
        SBCI    R25, 255
        DEC     R26
        BRNE    ??ecc_mul_double_59
//  937 	ecc_precomp_double(Q2, Q_table2, NPOINTS_DOUBLEMUL_WQ);
        MOVW    R19:R18, R29:R28
        SUBI    R18, 215
        SBCI    R19, 247
        MOVW    R17:R16, R29:R28
        SUBI    R16, 55
        SBCI    R17, 254
        RCALL   ?Subroutine17
??CrossCallReturnLabel_24:
        MOVW    R17:R16, R29:R28
        SUBI    R16, 55
        SBCI    R17, 254
        RCALL   ?Subroutine18
??CrossCallReturnLabel_32:
        MOVW    R19:R18, R29:R28
        SUBI    R18, 247
        SBCI    R19, 252
        MOVW    R17:R16, R29:R28
        SUBI    R16, 55
        SBCI    R17, 254
        RCALL   ?Subroutine15
??CrossCallReturnLabel_1:
        MOVW    R25:R24, R29:R28
        SUBI    R24, 87
        SBCI    R25, 247
        LDI     R26, 3
??ecc_mul_double_60:
        MOVW    R21:R20, R29:R28
        SUBI    R20, 119
        SBCI    R21, 252
        MOVW    R19:R18, R29:R28
        SUBI    R18, 247
        SBCI    R19, 252
        MOVW    R17:R16, R25:R24
        SUBI    R16, 128
        SBCI    R17, 0
        RCALL   ?Subroutine16
??CrossCallReturnLabel_14:
        MOVW    R19:R18, R25:R24
        MOVW    R17:R16, R29:R28
        SUBI    R16, 119
        SBCI    R17, 252
        RCALL   ?Subroutine17
??CrossCallReturnLabel_25:
        SUBI    R24, 128
        SBCI    R25, 255
        DEC     R26
        BRNE    ??ecc_mul_double_60
//  938 	ecc_precomp_double(Q3, Q_table3, NPOINTS_DOUBLEMUL_WQ);
        MOVW    R19:R18, R29:R28
        SUBI    R18, 215
        SBCI    R19, 249
        MOVW    R17:R16, R29:R28
        SUBI    R16, 55
        SBCI    R17, 243
        RCALL   ?Subroutine17
??CrossCallReturnLabel_26:
        MOVW    R17:R16, R29:R28
        SUBI    R16, 55
        SBCI    R17, 243
        RCALL   ?Subroutine18
??CrossCallReturnLabel_33:
        MOVW    R19:R18, R29:R28
        SUBI    R18, 247
        SBCI    R19, 252
        MOVW    R17:R16, R29:R28
        SUBI    R16, 55
        SBCI    R17, 243
        RCALL   ?Subroutine15
??CrossCallReturnLabel_2:
        MOVW    R25:R24, R29:R28
        SUBI    R24, 87
        SBCI    R25, 249
        LDI     R26, 3
??ecc_mul_double_61:
        MOVW    R21:R20, R29:R28
        SUBI    R20, 119
        SBCI    R21, 252
        MOVW    R19:R18, R29:R28
        SUBI    R18, 247
        SBCI    R19, 252
        MOVW    R17:R16, R25:R24
        SUBI    R16, 128
        SBCI    R17, 0
        RCALL   ?Subroutine16
??CrossCallReturnLabel_15:
        MOVW    R19:R18, R25:R24
        MOVW    R17:R16, R29:R28
        SUBI    R16, 119
        SBCI    R17, 252
        RCALL   ?Subroutine17
??CrossCallReturnLabel_27:
        SUBI    R24, 128
        SBCI    R25, 255
        DEC     R26
        BRNE    ??ecc_mul_double_61
//  939 	ecc_precomp_double(Q4, Q_table4, NPOINTS_DOUBLEMUL_WQ);
        MOVW    R19:R18, R29:R28
        SUBI    R18, 215
        SBCI    R19, 251
        MOVW    R17:R16, R29:R28
        SUBI    R16, 215
        SBCI    R17, 243
        RCALL   ?Subroutine17
??CrossCallReturnLabel_28:
        MOVW    R17:R16, R29:R28
        SUBI    R16, 215
        SBCI    R17, 243
        RCALL   ?Subroutine18
??CrossCallReturnLabel_34:
        MOVW    R19:R18, R29:R28
        SUBI    R18, 247
        SBCI    R19, 252
        MOVW    R17:R16, R29:R28
        SUBI    R16, 215
        SBCI    R17, 243
        RCALL   ?Subroutine15
??CrossCallReturnLabel_3:
        MOVW    R25:R24, R29:R28
        SUBI    R24, 87
        SBCI    R25, 251
        LDI     R26, 3
??ecc_mul_double_62:
        MOVW    R21:R20, R29:R28
        SUBI    R20, 119
        SBCI    R21, 252
        MOVW    R19:R18, R29:R28
        SUBI    R18, 247
        SBCI    R19, 252
        MOVW    R17:R16, R25:R24
        SUBI    R16, 128
        SBCI    R17, 0
        RCALL   ?Subroutine16
??CrossCallReturnLabel_16:
        MOVW    R19:R18, R25:R24
        MOVW    R17:R16, R29:R28
        SUBI    R16, 119
        SBCI    R17, 252
        RCALL   ?Subroutine17
??CrossCallReturnLabel_29:
        SUBI    R24, 128
        SBCI    R25, 255
        DEC     R26
        BRNE    ??ecc_mul_double_62
//  940 
//  941 	fp2zero1271(T->x);                                         // Initialize T as the neutral point (0:1:1)
        MOVW    R17:R16, R29:R28
        SUBI    R16, 215
        SBCI    R17, 254
          CFI FunCall fpzero1271
        CALL    fpzero1271
        MOVW    R17:R16, R29:R28
        SUBI    R16, 199
        SBCI    R17, 254
          CFI FunCall fpzero1271
        CALL    fpzero1271
//  942 	fp2zero1271(T->y); T->y[0][0] = 1;
        MOVW    R17:R16, R29:R28
        SUBI    R16, 183
        SBCI    R17, 254
          CFI FunCall fpzero1271
        CALL    fpzero1271
        MOVW    R17:R16, R29:R28
        SUBI    R16, 167
        SBCI    R17, 254
          CFI FunCall fpzero1271
        CALL    fpzero1271
        MOVW    R31:R30, R29:R28
        SUBI    R30, 183
        SBCI    R31, 254
        LDI     R16, 1
        ST      Z, R16
        LDI     R16, 0
        STD     Z+1, R16
        STD     Z+2, R16
        STD     Z+3, R16
//  943 	fp2zero1271(T->z); T->z[0][0] = 1;
        MOVW    R27:R26, R29:R28
        SUBI    R26, 151
        SBCI    R27, 254
        MOVW    R17:R16, R27:R26
          CFI FunCall fpzero1271
        CALL    fpzero1271
        MOVW    R17:R16, R29:R28
        SUBI    R16, 135
        SBCI    R17, 254
          CFI FunCall fpzero1271
        CALL    fpzero1271
        LDI     R16, 1
        ST      X+, R16
        LDI     R16, 0
        ST      X+, R16
        ST      X+, R16
        ST      X, R16
//  944 
//  945 	for (i = 64; i >= 0; i--)
        MOVW    R15:R14, R29:R28
        LDI     R16, 111
        ADD     R14, R16
        LDI     R16, 15
        ADC     R15, R16
        MOVW    R13:R12, R29:R28
        LDI     R16, 237
        ADD     R12, R16
        LDI     R16, 14
        ADC     R13, R16
        MOVW    R11:R10, R29:R28
        LDI     R16, 107
        ADD     R10, R16
        LDI     R16, 14
        ADC     R11, R16
        MOVW    R9:R8, R29:R28
        LDI     R16, 233
        ADD     R8, R16
        LDI     R16, 13
        ADC     R9, R16
        MOVW    R7:R6, R29:R28
        LDI     R16, 119
        ADD     R6, R16
        LDI     R16, 17
        ADC     R7, R16
        MOVW    R17:R16, R29:R28
        SUBI    R16, 11
        SBCI    R17, 239
        STD     Y+5, R16
        STD     Y+6, R17
        MOVW    R17:R16, R29:R28
        SUBI    R16, 141
        SBCI    R17, 239
        STD     Y+3, R16
        STD     Y+4, R17
        MOVW    R17:R16, R29:R28
        SUBI    R16, 15
        SBCI    R17, 240
        STD     Y+1, R16
        STD     Y+2, R17
        LDI     R16, 65
        ST      Y, R16
        CLR     R5
//  946 	{
//  947 		eccdouble(T);                                          // Double (X_T,Y_T,Z_T,Ta_T,Tb_T) = 2(X_T,Y_T,Z_T,Ta_T,Tb_T)
??ecc_mul_double_63:
        MOVW    R17:R16, R29:R28
        SUBI    R16, 215
        SBCI    R17, 254
        RCALL   ?Subroutine18
//  948 		if (digits_l1[i] < 0) {
??CrossCallReturnLabel_35:
        MOVW    R31:R30, R15:R14
        LD      R24, Z
        LDD     R25, Z+1
        TST     R25
        BRMI    $+2+2
        RJMP    ??ecc_mul_double_64
//  949 			position = (-digits_l1[i])/2;
//  950 			eccneg_extproj_precomp(Q_table1[position], U);     // Load and negate U = (X_U,Y_U,Z_U,Td_U) <- -(X+Y,Y-X,2Z,2dT) from a point in the precomputed table 
        MOVW    R19:R18, R25:R24
        MOVW    R25:R24, R29:R28
        SUBI    R24, 215
        SBCI    R25, 245
        BST     R19, 7
        LDI     R16, 0
        LDI     R17, 0
        BLD     R16, 0
        ADD     R16, R18
        ADC     R17, R19
        ASR     R17
        ROR     R16
        NEG     R17
        NEG     R16
        SBCI    R17, 0
        LSR     R17
        ROR     R16
        MOV     R17, R16
        LDI     R16, 0
        ROR     R16
        ADD     R24, R16
        ADC     R25, R17
        MOVW    R27:R26, R25:R24
        SUBI    R26, 160
        SBCI    R27, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 55
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 39
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 119
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 103
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R27:R26, R25:R24
        ADIW    R27:R26, 32
        MOVW    R19:R18, R29:R28
        SUBI    R18, 151
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 135
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        SUBI    R24, 192
        SBCI    R25, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 87
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 71
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R17:R16, R29:R28
        SUBI    R16, 55
        SBCI    R17, 255
          CFI FunCall fpneg1271
        CALL    fpneg1271
        MOVW    R17:R16, R29:R28
        SUBI    R16, 39
        SBCI    R17, 255
          CFI FunCall fpneg1271
        CALL    fpneg1271
//  951 			eccadd(U, T);                                      // T = T+U = (X_T,Y_T,Z_T,Ta_T,Tb_T) = (X_T,Y_T,Z_T,Ta_T,Tb_T) + (X_U,Y_U,Z_U,Td_U) 
        MOVW    R19:R18, R29:R28
        SUBI    R18, 247
        SBCI    R19, 252
        MOVW    R17:R16, R29:R28
        SUBI    R16, 215
        SBCI    R17, 254
        RCALL   ?Subroutine15
??CrossCallReturnLabel_4:
        MOVW    R21:R20, R29:R28
        SUBI    R20, 215
        SBCI    R21, 254
        MOVW    R19:R18, R29:R28
        SUBI    R18, 247
        SBCI    R19, 252
        MOVW    R17:R16, R29:R28
        SUBI    R16, 151
        SBCI    R17, 255
        RJMP    ??ecc_mul_double_65
//  952 		} else if (digits_l1[i] > 0) {
??ecc_mul_double_64:
        CPI     R24, 1
        CPC     R25, R5
        BRLT    ??CrossCallReturnLabel_17
//  953 			position = (digits_l1[i])/2;                       // Take U = (X_U,Y_U,Z_U,Td_U) <- (X+Y,Y-X,2Z,2dT) from a point in the precomputed table
//  954 			eccadd(Q_table1[position], T);                     // T = T+U = (X_T,Y_T,Z_T,Ta_T,Tb_T) = (X_T,Y_T,Z_T,Ta_T,Tb_T) + (X_U,Y_U,Z_U,Td_U) 
        MOVW    R19:R18, R29:R28
        SUBI    R18, 247
        SBCI    R19, 252
        MOVW    R17:R16, R29:R28
        SUBI    R16, 215
        SBCI    R17, 254
        RCALL   ?Subroutine15
??CrossCallReturnLabel_5:
        MOVW    R21:R20, R29:R28
        SUBI    R20, 215
        SBCI    R21, 254
        MOVW    R19:R18, R29:R28
        SUBI    R18, 247
        SBCI    R19, 252
        MOVW    R17:R16, R29:R28
        SUBI    R16, 215
        SBCI    R17, 245
        BST     R25, 7
        LDI     R22, 0
        LDI     R23, 0
        BLD     R22, 0
        ADD     R22, R24
        ADC     R23, R25
        ASR     R23
        ROR     R22
        LSR     R23
        ROR     R22
        MOV     R23, R22
        LDI     R22, 0
        ROR     R22
        ADD     R16, R22
        ADC     R17, R23
??ecc_mul_double_65:
        RCALL   ?Subroutine16
//  955 		}
//  956 		if (digits_l2[i] < 0) {
??CrossCallReturnLabel_17:
        MOVW    R31:R30, R13:R12
        LD      R24, Z
        LDD     R25, Z+1
        TST     R25
        BRMI    $+2+2
        RJMP    ??ecc_mul_double_66
//  957 			position = (-digits_l2[i])/2;
//  958 			eccneg_extproj_precomp(Q_table2[position], U);
        MOVW    R19:R18, R25:R24
        MOVW    R25:R24, R29:R28
        SUBI    R24, 215
        SBCI    R25, 247
        BST     R19, 7
        LDI     R16, 0
        LDI     R17, 0
        BLD     R16, 0
        ADD     R16, R18
        ADC     R17, R19
        ASR     R17
        ROR     R16
        NEG     R17
        NEG     R16
        SBCI    R17, 0
        LSR     R17
        ROR     R16
        MOV     R17, R16
        LDI     R16, 0
        ROR     R16
        ADD     R24, R16
        ADC     R25, R17
        MOVW    R27:R26, R25:R24
        SUBI    R26, 160
        SBCI    R27, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 55
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 39
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 119
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 103
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R27:R26, R25:R24
        ADIW    R27:R26, 32
        MOVW    R19:R18, R29:R28
        SUBI    R18, 151
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 135
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        SUBI    R24, 192
        SBCI    R25, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 87
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 71
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R17:R16, R29:R28
        SUBI    R16, 55
        SBCI    R17, 255
          CFI FunCall fpneg1271
        CALL    fpneg1271
        MOVW    R17:R16, R29:R28
        SUBI    R16, 39
        SBCI    R17, 255
          CFI FunCall fpneg1271
        CALL    fpneg1271
//  959 			eccadd(U, T);
        MOVW    R19:R18, R29:R28
        SUBI    R18, 247
        SBCI    R19, 252
        MOVW    R17:R16, R29:R28
        SUBI    R16, 215
        SBCI    R17, 254
        RCALL   ?Subroutine15
??CrossCallReturnLabel_6:
        MOVW    R21:R20, R29:R28
        SUBI    R20, 215
        SBCI    R21, 254
        MOVW    R19:R18, R29:R28
        SUBI    R18, 247
        SBCI    R19, 252
        MOVW    R17:R16, R29:R28
        SUBI    R16, 151
        SBCI    R17, 255
        RJMP    ??ecc_mul_double_67
//  960 		} else if (digits_l2[i] > 0) {
??ecc_mul_double_66:
        CPI     R24, 1
        CPC     R25, R5
        BRLT    ??CrossCallReturnLabel_18
//  961 			position = (digits_l2[i])/2;
//  962 			eccadd(Q_table2[position], T);
        MOVW    R19:R18, R29:R28
        SUBI    R18, 247
        SBCI    R19, 252
        MOVW    R17:R16, R29:R28
        SUBI    R16, 215
        SBCI    R17, 254
        RCALL   ?Subroutine15
??CrossCallReturnLabel_7:
        MOVW    R21:R20, R29:R28
        SUBI    R20, 215
        SBCI    R21, 254
        MOVW    R19:R18, R29:R28
        SUBI    R18, 247
        SBCI    R19, 252
        MOVW    R17:R16, R29:R28
        SUBI    R16, 215
        SBCI    R17, 247
        BST     R25, 7
        LDI     R22, 0
        LDI     R23, 0
        BLD     R22, 0
        ADD     R22, R24
        ADC     R23, R25
        ASR     R23
        ROR     R22
        LSR     R23
        ROR     R22
        MOV     R23, R22
        LDI     R22, 0
        ROR     R22
        ADD     R16, R22
        ADC     R17, R23
??ecc_mul_double_67:
        RCALL   ?Subroutine16
//  963 		}
//  964 		if (digits_l3[i] < 0) {
??CrossCallReturnLabel_18:
        MOVW    R31:R30, R11:R10
        LD      R24, Z
        LDD     R25, Z+1
        TST     R25
        BRMI    $+2+2
        RJMP    ??ecc_mul_double_68
//  965 			position = (-digits_l3[i])/2;
//  966 			eccneg_extproj_precomp(Q_table3[position], U);
        MOVW    R19:R18, R25:R24
        MOVW    R25:R24, R29:R28
        SUBI    R24, 215
        SBCI    R25, 249
        BST     R19, 7
        LDI     R16, 0
        LDI     R17, 0
        BLD     R16, 0
        ADD     R16, R18
        ADC     R17, R19
        ASR     R17
        ROR     R16
        NEG     R17
        NEG     R16
        SBCI    R17, 0
        LSR     R17
        ROR     R16
        MOV     R17, R16
        LDI     R16, 0
        ROR     R16
        ADD     R24, R16
        ADC     R25, R17
        MOVW    R27:R26, R25:R24
        SUBI    R26, 160
        SBCI    R27, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 55
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 39
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 119
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 103
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R27:R26, R25:R24
        ADIW    R27:R26, 32
        MOVW    R19:R18, R29:R28
        SUBI    R18, 151
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 135
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        SUBI    R24, 192
        SBCI    R25, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 87
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 71
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R17:R16, R29:R28
        SUBI    R16, 55
        SBCI    R17, 255
          CFI FunCall fpneg1271
        CALL    fpneg1271
        MOVW    R17:R16, R29:R28
        SUBI    R16, 39
        SBCI    R17, 255
          CFI FunCall fpneg1271
        CALL    fpneg1271
//  967 			eccadd(U, T);
        MOVW    R19:R18, R29:R28
        SUBI    R18, 247
        SBCI    R19, 252
        MOVW    R17:R16, R29:R28
        SUBI    R16, 215
        SBCI    R17, 254
        RCALL   ?Subroutine15
??CrossCallReturnLabel_8:
        MOVW    R21:R20, R29:R28
        SUBI    R20, 215
        SBCI    R21, 254
        MOVW    R19:R18, R29:R28
        SUBI    R18, 247
        SBCI    R19, 252
        MOVW    R17:R16, R29:R28
        SUBI    R16, 151
        SBCI    R17, 255
        RJMP    ??ecc_mul_double_69
//  968 		} else if (digits_l3[i] > 0) {
??ecc_mul_double_68:
        CPI     R24, 1
        CPC     R25, R5
        BRLT    ??CrossCallReturnLabel_19
//  969 			position = (digits_l3[i])/2;
//  970 			eccadd(Q_table3[position], T);
        MOVW    R19:R18, R29:R28
        SUBI    R18, 247
        SBCI    R19, 252
        MOVW    R17:R16, R29:R28
        SUBI    R16, 215
        SBCI    R17, 254
        RCALL   ?Subroutine15
??CrossCallReturnLabel_9:
        MOVW    R21:R20, R29:R28
        SUBI    R20, 215
        SBCI    R21, 254
        MOVW    R19:R18, R29:R28
        SUBI    R18, 247
        SBCI    R19, 252
        MOVW    R17:R16, R29:R28
        SUBI    R16, 215
        SBCI    R17, 249
        BST     R25, 7
        LDI     R22, 0
        LDI     R23, 0
        BLD     R22, 0
        ADD     R22, R24
        ADC     R23, R25
        ASR     R23
        ROR     R22
        LSR     R23
        ROR     R22
        MOV     R23, R22
        LDI     R22, 0
        ROR     R22
        ADD     R16, R22
        ADC     R17, R23
??ecc_mul_double_69:
        RCALL   ?Subroutine16
//  971 		}
//  972 		if (digits_l4[i] < 0) {
??CrossCallReturnLabel_19:
        MOVW    R31:R30, R9:R8
        LD      R24, Z
        LDD     R25, Z+1
        TST     R25
        BRMI    $+2+2
        RJMP    ??ecc_mul_double_70
//  973 			position = (-digits_l4[i])/2;
//  974 			eccneg_extproj_precomp(Q_table4[position], U);
        MOVW    R19:R18, R25:R24
        MOVW    R25:R24, R29:R28
        SUBI    R24, 215
        SBCI    R25, 251
        BST     R19, 7
        LDI     R16, 0
        LDI     R17, 0
        BLD     R16, 0
        ADD     R16, R18
        ADC     R17, R19
        ASR     R17
        ROR     R16
        NEG     R17
        NEG     R16
        SBCI    R17, 0
        LSR     R17
        ROR     R16
        MOV     R17, R16
        LDI     R16, 0
        ROR     R16
        ADD     R24, R16
        ADC     R25, R17
        MOVW    R27:R26, R25:R24
        SUBI    R26, 160
        SBCI    R27, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 55
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 39
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 119
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 103
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R27:R26, R25:R24
        ADIW    R27:R26, 32
        MOVW    R19:R18, R29:R28
        SUBI    R18, 151
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 135
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        SUBI    R24, 192
        SBCI    R25, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 87
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R19:R18, R29:R28
        SUBI    R18, 71
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpcopy1271
        CALL    fpcopy1271
        MOVW    R17:R16, R29:R28
        SUBI    R16, 55
        SBCI    R17, 255
          CFI FunCall fpneg1271
        CALL    fpneg1271
        MOVW    R17:R16, R29:R28
        SUBI    R16, 39
        SBCI    R17, 255
          CFI FunCall fpneg1271
        CALL    fpneg1271
//  975 			eccadd(U, T);
        MOVW    R19:R18, R29:R28
        SUBI    R18, 247
        SBCI    R19, 252
        MOVW    R17:R16, R29:R28
        SUBI    R16, 215
        SBCI    R17, 254
        RCALL   ?Subroutine15
??CrossCallReturnLabel_10:
        MOVW    R21:R20, R29:R28
        SUBI    R20, 215
        SBCI    R21, 254
        MOVW    R19:R18, R29:R28
        SUBI    R18, 247
        SBCI    R19, 252
        MOVW    R17:R16, R29:R28
        SUBI    R16, 151
        SBCI    R17, 255
        RJMP    ??ecc_mul_double_71
//  976 		} else if (digits_l4[i] > 0) {
??ecc_mul_double_70:
        CPI     R24, 1
        CPC     R25, R5
        BRLT    ??CrossCallReturnLabel_20
//  977 			position = (digits_l4[i])/2;
//  978 			eccadd(Q_table4[position], T);
        MOVW    R19:R18, R29:R28
        SUBI    R18, 247
        SBCI    R19, 252
        MOVW    R17:R16, R29:R28
        SUBI    R16, 215
        SBCI    R17, 254
        RCALL   ?Subroutine15
??CrossCallReturnLabel_11:
        MOVW    R21:R20, R29:R28
        SUBI    R20, 215
        SBCI    R21, 254
        MOVW    R19:R18, R29:R28
        SUBI    R18, 247
        SBCI    R19, 252
        MOVW    R17:R16, R29:R28
        SUBI    R16, 215
        SBCI    R17, 251
        BST     R25, 7
        LDI     R22, 0
        LDI     R23, 0
        BLD     R22, 0
        ADD     R22, R24
        ADC     R23, R25
        ASR     R23
        ROR     R22
        LSR     R23
        ROR     R22
        MOV     R23, R22
        LDI     R22, 0
        ROR     R22
        ADD     R16, R22
        ADC     R17, R23
??ecc_mul_double_71:
        RCALL   ?Subroutine16
//  979 		}
//  980 
//  981 		if (digits_k1[i] < 0) {
??CrossCallReturnLabel_20:
        MOVW    R31:R30, R7:R6
        LD      R22, Z
        LDD     R23, Z+1
        TST     R23
        BRMI    $+2+2
        RJMP    ??ecc_mul_double_72
//  982 			position = (-digits_k1[i])/2;
//  983 			eccneg_precomp(((point_precomp_t*)&DOUBLE_SCALAR_TABLE)[position], V);    // Load and negate V = (X_V,Y_V,Z_V,Td_V) <- -(x+y,y-x,2dt) from a point in the precomputed table 
        LDI     R24, LOW(DOUBLE_SCALAR_TABLE)
        LDI     R25, (DOUBLE_SCALAR_TABLE) >> 8
        BST     R23, 7
        LDI     R18, 0
        LDI     R19, 0
        BLD     R18, 0
        ADD     R18, R22
        ADC     R19, R23
        ASR     R19
        ROR     R18
        LDI     R16, 160
        LDI     R17, 255
        MUL     R19, R16
        MOV     R19, R0
        MUL     R18, R17
        ADD     R19, R0
        MUL     R18, R16
        ADD     R19, R1
        ADD     R24, R0
        ADC     R25, R19
        MOVW    R27:R26, R25:R24
        SUBI    R26, 192
        SBCI    R27, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 183
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
          CFI FunCall fpcopy1271_flash
        CALL    fpcopy1271_flash
        MOVW    R19:R18, R29:R28
        SUBI    R18, 167
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpcopy1271_flash
        CALL    fpcopy1271_flash
        MOVW    R19:R18, R29:R28
        SUBI    R18, 215
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
          CFI FunCall fpcopy1271_flash
        CALL    fpcopy1271_flash
        MOVW    R19:R18, R29:R28
        SUBI    R18, 199
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpcopy1271_flash
        CALL    fpcopy1271_flash
        ADIW    R25:R24, 32
        MOVW    R19:R18, R29:R28
        SUBI    R18, 247
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
          CFI FunCall fpcopy1271_flash
        CALL    fpcopy1271_flash
        MOVW    R19:R18, R29:R28
        SUBI    R18, 231
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpcopy1271_flash
        CALL    fpcopy1271_flash
        MOVW    R17:R16, R29:R28
        SUBI    R16, 183
        SBCI    R17, 255
          CFI FunCall fpneg1271
        CALL    fpneg1271
        MOVW    R17:R16, R29:R28
        SUBI    R16, 167
        SBCI    R17, 255
          CFI FunCall fpneg1271
        CALL    fpneg1271
//  984 			eccmadd(V, T);                                                            // T = T+V = (X_T,Y_T,Z_T,Ta_T,Tb_T) = (X_T,Y_T,Z_T,Ta_T,Tb_T) + (X_V,Y_V,Z_V,Td_V) 
        MOVW    R19:R18, R29:R28
        SUBI    R18, 215
        SBCI    R19, 254
        MOVW    R17:R16, R29:R28
        SUBI    R16, 247
        SBCI    R17, 255
        RCALL   ?Subroutine19
//  985 		} else if (digits_k1[i] > 0) {
??CrossCallReturnLabel_37:
        RJMP    ??CrossCallReturnLabel_41
??ecc_mul_double_72:
        CPI     R22, 1
        CPC     R23, R5
        BRLT    ??CrossCallReturnLabel_41
//  986 			position = (digits_k1[i])/2;                                              // Take V = (X_V,Y_V,Z_V,Td_V) <- (x+y,y-x,2dt) from a point in the precomputed table
//  987 			eccmadd2(((point_precomp_t*)&DOUBLE_SCALAR_TABLE)[position], T);          // T = T+V = (X_T,Y_T,Z_T,Ta_T,Tb_T) = (X_T,Y_T,Z_T,Ta_T,Tb_T) + (X_V,Y_V,Z_V,Td_V) 
        MOVW    R19:R18, R29:R28
        SUBI    R18, 215
        SBCI    R19, 254
        LDI     R20, LOW(DOUBLE_SCALAR_TABLE)
        LDI     R21, (DOUBLE_SCALAR_TABLE) >> 8
        BST     R23, 7
        CLR     R2
        CLR     R3
        BLD     R2, 0
        ADD     R2, R22
        ADC     R3, R23
        ASR     R3
        ROR     R2
        LDI     R16, 96
        MUL     R3, R16
        MOV     R3, R0
        MUL     R2, R16
        ADD     R3, R1
        ADD     R20, R0
        ADC     R21, R3
        MOVW    R17:R16, R21:R20
        RCALL   ?Subroutine20
//  988 		}
//  989 		if (digits_k2[i] < 0) {
??CrossCallReturnLabel_41:
        LDD     R30, Y+5
        LDD     R31, Y+6
        LD      R22, Z
        LDD     R23, Z+1
        TST     R23
        BRMI    $+2+2
        RJMP    ??ecc_mul_double_73
//  990 			position = (-digits_k2[i])/2;
//  991 			eccneg_precomp(((point_precomp_t*)&DOUBLE_SCALAR_TABLE)[NPOINTS_DOUBLEMUL_WP+position], V);
        LDI     R24, LOW(DOUBLE_SCALAR_TABLE)
        LDI     R25, (DOUBLE_SCALAR_TABLE) >> 8
        BST     R23, 7
        LDI     R18, 0
        LDI     R19, 0
        BLD     R18, 0
        ADD     R18, R22
        ADC     R19, R23
        ASR     R19
        ROR     R18
        LDI     R16, 160
        LDI     R17, 255
        MUL     R19, R16
        MOV     R19, R0
        MUL     R18, R17
        ADD     R19, R0
        MUL     R18, R16
        ADD     R19, R1
        ADD     R24, R0
        ADC     R25, R19
        SUBI    R25, 250
        MOVW    R27:R26, R25:R24
        SUBI    R26, 192
        SBCI    R27, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 183
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
          CFI FunCall fpcopy1271_flash
        CALL    fpcopy1271_flash
        MOVW    R19:R18, R29:R28
        SUBI    R18, 167
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpcopy1271_flash
        CALL    fpcopy1271_flash
        MOVW    R19:R18, R29:R28
        SUBI    R18, 215
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
          CFI FunCall fpcopy1271_flash
        CALL    fpcopy1271_flash
        MOVW    R19:R18, R29:R28
        SUBI    R18, 199
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpcopy1271_flash
        CALL    fpcopy1271_flash
        ADIW    R25:R24, 32
        MOVW    R19:R18, R29:R28
        SUBI    R18, 247
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
          CFI FunCall fpcopy1271_flash
        CALL    fpcopy1271_flash
        MOVW    R19:R18, R29:R28
        SUBI    R18, 231
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpcopy1271_flash
        CALL    fpcopy1271_flash
        MOVW    R17:R16, R29:R28
        SUBI    R16, 183
        SBCI    R17, 255
          CFI FunCall fpneg1271
        CALL    fpneg1271
        MOVW    R17:R16, R29:R28
        SUBI    R16, 167
        SBCI    R17, 255
          CFI FunCall fpneg1271
        CALL    fpneg1271
//  992 			eccmadd(V, T);
        MOVW    R19:R18, R29:R28
        SUBI    R18, 215
        SBCI    R19, 254
        MOVW    R17:R16, R29:R28
        SUBI    R16, 247
        SBCI    R17, 255
        RCALL   ?Subroutine19
//  993 		} else if (digits_k2[i] > 0) {
??CrossCallReturnLabel_38:
        RJMP    ??CrossCallReturnLabel_42
??ecc_mul_double_73:
        CPI     R22, 1
        CPC     R23, R5
        BRLT    ??CrossCallReturnLabel_42
//  994 			position = (digits_k2[i])/2;
//  995 			eccmadd2(((point_precomp_t*)&DOUBLE_SCALAR_TABLE)[NPOINTS_DOUBLEMUL_WP+position], T);
        MOVW    R19:R18, R29:R28
        SUBI    R18, 215
        SBCI    R19, 254
        LDI     R20, LOW(DOUBLE_SCALAR_TABLE)
        LDI     R21, (DOUBLE_SCALAR_TABLE) >> 8
        BST     R23, 7
        CLR     R2
        CLR     R3
        BLD     R2, 0
        ADD     R2, R22
        ADC     R3, R23
        ASR     R3
        ROR     R2
        LDI     R16, 96
        MUL     R3, R16
        MOV     R3, R0
        MUL     R2, R16
        ADD     R3, R1
        ADD     R20, R0
        ADC     R21, R3
        SUBI    R21, 250
        MOVW    R17:R16, R21:R20
        RCALL   ?Subroutine20
//  996 		}
//  997 		if (digits_k3[i] < 0) {
??CrossCallReturnLabel_42:
        LDD     R30, Y+3
        LDD     R31, Y+4
        LD      R22, Z
        LDD     R23, Z+1
        TST     R23
        BRMI    $+2+2
        RJMP    ??ecc_mul_double_74
//  998 			position = (-digits_k3[i])/2;
//  999 			eccneg_precomp(((point_precomp_t*)&DOUBLE_SCALAR_TABLE)[2*NPOINTS_DOUBLEMUL_WP+position], V);
        LDI     R24, LOW(DOUBLE_SCALAR_TABLE)
        LDI     R25, (DOUBLE_SCALAR_TABLE) >> 8
        BST     R23, 7
        LDI     R18, 0
        LDI     R19, 0
        BLD     R18, 0
        ADD     R18, R22
        ADC     R19, R23
        ASR     R19
        ROR     R18
        LDI     R16, 160
        LDI     R17, 255
        MUL     R19, R16
        MOV     R19, R0
        MUL     R18, R17
        ADD     R19, R0
        MUL     R18, R16
        ADD     R19, R1
        ADD     R24, R0
        ADC     R25, R19
        SUBI    R25, 244
        MOVW    R27:R26, R25:R24
        SUBI    R26, 192
        SBCI    R27, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 183
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
          CFI FunCall fpcopy1271_flash
        CALL    fpcopy1271_flash
        MOVW    R19:R18, R29:R28
        SUBI    R18, 167
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpcopy1271_flash
        CALL    fpcopy1271_flash
        MOVW    R19:R18, R29:R28
        SUBI    R18, 215
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
          CFI FunCall fpcopy1271_flash
        CALL    fpcopy1271_flash
        MOVW    R19:R18, R29:R28
        SUBI    R18, 199
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpcopy1271_flash
        CALL    fpcopy1271_flash
        ADIW    R25:R24, 32
        MOVW    R19:R18, R29:R28
        SUBI    R18, 247
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
          CFI FunCall fpcopy1271_flash
        CALL    fpcopy1271_flash
        MOVW    R19:R18, R29:R28
        SUBI    R18, 231
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpcopy1271_flash
        CALL    fpcopy1271_flash
        MOVW    R17:R16, R29:R28
        SUBI    R16, 183
        SBCI    R17, 255
          CFI FunCall fpneg1271
        CALL    fpneg1271
        MOVW    R17:R16, R29:R28
        SUBI    R16, 167
        SBCI    R17, 255
          CFI FunCall fpneg1271
        CALL    fpneg1271
// 1000 			eccmadd(V, T);
        MOVW    R19:R18, R29:R28
        SUBI    R18, 215
        SBCI    R19, 254
        MOVW    R17:R16, R29:R28
        SUBI    R16, 247
        SBCI    R17, 255
        RCALL   ?Subroutine19
// 1001 		} else if (digits_k3[i] > 0) {
??CrossCallReturnLabel_39:
        RJMP    ??CrossCallReturnLabel_43
??ecc_mul_double_74:
        CPI     R22, 1
        CPC     R23, R5
        BRLT    ??CrossCallReturnLabel_43
// 1002 			position = (digits_k3[i])/2;
// 1003 			eccmadd2(((point_precomp_t*)&DOUBLE_SCALAR_TABLE)[2*NPOINTS_DOUBLEMUL_WP+position], T);
        MOVW    R19:R18, R29:R28
        SUBI    R18, 215
        SBCI    R19, 254
        LDI     R20, LOW(DOUBLE_SCALAR_TABLE)
        LDI     R21, (DOUBLE_SCALAR_TABLE) >> 8
        BST     R23, 7
        CLR     R2
        CLR     R3
        BLD     R2, 0
        ADD     R2, R22
        ADC     R3, R23
        ASR     R3
        ROR     R2
        LDI     R16, 96
        MUL     R3, R16
        MOV     R3, R0
        MUL     R2, R16
        ADD     R3, R1
        ADD     R20, R0
        ADC     R21, R3
        SUBI    R21, 244
        MOVW    R17:R16, R21:R20
        RCALL   ?Subroutine20
// 1004 		}
// 1005 		if (digits_k4[i] < 0) {
??CrossCallReturnLabel_43:
        LDD     R30, Y+1
        LDD     R31, Y+2
        LD      R22, Z
        LDD     R23, Z+1
        TST     R23
        BRMI    $+2+2
        RJMP    ??ecc_mul_double_75
// 1006 			position = (-digits_k4[i])/2;
// 1007 			eccneg_precomp(((point_precomp_t*)&DOUBLE_SCALAR_TABLE)[3*NPOINTS_DOUBLEMUL_WP+position], V);
        LDI     R24, LOW(DOUBLE_SCALAR_TABLE)
        LDI     R25, (DOUBLE_SCALAR_TABLE) >> 8
        BST     R23, 7
        LDI     R18, 0
        LDI     R19, 0
        BLD     R18, 0
        ADD     R18, R22
        ADC     R19, R23
        ASR     R19
        ROR     R18
        LDI     R16, 160
        LDI     R17, 255
        MUL     R19, R16
        MOV     R19, R0
        MUL     R18, R17
        ADD     R19, R0
        MUL     R18, R16
        ADD     R19, R1
        ADD     R24, R0
        ADC     R25, R19
        SUBI    R25, 238
        MOVW    R27:R26, R25:R24
        SUBI    R26, 192
        SBCI    R27, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 183
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
          CFI FunCall fpcopy1271_flash
        CALL    fpcopy1271_flash
        MOVW    R19:R18, R29:R28
        SUBI    R18, 167
        SBCI    R19, 255
        MOVW    R17:R16, R27:R26
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpcopy1271_flash
        CALL    fpcopy1271_flash
        MOVW    R19:R18, R29:R28
        SUBI    R18, 215
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
          CFI FunCall fpcopy1271_flash
        CALL    fpcopy1271_flash
        MOVW    R19:R18, R29:R28
        SUBI    R18, 199
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpcopy1271_flash
        CALL    fpcopy1271_flash
        ADIW    R25:R24, 32
        MOVW    R19:R18, R29:R28
        SUBI    R18, 247
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
          CFI FunCall fpcopy1271_flash
        CALL    fpcopy1271_flash
        MOVW    R19:R18, R29:R28
        SUBI    R18, 231
        SBCI    R19, 255
        MOVW    R17:R16, R25:R24
        SUBI    R16, 240
        SBCI    R17, 255
          CFI FunCall fpcopy1271_flash
        CALL    fpcopy1271_flash
        MOVW    R17:R16, R29:R28
        SUBI    R16, 183
        SBCI    R17, 255
          CFI FunCall fpneg1271
        CALL    fpneg1271
        MOVW    R17:R16, R29:R28
        SUBI    R16, 167
        SBCI    R17, 255
          CFI FunCall fpneg1271
        CALL    fpneg1271
// 1008 			eccmadd(V, T);
        MOVW    R19:R18, R29:R28
        SUBI    R18, 215
        SBCI    R19, 254
        MOVW    R17:R16, R29:R28
        SUBI    R16, 247
        SBCI    R17, 255
        RCALL   ?Subroutine19
// 1009 		} else if (digits_k4[i] > 0) {
??CrossCallReturnLabel_40:
        RJMP    ??CrossCallReturnLabel_44
??ecc_mul_double_75:
        CPI     R22, 1
        CPC     R23, R5
        BRLT    ??CrossCallReturnLabel_44
// 1010 			position = (digits_k4[i])/2;
// 1011 			eccmadd2(((point_precomp_t*)&DOUBLE_SCALAR_TABLE)[3*NPOINTS_DOUBLEMUL_WP+position], T);
        MOVW    R19:R18, R29:R28
        SUBI    R18, 215
        SBCI    R19, 254
        LDI     R20, LOW(DOUBLE_SCALAR_TABLE)
        LDI     R21, (DOUBLE_SCALAR_TABLE) >> 8
        BST     R23, 7
        CLR     R2
        CLR     R3
        BLD     R2, 0
        ADD     R2, R22
        ADC     R3, R23
        ASR     R3
        ROR     R2
        LDI     R16, 96
        MUL     R3, R16
        MOV     R3, R0
        MUL     R2, R16
        ADD     R3, R1
        ADD     R20, R0
        ADC     R21, R3
        SUBI    R21, 238
        MOVW    R17:R16, R21:R20
        RCALL   ?Subroutine20
// 1012 		}
// 1013 	}
??CrossCallReturnLabel_44:
        LDD     R16, Y+1
        LDD     R17, Y+2
        SUBI    R16, 2
        SBCI    R17, 0
        STD     Y+1, R16
        STD     Y+2, R17
        LDD     R16, Y+3
        LDD     R17, Y+4
        SUBI    R16, 2
        SBCI    R17, 0
        STD     Y+3, R16
        STD     Y+4, R17
        LDD     R16, Y+5
        LDD     R17, Y+6
        SUBI    R16, 2
        SBCI    R17, 0
        STD     Y+5, R16
        STD     Y+6, R17
        LDI     R16, 254
        ADD     R6, R16
        LDI     R16, 255
        ADC     R7, R16
        LDI     R16, 254
        ADD     R8, R16
        LDI     R16, 255
        ADC     R9, R16
        LDI     R16, 254
        ADD     R10, R16
        LDI     R16, 255
        ADC     R11, R16
        LDI     R16, 254
        ADD     R12, R16
        LDI     R16, 255
        ADC     R13, R16
        LDI     R16, 254
        ADD     R14, R16
        LDI     R16, 255
        ADC     R15, R16
        LD      R16, Y
        DEC     R16
        ST      Y, R16
        BREQ    $+2+2
        RJMP    ??ecc_mul_double_63
// 1014 
// 1015 #else
// 1016 	point_t A;
// 1017 	point_extproj_t T;
// 1018 	point_extproj_precomp_t S;
// 1019 
// 1020 	if (ecc_mul(Q, l, A, false) == false) {
// 1021 		return false;
// 1022 	}
// 1023 	point_setup(A, T);
// 1024 	R1_to_R2(T, S);
// 1025 
// 1026 	ecc_mul_fixed(k, A);
// 1027 	point_setup(A, T);
// 1028 	eccadd(S, T);
// 1029 #endif
// 1030 	eccnorm(T, R);                                             // Output R = (x,y)
        LDD     R18, Y+7
        LDD     R19, Y+8
        MOVW    R17:R16, R29:R28
        SUBI    R16, 215
        SBCI    R17, 254
          CFI FunCall eccnorm
        CALL    eccnorm
// 1031 
// 1032 	return true;
        LDI     R16, 1
??ecc_mul_double_2:
        LDI     R17, 0
        ADIW    R29:R28, 63
          CFI CFA_Y Y+4426
        ADIW    R29:R28, 58
          CFI CFA_Y Y+4368
        SUBI    R29, 239
          CFI CFA_Y Y+16
        JMP     ?Subroutine1
// 1033 }
          CFI EndBlock cfiBlock67
// 1034 
// 1035 

        RSEG FARCODE:CODE:NOROOT(1)
// 1036 void ecc_precomp_double(point_extproj_t P, point_extproj_precomp_t* Table, unsigned int npoints)
ecc_precomp_double:
          CFI Block cfiBlock68 Using cfiCommon0
          CFI Function ecc_precomp_double
// 1037 { // Generation of the precomputation table used internally by the double scalar multiplication function ecc_mul_double().  
        ST      -Y, R7
          CFI R7 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R6
          CFI R6 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R5
          CFI R5 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        ST      -Y, R4
          CFI R4 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        ST      -Y, R27
          CFI R27 Frame(CFA_Y, -5)
          CFI CFA_Y Y+5
        ST      -Y, R26
          CFI R26 Frame(CFA_Y, -6)
          CFI CFA_Y Y+6
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -7)
          CFI CFA_Y Y+7
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -8)
          CFI CFA_Y Y+8
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        REQUIRE ?Register_R6_is_cg_reg
        REQUIRE ?Register_R7_is_cg_reg
        SBIW    R29:R28, 32
          CFI CFA_Y Y+40
        DEC     R29
          CFI CFA_Y Y+296
        MOVW    R5:R4, R17:R16
        MOVW    R27:R26, R19:R18
        MOVW    R25:R24, R21:R20
// 1038   // Inputs: point P in representation (X,Y,Z,Ta,Tb),
// 1039   //         Table with storage for npoints, 
// 1040   //         number of points "npoints".
// 1041   // Output: Table containing multiples of the base point P using representation (X+Y,Y-X,2Z,2dT).
// 1042 	point_extproj_t Q;
// 1043 	point_extproj_precomp_t PP;
// 1044 	unsigned int i;
// 1045 
// 1046 	R1_to_R2(P, Table[0]);                     // Precomputed point Table[0] = P in coordinates (X+Y,Y-X,2Z,2dT)
        RCALL   ?Subroutine17
// 1047 	eccdouble(P);                              // A = 2*P in (X,Y,Z,Ta,Tb)
??CrossCallReturnLabel_30:
        MOVW    R17:R16, R5:R4
        RCALL   ?Subroutine18
// 1048 	R1_to_R3(P, PP);                           // Converting from (X,Y,Z,Ta,Tb) to (X+Y,Y-X,Z,T) 
??CrossCallReturnLabel_36:
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R5:R4
        RCALL   ?Subroutine15
// 1049 
// 1050 	for (i = 1; i < npoints; i++) {
??CrossCallReturnLabel_12:
        CPI     R24, 2
        LDI     R16, 0
        CPC     R25, R16
        BRCC    $+2+2
        RJMP    ??ecc_precomp_double_0
        SUBI    R26, 128
        SBCI    R27, 255
        MOVW    R5:R4, R27:R26
        SBIW    R25:R24, 1
        MOVW    R7:R6, R25:R24
// 1051 		eccadd_core(Table[i-1], PP, Q);        // Table[i] = Table[i-1]+2P using the representations (X,Y,Z,Ta,Tb) <- (X+Y,Y-X,2Z,2dT) + (X+Y,Y-X,Z,T)
??ecc_precomp_double_1:
        MOVW    R21:R20, R29:R28
        SUBI    R20, 128
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R5:R4
        SUBI    R16, 128
        SBCI    R17, 0
        RCALL   ?Subroutine16
// 1052 		R1_to_R2(Q, Table[i]);                 // Converting from (X,Y,Z,Ta,Tb) to (X+Y,Y-X,2Z,2dT)
??CrossCallReturnLabel_21:
        MOVW    R25:R24, R5:R4
        SUBI    R24, 160
        SBCI    R25, 255
        MOVW    R21:R20, R25:R24
        MOVW    R19:R18, R29:R28
        SUBI    R18, 32
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 32
        SBCI    R17, 255
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R21:R20, R25:R24
        SUBI    R20, 240
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 16
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 16
        SBCI    R17, 255
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R21:R20, R5:R4
        MOVW    R19:R18, R29:R28
        SUBI    R18, 96
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 128
        SBCI    R17, 255
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R21:R20, R5:R4
        SUBI    R20, 240
        SBCI    R21, 255
        MOVW    R19:R18, R29:R28
        SUBI    R18, 80
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 112
        SBCI    R17, 255
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R27:R26, R5:R4
        ADIW    R27:R26, 32
        MOVW    R21:R20, R27:R26
        MOVW    R19:R18, R29:R28
        SUBI    R18, 128
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 96
        SBCI    R17, 255
          CFI FunCall fpsub1271
        CALL    fpsub1271
        ADIW    R27:R26, 16
        MOVW    R21:R20, R27:R26
        MOVW    R19:R18, R29:R28
        SUBI    R18, 112
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 80
        SBCI    R17, 255
          CFI FunCall fpsub1271
        CALL    fpsub1271
        MOVW    R21:R20, R25:R24
        MOVW    R19:R18, R29:R28
        INC     R19
        MOVW    R17:R16, R25:R24
          CFI FunCall fp2mul1271
        CALL    fp2mul1271
        MOVW    R27:R26, R5:R4
        SUBI    R26, 192
        SBCI    R27, 255
        MOVW    R21:R20, R27:R26
        MOVW    R19:R18, R29:R28
        SUBI    R18, 64
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 64
        SBCI    R17, 255
          CFI FunCall fpadd1271
        CALL    fpadd1271
        ADIW    R27:R26, 16
        MOVW    R21:R20, R27:R26
        MOVW    R19:R18, R29:R28
        SUBI    R18, 48
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 48
        SBCI    R17, 255
          CFI FunCall fpadd1271
        CALL    fpadd1271
        MOVW    R21:R20, R25:R24
        LDI     R18, LOW(PARAMETER_d)
        LDI     R19, (PARAMETER_d) >> 8
        MOVW    R17:R16, R25:R24
          CFI FunCall fp2mul1271
        CALL    fp2mul1271
// 1053 	}
        LDI     R16, 128
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
        LDI     R16, 1
        SUB     R6, R16
        LDI     R16, 0
        SBC     R7, R16
        BREQ    $+2+2
        RJMP    ??ecc_precomp_double_1
// 1054 
// 1055 	return;
??ecc_precomp_double_0:
        ADIW    R29:R28, 32
          CFI CFA_Y Y+264
        INC     R29
          CFI CFA_Y Y+8
        JMP     ??Subroutine12_0
// 1056 }
          CFI EndBlock cfiBlock68

        RSEG FARCODE:CODE:NOROOT(1)
?Subroutine20:
          CFI Block cfiCond69 Using cfiCommon0
          CFI Function ecc_mul_double
          CFI Conditional ??CrossCallReturnLabel_41
          CFI R24 Frame(CFA_Y, -16)
          CFI R25 Frame(CFA_Y, -15)
          CFI R26 Frame(CFA_Y, -14)
          CFI R27 Frame(CFA_Y, -13)
          CFI R4 Frame(CFA_Y, -12)
          CFI R5 Frame(CFA_Y, -11)
          CFI R6 Frame(CFA_Y, -10)
          CFI R7 Frame(CFA_Y, -9)
          CFI R8 Frame(CFA_Y, -8)
          CFI R9 Frame(CFA_Y, -7)
          CFI R10 Frame(CFA_Y, -6)
          CFI R11 Frame(CFA_Y, -5)
          CFI R12 Frame(CFA_Y, -4)
          CFI R13 Frame(CFA_Y, -3)
          CFI R14 Frame(CFA_Y, -2)
          CFI R15 Frame(CFA_Y, -1)
          CFI CFA_SP SP+6
          CFI CFA_Y Y+4489
          CFI Block cfiCond70 Using cfiCommon0
          CFI (cfiCond70) Function ecc_mul_double
          CFI (cfiCond70) Conditional ??CrossCallReturnLabel_42
          CFI (cfiCond70) R24 Frame(CFA_Y, -16)
          CFI (cfiCond70) R25 Frame(CFA_Y, -15)
          CFI (cfiCond70) R26 Frame(CFA_Y, -14)
          CFI (cfiCond70) R27 Frame(CFA_Y, -13)
          CFI (cfiCond70) R4 Frame(CFA_Y, -12)
          CFI (cfiCond70) R5 Frame(CFA_Y, -11)
          CFI (cfiCond70) R6 Frame(CFA_Y, -10)
          CFI (cfiCond70) R7 Frame(CFA_Y, -9)
          CFI (cfiCond70) R8 Frame(CFA_Y, -8)
          CFI (cfiCond70) R9 Frame(CFA_Y, -7)
          CFI (cfiCond70) R10 Frame(CFA_Y, -6)
          CFI (cfiCond70) R11 Frame(CFA_Y, -5)
          CFI (cfiCond70) R12 Frame(CFA_Y, -4)
          CFI (cfiCond70) R13 Frame(CFA_Y, -3)
          CFI (cfiCond70) R14 Frame(CFA_Y, -2)
          CFI (cfiCond70) R15 Frame(CFA_Y, -1)
          CFI (cfiCond70) CFA_SP SP+6
          CFI (cfiCond70) CFA_Y Y+4489
          CFI Block cfiCond71 Using cfiCommon0
          CFI (cfiCond71) Function ecc_mul_double
          CFI (cfiCond71) Conditional ??CrossCallReturnLabel_43
          CFI (cfiCond71) R24 Frame(CFA_Y, -16)
          CFI (cfiCond71) R25 Frame(CFA_Y, -15)
          CFI (cfiCond71) R26 Frame(CFA_Y, -14)
          CFI (cfiCond71) R27 Frame(CFA_Y, -13)
          CFI (cfiCond71) R4 Frame(CFA_Y, -12)
          CFI (cfiCond71) R5 Frame(CFA_Y, -11)
          CFI (cfiCond71) R6 Frame(CFA_Y, -10)
          CFI (cfiCond71) R7 Frame(CFA_Y, -9)
          CFI (cfiCond71) R8 Frame(CFA_Y, -8)
          CFI (cfiCond71) R9 Frame(CFA_Y, -7)
          CFI (cfiCond71) R10 Frame(CFA_Y, -6)
          CFI (cfiCond71) R11 Frame(CFA_Y, -5)
          CFI (cfiCond71) R12 Frame(CFA_Y, -4)
          CFI (cfiCond71) R13 Frame(CFA_Y, -3)
          CFI (cfiCond71) R14 Frame(CFA_Y, -2)
          CFI (cfiCond71) R15 Frame(CFA_Y, -1)
          CFI (cfiCond71) CFA_SP SP+6
          CFI (cfiCond71) CFA_Y Y+4489
          CFI Block cfiCond72 Using cfiCommon0
          CFI (cfiCond72) Function ecc_mul_double
          CFI (cfiCond72) Conditional ??CrossCallReturnLabel_44
          CFI (cfiCond72) R24 Frame(CFA_Y, -16)
          CFI (cfiCond72) R25 Frame(CFA_Y, -15)
          CFI (cfiCond72) R26 Frame(CFA_Y, -14)
          CFI (cfiCond72) R27 Frame(CFA_Y, -13)
          CFI (cfiCond72) R4 Frame(CFA_Y, -12)
          CFI (cfiCond72) R5 Frame(CFA_Y, -11)
          CFI (cfiCond72) R6 Frame(CFA_Y, -10)
          CFI (cfiCond72) R7 Frame(CFA_Y, -9)
          CFI (cfiCond72) R8 Frame(CFA_Y, -8)
          CFI (cfiCond72) R9 Frame(CFA_Y, -7)
          CFI (cfiCond72) R10 Frame(CFA_Y, -6)
          CFI (cfiCond72) R11 Frame(CFA_Y, -5)
          CFI (cfiCond72) R12 Frame(CFA_Y, -4)
          CFI (cfiCond72) R13 Frame(CFA_Y, -3)
          CFI (cfiCond72) R14 Frame(CFA_Y, -2)
          CFI (cfiCond72) R15 Frame(CFA_Y, -1)
          CFI (cfiCond72) CFA_SP SP+6
          CFI (cfiCond72) CFA_Y Y+4489
          CFI Block cfiPicker73 Using cfiCommon2
          CFI (cfiPicker73) NoFunction
          CFI (cfiPicker73) Picker
          CFI (cfiCond69) TailCall ecc_mul_double eccmadd2
          CFI (cfiCond69) TailCall ecc_mul_double eccmadd2
          CFI (cfiCond69) TailCall ecc_mul_double eccmadd2
          CFI (cfiCond69) TailCall ecc_mul_double eccmadd2
        JMP     eccmadd2
          CFI EndBlock cfiCond69
          CFI EndBlock cfiCond70
          CFI EndBlock cfiCond71
          CFI EndBlock cfiCond72
          CFI EndBlock cfiPicker73

        RSEG FARCODE:CODE:NOROOT(1)
?Subroutine19:
          CFI Block cfiCond74 Using cfiCommon0
          CFI Function ecc_mul_double
          CFI Conditional ??CrossCallReturnLabel_37
          CFI R24 Frame(CFA_Y, -16)
          CFI R25 Frame(CFA_Y, -15)
          CFI R26 Frame(CFA_Y, -14)
          CFI R27 Frame(CFA_Y, -13)
          CFI R4 Frame(CFA_Y, -12)
          CFI R5 Frame(CFA_Y, -11)
          CFI R6 Frame(CFA_Y, -10)
          CFI R7 Frame(CFA_Y, -9)
          CFI R8 Frame(CFA_Y, -8)
          CFI R9 Frame(CFA_Y, -7)
          CFI R10 Frame(CFA_Y, -6)
          CFI R11 Frame(CFA_Y, -5)
          CFI R12 Frame(CFA_Y, -4)
          CFI R13 Frame(CFA_Y, -3)
          CFI R14 Frame(CFA_Y, -2)
          CFI R15 Frame(CFA_Y, -1)
          CFI CFA_SP SP+6
          CFI CFA_Y Y+4489
          CFI Block cfiCond75 Using cfiCommon0
          CFI (cfiCond75) Function ecc_mul_double
          CFI (cfiCond75) Conditional ??CrossCallReturnLabel_38
          CFI (cfiCond75) R24 Frame(CFA_Y, -16)
          CFI (cfiCond75) R25 Frame(CFA_Y, -15)
          CFI (cfiCond75) R26 Frame(CFA_Y, -14)
          CFI (cfiCond75) R27 Frame(CFA_Y, -13)
          CFI (cfiCond75) R4 Frame(CFA_Y, -12)
          CFI (cfiCond75) R5 Frame(CFA_Y, -11)
          CFI (cfiCond75) R6 Frame(CFA_Y, -10)
          CFI (cfiCond75) R7 Frame(CFA_Y, -9)
          CFI (cfiCond75) R8 Frame(CFA_Y, -8)
          CFI (cfiCond75) R9 Frame(CFA_Y, -7)
          CFI (cfiCond75) R10 Frame(CFA_Y, -6)
          CFI (cfiCond75) R11 Frame(CFA_Y, -5)
          CFI (cfiCond75) R12 Frame(CFA_Y, -4)
          CFI (cfiCond75) R13 Frame(CFA_Y, -3)
          CFI (cfiCond75) R14 Frame(CFA_Y, -2)
          CFI (cfiCond75) R15 Frame(CFA_Y, -1)
          CFI (cfiCond75) CFA_SP SP+6
          CFI (cfiCond75) CFA_Y Y+4489
          CFI Block cfiCond76 Using cfiCommon0
          CFI (cfiCond76) Function ecc_mul_double
          CFI (cfiCond76) Conditional ??CrossCallReturnLabel_39
          CFI (cfiCond76) R24 Frame(CFA_Y, -16)
          CFI (cfiCond76) R25 Frame(CFA_Y, -15)
          CFI (cfiCond76) R26 Frame(CFA_Y, -14)
          CFI (cfiCond76) R27 Frame(CFA_Y, -13)
          CFI (cfiCond76) R4 Frame(CFA_Y, -12)
          CFI (cfiCond76) R5 Frame(CFA_Y, -11)
          CFI (cfiCond76) R6 Frame(CFA_Y, -10)
          CFI (cfiCond76) R7 Frame(CFA_Y, -9)
          CFI (cfiCond76) R8 Frame(CFA_Y, -8)
          CFI (cfiCond76) R9 Frame(CFA_Y, -7)
          CFI (cfiCond76) R10 Frame(CFA_Y, -6)
          CFI (cfiCond76) R11 Frame(CFA_Y, -5)
          CFI (cfiCond76) R12 Frame(CFA_Y, -4)
          CFI (cfiCond76) R13 Frame(CFA_Y, -3)
          CFI (cfiCond76) R14 Frame(CFA_Y, -2)
          CFI (cfiCond76) R15 Frame(CFA_Y, -1)
          CFI (cfiCond76) CFA_SP SP+6
          CFI (cfiCond76) CFA_Y Y+4489
          CFI Block cfiCond77 Using cfiCommon0
          CFI (cfiCond77) Function ecc_mul_double
          CFI (cfiCond77) Conditional ??CrossCallReturnLabel_40
          CFI (cfiCond77) R24 Frame(CFA_Y, -16)
          CFI (cfiCond77) R25 Frame(CFA_Y, -15)
          CFI (cfiCond77) R26 Frame(CFA_Y, -14)
          CFI (cfiCond77) R27 Frame(CFA_Y, -13)
          CFI (cfiCond77) R4 Frame(CFA_Y, -12)
          CFI (cfiCond77) R5 Frame(CFA_Y, -11)
          CFI (cfiCond77) R6 Frame(CFA_Y, -10)
          CFI (cfiCond77) R7 Frame(CFA_Y, -9)
          CFI (cfiCond77) R8 Frame(CFA_Y, -8)
          CFI (cfiCond77) R9 Frame(CFA_Y, -7)
          CFI (cfiCond77) R10 Frame(CFA_Y, -6)
          CFI (cfiCond77) R11 Frame(CFA_Y, -5)
          CFI (cfiCond77) R12 Frame(CFA_Y, -4)
          CFI (cfiCond77) R13 Frame(CFA_Y, -3)
          CFI (cfiCond77) R14 Frame(CFA_Y, -2)
          CFI (cfiCond77) R15 Frame(CFA_Y, -1)
          CFI (cfiCond77) CFA_SP SP+6
          CFI (cfiCond77) CFA_Y Y+4489
          CFI Block cfiPicker78 Using cfiCommon2
          CFI (cfiPicker78) NoFunction
          CFI (cfiPicker78) Picker
          CFI (cfiCond74) TailCall ecc_mul_double eccmadd
          CFI (cfiCond74) TailCall ecc_mul_double eccmadd
          CFI (cfiCond74) TailCall ecc_mul_double eccmadd
          CFI (cfiCond74) TailCall ecc_mul_double eccmadd
        JMP     eccmadd
          CFI EndBlock cfiCond74
          CFI EndBlock cfiCond75
          CFI EndBlock cfiCond76
          CFI EndBlock cfiCond77
          CFI EndBlock cfiPicker78

        RSEG FARCODE:CODE:NOROOT(1)
?Subroutine18:
          CFI Block cfiCond79 Using cfiCommon0
          CFI Function ecc_mul_double
          CFI Conditional ??CrossCallReturnLabel_31
          CFI R24 Frame(CFA_Y, -16)
          CFI R25 Frame(CFA_Y, -15)
          CFI R26 Frame(CFA_Y, -14)
          CFI R27 Frame(CFA_Y, -13)
          CFI R4 Frame(CFA_Y, -12)
          CFI R5 Frame(CFA_Y, -11)
          CFI R6 Frame(CFA_Y, -10)
          CFI R7 Frame(CFA_Y, -9)
          CFI R8 Frame(CFA_Y, -8)
          CFI R9 Frame(CFA_Y, -7)
          CFI R10 Frame(CFA_Y, -6)
          CFI R11 Frame(CFA_Y, -5)
          CFI R12 Frame(CFA_Y, -4)
          CFI R13 Frame(CFA_Y, -3)
          CFI R14 Frame(CFA_Y, -2)
          CFI R15 Frame(CFA_Y, -1)
          CFI CFA_SP SP+6
          CFI CFA_Y Y+4489
          CFI Block cfiCond80 Using cfiCommon0
          CFI (cfiCond80) Function ecc_mul_double
          CFI (cfiCond80) Conditional ??CrossCallReturnLabel_32
          CFI (cfiCond80) R24 Frame(CFA_Y, -16)
          CFI (cfiCond80) R25 Frame(CFA_Y, -15)
          CFI (cfiCond80) R26 Frame(CFA_Y, -14)
          CFI (cfiCond80) R27 Frame(CFA_Y, -13)
          CFI (cfiCond80) R4 Frame(CFA_Y, -12)
          CFI (cfiCond80) R5 Frame(CFA_Y, -11)
          CFI (cfiCond80) R6 Frame(CFA_Y, -10)
          CFI (cfiCond80) R7 Frame(CFA_Y, -9)
          CFI (cfiCond80) R8 Frame(CFA_Y, -8)
          CFI (cfiCond80) R9 Frame(CFA_Y, -7)
          CFI (cfiCond80) R10 Frame(CFA_Y, -6)
          CFI (cfiCond80) R11 Frame(CFA_Y, -5)
          CFI (cfiCond80) R12 Frame(CFA_Y, -4)
          CFI (cfiCond80) R13 Frame(CFA_Y, -3)
          CFI (cfiCond80) R14 Frame(CFA_Y, -2)
          CFI (cfiCond80) R15 Frame(CFA_Y, -1)
          CFI (cfiCond80) CFA_SP SP+6
          CFI (cfiCond80) CFA_Y Y+4489
          CFI Block cfiCond81 Using cfiCommon0
          CFI (cfiCond81) Function ecc_mul_double
          CFI (cfiCond81) Conditional ??CrossCallReturnLabel_33
          CFI (cfiCond81) R24 Frame(CFA_Y, -16)
          CFI (cfiCond81) R25 Frame(CFA_Y, -15)
          CFI (cfiCond81) R26 Frame(CFA_Y, -14)
          CFI (cfiCond81) R27 Frame(CFA_Y, -13)
          CFI (cfiCond81) R4 Frame(CFA_Y, -12)
          CFI (cfiCond81) R5 Frame(CFA_Y, -11)
          CFI (cfiCond81) R6 Frame(CFA_Y, -10)
          CFI (cfiCond81) R7 Frame(CFA_Y, -9)
          CFI (cfiCond81) R8 Frame(CFA_Y, -8)
          CFI (cfiCond81) R9 Frame(CFA_Y, -7)
          CFI (cfiCond81) R10 Frame(CFA_Y, -6)
          CFI (cfiCond81) R11 Frame(CFA_Y, -5)
          CFI (cfiCond81) R12 Frame(CFA_Y, -4)
          CFI (cfiCond81) R13 Frame(CFA_Y, -3)
          CFI (cfiCond81) R14 Frame(CFA_Y, -2)
          CFI (cfiCond81) R15 Frame(CFA_Y, -1)
          CFI (cfiCond81) CFA_SP SP+6
          CFI (cfiCond81) CFA_Y Y+4489
          CFI Block cfiCond82 Using cfiCommon0
          CFI (cfiCond82) Function ecc_mul_double
          CFI (cfiCond82) Conditional ??CrossCallReturnLabel_34
          CFI (cfiCond82) R24 Frame(CFA_Y, -16)
          CFI (cfiCond82) R25 Frame(CFA_Y, -15)
          CFI (cfiCond82) R26 Frame(CFA_Y, -14)
          CFI (cfiCond82) R27 Frame(CFA_Y, -13)
          CFI (cfiCond82) R4 Frame(CFA_Y, -12)
          CFI (cfiCond82) R5 Frame(CFA_Y, -11)
          CFI (cfiCond82) R6 Frame(CFA_Y, -10)
          CFI (cfiCond82) R7 Frame(CFA_Y, -9)
          CFI (cfiCond82) R8 Frame(CFA_Y, -8)
          CFI (cfiCond82) R9 Frame(CFA_Y, -7)
          CFI (cfiCond82) R10 Frame(CFA_Y, -6)
          CFI (cfiCond82) R11 Frame(CFA_Y, -5)
          CFI (cfiCond82) R12 Frame(CFA_Y, -4)
          CFI (cfiCond82) R13 Frame(CFA_Y, -3)
          CFI (cfiCond82) R14 Frame(CFA_Y, -2)
          CFI (cfiCond82) R15 Frame(CFA_Y, -1)
          CFI (cfiCond82) CFA_SP SP+6
          CFI (cfiCond82) CFA_Y Y+4489
          CFI Block cfiCond83 Using cfiCommon0
          CFI (cfiCond83) Function ecc_mul_double
          CFI (cfiCond83) Conditional ??CrossCallReturnLabel_35
          CFI (cfiCond83) R24 Frame(CFA_Y, -16)
          CFI (cfiCond83) R25 Frame(CFA_Y, -15)
          CFI (cfiCond83) R26 Frame(CFA_Y, -14)
          CFI (cfiCond83) R27 Frame(CFA_Y, -13)
          CFI (cfiCond83) R4 Frame(CFA_Y, -12)
          CFI (cfiCond83) R5 Frame(CFA_Y, -11)
          CFI (cfiCond83) R6 Frame(CFA_Y, -10)
          CFI (cfiCond83) R7 Frame(CFA_Y, -9)
          CFI (cfiCond83) R8 Frame(CFA_Y, -8)
          CFI (cfiCond83) R9 Frame(CFA_Y, -7)
          CFI (cfiCond83) R10 Frame(CFA_Y, -6)
          CFI (cfiCond83) R11 Frame(CFA_Y, -5)
          CFI (cfiCond83) R12 Frame(CFA_Y, -4)
          CFI (cfiCond83) R13 Frame(CFA_Y, -3)
          CFI (cfiCond83) R14 Frame(CFA_Y, -2)
          CFI (cfiCond83) R15 Frame(CFA_Y, -1)
          CFI (cfiCond83) CFA_SP SP+6
          CFI (cfiCond83) CFA_Y Y+4489
          CFI Block cfiCond84 Using cfiCommon0
          CFI (cfiCond84) Function ecc_precomp_double
          CFI (cfiCond84) Conditional ??CrossCallReturnLabel_36
          CFI (cfiCond84) R24 Frame(CFA_Y, -8)
          CFI (cfiCond84) R25 Frame(CFA_Y, -7)
          CFI (cfiCond84) R26 Frame(CFA_Y, -6)
          CFI (cfiCond84) R27 Frame(CFA_Y, -5)
          CFI (cfiCond84) R4 Frame(CFA_Y, -4)
          CFI (cfiCond84) R5 Frame(CFA_Y, -3)
          CFI (cfiCond84) R6 Frame(CFA_Y, -2)
          CFI (cfiCond84) R7 Frame(CFA_Y, -1)
          CFI (cfiCond84) CFA_SP SP+6
          CFI (cfiCond84) CFA_Y Y+296
          CFI Block cfiPicker85 Using cfiCommon2
          CFI (cfiPicker85) NoFunction
          CFI (cfiPicker85) Picker
          CFI (cfiCond79) TailCall ecc_mul_double eccdouble
          CFI (cfiCond79) TailCall ecc_mul_double eccdouble
          CFI (cfiCond79) TailCall ecc_mul_double eccdouble
          CFI (cfiCond79) TailCall ecc_mul_double eccdouble
          CFI (cfiCond79) TailCall ecc_mul_double eccdouble
          CFI (cfiCond84) TailCall ecc_precomp_double eccdouble
        JMP     eccdouble
          CFI EndBlock cfiCond79
          CFI EndBlock cfiCond80
          CFI EndBlock cfiCond81
          CFI EndBlock cfiCond82
          CFI EndBlock cfiCond83
          CFI EndBlock cfiCond84
          CFI EndBlock cfiPicker85

        RSEG FARCODE:CODE:NOROOT(1)
?Subroutine17:
          CFI Block cfiCond86 Using cfiCommon0
          CFI Function ecc_mul_double
          CFI Conditional ??CrossCallReturnLabel_22
          CFI R24 Frame(CFA_Y, -16)
          CFI R25 Frame(CFA_Y, -15)
          CFI R26 Frame(CFA_Y, -14)
          CFI R27 Frame(CFA_Y, -13)
          CFI R4 Frame(CFA_Y, -12)
          CFI R5 Frame(CFA_Y, -11)
          CFI R6 Frame(CFA_Y, -10)
          CFI R7 Frame(CFA_Y, -9)
          CFI R8 Frame(CFA_Y, -8)
          CFI R9 Frame(CFA_Y, -7)
          CFI R10 Frame(CFA_Y, -6)
          CFI R11 Frame(CFA_Y, -5)
          CFI R12 Frame(CFA_Y, -4)
          CFI R13 Frame(CFA_Y, -3)
          CFI R14 Frame(CFA_Y, -2)
          CFI R15 Frame(CFA_Y, -1)
          CFI CFA_SP SP+6
          CFI CFA_Y Y+4489
          CFI Block cfiCond87 Using cfiCommon0
          CFI (cfiCond87) Function ecc_mul_double
          CFI (cfiCond87) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond87) R24 Frame(CFA_Y, -16)
          CFI (cfiCond87) R25 Frame(CFA_Y, -15)
          CFI (cfiCond87) R26 Frame(CFA_Y, -14)
          CFI (cfiCond87) R27 Frame(CFA_Y, -13)
          CFI (cfiCond87) R4 Frame(CFA_Y, -12)
          CFI (cfiCond87) R5 Frame(CFA_Y, -11)
          CFI (cfiCond87) R6 Frame(CFA_Y, -10)
          CFI (cfiCond87) R7 Frame(CFA_Y, -9)
          CFI (cfiCond87) R8 Frame(CFA_Y, -8)
          CFI (cfiCond87) R9 Frame(CFA_Y, -7)
          CFI (cfiCond87) R10 Frame(CFA_Y, -6)
          CFI (cfiCond87) R11 Frame(CFA_Y, -5)
          CFI (cfiCond87) R12 Frame(CFA_Y, -4)
          CFI (cfiCond87) R13 Frame(CFA_Y, -3)
          CFI (cfiCond87) R14 Frame(CFA_Y, -2)
          CFI (cfiCond87) R15 Frame(CFA_Y, -1)
          CFI (cfiCond87) CFA_SP SP+6
          CFI (cfiCond87) CFA_Y Y+4489
          CFI Block cfiCond88 Using cfiCommon0
          CFI (cfiCond88) Function ecc_mul_double
          CFI (cfiCond88) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond88) R24 Frame(CFA_Y, -16)
          CFI (cfiCond88) R25 Frame(CFA_Y, -15)
          CFI (cfiCond88) R26 Frame(CFA_Y, -14)
          CFI (cfiCond88) R27 Frame(CFA_Y, -13)
          CFI (cfiCond88) R4 Frame(CFA_Y, -12)
          CFI (cfiCond88) R5 Frame(CFA_Y, -11)
          CFI (cfiCond88) R6 Frame(CFA_Y, -10)
          CFI (cfiCond88) R7 Frame(CFA_Y, -9)
          CFI (cfiCond88) R8 Frame(CFA_Y, -8)
          CFI (cfiCond88) R9 Frame(CFA_Y, -7)
          CFI (cfiCond88) R10 Frame(CFA_Y, -6)
          CFI (cfiCond88) R11 Frame(CFA_Y, -5)
          CFI (cfiCond88) R12 Frame(CFA_Y, -4)
          CFI (cfiCond88) R13 Frame(CFA_Y, -3)
          CFI (cfiCond88) R14 Frame(CFA_Y, -2)
          CFI (cfiCond88) R15 Frame(CFA_Y, -1)
          CFI (cfiCond88) CFA_SP SP+6
          CFI (cfiCond88) CFA_Y Y+4489
          CFI Block cfiCond89 Using cfiCommon0
          CFI (cfiCond89) Function ecc_mul_double
          CFI (cfiCond89) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond89) R24 Frame(CFA_Y, -16)
          CFI (cfiCond89) R25 Frame(CFA_Y, -15)
          CFI (cfiCond89) R26 Frame(CFA_Y, -14)
          CFI (cfiCond89) R27 Frame(CFA_Y, -13)
          CFI (cfiCond89) R4 Frame(CFA_Y, -12)
          CFI (cfiCond89) R5 Frame(CFA_Y, -11)
          CFI (cfiCond89) R6 Frame(CFA_Y, -10)
          CFI (cfiCond89) R7 Frame(CFA_Y, -9)
          CFI (cfiCond89) R8 Frame(CFA_Y, -8)
          CFI (cfiCond89) R9 Frame(CFA_Y, -7)
          CFI (cfiCond89) R10 Frame(CFA_Y, -6)
          CFI (cfiCond89) R11 Frame(CFA_Y, -5)
          CFI (cfiCond89) R12 Frame(CFA_Y, -4)
          CFI (cfiCond89) R13 Frame(CFA_Y, -3)
          CFI (cfiCond89) R14 Frame(CFA_Y, -2)
          CFI (cfiCond89) R15 Frame(CFA_Y, -1)
          CFI (cfiCond89) CFA_SP SP+6
          CFI (cfiCond89) CFA_Y Y+4489
          CFI Block cfiCond90 Using cfiCommon0
          CFI (cfiCond90) Function ecc_mul_double
          CFI (cfiCond90) Conditional ??CrossCallReturnLabel_26
          CFI (cfiCond90) R24 Frame(CFA_Y, -16)
          CFI (cfiCond90) R25 Frame(CFA_Y, -15)
          CFI (cfiCond90) R26 Frame(CFA_Y, -14)
          CFI (cfiCond90) R27 Frame(CFA_Y, -13)
          CFI (cfiCond90) R4 Frame(CFA_Y, -12)
          CFI (cfiCond90) R5 Frame(CFA_Y, -11)
          CFI (cfiCond90) R6 Frame(CFA_Y, -10)
          CFI (cfiCond90) R7 Frame(CFA_Y, -9)
          CFI (cfiCond90) R8 Frame(CFA_Y, -8)
          CFI (cfiCond90) R9 Frame(CFA_Y, -7)
          CFI (cfiCond90) R10 Frame(CFA_Y, -6)
          CFI (cfiCond90) R11 Frame(CFA_Y, -5)
          CFI (cfiCond90) R12 Frame(CFA_Y, -4)
          CFI (cfiCond90) R13 Frame(CFA_Y, -3)
          CFI (cfiCond90) R14 Frame(CFA_Y, -2)
          CFI (cfiCond90) R15 Frame(CFA_Y, -1)
          CFI (cfiCond90) CFA_SP SP+6
          CFI (cfiCond90) CFA_Y Y+4489
          CFI Block cfiCond91 Using cfiCommon0
          CFI (cfiCond91) Function ecc_mul_double
          CFI (cfiCond91) Conditional ??CrossCallReturnLabel_27
          CFI (cfiCond91) R24 Frame(CFA_Y, -16)
          CFI (cfiCond91) R25 Frame(CFA_Y, -15)
          CFI (cfiCond91) R26 Frame(CFA_Y, -14)
          CFI (cfiCond91) R27 Frame(CFA_Y, -13)
          CFI (cfiCond91) R4 Frame(CFA_Y, -12)
          CFI (cfiCond91) R5 Frame(CFA_Y, -11)
          CFI (cfiCond91) R6 Frame(CFA_Y, -10)
          CFI (cfiCond91) R7 Frame(CFA_Y, -9)
          CFI (cfiCond91) R8 Frame(CFA_Y, -8)
          CFI (cfiCond91) R9 Frame(CFA_Y, -7)
          CFI (cfiCond91) R10 Frame(CFA_Y, -6)
          CFI (cfiCond91) R11 Frame(CFA_Y, -5)
          CFI (cfiCond91) R12 Frame(CFA_Y, -4)
          CFI (cfiCond91) R13 Frame(CFA_Y, -3)
          CFI (cfiCond91) R14 Frame(CFA_Y, -2)
          CFI (cfiCond91) R15 Frame(CFA_Y, -1)
          CFI (cfiCond91) CFA_SP SP+6
          CFI (cfiCond91) CFA_Y Y+4489
          CFI Block cfiCond92 Using cfiCommon0
          CFI (cfiCond92) Function ecc_mul_double
          CFI (cfiCond92) Conditional ??CrossCallReturnLabel_28
          CFI (cfiCond92) R24 Frame(CFA_Y, -16)
          CFI (cfiCond92) R25 Frame(CFA_Y, -15)
          CFI (cfiCond92) R26 Frame(CFA_Y, -14)
          CFI (cfiCond92) R27 Frame(CFA_Y, -13)
          CFI (cfiCond92) R4 Frame(CFA_Y, -12)
          CFI (cfiCond92) R5 Frame(CFA_Y, -11)
          CFI (cfiCond92) R6 Frame(CFA_Y, -10)
          CFI (cfiCond92) R7 Frame(CFA_Y, -9)
          CFI (cfiCond92) R8 Frame(CFA_Y, -8)
          CFI (cfiCond92) R9 Frame(CFA_Y, -7)
          CFI (cfiCond92) R10 Frame(CFA_Y, -6)
          CFI (cfiCond92) R11 Frame(CFA_Y, -5)
          CFI (cfiCond92) R12 Frame(CFA_Y, -4)
          CFI (cfiCond92) R13 Frame(CFA_Y, -3)
          CFI (cfiCond92) R14 Frame(CFA_Y, -2)
          CFI (cfiCond92) R15 Frame(CFA_Y, -1)
          CFI (cfiCond92) CFA_SP SP+6
          CFI (cfiCond92) CFA_Y Y+4489
          CFI Block cfiCond93 Using cfiCommon0
          CFI (cfiCond93) Function ecc_mul_double
          CFI (cfiCond93) Conditional ??CrossCallReturnLabel_29
          CFI (cfiCond93) R24 Frame(CFA_Y, -16)
          CFI (cfiCond93) R25 Frame(CFA_Y, -15)
          CFI (cfiCond93) R26 Frame(CFA_Y, -14)
          CFI (cfiCond93) R27 Frame(CFA_Y, -13)
          CFI (cfiCond93) R4 Frame(CFA_Y, -12)
          CFI (cfiCond93) R5 Frame(CFA_Y, -11)
          CFI (cfiCond93) R6 Frame(CFA_Y, -10)
          CFI (cfiCond93) R7 Frame(CFA_Y, -9)
          CFI (cfiCond93) R8 Frame(CFA_Y, -8)
          CFI (cfiCond93) R9 Frame(CFA_Y, -7)
          CFI (cfiCond93) R10 Frame(CFA_Y, -6)
          CFI (cfiCond93) R11 Frame(CFA_Y, -5)
          CFI (cfiCond93) R12 Frame(CFA_Y, -4)
          CFI (cfiCond93) R13 Frame(CFA_Y, -3)
          CFI (cfiCond93) R14 Frame(CFA_Y, -2)
          CFI (cfiCond93) R15 Frame(CFA_Y, -1)
          CFI (cfiCond93) CFA_SP SP+6
          CFI (cfiCond93) CFA_Y Y+4489
          CFI Block cfiCond94 Using cfiCommon0
          CFI (cfiCond94) Function ecc_precomp_double
          CFI (cfiCond94) Conditional ??CrossCallReturnLabel_30
          CFI (cfiCond94) R24 Frame(CFA_Y, -8)
          CFI (cfiCond94) R25 Frame(CFA_Y, -7)
          CFI (cfiCond94) R26 Frame(CFA_Y, -6)
          CFI (cfiCond94) R27 Frame(CFA_Y, -5)
          CFI (cfiCond94) R4 Frame(CFA_Y, -4)
          CFI (cfiCond94) R5 Frame(CFA_Y, -3)
          CFI (cfiCond94) R6 Frame(CFA_Y, -2)
          CFI (cfiCond94) R7 Frame(CFA_Y, -1)
          CFI (cfiCond94) CFA_SP SP+6
          CFI (cfiCond94) CFA_Y Y+296
          CFI Block cfiPicker95 Using cfiCommon2
          CFI (cfiPicker95) NoFunction
          CFI (cfiPicker95) Picker
          CFI (cfiCond86) TailCall ecc_mul_double R1_to_R2
          CFI (cfiCond86) TailCall ecc_mul_double R1_to_R2
          CFI (cfiCond86) TailCall ecc_mul_double R1_to_R2
          CFI (cfiCond86) TailCall ecc_mul_double R1_to_R2
          CFI (cfiCond86) TailCall ecc_mul_double R1_to_R2
          CFI (cfiCond86) TailCall ecc_mul_double R1_to_R2
          CFI (cfiCond86) TailCall ecc_mul_double R1_to_R2
          CFI (cfiCond86) TailCall ecc_mul_double R1_to_R2
          CFI (cfiCond94) TailCall ecc_precomp_double R1_to_R2
        JMP     R1_to_R2
          CFI EndBlock cfiCond86
          CFI EndBlock cfiCond87
          CFI EndBlock cfiCond88
          CFI EndBlock cfiCond89
          CFI EndBlock cfiCond90
          CFI EndBlock cfiCond91
          CFI EndBlock cfiCond92
          CFI EndBlock cfiCond93
          CFI EndBlock cfiCond94
          CFI EndBlock cfiPicker95

        RSEG FARCODE:CODE:NOROOT(1)
?Subroutine16:
          CFI Block cfiCond96 Using cfiCommon0
          CFI Function ecc_mul_double
          CFI Conditional ??CrossCallReturnLabel_13
          CFI R24 Frame(CFA_Y, -16)
          CFI R25 Frame(CFA_Y, -15)
          CFI R26 Frame(CFA_Y, -14)
          CFI R27 Frame(CFA_Y, -13)
          CFI R4 Frame(CFA_Y, -12)
          CFI R5 Frame(CFA_Y, -11)
          CFI R6 Frame(CFA_Y, -10)
          CFI R7 Frame(CFA_Y, -9)
          CFI R8 Frame(CFA_Y, -8)
          CFI R9 Frame(CFA_Y, -7)
          CFI R10 Frame(CFA_Y, -6)
          CFI R11 Frame(CFA_Y, -5)
          CFI R12 Frame(CFA_Y, -4)
          CFI R13 Frame(CFA_Y, -3)
          CFI R14 Frame(CFA_Y, -2)
          CFI R15 Frame(CFA_Y, -1)
          CFI CFA_SP SP+6
          CFI CFA_Y Y+4489
          CFI Block cfiCond97 Using cfiCommon0
          CFI (cfiCond97) Function ecc_mul_double
          CFI (cfiCond97) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond97) R24 Frame(CFA_Y, -16)
          CFI (cfiCond97) R25 Frame(CFA_Y, -15)
          CFI (cfiCond97) R26 Frame(CFA_Y, -14)
          CFI (cfiCond97) R27 Frame(CFA_Y, -13)
          CFI (cfiCond97) R4 Frame(CFA_Y, -12)
          CFI (cfiCond97) R5 Frame(CFA_Y, -11)
          CFI (cfiCond97) R6 Frame(CFA_Y, -10)
          CFI (cfiCond97) R7 Frame(CFA_Y, -9)
          CFI (cfiCond97) R8 Frame(CFA_Y, -8)
          CFI (cfiCond97) R9 Frame(CFA_Y, -7)
          CFI (cfiCond97) R10 Frame(CFA_Y, -6)
          CFI (cfiCond97) R11 Frame(CFA_Y, -5)
          CFI (cfiCond97) R12 Frame(CFA_Y, -4)
          CFI (cfiCond97) R13 Frame(CFA_Y, -3)
          CFI (cfiCond97) R14 Frame(CFA_Y, -2)
          CFI (cfiCond97) R15 Frame(CFA_Y, -1)
          CFI (cfiCond97) CFA_SP SP+6
          CFI (cfiCond97) CFA_Y Y+4489
          CFI Block cfiCond98 Using cfiCommon0
          CFI (cfiCond98) Function ecc_mul_double
          CFI (cfiCond98) Conditional ??CrossCallReturnLabel_15
          CFI (cfiCond98) R24 Frame(CFA_Y, -16)
          CFI (cfiCond98) R25 Frame(CFA_Y, -15)
          CFI (cfiCond98) R26 Frame(CFA_Y, -14)
          CFI (cfiCond98) R27 Frame(CFA_Y, -13)
          CFI (cfiCond98) R4 Frame(CFA_Y, -12)
          CFI (cfiCond98) R5 Frame(CFA_Y, -11)
          CFI (cfiCond98) R6 Frame(CFA_Y, -10)
          CFI (cfiCond98) R7 Frame(CFA_Y, -9)
          CFI (cfiCond98) R8 Frame(CFA_Y, -8)
          CFI (cfiCond98) R9 Frame(CFA_Y, -7)
          CFI (cfiCond98) R10 Frame(CFA_Y, -6)
          CFI (cfiCond98) R11 Frame(CFA_Y, -5)
          CFI (cfiCond98) R12 Frame(CFA_Y, -4)
          CFI (cfiCond98) R13 Frame(CFA_Y, -3)
          CFI (cfiCond98) R14 Frame(CFA_Y, -2)
          CFI (cfiCond98) R15 Frame(CFA_Y, -1)
          CFI (cfiCond98) CFA_SP SP+6
          CFI (cfiCond98) CFA_Y Y+4489
          CFI Block cfiCond99 Using cfiCommon0
          CFI (cfiCond99) Function ecc_mul_double
          CFI (cfiCond99) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond99) R24 Frame(CFA_Y, -16)
          CFI (cfiCond99) R25 Frame(CFA_Y, -15)
          CFI (cfiCond99) R26 Frame(CFA_Y, -14)
          CFI (cfiCond99) R27 Frame(CFA_Y, -13)
          CFI (cfiCond99) R4 Frame(CFA_Y, -12)
          CFI (cfiCond99) R5 Frame(CFA_Y, -11)
          CFI (cfiCond99) R6 Frame(CFA_Y, -10)
          CFI (cfiCond99) R7 Frame(CFA_Y, -9)
          CFI (cfiCond99) R8 Frame(CFA_Y, -8)
          CFI (cfiCond99) R9 Frame(CFA_Y, -7)
          CFI (cfiCond99) R10 Frame(CFA_Y, -6)
          CFI (cfiCond99) R11 Frame(CFA_Y, -5)
          CFI (cfiCond99) R12 Frame(CFA_Y, -4)
          CFI (cfiCond99) R13 Frame(CFA_Y, -3)
          CFI (cfiCond99) R14 Frame(CFA_Y, -2)
          CFI (cfiCond99) R15 Frame(CFA_Y, -1)
          CFI (cfiCond99) CFA_SP SP+6
          CFI (cfiCond99) CFA_Y Y+4489
          CFI Block cfiCond100 Using cfiCommon0
          CFI (cfiCond100) Function ecc_mul_double
          CFI (cfiCond100) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond100) R24 Frame(CFA_Y, -16)
          CFI (cfiCond100) R25 Frame(CFA_Y, -15)
          CFI (cfiCond100) R26 Frame(CFA_Y, -14)
          CFI (cfiCond100) R27 Frame(CFA_Y, -13)
          CFI (cfiCond100) R4 Frame(CFA_Y, -12)
          CFI (cfiCond100) R5 Frame(CFA_Y, -11)
          CFI (cfiCond100) R6 Frame(CFA_Y, -10)
          CFI (cfiCond100) R7 Frame(CFA_Y, -9)
          CFI (cfiCond100) R8 Frame(CFA_Y, -8)
          CFI (cfiCond100) R9 Frame(CFA_Y, -7)
          CFI (cfiCond100) R10 Frame(CFA_Y, -6)
          CFI (cfiCond100) R11 Frame(CFA_Y, -5)
          CFI (cfiCond100) R12 Frame(CFA_Y, -4)
          CFI (cfiCond100) R13 Frame(CFA_Y, -3)
          CFI (cfiCond100) R14 Frame(CFA_Y, -2)
          CFI (cfiCond100) R15 Frame(CFA_Y, -1)
          CFI (cfiCond100) CFA_SP SP+6
          CFI (cfiCond100) CFA_Y Y+4489
          CFI Block cfiCond101 Using cfiCommon0
          CFI (cfiCond101) Function ecc_mul_double
          CFI (cfiCond101) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond101) R24 Frame(CFA_Y, -16)
          CFI (cfiCond101) R25 Frame(CFA_Y, -15)
          CFI (cfiCond101) R26 Frame(CFA_Y, -14)
          CFI (cfiCond101) R27 Frame(CFA_Y, -13)
          CFI (cfiCond101) R4 Frame(CFA_Y, -12)
          CFI (cfiCond101) R5 Frame(CFA_Y, -11)
          CFI (cfiCond101) R6 Frame(CFA_Y, -10)
          CFI (cfiCond101) R7 Frame(CFA_Y, -9)
          CFI (cfiCond101) R8 Frame(CFA_Y, -8)
          CFI (cfiCond101) R9 Frame(CFA_Y, -7)
          CFI (cfiCond101) R10 Frame(CFA_Y, -6)
          CFI (cfiCond101) R11 Frame(CFA_Y, -5)
          CFI (cfiCond101) R12 Frame(CFA_Y, -4)
          CFI (cfiCond101) R13 Frame(CFA_Y, -3)
          CFI (cfiCond101) R14 Frame(CFA_Y, -2)
          CFI (cfiCond101) R15 Frame(CFA_Y, -1)
          CFI (cfiCond101) CFA_SP SP+6
          CFI (cfiCond101) CFA_Y Y+4489
          CFI Block cfiCond102 Using cfiCommon0
          CFI (cfiCond102) Function ecc_mul_double
          CFI (cfiCond102) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond102) R24 Frame(CFA_Y, -16)
          CFI (cfiCond102) R25 Frame(CFA_Y, -15)
          CFI (cfiCond102) R26 Frame(CFA_Y, -14)
          CFI (cfiCond102) R27 Frame(CFA_Y, -13)
          CFI (cfiCond102) R4 Frame(CFA_Y, -12)
          CFI (cfiCond102) R5 Frame(CFA_Y, -11)
          CFI (cfiCond102) R6 Frame(CFA_Y, -10)
          CFI (cfiCond102) R7 Frame(CFA_Y, -9)
          CFI (cfiCond102) R8 Frame(CFA_Y, -8)
          CFI (cfiCond102) R9 Frame(CFA_Y, -7)
          CFI (cfiCond102) R10 Frame(CFA_Y, -6)
          CFI (cfiCond102) R11 Frame(CFA_Y, -5)
          CFI (cfiCond102) R12 Frame(CFA_Y, -4)
          CFI (cfiCond102) R13 Frame(CFA_Y, -3)
          CFI (cfiCond102) R14 Frame(CFA_Y, -2)
          CFI (cfiCond102) R15 Frame(CFA_Y, -1)
          CFI (cfiCond102) CFA_SP SP+6
          CFI (cfiCond102) CFA_Y Y+4489
          CFI Block cfiCond103 Using cfiCommon0
          CFI (cfiCond103) Function ecc_mul_double
          CFI (cfiCond103) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond103) R24 Frame(CFA_Y, -16)
          CFI (cfiCond103) R25 Frame(CFA_Y, -15)
          CFI (cfiCond103) R26 Frame(CFA_Y, -14)
          CFI (cfiCond103) R27 Frame(CFA_Y, -13)
          CFI (cfiCond103) R4 Frame(CFA_Y, -12)
          CFI (cfiCond103) R5 Frame(CFA_Y, -11)
          CFI (cfiCond103) R6 Frame(CFA_Y, -10)
          CFI (cfiCond103) R7 Frame(CFA_Y, -9)
          CFI (cfiCond103) R8 Frame(CFA_Y, -8)
          CFI (cfiCond103) R9 Frame(CFA_Y, -7)
          CFI (cfiCond103) R10 Frame(CFA_Y, -6)
          CFI (cfiCond103) R11 Frame(CFA_Y, -5)
          CFI (cfiCond103) R12 Frame(CFA_Y, -4)
          CFI (cfiCond103) R13 Frame(CFA_Y, -3)
          CFI (cfiCond103) R14 Frame(CFA_Y, -2)
          CFI (cfiCond103) R15 Frame(CFA_Y, -1)
          CFI (cfiCond103) CFA_SP SP+6
          CFI (cfiCond103) CFA_Y Y+4489
          CFI Block cfiCond104 Using cfiCommon0
          CFI (cfiCond104) Function ecc_precomp_double
          CFI (cfiCond104) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond104) R24 Frame(CFA_Y, -8)
          CFI (cfiCond104) R25 Frame(CFA_Y, -7)
          CFI (cfiCond104) R26 Frame(CFA_Y, -6)
          CFI (cfiCond104) R27 Frame(CFA_Y, -5)
          CFI (cfiCond104) R4 Frame(CFA_Y, -4)
          CFI (cfiCond104) R5 Frame(CFA_Y, -3)
          CFI (cfiCond104) R6 Frame(CFA_Y, -2)
          CFI (cfiCond104) R7 Frame(CFA_Y, -1)
          CFI (cfiCond104) CFA_SP SP+6
          CFI (cfiCond104) CFA_Y Y+296
          CFI Block cfiPicker105 Using cfiCommon2
          CFI (cfiPicker105) NoFunction
          CFI (cfiPicker105) Picker
          CFI (cfiCond96) TailCall ecc_mul_double eccadd_core
          CFI (cfiCond96) TailCall ecc_mul_double eccadd_core
          CFI (cfiCond96) TailCall ecc_mul_double eccadd_core
          CFI (cfiCond96) TailCall ecc_mul_double eccadd_core
          CFI (cfiCond96) TailCall ecc_mul_double eccadd_core
          CFI (cfiCond96) TailCall ecc_mul_double eccadd_core
          CFI (cfiCond96) TailCall ecc_mul_double eccadd_core
          CFI (cfiCond96) TailCall ecc_mul_double eccadd_core
          CFI (cfiCond104) TailCall ecc_precomp_double eccadd_core
        JMP     eccadd_core
          CFI EndBlock cfiCond96
          CFI EndBlock cfiCond97
          CFI EndBlock cfiCond98
          CFI EndBlock cfiCond99
          CFI EndBlock cfiCond100
          CFI EndBlock cfiCond101
          CFI EndBlock cfiCond102
          CFI EndBlock cfiCond103
          CFI EndBlock cfiCond104
          CFI EndBlock cfiPicker105

        RSEG FARCODE:CODE:NOROOT(1)
?Subroutine15:
          CFI Block cfiCond106 Using cfiCommon0
          CFI Function ecc_mul_double
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R24 Frame(CFA_Y, -16)
          CFI R25 Frame(CFA_Y, -15)
          CFI R26 Frame(CFA_Y, -14)
          CFI R27 Frame(CFA_Y, -13)
          CFI R4 Frame(CFA_Y, -12)
          CFI R5 Frame(CFA_Y, -11)
          CFI R6 Frame(CFA_Y, -10)
          CFI R7 Frame(CFA_Y, -9)
          CFI R8 Frame(CFA_Y, -8)
          CFI R9 Frame(CFA_Y, -7)
          CFI R10 Frame(CFA_Y, -6)
          CFI R11 Frame(CFA_Y, -5)
          CFI R12 Frame(CFA_Y, -4)
          CFI R13 Frame(CFA_Y, -3)
          CFI R14 Frame(CFA_Y, -2)
          CFI R15 Frame(CFA_Y, -1)
          CFI CFA_SP SP+6
          CFI CFA_Y Y+4489
          CFI Block cfiCond107 Using cfiCommon0
          CFI (cfiCond107) Function ecc_mul_double
          CFI (cfiCond107) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond107) R24 Frame(CFA_Y, -16)
          CFI (cfiCond107) R25 Frame(CFA_Y, -15)
          CFI (cfiCond107) R26 Frame(CFA_Y, -14)
          CFI (cfiCond107) R27 Frame(CFA_Y, -13)
          CFI (cfiCond107) R4 Frame(CFA_Y, -12)
          CFI (cfiCond107) R5 Frame(CFA_Y, -11)
          CFI (cfiCond107) R6 Frame(CFA_Y, -10)
          CFI (cfiCond107) R7 Frame(CFA_Y, -9)
          CFI (cfiCond107) R8 Frame(CFA_Y, -8)
          CFI (cfiCond107) R9 Frame(CFA_Y, -7)
          CFI (cfiCond107) R10 Frame(CFA_Y, -6)
          CFI (cfiCond107) R11 Frame(CFA_Y, -5)
          CFI (cfiCond107) R12 Frame(CFA_Y, -4)
          CFI (cfiCond107) R13 Frame(CFA_Y, -3)
          CFI (cfiCond107) R14 Frame(CFA_Y, -2)
          CFI (cfiCond107) R15 Frame(CFA_Y, -1)
          CFI (cfiCond107) CFA_SP SP+6
          CFI (cfiCond107) CFA_Y Y+4489
          CFI Block cfiCond108 Using cfiCommon0
          CFI (cfiCond108) Function ecc_mul_double
          CFI (cfiCond108) Conditional ??CrossCallReturnLabel_2
          CFI (cfiCond108) R24 Frame(CFA_Y, -16)
          CFI (cfiCond108) R25 Frame(CFA_Y, -15)
          CFI (cfiCond108) R26 Frame(CFA_Y, -14)
          CFI (cfiCond108) R27 Frame(CFA_Y, -13)
          CFI (cfiCond108) R4 Frame(CFA_Y, -12)
          CFI (cfiCond108) R5 Frame(CFA_Y, -11)
          CFI (cfiCond108) R6 Frame(CFA_Y, -10)
          CFI (cfiCond108) R7 Frame(CFA_Y, -9)
          CFI (cfiCond108) R8 Frame(CFA_Y, -8)
          CFI (cfiCond108) R9 Frame(CFA_Y, -7)
          CFI (cfiCond108) R10 Frame(CFA_Y, -6)
          CFI (cfiCond108) R11 Frame(CFA_Y, -5)
          CFI (cfiCond108) R12 Frame(CFA_Y, -4)
          CFI (cfiCond108) R13 Frame(CFA_Y, -3)
          CFI (cfiCond108) R14 Frame(CFA_Y, -2)
          CFI (cfiCond108) R15 Frame(CFA_Y, -1)
          CFI (cfiCond108) CFA_SP SP+6
          CFI (cfiCond108) CFA_Y Y+4489
          CFI Block cfiCond109 Using cfiCommon0
          CFI (cfiCond109) Function ecc_mul_double
          CFI (cfiCond109) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond109) R24 Frame(CFA_Y, -16)
          CFI (cfiCond109) R25 Frame(CFA_Y, -15)
          CFI (cfiCond109) R26 Frame(CFA_Y, -14)
          CFI (cfiCond109) R27 Frame(CFA_Y, -13)
          CFI (cfiCond109) R4 Frame(CFA_Y, -12)
          CFI (cfiCond109) R5 Frame(CFA_Y, -11)
          CFI (cfiCond109) R6 Frame(CFA_Y, -10)
          CFI (cfiCond109) R7 Frame(CFA_Y, -9)
          CFI (cfiCond109) R8 Frame(CFA_Y, -8)
          CFI (cfiCond109) R9 Frame(CFA_Y, -7)
          CFI (cfiCond109) R10 Frame(CFA_Y, -6)
          CFI (cfiCond109) R11 Frame(CFA_Y, -5)
          CFI (cfiCond109) R12 Frame(CFA_Y, -4)
          CFI (cfiCond109) R13 Frame(CFA_Y, -3)
          CFI (cfiCond109) R14 Frame(CFA_Y, -2)
          CFI (cfiCond109) R15 Frame(CFA_Y, -1)
          CFI (cfiCond109) CFA_SP SP+6
          CFI (cfiCond109) CFA_Y Y+4489
          CFI Block cfiCond110 Using cfiCommon0
          CFI (cfiCond110) Function ecc_mul_double
          CFI (cfiCond110) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond110) R24 Frame(CFA_Y, -16)
          CFI (cfiCond110) R25 Frame(CFA_Y, -15)
          CFI (cfiCond110) R26 Frame(CFA_Y, -14)
          CFI (cfiCond110) R27 Frame(CFA_Y, -13)
          CFI (cfiCond110) R4 Frame(CFA_Y, -12)
          CFI (cfiCond110) R5 Frame(CFA_Y, -11)
          CFI (cfiCond110) R6 Frame(CFA_Y, -10)
          CFI (cfiCond110) R7 Frame(CFA_Y, -9)
          CFI (cfiCond110) R8 Frame(CFA_Y, -8)
          CFI (cfiCond110) R9 Frame(CFA_Y, -7)
          CFI (cfiCond110) R10 Frame(CFA_Y, -6)
          CFI (cfiCond110) R11 Frame(CFA_Y, -5)
          CFI (cfiCond110) R12 Frame(CFA_Y, -4)
          CFI (cfiCond110) R13 Frame(CFA_Y, -3)
          CFI (cfiCond110) R14 Frame(CFA_Y, -2)
          CFI (cfiCond110) R15 Frame(CFA_Y, -1)
          CFI (cfiCond110) CFA_SP SP+6
          CFI (cfiCond110) CFA_Y Y+4489
          CFI Block cfiCond111 Using cfiCommon0
          CFI (cfiCond111) Function ecc_mul_double
          CFI (cfiCond111) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond111) R24 Frame(CFA_Y, -16)
          CFI (cfiCond111) R25 Frame(CFA_Y, -15)
          CFI (cfiCond111) R26 Frame(CFA_Y, -14)
          CFI (cfiCond111) R27 Frame(CFA_Y, -13)
          CFI (cfiCond111) R4 Frame(CFA_Y, -12)
          CFI (cfiCond111) R5 Frame(CFA_Y, -11)
          CFI (cfiCond111) R6 Frame(CFA_Y, -10)
          CFI (cfiCond111) R7 Frame(CFA_Y, -9)
          CFI (cfiCond111) R8 Frame(CFA_Y, -8)
          CFI (cfiCond111) R9 Frame(CFA_Y, -7)
          CFI (cfiCond111) R10 Frame(CFA_Y, -6)
          CFI (cfiCond111) R11 Frame(CFA_Y, -5)
          CFI (cfiCond111) R12 Frame(CFA_Y, -4)
          CFI (cfiCond111) R13 Frame(CFA_Y, -3)
          CFI (cfiCond111) R14 Frame(CFA_Y, -2)
          CFI (cfiCond111) R15 Frame(CFA_Y, -1)
          CFI (cfiCond111) CFA_SP SP+6
          CFI (cfiCond111) CFA_Y Y+4489
          CFI Block cfiCond112 Using cfiCommon0
          CFI (cfiCond112) Function ecc_mul_double
          CFI (cfiCond112) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond112) R24 Frame(CFA_Y, -16)
          CFI (cfiCond112) R25 Frame(CFA_Y, -15)
          CFI (cfiCond112) R26 Frame(CFA_Y, -14)
          CFI (cfiCond112) R27 Frame(CFA_Y, -13)
          CFI (cfiCond112) R4 Frame(CFA_Y, -12)
          CFI (cfiCond112) R5 Frame(CFA_Y, -11)
          CFI (cfiCond112) R6 Frame(CFA_Y, -10)
          CFI (cfiCond112) R7 Frame(CFA_Y, -9)
          CFI (cfiCond112) R8 Frame(CFA_Y, -8)
          CFI (cfiCond112) R9 Frame(CFA_Y, -7)
          CFI (cfiCond112) R10 Frame(CFA_Y, -6)
          CFI (cfiCond112) R11 Frame(CFA_Y, -5)
          CFI (cfiCond112) R12 Frame(CFA_Y, -4)
          CFI (cfiCond112) R13 Frame(CFA_Y, -3)
          CFI (cfiCond112) R14 Frame(CFA_Y, -2)
          CFI (cfiCond112) R15 Frame(CFA_Y, -1)
          CFI (cfiCond112) CFA_SP SP+6
          CFI (cfiCond112) CFA_Y Y+4489
          CFI Block cfiCond113 Using cfiCommon0
          CFI (cfiCond113) Function ecc_mul_double
          CFI (cfiCond113) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond113) R24 Frame(CFA_Y, -16)
          CFI (cfiCond113) R25 Frame(CFA_Y, -15)
          CFI (cfiCond113) R26 Frame(CFA_Y, -14)
          CFI (cfiCond113) R27 Frame(CFA_Y, -13)
          CFI (cfiCond113) R4 Frame(CFA_Y, -12)
          CFI (cfiCond113) R5 Frame(CFA_Y, -11)
          CFI (cfiCond113) R6 Frame(CFA_Y, -10)
          CFI (cfiCond113) R7 Frame(CFA_Y, -9)
          CFI (cfiCond113) R8 Frame(CFA_Y, -8)
          CFI (cfiCond113) R9 Frame(CFA_Y, -7)
          CFI (cfiCond113) R10 Frame(CFA_Y, -6)
          CFI (cfiCond113) R11 Frame(CFA_Y, -5)
          CFI (cfiCond113) R12 Frame(CFA_Y, -4)
          CFI (cfiCond113) R13 Frame(CFA_Y, -3)
          CFI (cfiCond113) R14 Frame(CFA_Y, -2)
          CFI (cfiCond113) R15 Frame(CFA_Y, -1)
          CFI (cfiCond113) CFA_SP SP+6
          CFI (cfiCond113) CFA_Y Y+4489
          CFI Block cfiCond114 Using cfiCommon0
          CFI (cfiCond114) Function ecc_mul_double
          CFI (cfiCond114) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond114) R24 Frame(CFA_Y, -16)
          CFI (cfiCond114) R25 Frame(CFA_Y, -15)
          CFI (cfiCond114) R26 Frame(CFA_Y, -14)
          CFI (cfiCond114) R27 Frame(CFA_Y, -13)
          CFI (cfiCond114) R4 Frame(CFA_Y, -12)
          CFI (cfiCond114) R5 Frame(CFA_Y, -11)
          CFI (cfiCond114) R6 Frame(CFA_Y, -10)
          CFI (cfiCond114) R7 Frame(CFA_Y, -9)
          CFI (cfiCond114) R8 Frame(CFA_Y, -8)
          CFI (cfiCond114) R9 Frame(CFA_Y, -7)
          CFI (cfiCond114) R10 Frame(CFA_Y, -6)
          CFI (cfiCond114) R11 Frame(CFA_Y, -5)
          CFI (cfiCond114) R12 Frame(CFA_Y, -4)
          CFI (cfiCond114) R13 Frame(CFA_Y, -3)
          CFI (cfiCond114) R14 Frame(CFA_Y, -2)
          CFI (cfiCond114) R15 Frame(CFA_Y, -1)
          CFI (cfiCond114) CFA_SP SP+6
          CFI (cfiCond114) CFA_Y Y+4489
          CFI Block cfiCond115 Using cfiCommon0
          CFI (cfiCond115) Function ecc_mul_double
          CFI (cfiCond115) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond115) R24 Frame(CFA_Y, -16)
          CFI (cfiCond115) R25 Frame(CFA_Y, -15)
          CFI (cfiCond115) R26 Frame(CFA_Y, -14)
          CFI (cfiCond115) R27 Frame(CFA_Y, -13)
          CFI (cfiCond115) R4 Frame(CFA_Y, -12)
          CFI (cfiCond115) R5 Frame(CFA_Y, -11)
          CFI (cfiCond115) R6 Frame(CFA_Y, -10)
          CFI (cfiCond115) R7 Frame(CFA_Y, -9)
          CFI (cfiCond115) R8 Frame(CFA_Y, -8)
          CFI (cfiCond115) R9 Frame(CFA_Y, -7)
          CFI (cfiCond115) R10 Frame(CFA_Y, -6)
          CFI (cfiCond115) R11 Frame(CFA_Y, -5)
          CFI (cfiCond115) R12 Frame(CFA_Y, -4)
          CFI (cfiCond115) R13 Frame(CFA_Y, -3)
          CFI (cfiCond115) R14 Frame(CFA_Y, -2)
          CFI (cfiCond115) R15 Frame(CFA_Y, -1)
          CFI (cfiCond115) CFA_SP SP+6
          CFI (cfiCond115) CFA_Y Y+4489
          CFI Block cfiCond116 Using cfiCommon0
          CFI (cfiCond116) Function ecc_mul_double
          CFI (cfiCond116) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond116) R24 Frame(CFA_Y, -16)
          CFI (cfiCond116) R25 Frame(CFA_Y, -15)
          CFI (cfiCond116) R26 Frame(CFA_Y, -14)
          CFI (cfiCond116) R27 Frame(CFA_Y, -13)
          CFI (cfiCond116) R4 Frame(CFA_Y, -12)
          CFI (cfiCond116) R5 Frame(CFA_Y, -11)
          CFI (cfiCond116) R6 Frame(CFA_Y, -10)
          CFI (cfiCond116) R7 Frame(CFA_Y, -9)
          CFI (cfiCond116) R8 Frame(CFA_Y, -8)
          CFI (cfiCond116) R9 Frame(CFA_Y, -7)
          CFI (cfiCond116) R10 Frame(CFA_Y, -6)
          CFI (cfiCond116) R11 Frame(CFA_Y, -5)
          CFI (cfiCond116) R12 Frame(CFA_Y, -4)
          CFI (cfiCond116) R13 Frame(CFA_Y, -3)
          CFI (cfiCond116) R14 Frame(CFA_Y, -2)
          CFI (cfiCond116) R15 Frame(CFA_Y, -1)
          CFI (cfiCond116) CFA_SP SP+6
          CFI (cfiCond116) CFA_Y Y+4489
          CFI Block cfiCond117 Using cfiCommon0
          CFI (cfiCond117) Function ecc_mul_double
          CFI (cfiCond117) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond117) R24 Frame(CFA_Y, -16)
          CFI (cfiCond117) R25 Frame(CFA_Y, -15)
          CFI (cfiCond117) R26 Frame(CFA_Y, -14)
          CFI (cfiCond117) R27 Frame(CFA_Y, -13)
          CFI (cfiCond117) R4 Frame(CFA_Y, -12)
          CFI (cfiCond117) R5 Frame(CFA_Y, -11)
          CFI (cfiCond117) R6 Frame(CFA_Y, -10)
          CFI (cfiCond117) R7 Frame(CFA_Y, -9)
          CFI (cfiCond117) R8 Frame(CFA_Y, -8)
          CFI (cfiCond117) R9 Frame(CFA_Y, -7)
          CFI (cfiCond117) R10 Frame(CFA_Y, -6)
          CFI (cfiCond117) R11 Frame(CFA_Y, -5)
          CFI (cfiCond117) R12 Frame(CFA_Y, -4)
          CFI (cfiCond117) R13 Frame(CFA_Y, -3)
          CFI (cfiCond117) R14 Frame(CFA_Y, -2)
          CFI (cfiCond117) R15 Frame(CFA_Y, -1)
          CFI (cfiCond117) CFA_SP SP+6
          CFI (cfiCond117) CFA_Y Y+4489
          CFI Block cfiCond118 Using cfiCommon0
          CFI (cfiCond118) Function ecc_precomp_double
          CFI (cfiCond118) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond118) R24 Frame(CFA_Y, -8)
          CFI (cfiCond118) R25 Frame(CFA_Y, -7)
          CFI (cfiCond118) R26 Frame(CFA_Y, -6)
          CFI (cfiCond118) R27 Frame(CFA_Y, -5)
          CFI (cfiCond118) R4 Frame(CFA_Y, -4)
          CFI (cfiCond118) R5 Frame(CFA_Y, -3)
          CFI (cfiCond118) R6 Frame(CFA_Y, -2)
          CFI (cfiCond118) R7 Frame(CFA_Y, -1)
          CFI (cfiCond118) CFA_SP SP+6
          CFI (cfiCond118) CFA_Y Y+296
          CFI Block cfiPicker119 Using cfiCommon2
          CFI (cfiPicker119) NoFunction
          CFI (cfiPicker119) Picker
          CFI (cfiCond106) TailCall ecc_mul_double R1_to_R3
          CFI (cfiCond106) TailCall ecc_mul_double R1_to_R3
          CFI (cfiCond106) TailCall ecc_mul_double R1_to_R3
          CFI (cfiCond106) TailCall ecc_mul_double R1_to_R3
          CFI (cfiCond106) TailCall ecc_mul_double R1_to_R3
          CFI (cfiCond106) TailCall ecc_mul_double R1_to_R3
          CFI (cfiCond106) TailCall ecc_mul_double R1_to_R3
          CFI (cfiCond106) TailCall ecc_mul_double R1_to_R3
          CFI (cfiCond106) TailCall ecc_mul_double R1_to_R3
          CFI (cfiCond106) TailCall ecc_mul_double R1_to_R3
          CFI (cfiCond106) TailCall ecc_mul_double R1_to_R3
          CFI (cfiCond106) TailCall ecc_mul_double R1_to_R3
          CFI (cfiCond118) TailCall ecc_precomp_double R1_to_R3
        JMP     R1_to_R3
          CFI EndBlock cfiCond106
          CFI EndBlock cfiCond107
          CFI EndBlock cfiCond108
          CFI EndBlock cfiCond109
          CFI EndBlock cfiCond110
          CFI EndBlock cfiCond111
          CFI EndBlock cfiCond112
          CFI EndBlock cfiCond113
          CFI EndBlock cfiCond114
          CFI EndBlock cfiCond115
          CFI EndBlock cfiCond116
          CFI EndBlock cfiCond117
          CFI EndBlock cfiCond118
          CFI EndBlock cfiPicker119
// 1057 
// 1058 

        RSEG FARCODE:CODE:NOROOT(1)
// 1059 void wNAF_recode(uint64_t scalar, unsigned int w, int* digits)
wNAF_recode:
          CFI Block cfiBlock120 Using cfiCommon3
          CFI Function wNAF_recode
// 1060 { // Computes wNAF recoding of a scalar, where digits are in set {0,+-1,+-3,...,+-(2^(w-1)-1)}
        ST      -Y, R15
          CFI R15 Frame(CFA_Y, -5)
          CFI CFA_Y Y+5
        ST      -Y, R14
          CFI R14 Frame(CFA_Y, -6)
          CFI CFA_Y Y+6
        ST      -Y, R13
          CFI R13 Frame(CFA_Y, -7)
          CFI CFA_Y Y+7
        ST      -Y, R12
          CFI R12 Frame(CFA_Y, -8)
          CFI CFA_Y Y+8
        ST      -Y, R11
          CFI R11 Frame(CFA_Y, -9)
          CFI CFA_Y Y+9
        ST      -Y, R10
          CFI R10 Frame(CFA_Y, -10)
          CFI CFA_Y Y+10
        ST      -Y, R9
          CFI R9 Frame(CFA_Y, -11)
          CFI CFA_Y Y+11
        ST      -Y, R8
          CFI R8 Frame(CFA_Y, -12)
          CFI CFA_Y Y+12
        ST      -Y, R7
          CFI R7 Frame(CFA_Y, -13)
          CFI CFA_Y Y+13
        ST      -Y, R6
          CFI R6 Frame(CFA_Y, -14)
          CFI CFA_Y Y+14
        ST      -Y, R5
          CFI R5 Frame(CFA_Y, -15)
          CFI CFA_Y Y+15
        ST      -Y, R4
          CFI R4 Frame(CFA_Y, -16)
          CFI CFA_Y Y+16
        ST      -Y, R27
          CFI R27 Frame(CFA_Y, -17)
          CFI CFA_Y Y+17
        ST      -Y, R26
          CFI R26 Frame(CFA_Y, -18)
          CFI CFA_Y Y+18
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -19)
          CFI CFA_Y Y+19
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -20)
          CFI CFA_Y Y+20
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        REQUIRE ?Register_R6_is_cg_reg
        REQUIRE ?Register_R7_is_cg_reg
        REQUIRE ?Register_R8_is_cg_reg
        REQUIRE ?Register_R9_is_cg_reg
        REQUIRE ?Register_R10_is_cg_reg
        REQUIRE ?Register_R11_is_cg_reg
        REQUIRE ?Register_R12_is_cg_reg
        REQUIRE ?Register_R13_is_cg_reg
        REQUIRE ?Register_R14_is_cg_reg
        REQUIRE ?Register_R15_is_cg_reg
        SBIW    R29:R28, 14
          CFI CFA_Y Y+34
        MOVW    R1:R0, R17:R16
        MOVW    R3:R2, R19:R18
        MOVW    R5:R4, R21:R20
        MOVW    R7:R6, R23:R22
// 1061     unsigned int i;
// 1062     int digit, index = 0; 
        LDI     R26, 0
        LDI     R27, 0
// 1063     int val1 = (int)(1 << (w-1)) - 1;                  // 2^(w-1) - 1
        LDD     R20, Y+30
        DEC     R20
        LDI     R16, 1
        LDI     R17, 0
          CFI FunCall ?S_SHL_L02
        CALL    ?S_SHL_L02
        SUBI    R16, 1
        SBCI    R17, 0
        STD     Y+4, R16
        STD     Y+5, R17
// 1064     int val2 = (int)(1 << w);                          // 2^w;
        LDD     R20, Y+30
        LDI     R16, 1
        LDI     R17, 0
          CFI FunCall ?S_SHL_L02
        CALL    ?S_SHL_L02
        STD     Y+2, R16
        STD     Y+3, R17
// 1065     uint64_t k = scalar, mask = (uint64_t)val2 - 1;    // 2^w - 1 
        MOV     R18, R17
        LSL     R18
        SBC     R18, R18
        MOV     R19, R18
        MOV     R20, R18
        MOV     R21, R18
        MOV     R22, R18
        MOV     R23, R18
        SUBI    R16, 1
        SBCI    R17, 0
        SBCI    R18, 0
        SBCI    R19, 0
        SBCI    R20, 0
        SBCI    R21, 0
        SBCI    R22, 0
        SBCI    R23, 0
        STD     Y+6, R16
        STD     Y+7, R17
        STD     Y+8, R18
        STD     Y+9, R19
        STD     Y+10, R20
        STD     Y+11, R21
        STD     Y+12, R22
        STD     Y+13, R23
        LDD     R24, Y+30
        LDD     R25, Y+31
        SBIW    R25:R24, 1
        ST      Y, R24
        STD     Y+1, R25
// 1066 
// 1067     while (k != 0)
        LDI     R30, LOW(__Constant_0_0)
        LDI     R31, (__Constant_0_0) >> 8
          CFI FunCall ?LL_CMP_R0_L12
        CALL    ?LL_CMP_R0_L12
        BRNE    $+2+2
        RJMP    ??wNAF_recode_0
// 1068     {
// 1069         digit = (int)(k & 1); 
// 1070 
// 1071         if (digit == 0) {                         
??wNAF_recode_1:
        BST     R0, 0
        CLR     R8
        CLR     R17
        CLR     R18
        CLR     R19
        CLR     R20
        CLR     R21
        CLR     R22
        CLR     R23
        BLD     R8, 0
        LDI     R30, LOW(__Constant_0_0)
        LDI     R31, (__Constant_0_0) >> 8
        MOV     R16, R8
          CFI FunCall ?LL_CMP_L12
        CALL    ?LL_CMP_L12
        BRNE    ??wNAF_recode_2
// 1072             k >>= 1;                 // Shift scalar to the right by 1
        LSR     R7
        ROR     R6
        ROR     R5
        ROR     R4
        ROR     R3
        ROR     R2
        ROR     R1
        ROR     R0
// 1073             digits[index] = 0;
        MOVW    R19:R18, R27:R26
        LSL     R18
        ROL     R19
        LDD     R30, Y+32
        LDD     R31, Y+33
        ADD     R30, R18
        ADC     R31, R19
        ST      Z, R17
        STD     Z+1, R17
        RJMP    ??wNAF_recode_3
// 1074         } else {
// 1075             digit = (int)(k & mask); 
??wNAF_recode_2:
        MOVW    R9:R8, R1:R0
        LDD     R16, Y+6
        LDD     R17, Y+7
        AND     R8, R16
        AND     R9, R17
// 1076             k >>= w;                 // Shift scalar to the right by w            
        LDD     R24, Y+30
        MOVW    R17:R16, R1:R0
        MOVW    R19:R18, R3:R2
        MOVW    R21:R20, R5:R4
        MOVW    R23:R22, R7:R6
          CFI FunCall ?ULL_SHR_L12
        CALL    ?ULL_SHR_L12
        MOVW    R1:R0, R17:R16
        MOVW    R3:R2, R19:R18
        MOVW    R5:R4, R21:R20
        MOVW    R7:R6, R23:R22
// 1077 
// 1078             if (digit > val1) {
        LDD     R16, Y+4
        LDD     R17, Y+5
        CP      R16, R8
        CPC     R17, R9
        BRGE    ??wNAF_recode_4
// 1079                 digit -= val2; 
        LDD     R16, Y+2
        LDD     R17, Y+3
        SUB     R8, R16
        SBC     R9, R17
// 1080             }
// 1081             if (digit < 0) {         // scalar + 1
??wNAF_recode_4:
        TST     R9
        BRPL    ??wNAF_recode_5
// 1082                 k += 1;
        LDI     R16, 1
        ADD     R0, R16
        LDI     R16, 0
        ADC     R1, R16
        ADC     R2, R16
        ADC     R3, R16
        ADC     R4, R16
        ADC     R5, R16
        ADC     R6, R16
        ADC     R7, R16
// 1083             }
// 1084             digits[index] = digit; 
??wNAF_recode_5:
        MOVW    R17:R16, R27:R26
        LSL     R16
        ROL     R17
        LDD     R18, Y+32
        LDD     R19, Y+33
        ADD     R18, R16
        ADC     R19, R17
        MOVW    R31:R30, R19:R18
        ST      Z, R8
        STD     Z+1, R9
// 1085                        
// 1086             if (k != 0) {            // Check if scalar != 0
        LDI     R30, LOW(__Constant_0_0)
        LDI     R31, (__Constant_0_0) >> 8
          CFI FunCall ?LL_CMP_R0_L12
        CALL    ?LL_CMP_R0_L12
        BREQ    ??wNAF_recode_3
// 1087                 for (i = 0; i < (w-1); i++) 
        LD      R16, Y
        LDD     R17, Y+1
        OR      R16, R17
        BREQ    ??wNAF_recode_3
        SUBI    R18, 254
        SBCI    R19, 255
        LD      R24, Y
        MOV     R25, R17
        LDI     R16, 0
// 1088                 {     
// 1089                     index++; 
??wNAF_recode_6:
        ADIW    R27:R26, 1
// 1090                     digits[index] = 0;
        MOVW    R31:R30, R19:R18
        ST      Z+, R16
        ST      Z+, R16
        MOVW    R19:R18, R31:R30
// 1091                 }
        SBIW    R25:R24, 1
        BRNE    ??wNAF_recode_6
// 1092             }
// 1093         }
// 1094         index++;
??wNAF_recode_3:
        ADIW    R27:R26, 1
        LDI     R30, LOW(__Constant_0_0)
        LDI     R31, (__Constant_0_0) >> 8
          CFI FunCall ?LL_CMP_R0_L12
        CALL    ?LL_CMP_R0_L12
        BREQ    $+2+2
        RJMP    ??wNAF_recode_1
// 1095     } 
// 1096     return;
??wNAF_recode_0:
        ADIW    R29:R28, 14
          CFI CFA_Y Y+20
        LD      R24, Y+
          CFI R24 SameValue
          CFI CFA_Y Y+19
        LD      R25, Y+
          CFI R25 SameValue
          CFI CFA_Y Y+18
        LD      R26, Y+
          CFI R26 SameValue
          CFI CFA_Y Y+17
        LD      R27, Y+
          CFI R27 SameValue
          CFI CFA_Y Y+16
        LD      R4, Y+
          CFI R4 SameValue
          CFI CFA_Y Y+15
        LD      R5, Y+
          CFI R5 SameValue
          CFI CFA_Y Y+14
        LD      R6, Y+
          CFI R6 SameValue
          CFI CFA_Y Y+13
        LD      R7, Y+
          CFI R7 SameValue
          CFI CFA_Y Y+12
        LD      R8, Y+
          CFI R8 SameValue
          CFI CFA_Y Y+11
        LD      R9, Y+
          CFI R9 SameValue
          CFI CFA_Y Y+10
        LD      R10, Y+
          CFI R10 SameValue
          CFI CFA_Y Y+9
        LD      R11, Y+
          CFI R11 SameValue
          CFI CFA_Y Y+8
        LD      R12, Y+
          CFI R12 SameValue
          CFI CFA_Y Y+7
        LD      R13, Y+
          CFI R13 SameValue
          CFI CFA_Y Y+6
        LD      R14, Y+
          CFI R14 SameValue
          CFI CFA_Y Y+5
        LD      R15, Y+
          CFI R15 SameValue
          CFI CFA_Y Y+4
        ADIW    R29:R28, 4
          CFI CFA_Y Y+0
        RET
// 1097 }
          CFI EndBlock cfiBlock120

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,020H
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,021H
__?EEARL:

        ASEGN ABSOLUTE:DATA:NOROOT,022H
__?EEARH:

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for PARAMETER_d>`:
        DD 322, 0, 228, 0, 4059827341, 3011646600, 1717035260, 1581723524

        RSEG INITTAB:CODE:NOROOT(0)
`?<Segment init: NEAR_I>`:
        DC16    SFE(NEAR_I) - SFB(NEAR_I)
        DC16    SFB(NEAR_I)
        DP      SFB(NEAR_ID)
        REQUIRE ?need_segment_init

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for GENERATOR_x>`:
        DD 2067280810, 677745325, 2083500805, 439644707, 1621915638, 2525405107
        DD 678996636, 505369919
`?<Initializer for GENERATOR_y>`:
        DD 734769799, 3106185798, 2703259738, 239070875, 2219608924, 1235731268
        DD 1661862466, 1847347960

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for curve_order>`:
        DD 3346435303, 800216078, 4262427033, 3753705549, 2629571813
        DD 4032010114, 1314785906, 2739137
`?<Initializer for Montgomery_rprime>`:
        DD 2042378537, 3778012656, 3523009779, 3613292728, 1991629601
        DD 3169061357, 2948710516, 4079420157

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for Montgomery_Rprime>`:
        DD 1609815585, 3357390969, 3932895357, 389981610, 557250076, 1023522759
        DD 1791556051, 435697

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for mask_7fff>`:
        DD 2147483647

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for prime1271_0>`:
        DD 4294967295

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for ctau1>`:
        DD 3956176067, 1960629628, 989516300, 426040876, 18, 0, 12, 0

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for ctaudual1>`:
        DD 3738038324, 2664081113, 587564626, 1252475115, 17, 0, 4294967284
        DD 2147483647

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for cphi0>`:
        DD 4294967287, 4294967295, 5, 0, 4016502810, 1332040556, 2441265961
        DD 626237557
`?<Initializer for cphi1>`:
        DD 7, 0, 5, 0, 3800209145, 860721385, 3305923279, 1657326240
`?<Initializer for cphi2>`:
        DD 21, 0, 15, 0, 1327362961, 741127957, 1822121112, 2027890219
`?<Initializer for cphi3>`:
        DD 3, 0, 2, 0, 2811637412, 2453931095, 494285866, 1350878793
`?<Initializer for cphi4>`:
        DD 3, 0, 3, 0, 988571733, 2701757586, 2811637412, 306447447
`?<Initializer for cphi5>`:
        DD 15, 0, 10, 0, 3305450995, 1721442771, 2316879262, 1167168833
`?<Initializer for cphi6>`:
        DD 24, 0, 18, 0, 2315934695, 3442885543, 338791228, 186854019
`?<Initializer for cphi7>`:
        DD 35, 0, 24, 0, 1598584858, 1723958019, 2581785114, 962837532
`?<Initializer for cphi8>`:
        DD 240, 0, 170, 0, 727518960, 1155682648, 51825637, 525508486
`?<Initializer for cphi9>`:
        DD 3055, 0, 2160, 0, 2540578053, 21839432, 4261427035, 265629340

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for cpsi1>`:
        DD 1742948079, 3991961415, 2211793410, 721002138, 314, 0, 222, 0
`?<Initializer for cpsi2>`:
        DD 323, 0, 228, 0, 235139954, 1283320695, 2577932035, 565760123
`?<Initializer for cpsi3>`:
        DD 9, 0, 6, 0, 1978088033, 980314814, 494758150, 1286762262
`?<Initializer for cpsi4>`:
        DD 4294967286, 4294967295, 4294967289, 2147483647, 2316879262
        DD 3314652481, 3800209145, 860721385

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for b41>`:
        DD 2433271871, 325989386
`?<Initializer for b42>`:
        DD 3286302514, 824368941
`?<Initializer for b43>`:
        DD 715696565, 109726192
`?<Initializer for b44>`:
        DD 2531134186, 416614520
`?<Initializer for c1>`:
        DD 1369724316, 1917332562
`?<Initializer for c2>`:
        DD 3710349164, 1509513994
`?<Initializer for c3>`:
        DD 1176894072, 2110968188
`?<Initializer for c4>`:
        DD 1456375927, 1808104943
`?<Initializer for b11>`:
        DD 3768623510, 151453479
`?<Initializer for b12>`:
        DD 3257544096, 325314658
`?<Initializer for b13>`:
        DD 3972530959, 121790513
`?<Initializer for b14>`:
        DD 2260330065, 139424665
`?<Initializer for b21>`:
        DD 2231157460, 491346922
`?<Initializer for b24>`:
        DD 2379311056, 635159996
`?<Initializer for b31>`:
        DD 589234946, 397126941
`?<Initializer for b32>`:
        DD 3817396817, 46407962
`?<Initializer for b33>`:
        DD 2301084831, 776806857
`?<Initializer for b34>`:
        DD 3224292759, 178155332
`?<Initializer for ell1>`:
        DD 2635758927, 630621920, 3869687142, 4149641900, 3928745439
        DD 4233868741, 7, 0
`?<Initializer for ell2>`:
        DD 3714218747, 3518635396, 256281997, 735196504, 2859208586, 2413080652
        DD 3, 0
`?<Initializer for ell3>`:
        DD 1737236540, 2603162163, 1708960002, 3291207369, 201308918
        DD 3493379981, 0, 0
`?<Initializer for ell4>`:
        DD 2011692480, 317023851, 345521538, 2177621047, 2720891920, 453458039
        DD 3, 0

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for 64 Bit Constant>_0`:
        DD 0, 0

        RSEG FAR_F:CODE:NOROOT(0)
        DD 0, 0, 0, 0, 0, 0, 0, 0

        RSEG FAR_F:CODE:NOROOT(0)
        DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC16 0, 0, 0, 0, 0, 0, 0

        RSEG FAR_F:CODE:NOROOT(0)
`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_1`:
        DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

        END
// 
// 21 188 bytes in segment FARCODE
//  1 614 bytes in segment FAR_F
//      7 bytes in segment INITTAB
// 13 824 bytes in segment NEAR_F
//    992 bytes in segment NEAR_I
//    992 bytes in segment NEAR_ID
// 
// 37 610 bytes of CODE memory (+ 15 bytes shared)
//    984 bytes of DATA memory (+  8 bytes shared)
//
//Errors: none
//Warnings: none
