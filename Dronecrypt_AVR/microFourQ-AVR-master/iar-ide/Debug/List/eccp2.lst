###############################################################################
#
# IAR C/C++ Compiler V7.10.1.1197 for Atmel AVR           07/Sep/2018  15:59:32
# Copyright 1996-2017 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for Atmel AVR, Evaluation Version 7.10
#
#    Source file  =  E:\Documents\DroneAVR\microFourQ-AVR-master\src\eccp2.c
#    Command line =  
#        -f C:\Users\OZGURO~1\AppData\Local\Temp\EWAD3A.tmp
#        (E:\Documents\DroneAVR\microFourQ-AVR-master\src\eccp2.c --cpu=m2560
#        -ms -o E:\Documents\DroneAVR\microFourQ-AVR-master\iar-ide\Debug\Obj
#        -D __IAR__ -D _AVR_ -D _ASM_ -D USE_ENDO -D _NO_CACHE_MEM_ -lC
#        E:\Documents\DroneAVR\microFourQ-AVR-master\iar-ide\Debug\List -lA
#        E:\Documents\DroneAVR\microFourQ-AVR-master\iar-ide\Debug\List -y
#        --initializers_in_flash --debug -e --eeprom_size 4096 --clib -Ohs)
#    Locale       =  English_USA.1252
#    List file    =  
#        E:\Documents\DroneAVR\microFourQ-AVR-master\iar-ide\Debug\List\eccp2.lst
#    Object file  =  
#        E:\Documents\DroneAVR\microFourQ-AVR-master\iar-ide\Debug\Obj\eccp2.r90
#
###############################################################################

E:\Documents\DroneAVR\microFourQ-AVR-master\src\eccp2.c
      1          /***********************************************************************************
      2          * FourQlib: a high-performance crypto library based on the elliptic curve FourQ
      3          *
      4          *    Copyright (c) Microsoft Corporation. All rights reserved.
      5          *
      6          * Abstract: ECC operations over GF(p^2) exploiting endomorphisms
      7          *
      8          * Modified by Geovandro C. C. F. Pereira
      9          ************************************************************************************/
     10          
     11          #include "FourQ_internal.h"
     12          #include "FourQ_params.h"

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \   static uint64_t const PARAMETER_d[4]
   \                     PARAMETER_d:
   \   00000000                      DS8 32
   \   00000020                      REQUIRE `?<Initializer for PARAMETER_d>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \   static uint64_t const GENERATOR_x[4]
   \                     GENERATOR_x:
   \   00000000                      DS8 32
   \   00000020                      REQUIRE `?<Initializer for GENERATOR_x>`
   \   00000020                      DS8 32
   \   00000040                      REQUIRE `?<Initializer for GENERATOR_y>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \   static uint64_t const curve_order[4]
   \                     curve_order:
   \   00000000                      DS8 32
   \   00000020                      REQUIRE `?<Initializer for curve_order>`
   \   00000020                      DS8 32
   \   00000040                      REQUIRE `?<Initializer for Montgomery_rprime>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \   static uint64_t const Montgomery_Rprime[4]
   \                     Montgomery_Rprime:
   \   00000000                      DS8 32
   \   00000020                      REQUIRE `?<Initializer for Montgomery_Rprime>`
     13          #include "FourQ_tables.h"

   \                                 In  segment NEAR_F, align 1, keep-with-next
   \   uint64_t const __flash FIXED_BASE_TABLE[960]
   \                     FIXED_BASE_TABLE:
   \   00000000   E631A70334F3       DD 2802050609, 3783931123, 491793247, 678715583, 3841524563, 3761136375
   \              E18A2B5F1D50
   \              60BF28740353
   \              E4F962F7E02E
   \   00000018   ACDE8B86A037       DD 2340859102, 205234231, 2962456284, 2428440472, 619758933, 1946909816
   \              0C3B7EDCB093
   \              0F9890BFC555
   \              24F07C78740B
   \   00000030   136623A02391       DD 597693286, 3005293457, 982865829, 1341978041, 2883207867, 695925963
   \              B32157A53A95
   \              F5B94FFC42BB
   \              ABDAFCCB297A
   \   00000048   97C6556CD137       DD 1433180102, 1497944375, 858810444, 2820184633, 171188007, 212806514
   \              5948684C3330
   \              9A39A8181F27
   \              0A342B720CAF
   \   00000060   8787FD18A018       DD 4246243207, 982229016, 2296189608, 1430655617, 3231685495
   \              3A8B12A888DD
   \              128155469B77
   \              C09F        
   \   00000074   CC33B0B32049       DD 2964573235, 3092062281, 464448248, 301660416, 6563238, 3785815945
   \              B84DEAF81BAE
   \              F90011FA25A6
   \              0064F789E1A6
   \   0000008C   CD1218F76066       DD 418893074, 307585126, 1842147482, 2900866795, 1150158318, 2636655024
   \              1255F09A6DCC
   \              B6EBACE705EE
   \              448E29B09D28
   \   000000A4   3368BF2FBDB4       DD 3207541608, 693616052, 1838226891, 3694920686, 2669892571
   \              29571DCB6D91
   \              03EEDC3C53DB
   \              9F23        
   \   000000B8   E501BABE4305       DD 3133072641, 113591045, 1034920229, 783238513, 1686779469, 1922445400
   \              06C5A1253DAF
   \              45712EAF364D
   \              648A30587296
   \   000000D0   3EF29D31771F       DD 2637250290, 1639413535, 3219304553, 1329711096, 1503105196
   \              61B7B069BFE2
   \              C7F84F4190AC
   \              5997        
   \   000000E4   23AE40860A42       DD 1082532782, 1144195650, 1295222150, 2631758983, 4233533028
   \              443385864D33
   \              74879CDD9664
   \              FC56        
   \   000000F8   E114E59872E0       DD 3852001556, 1960800992, 2436632843, 3382731557, 1608823000
   \              74DF110B913C
   \              6325C9A0B0D8
   \              5FE4        
   \   0000010C   D411076BF3D9       DD 124507153, 3602904025, 1986109029, 2095987208, 613564436, 1217813107
   \              D6BF9E657661
   \              3A087CEE4014
   \              24925A734896
   \   00000124   B961D695F706       DD 3600136545, 2284451590, 682281122, 704095611, 1106362451, 2667831310
   \              8829C8A228AA
   \              A57B29F7C053
   \              41F1E00E9F03
   \   0000013C   A9E8441C241E       DD 1142729192, 2348229662, 3786029227, 3358767092, 1492290735
   \              8BF738ABE1AA
   \              B7F4C8328CAF
   \              58F2        
   \   00000150   00C6FA54F8B8       DD 4199809222, 3403348152, 676234814, 884396294, 988893335, 4115238059
   \              CADA863E284E
   \              D10634B65097
   \              3AF18CABF549
   \   00000168   9C49017D7790       DD 25009225, 1841198992, 340322492, 1673492136, 4063944710, 1668387419
   \              6DBEE8BC1448
   \              76A863BFE006
   \              F23A925B6371
   \   00000180   81FABDEDC721       DD 3186459130, 3319973665, 3598735019, 1323200750, 3029817360
   \              C5E256ABD680
   \              70EE4EDE5810
   \              B497        
   \   00000194   D9B58F3C9AA8       DD 2403129781, 789224104, 1196621081, 527647764, 830969067, 3360065122
   \              2F0AFD194752
   \              44141F7394EB
   \              31878662C846
   \   000001AC   F7D211DDA34E       DD 299759570, 1924244302, 638824559, 2058381168, 1180005811, 2187562283
   \              72B1B06F2613
   \              67707AB075B3
   \              46558D2B8263
   \   000001C4   845F40B998CE       DD 1085899871, 2030213326, 1216954448, 28635441, 3202061221, 680112891
   \              790240504889
   \              F13101B493A5
   \              BEDBB2FB2889
   \   000001DC   560D04F3278B       DD 83056141, 291186571, 1165875317, 1301448074, 1458724581, 3456931710
   \              115BD875457D
   \              858A4D925EE5
   \              56F2977ECE0C
   \   000001F4   C1CD92D44996       DD 2463416781, 2279033238, 126863937, 1993089697, 1002122733
   \              87D7CA41078F
   \              22A176CC2DED
   \              3BBB        
   \   00000208   2BF63DDC2885       DD 1037839350, 293283973, 3116546722, 1140029052, 3773467279
   \              117BBAA2B9C2
   \              767C43F38A8F
   \              E0EA        
   \   0000021C   9E257307796D       DD 1929879077, 1511356781, 24615211, 2161766290, 779579924, 1731668246
   \              5A15992B0177
   \              EF9280D97214
   \              2E7729166737
   \   00000234   8835BE09576D       DD 3188295733, 2063030125, 630134635, 1634220315, 813906173, 2591249316
   \              7AF7176B258F
   \              391B616838FD
   \              308353A49A73
   \   0000024C   925F72855114       DD 1921356383, 1340625172, 2251034576, 1111157585, 1394974439
   \              4FE80FD0862C
   \              EB51423A9EE7
   \              5325        
   \   00000260   1A684B3B31A8       DD 1262164584, 4261425576, 530608636, 441392486, 2378770599, 769479702
   \              FE0071FC1FA0
   \              1D661A4F28A7
   \              8DC954162DDD
   \   00000278   6A6ADF195C1A       DD 3742984810, 1612209178, 3698174388, 1233164055, 1305476099
   \              6018A9B4DC6D
   \              97174980FC03
   \              4DCF        
   \   0000028C   094B60627E8D       DD 1617037643, 100302477, 2753472250, 661735584, 1246748783, 4003365104
   \              05FAA6FAA41E
   \              48A02771E06F
   \              4A4F80F0EE9E
   \   000002A4   53A97BB21733       DD 2075284393, 3434157875, 1100649099, 1788478366, 2217884646
   \              CCB1928B419A
   \              039E6A9A3BE6
   \              8432        
   \   000002B8   14BB9728D1AE       DD 2535986363, 28496302, 3540324913, 2807596420, 3432488407, 1423908384
   \              01B21231D305
   \              8584A7589DD7
   \              CC971E2054DF
   \   000002D0   22DD3E2F06FE       DD 1043276509, 2446919422, 1608456719, 1312221591, 1802794548
   \              91D91A0F5FDF
   \              E9974E367634
   \              6B74        
   \   000002E4   7174D8183433       DD 3625480564, 4007736371, 1046360506, 2507389603, 3839525015
   \              EEE131BA3E5E
   \              BAA395738097
   \              E4DA        
   \   000002F8   77C67CFE2AD9       DD 2097051590, 1267018457, 339839902, 3767219303, 803663752, 675115419
   \              4B858B9E1441
   \              3467E08BEF88
   \              2FE6719B283D
   \   00000310   180BE45C9D2D       DD 3831240715, 3073613101, 299029960, 1974271215, 2354452598
   \              B733D5C811D2
   \              FCEF75AC1876
   \              8C56        
   \   00000324   777A8F404C4B       DD 2403366778, 2803059787, 206875712, 1723526664, 3106809981, 111249599
   \              A713AC400C54
   \              EE0866BA287D
   \              B92E88BF06A1
   \   0000033C   7E506F356971       DD 1865776720, 3978193265, 3314561817, 2447048000, 1954301423
   \              ED1E3319C590
   \              FD4091DA45EF
   \              747C        
   \   00000350   816E1D2F86A9       DD 489652590, 3728770729, 3014913917, 1573595117, 4196258542
   \              DE40EF7DB3B3
   \              27ED5DCBD2EE
   \              FA1D        
   \   00000364   C46C43FD6498       DD 1140704364, 1888904344, 1364533151, 1642961884, 3041211639
   \              70961F9F5155
   \              9BDC61ED34F7
   \              B545        
   \   00000378   B07F073F55B3       DD 121614463, 1161057715, 2211100427, 4064768995, 1972171999
   \              4534B70B83CA
   \              73E3F247F4DF
   \              758C        
   \   0000038C   E25E679BEE29       DD 1738269278, 2487152169, 3659001330, 3604746086, 1036641720
   \              943EEDF2DA17
   \              0F66D6DCE5B8
   \              3DC9        
   \   000003A0   B75B413F0CBA       DD 1094694747, 1453657274, 3316142975, 509948251, 2150396435
   \              56A5537FC5A8
   \              315B1E657213
   \              802C        
   \   000003B4   02425FF9252E       DD 1610154562, 4096075054, 1942608072, 857312399, 1013152646
   \              F425D8C873C9
   \              8C8F33197B86
   \              3C63        
   \   000003C8   4F33ED4184B3       DD 3980480307, 1397720243, 3739052290, 2905685618, 484389807
   \              534F6902DEDD
   \              3E72AD3133AF
   \              1CDF        
   \   000003DC   7E945ED5306E       DD 1591049876, 710357102, 1517281309, 877073401, 1941323242, 253504499
   \              2A57E01D5A6F
   \              13F934473DEA
   \              73B62BF30F1C
   \   000003F4   705739CB18DB       DD 969633879, 2669287643, 771278564, 1735890916, 1713095497, 3200159842
   \              9F1AC6E42DF8
   \              97E46777C349
   \              661B9062BEBE
   \   0000040C   E7CB501A9643       DD 1343940555, 3902117443, 1532143757, 297803089, 57832744, 807123240
   \              E895A88D5B52
   \              1D5111C07528
   \              0372B928301B
   \   00000424   57A2010C4FC6       DD 17586082, 1431654342, 931869041, 698363121, 4169398850, 1356323625
   \              55553171378B
   \              2CF129A0FA42
   \              F883DB2950D7
   \   0000043C   47B85F002DAA       DD 1593853880, 675294634, 1294236387, 2823856828, 218301991, 2292466677
   \              28407AE34D24
   \              A2BCA8500627
   \              0D0343F588A4
   \   00000454   5D9AB4E6B089       DD 3034996122, 762163337, 1858693227, 4272019847, 3726650888
   \              2D6D686B6EC9
   \              D987FEA12E08
   \              DE20        
   \   00000468   7600F28DE1D3       DD 4069357056, 1550115283, 4133601207, 360519614, 3715445580
   \              5C64BFB7F661
   \              17BE157D334C
   \              DD75        
   \   0000047C   2D365639155C       DD 1446587702, 3172537692, 3797186776, 1026779901, 342708013
   \              BD1978D8E254
   \              6AFD3D334F2D
   \              146D        
   \   00000490   15E8F94EE00B       DD 4182644200, 2616975371, 1793003712, 723016346, 3981618043
   \              9BFB10C06ADF
   \              5A9A2B18AB7B
   \              ED52        
   \   000004A4   27B392651E80       DD 2456102835, 1930436224, 1738112532, 2491204929, 3046068212
   \              73107E146799
   \              C541947C4FF4
   \              B58F        
   \   000004B8   9A7AFAC900C7       DD 4207516282, 922222791, 1074026201, 3492818482, 1086089595
   \              36F856D94004
   \              2E32D030697B
   \              40BC        
   \   000004CC   E4364372D898       DD 1131602998, 1196480664, 2437204667, 3382852799, 1976720122
   \              4750CABB9144
   \              3CBFC9A25AFA
   \              75D2        
   \   000004E0   CBFE76559176       DD 1985334270, 2034602358, 402410247, 1960517990, 627495113, 1884795428
   \              79454B0717FC
   \              216674DBD0C9
   \              2566B2247057
   \   000004F8   7B2308413B59       DD 138509091, 492059481, 1145210755, 432177332, 2339161071, 891488765
   \              1D5487834442
   \              80B419C2C3EF
   \              8B6C09FD3523
   \   00000510   AE72C0683D6A       DD 3228085874, 931347818, 599792116, 1321232154, 2748341173, 2643998433
   \              378319F423C0
   \              671A4EC05BB5
   \              A3D036E19D98
   \   00000528   EFE3F2241ADF       DD 4062506979, 1157503711, 3850304330, 2727787580, 899760464, 788449384
   \              44FEFB4AE57E
   \              BC3CA2964150
   \              35A1C8682EFE
   \   00000540   4BCAFB199C09       DD 4212739018, 803314697, 2503791110, 416024531, 3384850912, 1541403159
   \              2FE1D206953C
   \              07D318CCB9E0
   \              C9C0F2175BDF
   \   00000558   BCEE581AA756       DD 1478147310, 1729800022, 687329698, 3788256174, 933274622, 460268873
   \              671AD1A228F7
   \              33AEE1CCA3FE
   \              37A025491B6F
   \   00000570   BB8365BA3D16       DD 1706736515, 1364213014, 3582497297, 1958303286, 3935762537
   \              51509211D588
   \              563674B9F869
   \              EA96        
   \   00000584   7AE4BDB910BD       DD 3183049444, 2653229245, 352833048, 4206443283, 2037271892, 93718825
   \              9E25CE181507
   \              3B13FAB94D54
   \              796E09290596
   \   0000059C   765F6A8133ED       DD 1786869343, 3853005805, 781452577, 2990929476, 1004447026
   \              E5A805212E94
   \              F644B245A532
   \              3BDE        
   \   000005B0   2693FFD56975       DD 4292159123, 3198642549, 3127725782, 1689864264, 2497920711
   \              BEA74ED6BA6D
   \              484864B93EC7
   \              94E3        
   \   000005C4   2D019DB59F25       DD 2645896449, 1432592165, 1909417434, 3680141624, 3991354143
   \              556365DA71CF
   \              8138DB5A3B1F
   \              EDE7        
   \   000005D8   DC226C62D13B       DD 1818418210, 316985659, 1696093463, 2635706562, 1471544784
   \              12E455176518
   \              B0C29D19FDD0
   \              57B5        
   \   000005EC   11D277A084E4       DD 2006979026, 2932704484, 535676362, 506761937, 1183075861, 2420252895
   \              AECDC5CA1FED
   \              92D11E344E15
   \              468420DF9042
   \   00000604   3A317A42F099       DD 2051160625, 1206448281, 1529963975, 3744850478, 476471018
   \              47E865C75B31
   \              E22EDF355EEA
   \              1C66        
   \   00000618   595BFC45B556       DD 4232403291, 2013443414, 22794974, 2242043636, 2507237037, 401779591
   \              7802D2DE015B
   \              DEF485A266AD
   \              9571AB8717F2
   \   00000630   C1E520606D35       DD 543212005, 433024309, 3191901802, 304773841, 1683748710, 1534704584
   \              19CF8E6ABE40
   \              7AD1122AF766
   \              645BBBC85B79
   \   00000648   DACF4D0A009D       DD 1292557007, 553320605, 732071224, 2538760743, 222432222, 1883354345
   \              20FB85382BA2
   \              6A2797520BDE
   \              0D42B4E97041
   \   00000660   B05758DA1133       DD 1490726999, 993005875, 4040311363, 1027181414, 63784712, 2443549082
   \              3B304243F0D2
   \              8B663D394708
   \              03CD999A91A5
   \   00000678   8096CD932409       DD 3448995990, 514728969, 1278611596, 1725786976, 2299009384, 387123255
   \              1EAE108C4C36
   \              6B6066DD1968
   \              890808371713
   \   00000690   DCFD7125D691       DD 1898306813, 1472910993, 2533683658, 883977400, 523611122, 3702515943
   \              57CAF1CA9704
   \              6CB834B0ABF2
   \              1F35E8E7DCAF
   \   000006A8   4DB98D543119       DD 2371112377, 1770205465, 1135544155, 1653040998, 1436363629
   \              6983075B43AF
   \              676662872B6D
   \              559D        
   \   000006BC   50E520099074       DD 537481445, 3973943412, 3572907971, 1118573474, 1953706353, 87135062
   \              ECDD3FC3D4F6
   \              13A242AC3171
   \              747393560531
   \   000006D4   030896B078BA       DD 2528117512, 608401594, 740360160, 3530211354, 1216958746, 2576874742
   \              2443FFE02C20
   \              C01AD26A511A
   \              4889FCF69997
   \   000006EC   27214EE3F8EA       DD 1323509537, 252442858, 369092327, 2798692055, 1801551796, 3308221220
   \              0F0BE6E715FF
   \              A6D7A6D07FB4
   \              6B617324C52F
   \   00000704   DCA149168277       DD 1226235041, 2252767863, 1015179760, 3359105099, 3259109572
   \              864669F03C82
   \              E04BC83710C4
   \              C242        
   \   00000718   542C915A0B4F       DD 2438616108, 1313344335, 2592072542, 3321820080, 1157465266
   \              4E48E35E9A7F
   \              F3B0C5FE84B2
   \              44FD        
   \   0000072C   01DE31A507B9       DD 832897502, 1084491705, 2045943369, 2781668779, 195551292, 2322913514
   \              40A49E4979F2
   \              E5ABA5CCE03C
   \              0BA7D8EA8A74
   \   00000744   B205A7A8DADC       DD 2812850693, 237427420, 1190446977, 2493584010, 1175919310
   \              0E26C78146F4
   \              128A94A11ACE
   \              4617        
   \   00000758   A81154955502       DD 1419094033, 1155224834, 1274121564, 2139659802, 1140000434
   \              44DB8D5C4BF1
   \              9E1A7F8806B2
   \              43F3        
   \   0000076C   172A4D4FFFAD       DD 1297028906, 3139239853, 866752358, 617847498, 1649702745, 3257209710
   \              BB1C976633A9
   \              9ACA24D37759
   \              6254136EC225
   \   00000784   230ED855211D       DD 3629458190, 2027495709, 475286992, 4131349434, 318675305, 2493371266
   \              78D94DD01C54
   \              63BAF63F9969
   \              12FED382949D
   \   0000079C   F1DC069AC256       DD 110817756, 3487941206, 811323200, 1270592917, 1672384658, 2478300678
   \              CFE5CF40305B
   \              B5954BBB9092
   \              63AEDE0693B7
   \   000007B4   0977E451043E       DD 3830516087, 2680161342, 158862579, 3950610545, 2189097191
   \              9FC00CF30978
   \              8871EB79F8E7
   \              827A        
   \   000007C8   7A3777578A6C       DD 2002221623, 986614380, 853562810, 2044659219, 2865670443, 1444790394
   \              3ACE55BA32E0
   \              061379DFA92B
   \              AACEC07A561D
   \   000007E0   2673820D22D9       DD 2181899891, 2118394585, 3769586504, 1803935619, 3738718827
   \              7E445348E0AF
   \              DF836B85526B
   \              DED8        
   \   000007F4   1AC11F1542BD       DD 521476801, 359744189, 904583397, 868720084, 1839656812, 630521316
   \              1571D8E535EA
   \              9DD433C7EF6C
   \              6DA6FDE42594
   \   0000080C   A04D5F2ED5FA       DD 1596891213, 3223836154, 2432924940, 128987931, 1404387344
   \              C0277D0C9103
   \              331B07B04010
   \              53B5        
   \   00000820   A5A33D4B198A       DD 1028367779, 2165250442, 2611560853, 1147387173, 3962228638
   \              810F41959BA9
   \              BD254463CF9E
   \              EC2A        
   \   00000834   94AC32B849CE       DD 850957484, 3594734030, 2020677473, 4112507409, 624615859, 1398498403
   \              D64317617871
   \              E211F51FE1B3
   \              253A6463535B
   \   0000084C   4B3F409E49DE       DD 1084115775, 3663612382, 975400208, 2619421546, 433238274, 917167504
   \              DA5E6D103A23
   \              336A9C21B102
   \              19D2DD9036AA
   \   00000864   F40428350B19       DD 674624516, 85527321, 155362069, 1988264569, 3246986008, 3398311836
   \              0519A3150942
   \              827976821318
   \              C1891F9CCA8E
   \   0000087C   96C33AFE0693       DD 989763267, 2434991763, 2669150644, 1650446481, 971148728, 1574194318
   \              912301B49F18
   \              D091625F8DB8
   \              39E24C8E5DD4
   \   00000894   50359FAB280D       DD 2678804533, 1922770957, 340874714, 491615957, 3553425424, 2351656040
   \              729B55DA1451
   \              76D51D4DF810
   \              D3CC6C688C2B
   \   000008AC   AA1A5A0FEA8A       DD 1510976026, 3411339914, 1019636868, 4117153651, 1359293667
   \              CB546C843CC6
   \              C773F5662CE3
   \              5105        
   \   000008C0   9FF565AE14DE       DD 1705943029, 1005458654, 30208036, 1971720586, 2305552734, 144603420
   \              3BEEF02401CC
   \              118A7586F15E
   \              896B791C089E
   \   000008D8   93D6261D022D       DD 639472598, 905904685, 2407341305, 3443319101, 2511845622, 1327360399
   \              35FF1CF98F7D
   \              E13DCD3CB8F6
   \              95B7E98F4F1D
   \   000008F0   41B462DC8A24       DD 1658601908, 1374063140, 603381033, 1638768188, 2162940753
   \              51E6DD2923F6
   \              9E3C61ADDB51
   \              80EB        
   \   00000904   EA64584FECF3       DD 1481632356, 1067314419, 1565720071, 2918397653, 2600355902
   \              3F9DFE075D52
   \              36D5ADF3483E
   \              9AFE        
   \   00000918   696A80B103C9       DD 2159110506, 502924233, 4286683673, 1442266439, 907084013, 1769731421
   \              1DFA9A19FF81
   \              3D4755F700ED
   \              3611F55D697B
   \   00000930   941946398044       DD 1178178585, 3738468420, 2144216479, 1636602950, 4035900684
   \              DED4259F7FCE
   \              9446618CF50C
   \              F08E        
   \   00000944   7FF1F25933C0       DD 4065951729, 2379822016, 130627001, 2027869686, 3145043132
   \              8DD935B907C9
   \              D5F678DE8CBC
   \              BB75        
   \   00000958   148FAF130D06       DD 2937263247, 513412358, 2135741659, 2275205445, 2519550356, 674852001
   \              1E9AD4DB7F4C
   \              E145879C4994
   \              962D6CA12839
   \   00000970   05C3C5765A3D       DD 3312846275, 4111030845, 2764384177, 509022013, 76765063, 720804409
   \              F50927B1A4C5
   \              0F3D1E575787
   \              04939A392AF6
   \   00000988   1CCEFDD0E376       DD 4258274510, 1495196534, 2294056499, 4152056031, 3002308049
   \              591E863388BC
   \              58DFF77B95D1
   \              B2F3        
   \   0000099C   D651546486AE       DD 1415894609, 513443502, 2948335979, 4133186344, 1826807627, 782056968
   \              1E9A096BAFBC
   \              6B28F65BDF4B
   \              6CE23E082E9D
   \   000009B4   828D3B3A66D0       DD 993690253, 2368562896, 1669464349, 1295849789, 2493021350, 997021359
   \              8D2D011D6382
   \              193D4D3D7CA6
   \              949856AF3B6D
   \   000009CC   F70D50DD15A9       DD 1356723981, 3366786473, 2371745404, 3160088466, 958431384
   \              C8ADF67C8D5D
   \              1F92BC5B8098
   \              3920        
   \   000009E0   A4FBDFD5F520       DD 3755320571, 3466196256, 3093986217, 842775687, 3624126345
   \              CE997BA9B86A
   \              BC87323BC789
   \              D803        
   \   000009F4   88A8E13F0055       DD 3779037352, 4062183509, 1459608765, 455395117, 989793699, 1175194646
   \              F220DCBD56FF
   \              C72D1B240DA3
   \              3AFF0C16460C
   \   00000A0C   156670016A13       DD 1879119206, 985950739, 1995945973, 3070720962, 470195198, 2705996854
   \              3AC4B7F576F7
   \              7BC2B7079BFE
   \              1C063C36A14A
   \   00000A24   193C8F47DE3D       DD 2403801404, 4035501629, 1836311370, 830301748, 1665870809
   \              F088E34A6D73
   \              6634317D2BD9
   \              634B        
   \   00000A38   1EC8B77F4738       DD 3078561480, 1530939192, 480365341, 4082084791, 3394529862, 88783818
   \              5B40CB1D1CA1
   \              ABB7F34F6A46
   \              CA54BBCA054A
   \   00000A50   A66008EDCADD       DD 149792352, 3905800925, 2508971761, 1769057215, 3722137263
   \              E8CDDEF1958B
   \              ABBF69714EAF
   \              DDDB        
   \   00000A64   85574133B67C       DD 1093895511, 2960766588, 504726917, 3483525224, 3525772404
   \              B07985851E15
   \              6068CFA20474
   \              D227        
   \   00000A78   A469B3CE6D32       DD 3016664169, 1404267826, 1817459976, 18162625, 1601384782, 1181280556
   \              53B33D086C54
   \              23C10115314E
   \              5F73E92C4668
   \   00000A90   ACD141173EBE       DD 1092070609, 3136241342, 2803077914, 67337498, 3817916045, 1759582436
   \              BAEF931AA713
   \              7D1A0403C68D
   \              E39018E468E1
   \   00000AA8   1575A44CCD55       DD 2756449653, 1803603285, 1462353970, 1929898634, 4008286898
   \              6B80C0325729
   \              EA8A73079AB2
   \              EEE9        
   \   00000ABC   475F5CC5AC75       DD 1556432735, 1276423285, 876940866, 1572068568, 1057559934
   \              4C140E423445
   \              DCD85DB3157E
   \              3F09        
   \   00000AD0   805250582B1B       DD 1347977298, 1657678619, 1315254159, 665360837, 801285613, 181207967
   \              62CE2F8F4E65
   \              99C527A8A5ED
   \              2FC2039F0ACD
   \   00000AE8   3EECD58144DD       DD 3582017260, 1262503133, 2426886488, 3226278046, 3877450657
   \              4B40595890A7
   \              189EC04D33A1
   \              E71D        
   \   00000AFC   51BC24257F05       DD 606425532, 1375239941, 3646617963, 4161394709, 43550752, 999588805
   \              51F8F96BD95A
   \              D815F8098820
   \              029883C53B94
   \   00000B14   65F7B27F4B43       DD 2994693623, 4097198915, 787875653, 1062189241, 3412508105
   \              F43607452EF6
   \              B8B93F4FBDC9
   \              CB66        
   \   00000B28   BB8A8756C9B4       DD 2270608266, 730253748, 2610456481, 4176206560, 1315957162
   \              2B8667A19B98
   \              DAE0F8EBE9AA
   \              4E6F        
   \   00000B3C   7018441E1289       DD 1142845464, 818680457, 4257370883, 2337106322, 1205392986, 816739518
   \              30CC5303FDC2
   \              69928B4DD65A
   \              47D874BE30AE
   \   00000B54   B6FA8C0399D5       DD 2349053690, 3283982805, 480799036, 270070438, 1772007761, 3656712181
   \              C3BD693C1CA8
   \              F2A61018B151
   \              699EFFF5D9F4
   \   00000B6C   47643DA0AB59       DD 1033914212, 1027255129, 907485251, 750278655, 799609185, 204414124
   \              3D3A20433617
   \              57FF2CB81161
   \              2FA91CAC0C2F
   \   00000B84   7DA1A405C619       DD 2751823265, 866502169, 1218582969, 3512667077, 1110708256
   \              33A519B948A2
   \              0BC5D15F1020
   \              4234        
   \   00000B98   9DAD46A08950       DD 1184931245, 1945667920, 3329499576, 464343826, 915300910, 1100248859
   \              73F821B8C674
   \              53121BAD622E
   \              368E771B4194
   \   00000BB0   0DFFE44E1A79       DD 3830320639, 2361858681, 1416098242, 1262839012, 2951028883
   \              8CC7F1C25467
   \              64E44B452093
   \              AFE5        
   \   00000BC4   F16A7759BEA9       DD 2002383210, 3613376169, 958099932, 2874079128, 706479764, 1413747469
   \              D75F71DC391B
   \              F798AB4E0694
   \              2A1C130D5444
   \   00000BDC   875402301AA1       DD 36734804, 3484031649, 1266344447, 3610468839, 1692561202, 3171636409
   \              CFAAE1FF4B7A
   \              61E7D7336F32
   \              64E254B9BD0B
   \   00000BF4   70388DA4EE15       DD 2376364088, 3941395989, 344783471, 2042809405, 928437460, 3541386206
   \              EAECFA6F148C
   \              CC3D79C2D4D4
   \              375643DED315
   \   00000C0C   4EA825D42C43       DD 634670760, 649800771, 3626798063, 1026028415, 740312835, 937087584
   \              26BB8BEFD82C
   \              F37F3D274703
   \              2C20D26037DA
   \   00000C24   3D985BD33B7D       DD 1540570520, 2738371453, 2006200599, 2124776434, 302456169, 706894834
   \              A33831177794
   \              83F27EA51D69
   \              12075BF22A22
   \   00000C3C   41273C7C3AD3       DD 1014776103, 4059052755, 2464923130, 1756772100, 1566638860
   \              F1F0BDFA92EB
   \              370468B6030C
   \              5D61        
   \   00000C50   75D1BAEE2853       DD 3136189905, 3396216915, 1998206518, 306203444, 644251215, 3188966499
   \              CA6E3636771A
   \              4B3412407E4F
   \              2666C463BE13
   \   00000C68   E3B06F9B6191       DD 1872487344, 735207825, 2915569545, 2263087307, 395627336, 1951534474
   \              2BD20F89ADC8
   \              F8CB86E3CB48
   \              17940D8A7452
   \   00000C80   F97E024CC745       DD 38599038, 504743749, 508816130, 1559131166, 2946092449, 2366148064
   \              1E15EB021E53
   \              741E5CEECDA1
   \              AF998DE08D08
   \   00000C98   862C1CC01296       DD 482379308, 1649939094, 566290740, 1125335923, 3290757028, 1622919016
   \              6258E93421C0
   \              43734313F7A4
   \              C424C76860BB
   \   00000CB0   E1433C101FBF       DD 1007739203, 2879856575, 346625464, 934865567, 3288470527, 2375478373
   \              ABA715B814A9
   \              EA9F37B813FF
   \              C402EC658D96
   \   00000CC8   845CFF778828       DD 4286022748, 1956677672, 3673556899, 3202052500, 370968326, 401106545
   \              74A007A3DAF6
   \              7194BEDB8706
   \              161C667117E8
   \   00000CE0   59CF524098E0       DD 1379949007, 2901121248, 2492559113, 1750411972, 2937797703
   \              ACEB6F099491
   \              2AC468553C47
   \              AF1B        
   \   00000CF4   971B4CD21B70       DD 1288869659, 3722582896, 1749298876, 243692949, 425892748, 1667212410
   \              DDE22EBC6844
   \              75950E869B8C
   \              1962A47A635F
   \   00000D0C   55D36A6993AD       DD 1785288147, 4075000749, 1873495520, 4243607748, 1725775604
   \              F2E345E06FAB
   \              50C4FCF03EF4
   \              66DD        
   \   00000D20   7DF1FDDC7ABC       DD 4259085809, 3138091708, 453758876, 350968693, 2734506269, 485990300
   \              BB0BCF9C1B0B
   \              5B7514EB411D
   \              A2FD9F9C1CF7
   \   00000D38   600AFFF06F73       DD 4293943306, 1548316531, 1430416752, 1231326597, 589486249
   \              5C496D705542
   \              8D854964D8A9
   \              2322        
   \   00000D4C   016A46C16D4F       DD 1187053930, 228289871, 3045055367, 165525043, 1621014098, 3202122437
   \              0D9BDB87B57F
   \              B63309DDB652
   \              609E82C5BEDC
   \   00000D64   9166E70FAF27       DD 3876557158, 3366956839, 1999615413, 2955049504, 2040698073
   \              C8AFB5B5772F
   \              7A20B02294D9
   \              79A2        
   \   00000D78   BC8D112DB141       DD 288210061, 2138419521, 2382823456, 2563885048, 3296860081
   \              7F7500208E07
   \              C7F898D117B1
   \              C482        
   \   00000D8C   D0AA595333FF       DD 1498665130, 3781112831, 3800191979, 509692997, 645733825, 3114148422
   \              E15F53EBE282
   \              4C451E611DC1
   \              267D2246B99E
   \   00000DA4   F50ABE645495       DD 3194287370, 2197705877, 1319807836, 2120269520, 2457688768
   \              82FEAB5C4EAA
   \              BED07E605AC0
   \              927D        
   \   00000DB8   1B4DE6AA786D       DD 3869907789, 1741912173, 258877765, 2803458751, 2740906651
   \              67D329450F6E
   \              62BFA719EA9B
   \              A35E        
   \   00000DCC   384463D940AC       DD 1675180100, 3529916588, 3007457479, 3945330081, 379336914, 876207138
   \              D26628C7B342
   \              F5A1EB2838D2
   \              169CDC223439
   \   00000DE4   72B34B791E14       DD 1266250419, 3450478100, 1900512343, 3961346247, 1378279717
   \              CDAA84577147
   \              58C7EC1DE125
   \              5226        
   \   00000DF8   D4F1E78F8796       DD 3884963057, 1721599894, 2856624255, 1963839914, 1525399247
   \              669DA07FAA44
   \              D1AA750DBECF
   \              5AEB        
   \   00000E0C   62B5327CBD25       DD 847012533, 3041901861, 7048853, 32192078, 716437853, 3235242390
   \              B54F8E95006B
   \              364E01EBF95D
   \              2AB3E196C0D5
   \   00000E24   5080FCBEE725       DD 4240330880, 1515710245, 706452439, 1477679965, 489368423, 2224781939
   \              5A579BD72A1B
   \              9B5D58132B67
   \              1D2B7A73849B
   \   00000E3C   F4AF751C00A5       DD 1964831919, 863830181, 373980462, 3414402236, 13558692, 1841178873
   \              337D7D2E164A
   \              A4BCCB83E3A4
   \              00CE28F96DBE
   \   00000E54   E03634988502       DD 882434102, 1221756162, 87918993, 3400596329, 23485796, 148278900
   \              48D28991053D
   \              FB69CAB05D64
   \              01668E7408D6
   \   00000E6C   13224A99915D       DD 1251545890, 3175059805, 3125066708, 388047547, 489992441, 703113715
   \              BD3FBBD4BA44
   \              22BB1721B0F9
   \              1D34A9F329E8
   \   00000E84   4DC75D114B60       DD 1561415111, 3576908640, 149398589, 854651880, 685477522, 2149994338
   \              D533A43D08E7
   \              F3E832F08E92
   \              28DB4F628026
   \   00000E9C   BE1B5CB78F23       DD 1555545627, 2186317603, 2599602055, 4158890418, 862644172, 768709822
   \              8250C7879AF2
   \              A1B2F7E3E7CC
   \              336A94BE2DD1
   \   00000EB4   D4EE7FE26872       DD 2145572078, 730490994, 1463627291, 1672669750, 858974771, 1528775235
   \              2B8A2E1B573D
   \              EA3663B2EA33
   \              333242435B1F
   \   00000ECC   C137200B260D       DD 537641271, 112403981, 1707375756, 1402559582, 1107435466, 2612107590
   \              06B37C8C65C4
   \              5C5E53991FCA
   \              420299469BB1
   \   00000EE4   6CF42F7E6D2C       DD 796814580, 588868908, 824162922, 736155405, 3272348598, 655470812
   \              2319BA6A311F
   \              D70D2BE013B6
   \              C30CB0DC2711
   \   00000EFC   AC1461EE35D4       DD 1643031572, 1501378004, 2287102358, 3871154647, 1880529867
   \              597D69968852
   \              21D7E6BD9BCB
   \              7016        
   \   00000F10   A510AD29B2D0       DD 2905187600, 2700194512, 1925298509, 719213332, 412644327, 300097756
   \              A0F1B94D72C1
   \              53142ADE73E7
   \              189820DC11E3
   \   00000F28   DB38E85C1794       DD 3898399544, 757733268, 2801148387, 2695414867, 1160115959
   \              2D2A21E3A6F6
   \              C453A0A8F6F7
   \              4525        
   \   00000F3C   D5B54B06EC1C       DD 1258739125, 407432220, 4096333417, 1566017328, 490870357, 688544590
   \              18481669F429
   \              87305D571655
   \              1D425B4E290A
   \   00000F54   0DA7F8C6565F       DD 4173729191, 2717079135, 1725800249, 934573216, 1437346265
   \              A1F39F3966DD
   \              74A037B429D9
   \              55AC        
   \   00000F68   9EE44A36967A       DD 1245093604, 1116837498, 317111433, 2441981098, 106021648, 1028057232
   \              4291BC8912E6
   \              ACAA918DC310
   \              0651E8903D46
   \   00000F80   90B1A00E5430       DD 2685309105, 2936362032, 1839581753, 385231861, 1217155558, 436345907
   \              AF05CA396DA5
   \              2BF516F651E6
   \              488C1C331A02
   \   00000F98   BCD563FBDADF       DD 1677442261, 224713439, 2646600316, 152628453, 3715375162, 993204695
   \              0D64EA7C9DBF
   \              ECE50918203A
   \              DD7419D73B33
   \   00000FB0   A90C8B9F545B       DD 2342496524, 495473755, 2425117158, 330797788, 2621245817, 170759066
   \              1D8859E6908C
   \              92DC13B70979
   \              9C3D939A0A2D
   \   00000FC8   F127B74B5DBE       DD 3075207463, 840588734, 4134372464, 1582909439, 4247174297, 585932490
   \              321A8470F66D
   \              47FF5E59BC99
   \              FD269ECA22EC
   \   00000FE0   053693B1CA82       DD 2477851958, 3726101122, 1436407878, 1497323200, 1967673379
   \              DE17D846559D
   \              56C0593F5023
   \              7548        
   \   00000FF4   373311488B1C       DD 289945395, 4148464412, 600223997, 2317844559, 930677829, 656861808
   \              F744B0FD23C6
   \              804F8A270445
   \              3779EA702726
   \   0000100C   9196573EAC70       DD 1463718294, 842378352, 903983695, 1240791134, 1371146272, 1624535444
   \              3235B24F35E1
   \              F85E49F40820
   \              51BA719460D4
   \   00001024   91814BC4E1DD       DD 1271173505, 856220125, 1563009566, 1047416371, 2115340619
   \              3308A21E5D29
   \              4E333E6E894B
   \              7E15        
   \   00001038   D0FB4F31BD2F       DD 1328664827, 1356578095, 900319710, 4012149714, 459491088, 874032594
   \              50DBC9DE35A9
   \              8BD2EF244710
   \              1B63ADD23418
   \   00001050   3BD25236233A       DD 1379285970, 2529633082, 2584267167, 2089030829, 1424408668
   \              96C7C99F9A08
   \              14AD7C84C05C
   \              54E6        
   \   00001064   CB4ABC6A579A       DD 3161115466, 294868890, 1462305306, 185137692, 103269344, 3783010931
   \              1193021A5729
   \              FA1C0B08C3E0
   \              06272A73E17C
   \   0000107C   4FF93D0B317F       DD 1024151545, 1502622079, 3574065269, 3162242632, 1974631347
   \              5990E875D507
   \              FE48BC7B7BB3
   \              75B2        
   \   00001090   51F56CE60F2C       DD 1827033589, 1151864620, 460353094, 2073531900, 4260996672
   \              44A86E461B70
   \              95FC7B97A640
   \              FDF9        
   \   000010A4   5BDE9DE7FAA8       DD 2649185246, 3133143720, 1974330634, 2265483680, 3456807190
   \              BABFE50A75AD
   \              89A08708B116
   \              CE0A        
   \   000010B8   EC6CDD59DCFC       DD 3713657964, 1866325244, 2296252020, 1849066293, 3928531059
   \              6F3D067488DE
   \              83356E36A073
   \              EA28        
   \   000010CC   1129291D4D61       DD 689770793, 1686654305, 4172866872, 2927971702, 1886320881
   \              6488E538F8B8
   \              4D76AE85F8F1
   \              706E        
   \   000010E0   306983758C65       DD 2205495401, 326798437, 3324049766, 31743772, 796313530, 3800965112
   \              137AF966C620
   \              5F1C01E4C7BA
   \              2F761FF8E28E
   \   000010F8   9C54E3E89EAC       DD 3823672404, 919772844, 2131446219, 2201460501, 732739895, 1709818782
   \              36D249CB7F0B
   \              9F158337B937
   \              2BACC39E65E9
   \   00001110   DA3E070C3C45       DD 118282814, 2603760709, 2877173221, 383790897, 1666261687, 1404891974
   \              9B322DE5AB7E
   \              2F3116E022B7
   \              6351F34653BC
   \   00001128   DE09D6C2E207       DD 3603095049, 534241799, 3927857068, 979328916, 3505435871, 213518056
   \              1FD757ACEA1E
   \              5F943A5FB4DF
   \              D0F006E80CBA
   \   00001140   C39287A940C3       DD 2276049810, 1890861251, 3739342848, 511557955, 1916375339
   \              70B4D800DEE1
   \              C1431E7D912B
   \              7239        
   \   00001154   BA6D54982D14       DD 1419295341, 387460372, 858288288, 1731033420, 1810040572, 609954638
   \              171870A03328
   \              794C672D06FC
   \              6BE32B4E245B
   \   0000116C   E2112C2CA79F       DD 741138961, 2368448415, 278622764, 2623500922, 646258938, 620656878
   \              8D2B722C109B
   \              727A9C5F20FA
   \              268578EE24FE
   \   00001184   3005515BA698       DD 1364930565, 3417220760, 1935802860, 839958392, 1174973457
   \              CBAE01EC7362
   \              BF783210AC11
   \              4608        
   \   00001198   18439C44FD91       DD 2621708355, 853081489, 79229656, 3377823259, 2564584537, 2002008055
   \              32D8F2D804B8
   \              7E1BC9557459
   \              98DC37F77754
   \   000011B0   17F55BA4F558       DD 1537480693, 302052696, 1048236804, 771812447, 725901960, 4236721503
   \              1200D3043E7A
   \              EC5F2E006288
   \              2B443D5FFC87
   \   000011C8   76E462480A93       DD 1648916196, 841419411, 142121762, 3326518396, 2455115454, 594598398
   \              32279B220878
   \              A47CC64616BE
   \              9256D9FE2370
   \   000011E0   71C419E6FA36       DD 434532804, 1124792886, 2887737266, 358901966, 4064376373, 998563522
   \              430A5FB2AC1F
   \              68CE15647635
   \              F241DEC23B84
   \   000011F8   E58F17C00E90       DD 398517647, 823398032, 3413394426, 1552283788, 1691903148, 229072733
   \              311443FACB74
   \              F88C5C8564AC
   \              64D85F5D0DA7
   \   00001210   FB8471B0F448       DD 1907424132, 694154312, 2905814723, 460972299, 3710482355, 4292843842
   \              295F36C3AD33
   \              E10B1B7977B3
   \              DD299942FFDF
   \   00001228   1A230F9A198D       DD 261757475, 1276844429, 3239216718, 3128396324, 4067248336
   \              4C1B864EC112
   \              8A24BA7748D0
   \              F26D        
   \   0000123C   689774F6B611       DD 1962305687, 2256188945, 1070973038, 4286085305, 1268305459
   \              867AC06E3FD5
   \              78B9FF78CE33
   \              4B98        
   \   00001250   916575CB4DCE       DD 1976275301, 4158344654, 2582401379, 291920544, 2926647481, 709463830
   \              F7DB516399EC
   \              5AA0116618B9
   \              AE718F162A49
   \   00001268   509AB4EBC3DB       DD 3035320474, 643744731, 1758342278, 1034167046, 3001234309, 921054122
   \              265E2C8668CE
   \              23063DA43385
   \              B2E32BAA36E6
   \   00001280   447879AB7D4A       DD 2041267320, 2572189002, 1092520053, 633320188, 855780577, 3618381513
   \              99508875411E
   \              B2FC25BF2CE1
   \              33021EC9D7AC
   \   00001298   0466033D41AE       DD 54330470, 601047470, 3915561984, 3533026405, 2732011904, 600842523
   \              23D3BC00E962
   \              B465D2953180
   \              A2D7211B23D0
   \   000012B0   2D4DFF92CD7A       DD 4287769933, 2688339322, 3727693076, 511078728, 2828332971
   \              A03C1514DE30
   \              71481E76EFAB
   \              A894        
   \   000012C4   AB36C2411E58       DD 3259083574, 1140596312, 480232179, 735214215, 3392902742, 2245881877
   \              43FCC2F31C9F
   \              7A872BD29656
   \              CA3B701585DD
   \   000012DC   3E2253629420       DD 1398947362, 471962656, 1433670128, 158024441, 421942647, 455301423
   \              1C2111F05574
   \              42F9096B5577
   \              1926592F1B23
   \   000012F4   2D94D3311C06       DD 3543215508, 3284474886, 816425377, 3933114233, 1032433843
   \              C3C5A9A130A9
   \              8F79EA6EB0B3
   \              3D89        
   \   00001308   7CB2C5C7751D       DD 3318185138, 2125165853, 3873402422, 3232346502, 1058363028
   \              7EAB6E36E6DF
   \              B186C0A95694
   \              3F15        
   \   0000131C   4D584F84DFFA       DD 1334070616, 664002554, 1099962403, 1809024333, 719143947, 836726322
   \              279318234190
   \              854D6BD3440B
   \              2ADD6E3231DF
   \   00001334   80F1D554E417       DD 3579085041, 1793319959, 831316868, 436831476, 90506797, 3535796726
   \              6AE3E384318C
   \              84F41A09062D
   \              0565F9F6D2BF
   \   0000134C   EC636EBA9790       DD 1857743971, 703043472, 1996972007, 617129191, 232342342, 3752439906
   \              29E75FE77707
   \              A4E724C84346
   \              0DD9B062DFA9
   \   00001364   11E2BF8FB364       DD 3213824482, 1592308580, 454547493, 4146881348, 1656886540
   \              5EE8D8251B17
   \              6344F72C150C
   \              62C2        
   \   00001378   E8DCD0816880       DD 3498174684, 672163968, 3756822977, 4104433421, 2541625134, 445582956
   \              281091C1DFEC
   \              AF0DF4A41F2E
   \              977E0E6C1A8F
   \   00001390   316F38B9A3A7       DD 951660911, 1923589031, 2353930988, 842471026, 1537519419, 3242223878
   \              72A722EC8C4E
   \              16723237AF3B
   \              5BA46906C140
   \   000013A8   D36789111424       DD 2299646823, 135599140, 2830549815, 1371359994, 1362362599
   \              0815C337A8B6
   \              4AFA51BD00E7
   \              5134        
   \   000013BC   7A9B50E72548       DD 1357347483, 713172296, 1186989339, 442424572, 38307556, 1103806847
   \              2A82051B46C0
   \              DCFC1A5E86E4
   \              0248C17F41CA
   \   000013D4   0EFAA06B5675       DD 2691370746, 463230581, 862597296, 3389617702, 1962617872, 1223231873
   \              1B9C30B0336A
   \              7626CA092C10
   \              74FB098148E9
   \   000013EC   4CAA2B207B74       DD 723537066, 3114367860, 1761790290, 3106025531, 969075126, 1012495385
   \              B9A1C9526902
   \              303BB922E9B6
   \              39C274193C59
   \   00001404   6B9BB9215F76       DD 3105975195, 1693540214, 1838322434, 4004385831, 2064816085
   \              64F193026D92
   \              1427EEAE97D5
   \              7B12        
   \   00001418   D307FE1B44AD       DD 4263236359, 252134573, 1541843101, 867532326, 859139088, 674210533
   \              0F07A89D5BE6
   \              7E2633B56C10
   \              3335A2E5282F
   \   00001430   772C61DC995C       DD 1641838380, 973314396, 2302529525, 1331531614, 4232577599
   \              3A03CFF5893D
   \              8F5E4F5D023F
   \              FC48        
   \   00001444   927E4BFC85AE       DD 1274843774, 3601237422, 1500455489, 3962157218, 1018421423
   \              D6A62241596F
   \              B8A2EC29E0AF
   \              3CB3        
   \   00001458   384210658E0D       DD 275068994, 822185485, 1146574374, 802164713, 1233313809, 306305136
   \              310156264457
   \              0FE92FD0E011
   \              4982D8701241
   \   00001470   81A74E675666       DD 1315406247, 2534233702, 255713998, 453375133, 1668382310, 2845114335
   \              970DE2CE0F3D
   \              F49D1B057E66
   \              6371FFDFA994
   \   00001488   8E986BA874A7       DD 1806208664, 1097036967, 1408325530, 2332568813, 3050482251
   \              4163579A53F1
   \              2CED8B08AA4B
   \              B5D2        
   \   0000149C   1DFA5678B318       DD 1450712570, 409318168, 2169626365, 224428535, 1684446084, 1597563214
   \              1865DEFD8151
   \              81F70D609B84
   \              6466E14E5F38
   \   000014B4   F4BBE4364B40       DD 3828806843, 177687360, 1137981505, 3597057538, 1479724723, 450986638
   \              0A97384143D4
   \              BE02D666CEB3
   \              5832828E1AE1
   \   000014CC   7D9E0634EA86       DD 104103326, 971238022, 1769555739, 3410713316, 754110305, 3663359716
   \              39E3471B6979
   \              5AE4CB4BCF61
   \              2CF26EE4DA5A
   \   000014E4   29EAB7AB5768       DD 3081447914, 2596951912, 317152434, 3540852732, 3864727817
   \              9ACA5CB212E7
   \              1FFCD30D1109
   \              E65B        
   \   000014F8   0E5A6B32BECD       DD 1798442586, 1912192717, 1715990233, 3699542274, 212157839, 836119813
   \              71F9EED96647
   \              8902DC82458F
   \              0CA52D0531D6
   \   00001510   C1E53A54BF52       DD 978633189, 3928735570, 3824047249, 1613492409, 595635531, 631927650
   \              EA2B5491E3EE
   \              F0B9602BAD4B
   \              2380736225AA
   \   00001528   5F5871DF1E32       DD 1910464344, 728440370, 1788888845, 3687182296, 3099866443, 87374884
   \              2B6B470D6AA0
   \              EFD8DBC5354B
   \              B8C43C240535
   \   00001540   6BCAF5E0DB3C       DD 4125125578, 2747783996, 726574583, 680139919, 315522209, 3591712606
   \              A3C7A5F72B4E
   \              1C8F288A7CA1
   \              12CE2F5ED615
   \   00001558   3C7D3667C1B4       DD 912735357, 1507115444, 1377815445, 503469390, 604689472, 1725143055
   \              59D4CB95521F
   \              554E1E02D440
   \              240A980F66D3
   \   00001570   D9D139A46F6B       DD 967104977, 2884726635, 2840342370, 2146055452, 949052346, 1029879539
   \              ABF12F62A94C
   \              351C7FEA63BA
   \              3891B6F33D62
   \   00001588   95EA2E78B44F       DD 779654634, 264680527, 3450324585, 3586540547, 241185171, 775985417
   \              0FC6C669CDA7
   \              4403D5C63193
   \              0E6099092E40
   \   000015A0   4C2F15FA0FAF       DD 368725039, 2606501807, 2383590969, 1177115805, 979055387, 1558490582
   \              9B5CB6398E12
   \              5C9D4629331B
   \              3A5BADD65CE4
   \   000015B8   58796C4CBD73       DD 1816942713, 1604828531, 1204924146, 1202931476, 573724473, 671108124
   \              5FA7AEF247D1
   \              471447B35739
   \              22324C1C2800
   \   000015D0   52999A3C437D       DD 2587644569, 3582477181, 315434984, 716282904, 2147710978, 988217590
   \              D58827E812CD
   \              9C182AB17802
   \              800300F63AE7
   \   000015E8   2B360B426380       DD 188885814, 449930112, 4206633273, 1169682230, 568114461, 1153228543
   \              1AD12139FABC
   \              EF3645B7BD1D
   \              21DCDEFF44BC
   \   00001600   1C7B71E1DA21       DD 1910578299, 1103551009, 4156869652, 741731961, 1505835081
   \              41C6CC14F7C4
   \              EE792C353849
   \              59C1        
   \   00001614   94274852050A       DD 1213371431, 280888586, 1687343727, 2354114777, 2801094296
   \              10BED26F6492
   \              F0D98C504E98
   \              A6F5        
   \   00001628   181BDD62B2B6       DD 3714193435, 1781379766, 710825891, 4158226539, 1000684832
   \              6A2D57A32A5E
   \              806BF7D93D20
   \              3BA5        
   \   0000163C   6BDB5752E650       DD 1465019355, 4110476880, 399404209, 1123611461, 98058672, 1770908016
   \              F5006CB117CE
   \              F34542F841B0
   \              05D8E970698D
   \   00001654   0A6CAA80CB8E       DD 2860517996, 2883767182, 83146073, 631039133, 3226525655, 4182620469
   \              ABE2B55904F4
   \              E49D259CDFD7
   \              C050B935F94D
   \   0000166C   39BD21386204       DD 557332925, 1429234180, 3010536838, 435777626, 2100444043, 381077016
   \              55302586B371
   \              705A19F93B8B
   \              7D32C61816B6
   \   00001684   502B26D4595B       DD 651448363, 2861128027, 2037477481, 1840519282, 4167549155
   \              AA8970697971
   \              18726DB4C0E3
   \              F867        
   \   00001698   E1D06C7601D8       DD 1819730384, 332792280, 857437059, 771525389, 3828252789, 408187635
   \              13D67383331B
   \              8B0D2DFC8075
   \              E42E72F31854
   \   000016B0   EBA02B1013E7       DD 722529184, 96277479, 2432146325, 1369061492, 3551339776, 2366226866
   \              05BD9B9590F7
   \              3874519A2500
   \              D3ADC1B28D09
   \   000016C8   F7332CF0A45D       DD 753989427, 73245789, 1751269996, 1677820309, 2617121545, 1921865717
   \              045D426C6862
   \              819564011B09
   \              9BFE57F5728D
   \   000016E0   C5858DA29F87       DD 2376254853, 4188643207, 1641827856, 1338278686, 1413042144
   \              F9A94E1061DC
   \              831E4FC44FE0
   \              5439        
   \   000016F4   02CC6DC6E8AE       DD 1841693388, 1743382702, 75781739, 1251180699, 3321688135, 1492378299
   \              67E9566B0484
   \              809B4A93F047
   \              C5FCE2BB58F3
   \   0000170C   C23A71C06C43       DD 1908458042, 922643523, 3019963070, 2934227111, 1632382782
   \              36FEFABEB400
   \              C0A7AEE42F3E
   \              614C        
   \   00001720   C6C1D0E1A980       DD 3504457409, 1980803456, 2290638284, 484972924, 985844523, 3940424863
   \              76105DCC8888
   \              197C1CE8CB2B
   \              3AC21C9FEADE
   \   00001738   341EAF2FD07B       DD 2939106334, 1192939643, 1795232283, 3598353276, 525978457, 713974824
   \              471A121B6B01
   \              837CD67ACB59
   \              1F5964282A8E
   \   00001750   62CA2F3201E4       DD 791831242, 1390871012, 3974432128, 434152061, 2814224044, 3043564567
   \              52E70580ECE5
   \              A27D19E0A6AC
   \              A7BD1C17B569
   \   00001768   F1F21B9D4C31       DD 463335922, 1128811569, 2611890666, 2793493844, 2720398053
   \              434849EA9BAE
   \              5554A681FAE5
   \              A225        
   \   0000177C   C5DD43A20EEF       DD 1134740957, 3983544047, 4200503594, 596740182, 1485905750
   \              ED70992AFA5E
   \              885623911F56
   \              5891        
   \   00001790   4DA9E48C81A1       DD 3834400169, 1686864289, 3184575421, 1726407436, 379397739
   \              648BC3BDBDD0
   \              E30C66E6266B
   \              169D        
   \   000017A4   209CF3BA7685       DD 4089061532, 809793157, 553101410, 437009710, 3518716586, 1024528881
   \              3044A86220F7
   \              3D2E1A0C5AAA
   \              D1BB11F13D11
   \   000017BC   2984366C9013       DD 913058180, 768380947, 113740644, 3775521787, 659049060, 2758243428
   \              2DCC8B6406C7
   \              E3FBE1094A64
   \              27487464A467
   \   000017D4   ACBC8F8E4CC1       DD 2408492220, 499272897, 191673115, 2307854240, 3748251727, 1226896034
   \              1DC2B31B0B6C
   \              0FA0898FC84F
   \              DF69F2A24920
   \   000017EC   26742DD45C69       DD 768878196, 2102156393, 3230738969, 1788401878, 1218109055
   \              7D4C2A19C091
   \              D8D66A98DE7F
   \              489A        
   \   00001800   3E287F2069F4       DD 2132819496, 1166502388, 4228230295, 307183907, 2909633895
   \              4587AC97FC05
   \              4123124F7D67
   \              AD6D        
   \   00001814   36F43BB90FF8       DD 1001993972, 3572502520, 856249598, 1190727343, 3268306176
   \              D4F054FE3309
   \              0EAF46F96500
   \              C2CE        
   \   00001828   DEBDD4F94762       DD 3573145277, 2079934306, 1483602819, 781391658, 3021028758
   \              7BF9FB83586D
   \              172A2E933D96
   \              B411        
   \   0000183C   60623C7A0D93       DD 1014653026, 343870867, 1574634391, 3330510900, 149117295, 1734581242
   \              147F03975DDB
   \              9034C683596F
   \              08E39BFA6763
   \   00001854   67FF374E8232       DD 927885311, 428376626, 419568673, 4258619130, 3104004, 2044836515
   \              19881C211902
   \              5EFAFDD55D04
   \              002FBAA379E1
   \   0000186C   C6E005B4C84C       DD 95733472, 2910111820, 3848769187, 1784194941, 474150786, 3536517837
   \              AD748EA3E567
   \              A77D6A58F782
   \              1C42FACDD2CA
   \   00001884   668BE054261C       DD 3763627659, 3991152156, 594962643, 1957608242, 3992218211, 835653364
   \              EDE468D32376
   \              BB3274AE6A63
   \              EDF40EF431CF
   \   0000189C   8C5931EC5825       DD 837586009, 3277543461, 2505846421, 1747293699, 668512490, 1115496128
   \              C35B2E95955C
   \              96036825B0EA
   \              27D81EC0427D
   \   000018B4   976EB7A8BD13       DD 3081279342, 1901247763, 1802290624, 2696037581, 64524044, 2365511831
   \              7152C5C06B6C
   \              44CDA0B28F0C
   \              03D8D8978CFE
   \   000018CC   AE9A001CA7FD       DD 1879706, 4136871933, 2823074721, 2059267222, 1735170763, 3771579699
   \              F693B3A1A844
   \              EC967ABD9ACB
   \              676CBD33E0CD
   \   000018E4   6BD5631BD9B8       DD 1662741461, 215865784, 703760860, 922431231, 155702645, 238989401
   \              0CDD89DC29F2
   \              2EFF36FBD575
   \              0947B0590E3E
   \   000018FC   CE651EB2F405       DD 515034725, 244052997, 557429668, 972336781, 1097199099, 2054215334
   \              0E8BB3A42139
   \              AE8D39F4EDFB
   \              4165D6A67A70
   \   00001914   EDA6E06184F6       DD 3764514214, 2358281462, 775733298, 3495298623, 519582366, 1239987157
   \              8C90C0322E3C
   \              063FD056329E
   \              1EF8B3D549E8
   \   0000192C   01CE6D4DD34B       DD 1833763278, 374788939, 17877295, 386410976, 1840061518, 2427746238
   \              1656C92F0110
   \              29E017081C4E
   \              6DAD77BE90B4
   \   00001944   56C5584CE935       DD 1481397957, 3576031541, 1501454090, 2394411885, 1611146829
   \              D5255F0A597E
   \              D36D8EB7264D
   \              6008        
   \   00001958   829E999C6754       DD 2577171102, 1062758228, 4115950109, 1031710877, 2587837284
   \              3F586A1DF554
   \              A89D3D7E4364
   \              9A3F        
   \   0000196C   4F7D417579A7       DD 1098207101, 788036007, 990353026, 2552637554, 447903637, 3153033507
   \              2EF896823B07
   \              287298267795
   \              1AB27923BBEF
   \   00001984   C9F0DC37A097       DD 3694643696, 3962937495, 628017176, 165500998, 1249040988, 3989492828
   \              EC35C818256E
   \              584609DDDA5C
   \              4A72D45CEDCA
   \   0000199C   6C6151DFE819       DD 1373596769, 3478972441, 2935115725, 2598799857, 195476373
   \              CF5C4FCDAEF2
   \              89F19AE6BB95
   \              0BA6        
   \   000019B0   3A9EA57BBD65       DD 2776316574, 3865558373, 2726989386, 1912591761, 1403517663
   \              E6678E4AA28A
   \              D59171FFFADF
   \              53A7        
   \   000019C4   25FA06C3CF13       DD 113452538, 1798164243, 1718088344, 3576302052, 1056395686
   \              6B2DF2986667
   \              09E4D52A51A6
   \              3EF7        
   \   000019D8   C74A40B81042       DD 1085851466, 1366954050, 2357298165, 3498892797, 461457393
   \              517A83F58C81
   \              DDFDD08C47F1
   \              1B81        
   \   000019EC   7CC759235933       DD 1495497927, 2285459763, 4294528977, 756084583, 1401605209
   \              88394FD1FFF9
   \              EF672D10CC59
   \              538A        
   \   00001A00   EB1D6FF0CE38       DD 1878059805, 2891042360, 348520037, 1775512449, 2512382137
   \              AC51FE6514C5
   \              2B8169D4E8B9
   \              95BF        
   \   00001A14   DA39A17EA341       DD 2709445177, 3741688641, 1573312911, 1558756984, 4063251767
   \              DF05D98F5DC6
   \              BE785CE84D37
   \              F230        
   \   00001A28   83CAECC48521       DD 3972301770, 833979681, 125837866, 80926740, 3823998409, 1036094251
   \              31B5222A0780
   \              D81404D295C9
   \              E3ED8B2B3DC1
   \   00001A40   0D2BF2D71639       DD 4074179883, 2760775225, 3155114192, 1342002342, 2797016123
   \              A48E38D0BC0F
   \              54A64FFD143B
   \              A6B7        
   \   00001A54   C65B8AE3FA9D       DD 2330183259, 2440624797, 1211020319, 2276282141, 604736334, 5892928
   \              9178B41F482E
   \              4F1D87AD8B4E
   \              240BEB400059
   \   00001A6C   32426D855132       DD 1837445698, 1143427378, 3241539454, 229303113, 1650526058, 943879772
   \              4427F77EC135
   \              E3490DAA076A
   \              6261765C3842
   \   00001A84   6BDB3531FD92       DD 892431323, 982252946, 610362810, 3575085685, 472741707, 373810102
   \              3A8B65BA2461
   \              7A75D517774B
   \              1C2DE3B61647
   \   00001A9C   2F99045A71A8       DD 73019289, 1497788840, 3980089635, 1523404213, 85261018, 1486943503
   \              59465923ED3B
   \              4DB55ACDFADA
   \              0514F50F58A0
   \   00001AB4   7FC3E8292A91       DD 3895033795, 4069862033, 2094185180, 3936010854, 228872496, 504678777
   \              F295BADC7CD2
   \              C266EA9A5130
   \              0DA4C9791E14
   \   00001ACC   D43C26A0A390       DD 648074300, 4271088528, 3143808809, 4160126155, 906188719, 477911528
   \              FE93B729BB62
   \              7CCBF7F657AF
   \              360359E81C7C
   \   00001AE4   835D3AD4470B       DD 987005789, 2264549131, 1460514813, 2409872790, 3619995241, 718761980
   \              86FAAFFD570D
   \              BD968FA3BE69
   \              D7C46FFC2AD7
   \   00001AFC   BDEC17E4DC51       DD 400866796, 3940015185, 1137594025, 3595194766, 1488616160
   \              EAD74EA943CE
   \              518ED64A7AE0
   \              58BA        
   \   00001B10   05556468CC7E       DD 1684538709, 3759459454, 3458609336, 61589843, 2006564439, 2736284172
   \              E01430B8CE26
   \              C95303ABBE57
   \              7799620CA318
   \   00001B28   A952E84D8FA2       DD 3897403730, 723881890, 104542205, 3716742597, 2587534678, 389488087
   \              2B252FFD063B
   \              FDC5DD88A556
   \              9A3A1DD71737
   \   00001B40   129978988375       DD 2023232153, 2457568117, 496020269, 1430606352, 2363837392
   \              927BAB2D1D90
   \              521055454BD0
   \              8CE5        
   \   00001B54   0621B4536235       DD 3025339937, 4292567605, 1494260581, 2709562645, 2254692548
   \              FFDB9B655910
   \              A515A180E0C4
   \              8663        
   \   00001B68   04F41C667FE4       DD 476447988, 1095139300, 3702995064, 2922125988, 3334501655, 433310466
   \              41463878DCB7
   \              1AA4AE2C7517
   \              C6C0CB0219D3
   \   00001B80   45F1EA677C97       DD 3932636657, 2853469335, 835372092, 1893386010, 1794670074
   \              AA14C43C31CA
   \              C71A70DA7DFA
   \              6AF8        
   \   00001B94   3EC2B9217B25       DD 3105963714, 4128144165, 1743923433, 4153275359, 3216350092
   \              F60E28E967F2
   \              F3DFF78D9B8C
   \              BFB5        
   \   00001BA8   6FA3A4257792       DD 2753916835, 912816018, 588739908, 3787349023, 1682644112, 2020253211
   \              366875442317
   \              5C1FE1BE1C90
   \              644B9E1B786A
   \   00001BC0   7F5B93CAF473       DD 2479521627, 1098052723, 3098209113, 1655593908, 4200799087
   \              4172EB59B8AA
   \              5BB462AE1B6F
   \              FA63        
   \   00001BD4   C431BCD9CC6D       DD 3168388145, 3989425261, 532553906, 3155091589, 1608352415
   \              EDC920B21FBE
   \              E085BC0E829F
   \              5FDD        
   \   00001BE8   DD59ADC5D315       DD 2915425625, 605934357, 637000630, 3031861462, 3854488276, 1499103998
   \              241DDBB625F7
   \              88D6B4B6D2D4
   \              E5BE82FE595A
   \   00001C00   880DCC113AE0       DD 3423701005, 1768241888, 4232064886, 731809278, 125241985, 3139737013
   \              69652F76FC40
   \              85FE2B9E0A81
   \              077795B5BB24
   \   00001C18   47315FB30C57       DD 1605584689, 97651799, 910711474, 2644402740, 1710489275, 654387862
   \              05D25AB23648
   \              62349D9EFEBB
   \              65F32A962701
   \   00001C30   4FF784C0FEF4       DD 2227195895, 1483538164, 3236609982, 1151698444, 4082314880
   \              586CBFBEC0EA
   \              860C44A52E80
   \              F353        
   \   00001C44   E6E26FBF20FE       DD 1874847458, 2939298046, 95152826, 3414201976, 468525554, 3085631186
   \              AF32EABA05AB
   \              9678CB8021F2
   \              1BEDFED2B7EA
   \   00001C5C   21122AA6190B       DD 715530514, 4128250123, 3801645948, 4019280120, 516488124, 2767810411
   \              F610837CE298
   \              58F8EF91FBBC
   \              1EC86F6BA4F9
   \   00001C74   9B3A1EFE0EF3       DD 520002362, 109776627, 1782285354, 3623364599, 2463976316, 4093451415
   \              068B842A6A3B
   \              27F7D7F84B7C
   \              92DD1C97F3FD
   \   00001C8C   75BB60516D98       DD 1615951291, 2619305368, 328971841, 2542646032, 976925417, 3386236171
   \              9C1FB641139B
   \              B310978DB2E9
   \              3A3ADD0BC9D5
   \   00001CA4   5941C5C9BCE0       DD 3318307137, 632470752, 885442400, 1237025062, 222564698, 299562521
   \              25B2C76034C6
   \              812649BB115A
   \              0D44F61911DA
   \   00001CBC   CBEB7622F5AD       DD 1981991915, 374273453, 2019295123, 895267933, 1905353853, 1288597084
   \              164EFF93785B
   \              B45D355C647D
   \              71916E5C4CCE
   \   00001CD4   255C117FAE3E       DD 293545308, 245018174, 1478182027, 908219412, 1420096459, 968640133
   \              0E9A448B581B
   \              54143622F3CB
   \              54A4468539BC
   \   00001CEC   80C57901B96F       DD 2030141637, 3083254127, 1191592003, 975962379, 1137495899
   \              B7C640434706
   \              010B3A2CCF5B
   \              43CC        
   \   00001D00   3731C14CF3AF       DD 3242997553, 503051183, 2505516404, 473337649, 3037137754, 12332755
   \              1DFB25749557
   \              8F311C360B5A
   \              B5072ED300BC
   \   00001D18   7F6063B3D8DD       DD 1672707936, 53663965, 2359023856, 121942416, 2376907214, 757436002
   \              0332D8F08C9B
   \              B1900744B9CE
   \              8DAC8E622D25
   \   00001D30   1E14B9C6B4BD       DD 3116768788, 3148199101, 1513417110, 197792297, 1864463828, 94143686
   \              BBA5E9965A34
   \              12290BCA75D4
   \              6F2184C6059C
   \   00001D48   BE788790ED43       DD 2274410104, 440134979, 2108405168, 3745075031, 993801188, 809990118
   \              1A3BB5B07DAB
   \              4F57DF3933E4
   \              3B3C77E63047
   \   00001D60   5A6AE82C9D4F       DD 3895220842, 1503829327, 3901650852, 1927553489, 321988953
   \              59A277A4E88E
   \              21D172E42959
   \              1331        
   \   00001D74   230369E6BBB8       DD 1776689923, 2364718008, 765475501, 2414653622, 676911200, 2751611814
   \              8CF23AAD2DA0
   \              B0B68FECD860
   \              285843A6A402
   \   00001D8C   99E734308F63       DD 875600359, 3533344611, 3123295861, 4143011974, 1025517732
   \              D29AB675BA29
   \              5886F6F128A4
   \              3D20        
   \   00001DA0   7D0A8604E2D2       DD 2248441098, 4033405650, 1819741728, 345611101, 595974777, 3515304537
   \              F0680E206C77
   \              9B5D1499DA79
   \              23854A59D187
   \   00001DB8   1CD9C15AB552       DD 3243908313, 2024715602, 602521710, 1210961100, 3041613637
   \              78AEC06E23E9
   \              CCCC482D5745
   \              B54B        
   \   00001DCC   A19F7B187A06       DD 2065211807, 4271536646, 57444718, 3515292691, 791424224, 3595866823
   \              FE9A896E036C
   \              1C13D1872CE0
   \              2F2C92C7D654
   \   00001DE4   9B9E3B2DD077       DD 992844702, 135909495, 105498597, 2070275019, 3450562282, 3299536959
   \              0819C7E50649
   \              E3CB7B6566EA
   \              CDABF03FC4AA
   \   00001DFC   5B4049B1           DD 1236360000

   \                                 In  segment NEAR_F, align 1, keep-with-next
   \   static uint64_t const __flash DOUBLE_SCALAR_TABLE[768]
   \                     DOUBLE_SCALAR_TABLE:
   \   00000000   E631A70334F3       DD 2802050609, 3783931123, 491793247, 678715583, 3841524563, 3761136375
   \              E18A2B5F1D50
   \              60BF28740353
   \              E4F962F7E02E
   \   00000018   ACDE8B86A037       DD 2340859102, 205234231, 2962456284, 2428440472, 619758933, 1946909816
   \              0C3B7EDCB093
   \              0F9890BFC555
   \              24F07C78740B
   \   00000030   136623A02391       DD 597693286, 3005293457, 982865829, 1341978041, 2883207867, 695925963
   \              B32157A53A95
   \              F5B94FFC42BB
   \              ABDAFCCB297A
   \   00000048   97C6556CD137       DD 1433180102, 1497944375, 858810444, 2820184633, 171188007, 212806514
   \              5948684C3330
   \              9A39A8181F27
   \              0A342B720CAF
   \   00000060   68C45BCF56B1       DD 1540319428, 2301056689, 2560960186, 1464006524, 3925385115
   \              892726BA98A5
   \              F77C57429F9B
   \              E9F8        
   \   00000074   5A1D340AD0F7       DD 873093661, 4000698615, 351234058, 1078174751, 2229760225, 381893781
   \              EE75680A14EF
   \              A41F404370E1
   \              84E73C9516C3
   \   0000008C   C4110212C0E2       DD 34784273, 3729637602, 901222886, 1368218920, 1498013448, 1156387035
   \              DE4D91E635B7
   \              5D28518DDF08
   \              594910DB44ED
   \   000000A4   12076A0E91D3       DD 1779307015, 2219020755, 1515291598, 2331884112, 1868663573
   \              844383CE5A51
   \              BA508AFD8B15
   \              6F61        
   \   000000B8   2088470E037E       DD 1192108168, 753009534, 2590292540, 524941844, 426181713, 1603827413
   \              2CE2BA3C9A64
   \              FA141F490451
   \              196776D55F98
   \   000000D0   586B6F550505       DD 1867864171, 50398469, 2106578726, 34544213, 2959967944, 3746345333
   \              0301D7267D8F
   \              1A55020F86C8
   \              B06DB175DF4C
   \   000000E8   83907FE5BCBE       DD 2145747856, 1766833342, 1969888103, 2033396042, 1264122092
   \              694F1B67756A
   \              294A7933F8EC
   \              4B58        
   \   000000FC   E99209DB97B6       DD 165407122, 3455162294, 1494172675, 3363441575, 470259359, 304423783
   \              CDF14403590F
   \              0BA7C87A969F
   \              1C0723671225
   \   00000114   4777C496B096       DD 3298183031, 586264726, 1426626400, 1160648565, 4024055326
   \              22F197605508
   \              1775452E361E
   \              EFDA        
   \   00000128   38FBACC80CCC       DD 2898802939, 2047478988, 199613535, 2961078556, 416009107, 618247860
   \              7A0ADC5F0BE5
   \              791CB07ECB93
   \              18CBB6B424D9
   \   00000140   7E03C61170F3       DD 3323035139, 1232695539, 3415659925, 965124440, 3868352811
   \              4979D595CB96
   \              A1583986612B
   \              E692        
   \   00000154   586C8F80F9D6       DD 2407553132, 2119039446, 811380698, 1683132746, 3248603872
   \              7E4DAFDA305C
   \              914A6452C2E0
   \              C1A1        
   \   00000168   3079EB5889C0       DD 3948425337, 2130282944, 1935978649, 980835103, 1479122027
   \              7EF9B0997364
   \              5B1F3A769C6B
   \              5829        
   \   0000017C   236D4FEE8419       DD 1341006701, 1997440025, 1870727519, 1939258377, 1404819563
   \              770E095F6F81
   \              BC097396D86B
   \              53BB        
   \   00000190   42106B2BBA72       DD 1797997072, 728939122, 687982475, 1650317853, 416099134, 267762811
   \              2B72C78B2901
   \              DA1D625D2B3E
   \              18CDBC7B0FF5
   \   000001A8   D3327358598C       DD 1935201074, 89545100, 553603287, 160506975, 3910773118, 243226853
   \              055650D720FF
   \              245F0991A97E
   \              E91958E50E7F
   \   000001C0   87563B756137       DD 997558102, 1510302007, 4168882570, 1682422931, 3276567840
   \              5A05198AF87C
   \              BC9364477520
   \              C34C        
   \   000001D4   0604F9231BFA       DD 4179822084, 1197218810, 1797342245, 1786746007, 3913147949
   \              475C44256B21
   \              94976A7FE62D
   \              E93D        
   \   000001E8   493C86F4459D       DD 2264156476, 556352925, 3294941156, 1164154055, 3287589299
   \              2129CFE4C464
   \              94C74563A1B3
   \              C3F4        
   \   000001FC   34FE612461F3       DD 1629762814, 4097991155, 517545693, 4192248831, 208484436, 2292704483
   \              F4421EDD1ED9
   \              A3FFF9E03854
   \              0C6DE4E388A7
   \   00000214   1531D3FD910C       DD 3556578609, 3390476556, 610869181, 3613547677, 3197584988
   \              CA161FBD2469
   \              5C9DD762465C
   \              BE97        
   \   00000228   59F473F71CD3       DD 1945590260, 715529427, 2737231403, 2186106723, 1356472506, 436921246
   \              2AA6D62BA326
   \              5763824D20BA
   \              50DAE39E1A0A
   \   00000240   C3B91EE4C848       DD 518308793, 852543560, 2631735494, 1815512848, 801084890, 3844544276
   \              32D018C69CDD
   \              87106C3695DA
   \              2FBF1714E527
   \   00000258   E9C6B52CA41F       DD 3039619526, 1740612639, 2292192372, 1311037088, 3824903718
   \              67BF147488A0
   \              D6A04E246626
   \              E3FB        
   \   0000026C   CA0A49A6191E       DD 1235667466, 2432899358, 3598684074, 2859282530, 1732806901
   \              91038FAAD67F
   \              3062AA6D88F5
   \              6748        
   \   00000280   5A99C2E83824       DD 3270007449, 1269250084, 2369106708, 1080766417, 3933375169
   \              4BA7B3148D35
   \              2FD1406B8AC1
   \              EA72        
   \   00000294   7B1BA708160E       DD 2802350875, 830150158, 299037218, 2116265065, 4170477056, 3150852514
   \              317BF22211D2
   \              A4697E236E00
   \              F89431A2BBCE
   \   000002AC   96FA22A116BA       DD 581015290, 3692172986, 1393159707, 942121764, 605022613, 1672394183
   \              DC12EE1B5309
   \              A3243827E995
   \              240FB5C763AE
   \   000002C4   B89BF9FCB1B0       DD 4194089115, 3977687472, 1614512457, 47145467, 2985396076, 1630508171
   \              ED168149603B
   \              61FB02CF876C
   \              B1F1948B612F
   \   000002DC   32AF4A5E8813       DD 1247687343, 3868887059, 4232649453, 920992421, 450443153, 3588669731
   \              E69A1AEDFC49
   \              3AA536E53791
   \              1AD9C123D5E6
   \   000002F4   0DB15DA512CA       DD 1571098033, 4264301258, 792728823, 1988477941, 3841358109
   \              FE2C14F72F40
   \              C3F57685791D
   \              E4F6        
   \   00000308   5A9BC3748521       DD 3279182491, 1277265185, 2555731863, 201662895, 1405803131, 342008105
   \              4C215F979855
   \              21AF0C05DA7B
   \              53CAA1291462
   \   00000320   2C1BD645AB63       DD 3594857499, 196258659, 3969432455, 1468253489, 1616755868
   \              0BB2BB87EC98
   \              C5315783BC9C
   \              605D        
   \   00000334   EF53737D6719       DD 1937633107, 820537113, 1241088697, 3411153379, 1974560656
   \              30E882B949F9
   \              11E3CB526790
   \              75B1        
   \   00000348   E99ECDBA6574       DD 3451578782, 1168991604, 4276918353, 274904877, 3427175560
   \              45AD9851FEEC
   \              B72D10628C88
   \              CC46        
   \   0000035C   9A094502A1F2       DD 1157798409, 2012455410, 1394753758, 2862272746, 398272798
   \              77F340DE5322
   \              D0EAAA9A291E
   \              17BD        
   \   00000370   A0A0C2F8D7EF       DD 3271073952, 3768768495, 539064206, 980685317, 1791791327, 2967449751
   \              E0A2778E2021
   \              12053A7490DF
   \              6ACCB097B0DF
   \   00000388   B1F389A703B6       DD 2309468659, 2144732086, 3405829830, 290609052, 1662536099
   \              7FD6D6C6CB00
   \              579C115249A3
   \              6318        
   \   0000039C   743B6340DA01       DD 1665168443, 235723265, 3953805097, 3577736971, 338847142, 3649169242
   \              0E0C4729EBAA
   \              EF0BD53F65A6
   \              1432E75AD981
   \   000003B4   5D6F45326F2A       DD 1160928623, 962096938, 244809932, 2055612637, 2767621408, 412346433
   \              395880CC0E97
   \              28DD7A868D20
   \              A4F6E8411893
   \   000003CC   30B550D204B6       DD 1355952309, 1270154422, 4089280154, 963193134, 1435982854
   \              4BB5769AF3BD
   \              292E39695C06
   \              5597        
   \   000003E0   756F5FB87BA2       DD 1605924207, 124943266, 2396467709, 134186703, 3426066928, 4015520320
   \              077231FD8ED7
   \              86CF07FFA1F0
   \              CC35FA40EF57
   \   000003F8   18FC87423A70       DD 2269255932, 1886730864, 875271996, 1633244386, 442097542, 1521079951
   \              7075973C342B
   \              54E26159DF86
   \              1A59D68F5AA9
   \   00000410   4468F5E49E9F       DD 4125377640, 999202463, 3590995235, 779391252, 3245792075, 346143006
   \              3B8E3D23D60A
   \              91142E74DB4B
   \              C176B91E14A1
   \   00000428   AE6DD69A1A63       DD 3600461421, 1442388579, 2065394983, 4095967794, 1605151485
   \              55F96D277B1B
   \              8232F423AAFD
   \              5FAC        
   \   0000043C   1F472ACF8968       DD 718217031, 2041940328, 4254099892, 3299106679, 1001059557
   \              79B569B4FD90
   \              5F77C4A4F4E5
   \              3BAA        
   \   00000450   AAB68A7A9AB9       DD 2323294902, 2729220793, 418711937, 1416022864, 1908027909
   \              A2AC098118F5
   \              CB5054663205
   \              71BA        
   \   00000464   A2773E6BBBE4       DD 1047241335, 3927686116, 837456077, 1549104019, 16747, 1515261309
   \              EA1B90CD31EA
   \              73935C55416B
   \              00000D7D5A51
   \   0000047C   B041464C2BBF       DD 1179430977, 117386175, 3491792850, 2141972278, 731680461, 1120578317
   \              06FF87D2D020
   \              E7367FAB8ECD
   \              2B9CAB0D42CA
   \   00000494   6D38B2B500A7       DD 2998234424, 1987510439, 74358967, 2654040848, 289045128, 3203911882
   \              7677A0B7046E
   \              73109E317A88
   \              113AD0CABEF7
   \   000004AC   A354599288BD       DD 1502782292, 3573778621, 1054714190, 1736675668, 86401527, 3785238752
   \              D503A94E3EDD
   \              9154678361F7
   \              052628E0E19E
   \   000004C4   EDF64C2844E5       DD 1277750774, 3539354853, 488227570, 3677727549, 1567826248
   \              D2F6C2F21D19
   \              AB3DDB352148
   \              5D73        
   \   000004D8   80F5B8354714       DD 3090514165, 1745635092, 3145780460, 2742350466, 3346719004
   \              680CCCECBB80
   \              F282A374E11C
   \              C77A        
   \   000004EC   609B789E45F2       DD 2023645339, 1503348210, 282220413, 2239177137, 475302747, 3025420255
   \              599B577D10D2
   \              21B185778B5B
   \              1C543FDFB454
   \   00000504   A7267BAE4ED2       DD 2075043622, 756764370, 1008034449, 3085443202, 3593871875
   \              2D1B62913C15
   \              2082B7E82203
   \              D636        
   \   00000518   A900D3C7E523       DD 3553077504, 336913699, 471671721, 2091075989, 1021841332, 1302603358
   \              141423A91C1D
   \              49957CA30FB4
   \              3CE8265E4DA4
   \   00000530   EF36ACA9EBBC       DD 2896817974, 2038557628, 3049232395, 1320864229, 4103910820
   \              7981980BB5BF
   \              C9E54EBAB5A4
   \              F49C        
   \   00000544   C1DCABD2340F       DD 2882716124, 633746447, 1062513916, 3151043773, 539947002, 3010027148
   \              25C6ACFC3F54
   \              1CBDBBD1EFFA
   \              202E5E8CB369
   \   0000055C   6B7C6721C9F1       DD 1730243452, 2990524913, 4286364921, 4160387835, 787213279
   \              B23FBCF9FF7C
   \              7AFBF7FAEBDF
   \              2EEB        
   \   00000570   F85EA1116BEF       DD 2702309470, 1897229295, 4112683052, 462412173, 1649514385
   \              7115902CF522
   \              D98D1B8F9791
   \              6251        
   \   00000584   EBAD6B28D8ED       DD 1797843885, 235002093, 1827728022, 6907861, 3026287554, 3409834157
   \              0E01EA966CF0
   \              67D500697BC2
   \              B461F0ADCB3D
   \   0000059C   A065323D4D9C       DD 842899557, 1105350044, 828931335, 1352301762, 47943467, 607257895
   \              41E27D073168
   \              7CC2509A8F2B
   \              02DB05272432
   \   000005B4   F85992436D2B       DD 2453928025, 493776171, 1757634800, 2010460266, 592561640, 2244342697
   \              1D6E60F068C3
   \              306A77D5C5E8
   \              2351F3A985C5
   \   000005CC   CCFC6F56928F       DD 1867959548, 935629455, 453600552, 1283717489, 187905877, 3435627500
   \              37C465281B09
   \              F9714C833755
   \              0B3383ECCCC7
   \   000005E4   1BE2E293C64F       DD 3801291746, 3121137231, 1182963348, 1491257004, 2671108963
   \              BA0896944682
   \              C6AC58E2E363
   \              9F35        
   \   000005F8   D170B000B333       DD 2952843632, 343192371, 711904749, 1150638854, 2417357168, 2006056682
   \              1474CDED2A6E
   \              5B064495F170
   \              9015FEEA7791
   \   00000610   C35AD12FF603       DD 3509568346, 1936455171, 2771943462, 640855484, 3781786703
   \              736B8026A538
   \              ADBC26327C4F
   \              E169        
   \   00000624   4C48956EE32D       DD 2507033672, 2248205101, 1323937278, 228942854, 2776892458
   \              8600ADFE4EE9
   \              64060DA5042A
   \              A584        
   \   00000638   7353BF45D7F4       DD 3208999763, 883152884, 1535915, 2370819326, 1435770702, 355606248
   \              34A36FAB0017
   \              D4FE8D4F1F4E
   \              55941EE81532
   \   00000650   40A481F301EF       DD 2180202660, 1728512495, 2330790824, 209550433, 3653229014
   \              67070BA88AED
   \              7C610C7DD9D6
   \              D9BF        
   \   00000664   31317328AC65       DD 1932013873, 3810241637, 882072121, 2867378577, 1181547452, 407341766
   \              E31B5A393493
   \              B991AAE8FBBC
   \              466C8AC61847
   \   0000067C   D54E250DDE4F       DD 621663566, 507567695, 1704871621, 4274327044, 1636737044, 134973308
   \              1E4046C5659E
   \              0E04FEC5A014
   \              618E877C080B
   \   00000694   D883FE64C4F7       DD 4268021891, 1720239351, 1462545339, 981680454, 2731022153
   \              6688ABBB572C
   \              41463A831749
   \              A2C8        
   \   000006A8   812076377348       DD 1983349024, 114127688, 1932961865, 3822979953, 2447070148, 915681105
   \              06CDA8497336
   \              0B71E3DE53C4
   \              91DB2F513694
   \   000006C0   4D886ABFADF6       DD 1790922120, 2751049206, 2156395158, 714740811, 3079297871
   \              A3F9FA968087
   \              144B2A9A5B4F
   \              B78A        
   \   000006D4   FEFCFE498BAB       DD 4266262268, 378702763, 467929734, 1428289450, 128516503, 2204710160
   \              16920A861BE4
   \              F7AA55210197
   \              07A935108369
   \   000006EC   6EA61FC6380E       DD 533098150, 3124901902, 1304363140, 3105408823, 523715733, 2743115786
   \              BA4200844DBF
   \              C737B9184495
   \              1F37A00AA380
   \   00000704   6956B834AA07       DD 3090442582, 1875749383, 323417206, 3563262657, 3034273417
   \              6FCDF4761346
   \              12C1D4635689
   \              B4DB        
   \   00000718   131674DC7F32       DD 1960579862, 2002681650, 4079174080, 126453800, 993953503, 339972259
   \              775E41C0F323
   \              8828078986DF
   \              3B3E90A31443
   \   00000730   C5E4E1E9604C       DD 3790194148, 1891393612, 2230387, 309744350, 2650082629, 678739046
   \              70BC08730022
   \              52DE12760D45
   \              9DF5BC662874
   \   00000748   61F415014585       DD 352412148, 594494853, 830608610, 1006260221, 1694865221, 2093558369
   \              236F14E23182
   \              4FFD3BFA9745
   \              65052A617CC9
   \   00000760   F72A090E0E92       DD 151975722, 799936146, 2622475323, 644312021, 1959908423, 571212553
   \              2FAECC3B9C4F
   \              6BD52667D447
   \              74D10309220C
   \   00000778   86E7E9865887       DD 3917907687, 1715820679, 3631615452, 1097119972, 2215635811
   \              66450DDCD876
   \              B8E44164EB63
   \              840F        
   \   0000078C   A86F5517CADE       DD 1427613807, 2473708254, 3652463724, 3972096185, 981402574
   \              93712C6CD9B4
   \              60B9ECC103CE
   \              3A7F        
   \   000007A0   366C4CAE86D6       DD 1286485612, 3711993558, 662971699, 459444419, 2812340267, 340720850
   \              DD4025332784
   \              90C31B62E82B
   \              A7A0FCD2144E
   \   000007B8   D31ECA101925       DD 3390100254, 375527717, 417466609, 2849820977, 3702637902, 1519450494
   \              166208F118E2
   \              D131A9DCC54E
   \              DCB1F97E5A90
   \   000007D0   9D99C8747331       DD 3363085721, 2160358193, 1772620629, 1862670901, 2653558213
   \              80C40B5569A8
   \              1A356F0615C5
   \              9E2A        
   \   000007E4   BF610F6A45F4       DD 258654049, 304236020, 688942232, 2244588671, 1482731785, 2652238864
   \              12226C982910
   \              B47F85C9B109
   \              5860F4109E15
   \   000007FC   9A374F371678       DD 1329044023, 4136507000, 769061981, 2912626748, 742871399, 2502584890
   \              F68EF45D2DD6
   \              283CAD9B5167
   \              2C476A3A952A
   \   00000814   AA0023B75365       DD 599239168, 2752271205, 1429388326, 899075618, 2780866750, 2599396719
   \              A40CBC265532
   \              CE223596A8BE
   \              A5C0A56F9AEF
   \   0000082C   127A4FA3E67F       DD 1336087162, 2842945151, 2488173626, 1525184596, 1014441940
   \              A973843A944E
   \              78545AE827D4
   \              3C77        
   \   00000840   7EA475112CE6       DD 1964080804, 1224355046, 2906373020, 2076872196, 1919912165
   \              48FABB9CAD3B
   \              8E047BCA88E5
   \              726F        
   \   00000854   39E4D5742286       DD 3581164004, 2688230022, 859296678, 33577299, 2964723497, 887537825
   \              A03BD3A63337
   \              595302001729
   \              B0B6C0A134E6
   \   0000086C   D767514BC6B4       DD 1363924839, 4007118516, 4185884980, 3891378014, 180229070, 302929063
   \              EED78934F97F
   \              B75EE7F113CE
   \              0ABE54A7120E
   \   00000884   107A6C8811DF       DD 1820856442, 2054033887, 1666160237, 163135639, 1346684209
   \              7A6E966D634F
   \              409709B9C531
   \              5044        
   \   00000898   B73A55229FC6       DD 1428338490, 1758764998, 2353284710, 1776457165, 3650724388
   \              68D446668C44
   \              95CD69E2A224
   \              D999        
   \   000008AC   4C5F542CA76F       DD 1412189279, 2338170735, 335513921, 1787292852, 1899231864
   \              8B5D894113FF
   \              ECB46A87FA78
   \              7133        
   \   000008C0   02B445640926       DD 1164182196, 790104358, 2468105676, 1390259623, 818353552, 1856965921
   \              2F184DCC931C
   \              ADA752DD1590
   \              30C70D216EAF
   \   000008D8   1826EC23C2A2       DD 3961722918, 21938850, 1135824342, 2886055444, 2971185689, 360369146
   \              014E4DD643B3
   \              B614AC05B219
   \              B118CBFA157A
   \   000008F0   10994AD0F4B8       DD 1255149721, 3840079032, 2728005304, 180308557, 3047074591
   \              E4E20EB8A29A
   \              4A4D0ABFAB1F
   \              B59E        
   \   00000904   2B855F8569ED       DD 1602562949, 1919445485, 466770372, 2272856597, 3461766546
   \              726859C41BD2
   \              0A1587795D92
   \              CE56        
   \   00000918   8A00BCF58442       DD 3170208256, 396657730, 595670587, 31791442, 1896718458, 590794874
   \              17A4363B2381
   \              195201E5A07A
   \              710DD07A2336
   \   00000930   4CB2DC71F2FB       DD 3698412722, 3488346875, 1277409449, 796545351, 3571675500
   \              CFEBB8A94C23
   \              51472F7A716C
   \              D4E3        
   \   00000944   2A0777DB9806       DD 2010851847, 3500185606, 1089001682, 1832917732, 1682138062
   \              D0A0D8D240E8
   \              1AE46D4063CE
   \              6443        
   \   00000958   72FD4701CAE0       DD 1191277309, 1408879328, 2379930707, 1490644685, 4090943126
   \              53F9DC538DDA
   \              6ECD58D9D696
   \              F3D6        
   \   0000096C   820415029CE2       DD 352485892, 339975394, 1866506386, 594296406, 1938576241, 2727082492
   \              1443A0926F40
   \              3E56236C5371
   \              738CF9FCA28B
   \   00000984   7EE764F80FEE       DD 1694007015, 2592149486, 1327012164, 3206669174, 3500840436
   \              9A8199444F18
   \              E376BF2195F4
   \              D0AA        
   \   00000998   56BC2838CC24       DD 674780860, 1634782244, 3613720437, 2650556711, 1067638802, 578724182
   \              6170FF75D764
   \              49279DFCE012
   \              3FA2A156227E
   \   000009B0   E087622C3665       DD 1647108231, 2916955749, 128264286, 1195195370, 220925618, 3233384174
   \              ADDD285E07A5
   \              3BEA473D0EB2
   \              0D2B86EEC0B9
   \   000009C8   18ED40DD84C7       DD 1088231661, 2028307655, 2689586440, 3584933680, 3046895035
   \              78E5D508A04F
   \              BF30D5ADEDBB
   \              B59B        
   \   000009DC   ED5A1C6A5BA1       DD 476769626, 3185269665, 634413004, 1065968409, 1247345515, 4253107450
   \              BDDB5FCC25D0
   \              63193F89FB6B
   \              4A5844FAFD81
   \   000009F4   6343DB2F07E5       DD 3677315907, 1834682341, 1185170910, 1340727770, 4135192168
   \              6D5B45DE46A4
   \              E1DA4FE90668
   \              F67A        
   \   00000A08   5C9F23B15159       DD 598826143, 1471304025, 2181704204, 1346607424, 1862589109
   \              57B22A0C820A
   \              99405043DAB5
   \              6F04        
   \   00000A1C   B9B262F4033D       DD 1660205490, 3491431229, 3885934081, 1863385083, 10208791, 2424230810
   \              D01BA601E79E
   \              FFFB6F10C617
   \              009BD39A907E
   \   00000A34   FF2F333BD400       DD 859569967, 1651364864, 624757406, 4240371818, 2057027292, 1530475565
   \              626D0A9E253D
   \              F06AFCBEBEDC
   \              7A9B342D5B39
   \   00000A4C   6A7A2D1BCC9A       DD 756771450, 2703543450, 3135222882, 2193710256, 780983965, 3606164129
   \              A124B462BADF
   \              5CB082C1DE9D
   \              2E8CB2A1D6F1
   \   00000A64   81BC7C3F5294       DD 2084536764, 2751943316, 80415631, 952881924, 4197897179, 1116222803
   \              A4070B8F04CB
   \              D30438CBD3DB
   \              FA3635534288
   \   00000A7C   F93459FE342E       DD 1509882164, 481899566, 2442668660, 397416834, 2073912236, 1512652494
   \              1CB92A749198
   \              198217B063AC
   \              7B9D3ECE5A29
   \   00000A94   4EC2530BF0A4       DD 1393249986, 2678124708, 1628465581, 3059132317, 2049321561
   \              9FA069AD6110
   \              A79DB6562A59
   \              7A26        
   \   00000AA8   15B0D6D0F8F4       DD 3603961264, 1877407988, 442322512, 741332836, 93098268, 615564551
   \              6FE64E501A5D
   \              D7642C2F911C
   \              058CC50724B0
   \   00000AC0   45AE92FE82E4       DD 2466137518, 2202567396, 323168097, 1758507035, 2484571020, 246196911
   \              834827611343
   \              B01B68D08B8C
   \              9417AAAF0EAC
   \   00000AD8   7D01006D3A93       DD 7175425, 306068115, 931132220, 3975347817, 1141397579, 1338597547
   \              123EF33C377F
   \              FE69ECF2584B
   \              440860AB4FC9
   \   00000AF0   56541EE4445B       DD 518280788, 719078491, 3520109203, 1233741852, 2951340982, 2035324313
   \              2ADC9A93D1D0
   \              681C4989E3B6
   \              AFE995997950
   \   00000B08   1C15EE86FBBE       DD 4001766421, 2138045374, 3594066725, 785548703, 2310450471
   \              7F6F1B25D639
   \              859F2ED2AD27
   \              89B6        
   \   00000B1C   D5225E8B7C79       DD 1586222370, 3687742585, 3377014794, 1710280020, 1359583720
   \              DBCE280AC949
   \              CD5465F099E8
   \              5109        
   \   00000B30   373BCE7D7314       DD 3464312635, 2140500756, 3132133106, 1261178532, 1543874779
   \              7F958EF2BAB0
   \              0EA44B2CA8DB
   \              5C05        
   \   00000B44   C08B2D7C7697       DD 763150475, 592475799, 1175036138, 405558712, 3791960629, 4260323814
   \              2350A0EA4609
   \              55B8182CBA35
   \              E20461E6FDEF
   \   00000B5C   59035E4D598B       DD 1582127363, 673601931, 4267934767, 2875367801, 2016034771
   \              2826842FFE63
   \              A179AB623FD3
   \              782A        
   \   00000B70   A0F379E51A19       DD 2045092083, 3538950681, 3593993122, 263505597, 539018064, 4227812377
   \              D2F0FBA2D637
   \              C6BD0FB4C350
   \              20204C19FBFF
   \   00000B88   23C0C3D29008       DD 3285328832, 344297480, 2618961493, 1710062216, 2214204107, 494459636
   \              14852E559C1A
   \              7A8865ED12CB
   \              83FADAF41D78
   \   00000BA0   09CA01BCD11B       DD 29100490, 1532285211, 925918485, 1425925975, 274424743, 2305970737
   \              5B5465153730
   \              E75754FD63A7
   \              105B52318972
   \   00000BB8   DA994ADC1F39       DD 1255987865, 1898782521, 3920359339, 3042181230, 3175895937, 81629051
   \              712DEFABE9AB
   \              006EB5545381
   \              BD4C8F7B04DD
   \   00000BD0   554931992B3A       DD 832132425, 2563910458, 1800868399, 1668961246, 1284692579
   \              98D2122F6B57
   \              53DE637ADA63
   \              4C92        
   \   00000BE4   D69B83670DF6       DD 2204620443, 337972726, 594487957, 4131224444, 2992984218, 3159057912
   \              14252A95236F
   \              7B7CF63D509A
   \              B26565F8BC4B
   \   00000BFC   2E36085271F7       DD 139603510, 890532343, 1862296137, 3488214380, 839183249, 1007923106
   \              351462496F00
   \              ED6CCFE9EB91
   \              3204AFA23C13
   \   00000C14   F1C8E09A535B       DD 3768250824, 3588117339, 1836117384, 439331359, 544769853, 2375480282
   \              D5DEED886D70
   \              AA1F1A2F873D
   \              2078F3DA8D96
   \   00000C2C   BEDB5C73CE1D       DD 1551089371, 2745290269, 1102820359, 3041847941, 2051075119
   \              A3A1B40741BB
   \              EA85B54EEC2F
   \              7A40        
   \   00000C40   22E39DD769CB       DD 2648122083, 3604310475, 93485930, 279770744, 2361453061, 667295105
   \              D6D57B6A0592
   \              F67810ACEA05
   \              8CC01D8127C6
   \   00000C58   04E2F59975C9       DD 4120446178, 1471247817, 2461378061, 1333477564, 2068232346
   \              57B1A60D92B5
   \              40BC4F7BB89A
   \              7B46        
   \   00000C6C   1F645143720E       DD 1363353444, 3425333774, 3448036693, 8428060, 1798702487, 101620239
   \              CC2ADD55CD84
   \              9A1C00800597
   \              6B369A0F060E
   \   00000C84   E5DD78E377D4       DD 2028201437, 342652884, 1661733914, 3935301163, 3381811981
   \              146C0C1A630C
   \              EE2BEA8F5B0D
   \              C992        
   \   00000C98   A06D4B16F060       DD 1259774061, 1193865312, 1666917144, 3026194512, 409235611, 612693800
   \              47282318635B
   \              1050B460709B
   \              1864F7282484
   \   00000CB0   11DB5232D2A2       DD 1379013083, 3190739618, 601700955, 1680200959, 24833886, 4035349513
   \              BE2E3A5B23DD
   \              D4FF6425EF5E
   \              017A8C09F086
   \   00000CC8   D5EEADC6D1E1       DD 2915489262, 657707489, 4051666921, 2788285257, 3578615591, 920081358
   \              273387E9F17F
   \              DB49A6315727
   \              D54D53CE36D7
   \   00000CE0   F5376C4A17FB       DD 1816851767, 1159534587, 500521732, 499928417, 2369672347, 196664844
   \              451D5B041DD5
   \              4D611DCC549B
   \              8D3EDE0C0BB8
   \   00000CF8   2C3D7159CA12       DD 1901669437, 800246290, 4223868141, 3631714639, 2521845008, 419957153
   \              2FB21CEDFBC3
   \              914FD8774D10
   \              965009A11908
   \   00000D10   77E39702D65A       DD 2533521379, 1153291866, 2336948730, 320429159, 1334105119
   \              44BD01FA8B4B
   \              5C671319D41F
   \              4F84        
   \   00000D24   41A5E69A4508       DD 3868869029, 1449018632, 1640482928, 1863195803, 3970093820
   \              565EC87061C7
   \              1C9B6F0ED2FC
   \              ECA2        
   \   00000D38   152AE2575480       DD 3797357866, 2131121280, 982021040, 4205485948, 3045732938
   \              7F0673B03A88
   \              9F7CFAAA324A
   \              B58A        
   \   00000D4C   DB8D43FCA7A2       DD 1140644749, 1855825826, 2526705922, 4079532505, 1319834458
   \              6E9D7902969A
   \              B9D9F328135A
   \              4EAB        
   \   00000D60   5F7C87F8AAFE       DD 2281201532, 3012209406, 443248434, 1777050878, 3033693372
   \              B38A6F321A6B
   \              A4FE69EB7CBC
   \              B4D2        
   \   00000D74   F6C65607F9E7       DD 1443362502, 2809461223, 657486526, 3369409968, 1007765987, 868387834
   \              A77472BE2730
   \              1DB0C8D549E3
   \              3C118BFA33C2
   \   00000D8C   8CD4161F70DA       DD 371166420, 419328218, 1985634802, 1595946683, 1143692608, 475417793
   \              18FE61F2765A
   \              36BB5F205D40
   \              442B4CC11C56
   \   00000DA4   902796F7C956       DD 2532806695, 1348258134, 1029552947, 1185888604, 1645885620
   \              505CBB333D5D
   \              395C46AF38B4
   \              621A        
   \   00000DB8   0CE65BB778B4       DD 1538723046, 766081204, 497324936, 1968884337, 1441295864, 1190323006
   \              2DA993881DA4
   \              CA71755A6DF8
   \              55E8E33E46F2
   \   00000DD0   BE245CB7454D       DD 1555545636, 4233839949, 2374987026, 1742686166, 2475264685
   \              FC5B6D128D8F
   \              47D667DF8AAD
   \              9389        
   \   00000DE4   22487A1ED13E       DD 2048795208, 2311246142, 67117468, 1674862809, 1821810253, 4172679890
   \              89C2219C0400
   \              60D963D49E4D
   \              6C960AD2F8B6
   \   00000DFC   4D5D4DF689ED       DD 1307987293, 1174374893, 535744602, 3867456751, 688671577, 4036406710
   \              45FFD05A1FEE
   \              B4EFE6844B59
   \              290CADB6F096
   \   00000E14   BC3D97FF1C96       DD 2550119485, 1985354902, 1254491006, 291393969, 465830553, 3647644094
   \              7656037E4AC6
   \              51B1115E0299
   \              1BC4A1BED96A
   \   00000E2C   E0A17169596C       DD 1902764193, 1806457196, 1140154251, 813801848, 482779232, 2613650896
   \              6BAC5F8B43F5
   \              A1783081A060
   \              1CC625D09BC9
   \   00000E44   2DB68E1D2931       DD 2384276918, 3575458097, 1878755054, 772469173, 986835748, 801992060
   \              D51D86EE6FFB
   \              F1B52E0AEB24
   \              3AD16D7C2FCD
   \   00000E5C   981533813943       DD 864131093, 1844525379, 3253961033, 3787852546, 98116655, 3732860033
   \              6DF18149C1F3
   \              0B02E1C6242F
   \              05D9EC81DE7E
   \   00000E74   7510396112B8       DD 962688272, 3345683128, 618183258, 2656339075, 672051931, 982160368
   \              C76BBA5A24D8
   \              84839E54B2DB
   \              280E93F03A8A
   \   00000E8C   317B6C511235       DD 1817260411, 968692277, 2997483785, 3282016934, 766107270, 51542935
   \              39BDF909B2A9
   \              9AA6C39FDE86
   \              2DA97B970312
   \   00000EA4   91717F546169       DD 2136248689, 3542573417, 2078457434, 3541999015, 3379156739
   \              D327BE5A7BE2
   \              9DA7D31ED703
   \              C969        
   \   00000EB8   8A4EBB1FDF3B       DD 3139406414, 83943227, 2239322391, 3926247286, 2463142725, 76903849
   \              050059178579
   \              C776EA059345
   \              92D075A90495
   \   00000ED0   BE352DAAF8DE       DD 766164533, 3580360926, 2833266123, 943697205, 3151248726, 3107274418
   \              D56735CBA8E0
   \              AD35383F3D56
   \              BBD43EB2B935
   \   00000EE8   0C5A21869532       DD 562433114, 1387500850, 1841217598, 4192517332, 2813536156
   \              52B3C03E6DBE
   \              BCD4F9E4279C
   \              A7B3        
   \   00000EFC   B0B44B0D80C0       DD 1259188404, 3791618240, 2361783990, 1263870485, 466800198
   \              E1FFF6B68CC5
   \              22154B55CE46
   \              1BD2        
   \   00000F10   4236B39CEB25       DD 3013362230, 3490245413, 792898044, 994895291, 487931293, 3790752104
   \              D008A9FC2F42
   \              E5BB3B4C3D9D
   \              1D154968E1F2
   \   00000F28   C5B94BC42CB1       DD 1271186873, 1040329905, 3370998355, 2316423201, 1488897173
   \              3E025A53C8ED
   \              D0218A11C495
   \              58BE        
   \   00000F3C   3FB2560D6012       DD 1443708850, 1884971026, 4097857618, 2981359571, 1552665810
   \              705A5852F440
   \              EFD3B1B3CCD2
   \              5C8B        
   \   00000F50   E0C3BA7C0F63       DD 3128746179, 3644591971, 1049877434, 863475915, 2148306568
   \              D93CDBBA3E93
   \              98CB33778E88
   \              800C        
   \   00000F64   68CF7A9FBCCE       DD 2057267407, 2671688910, 1469775464, 3753751721, 2111053164
   \              9F3EFE68579A
   \              B4A9DFBD1D6C
   \              7DD4        
   \   00000F78   274E4E1B410C       DD 1310402382, 939671820, 217111298, 1680088439, 3343638051, 796688691
   \              3802DB020CF0
   \              1D776424DE23
   \              C74B81332F7C
   \   00000F90   952E5ED1FD83       DD 1590793518, 4089707907, 2748244859, 1947934088, 1183041167
   \              F3C3E37BA3CE
   \              1D88741BC68F
   \              4683        
   \   00000FA4   AE6474E191E1       DD 1960947300, 259690977, 209771934, 4091837476, 965007169, 1782174290
   \              0F7ADD9E0C80
   \              7C24F3E4D741
   \              3984D2526A39
   \   00000FBC   B97B4B3EA195       DD 1262401915, 229220757, 854178113, 82590529, 298885084, 1021176368
   \              0DA9B94132E9
   \              3B4104EC9FDC
   \              11D0EA303CDD
   \   00000FD4   D5E5F92FCE05       DD 4180661733, 2313211397, 695077205, 2726540950, 1311899843
   \              89E00955296E
   \              B696A28300C3
   \              4E32        
   \   00000FE8   B32C44ECFBBA       DD 1156363052, 2117335994, 2427256883, 3980133271, 190759044
   \              7E33003390AD
   \              0397ED3CC084
   \              0B5E        
   \   00000FFC   BB265C8E2E9D       DD 1552857894, 3080531613, 2791785819, 1331409237, 318499997
   \              B79D455BA667
   \              B1554F5BEC9D
   \              12FB        
   \   00001010   8D494D0DF6BB       DD 1292733769, 983955131, 1885722635, 212226797, 3575410563, 3079898963
   \              3AA5D80B7065
   \              52ED0CA66F83
   \              D51C8753B793
   \   00001028   F9F2A6024AC1       DD 2785212914, 1097091777, 1673760637, 2216836429, 2341671554
   \              41648F7D63C3
   \              3D4D84221282
   \              8B93        
   \   0000103C   7B4B710547B5       DD 1896184651, 375343029, 3550453781, 2620637697, 1966524577, 376188333
   \              165FA015D39F
   \              C2019C33C8A1
   \              75362DAD166C
   \   00001054   3CA4BE718511       DD 3195092132, 3021571345, 1164744898, 481576536, 1200878174
   \              B41998C2456C
   \              46581CB4F25E
   \              4793        
   \   00001068   1BA7FE1A2F1C       DD 4263123879, 486551324, 3785521495, 2677987041, 675441627, 157150432
   \              1D007957E1A2
   \              D6E19F9E6BDB
   \              2842ECE0095D
   \   00001080   01D6FC103412       DD 4228907478, 3850187794, 3652345497, 1209820064, 230697637
   \              E57D5E99D9B2
   \              63A0481C2AA5
   \              0DC0        
   \   00001094   B6BAC7564683       DD 3344348858, 2045593219, 615449725, 867598965, 3816472833, 1887445010
   \              79ED047D24AF
   \              827533B6C101
   \              E37A20127080
   \   000010AC   45E5418B00CE       DD 1099646437, 205062350, 2270662127, 999069504, 2086035858, 4258952038
   \              0C398DEF8757
   \              97403B8C6192
   \              7C567366FDDA
   \   000010C4   B0A65F4AEB3C       DD 1598730406, 635759420, 180752392, 748571954, 814033124, 2470305256
   \              25E410080AC6
   \              4D322C9E28E4
   \              3085DDE8933D
   \   000010DC   5979436E2222       DD 1131305337, 590684706, 215411681, 1190346183, 1674671754, 4086076019
   \              2335EBE10CD6
   \              3DC746F3768A
   \              63D19273F38C
   \   000010F4   55DF96CC411D       DD 2529973727, 1900036381, 1195653338, 2177852418, 2709829787
   \              714038DA4744
   \              640281CFB89B
   \              A184        
   \   00001108   5050AA6720A3       DD 2858897488, 1811423395, 389619470, 1003778564, 2593000634
   \              6BF81F0E1739
   \              72043BD40CBA
   \              9A8E        
   \   0000111C   8F853F2BDA29       DD 1059819397, 2972047913, 3985974625, 1097140605, 132848327
   \              B1252561ED95
   \              097D41651AC7
   \              07EB        
   \   00001130   A9FD7DB00D0C       DD 2108729853, 3287747852, 2301184620, 1522046628, 1545601421
   \              C3F74A6C8929
   \              96A45AB8018D
   \              5C20        
   \   00001144   0897D4B60456       DD 3568699543, 4066182230, 1648603193, 3259790436, 4150716815
   \              F25DB0396243
   \              7464C24CE98F
   \              F766        
   \   00001158   1E42D2295C09       DD 3525910082, 537091081, 3947242788, 3423492958, 100206167, 616348245
   \              20032524EB46
   \              5B5ECC0E0657
   \              05F9BA5524BC
   \   00001170   9BF6E4FA8D98       DD 3841629174, 1135185304, 411198676, 996286148, 593264940, 1664381694
   \              43A964D41882
   \              1EC43B62812C
   \              235C72FE6334
   \   00001188   6D23A3310844       DD 2737925411, 832702532, 3623211197, 1203244471, 1714913529, 584352501
   \              31A2D0BDD7F5
   \              0DB747B880F9
   \              663782F522D4
   \   000011A0   2020521427DC       DD 1377050656, 1307715548, 616502142, 621243654, 174421573, 3410652899
   \              4DF2137E24BF
   \              6D0625077645
   \              0A656EE3CB4A
   \   000011B8   A433B5AD69DB       DD 3048055859, 216295899, 4133198939, 4256195153, 2833839416
   \              0CE49C5BF65B
   \              6251FDB0F538
   \              A8E8        
   \   000011CC   227444F84B97       DD 1157112436, 3454815127, 2566540417, 2880838925, 214786513
   \              CDEC4C8198FA
   \              1D0DABB661D1
   \              0CCD        
   \   000011E0   AB5444C53713       DD 1153805140, 3118216979, 4175821081, 903666124, 1773819682
   \              B9DCF919F8E5
   \              D9CC35DC5722
   \              69BA        
   \   000011F4   81F367FC24DA       DD 1744601587, 2942313690, 303782561, 722462715, 434130203, 2172761358
   \              AF605AA1121B
   \              E7FB2B0F4D1B
   \              19E0B50E8181
   \   0000120C   1EBD56384AC3       DD 1446518461, 1239370435, 1552511170, 2396944005, 145534670
   \              49DF70C25C89
   \              76858EDEAECE
   \              08AC        
   \   00001220   D20BACA01A71       DD 2896220683, 3293518449, 2464459834, 1648286861, 2287602837
   \              C44FAC3A92E4
   \              DC8D623E0C95
   \              885A        
   \   00001234   A7E55496116E       DD 1419159525, 828051822, 547994167, 167097693, 929400632, 3958321141
   \              315BBA3720A9
   \              B55D09F58738
   \              37652FF5EBEF
   \   0000124C   4C4223C44573       DD 600067138, 527582579, 1453944210, 1924704747, 840401243, 1397793929
   \              1F726D9256A9
   \              A9EB72B8815B
   \              3217A4895350
   \   00001264   B42F2CC1C70B       DD 750892079, 2243479307, 837858158, 1294787405, 1347050636, 3011014316
   \              85B8B36E31F0
   \              E34D4D2C5C8C
   \              504A6EACB378
   \   0000127C   EA261AF8D62F       DD 452520486, 3618625071, 1773952550, 1111998362, 568564176, 2827942695
   \              D7AF5E2669BC
   \              BF9A424799D0
   \              21E3FB27A88E
   \   00001294   66766E6D6FD4       DD 1852663414, 4271534036, 1197609657, 675375326, 121699173, 1709609992
   \              FE9A12B94762
   \              68DE2841FB65
   \              0740940865E6
   \   000012AC   70BE5F751C29       DD 1601532094, 2648185897, 23511847, 130346349, 1701136528, 2068978121
   \              9DD8C3270166
   \              ED6D07C44890
   \              656519C97B52
   \   000012C4   5BD3BAFB10F7       DD 3137035219, 4074901751, 2430729, 1371609483, 220357531, 3191728145
   \              F2E217090025
   \              198B51C1639B
   \              0D22E811BE3D
   \   000012DC   0DF30F3C4EEF       DD 255593971, 3812052719, 894591275, 419405994, 137655363, 894935052
   \              E337612B3552
   \              A0AA18FF7443
   \              0834A00C3557
   \   000012F4   1C1ECB9F6614       DD 3416202270, 3733677588, 549673461, 886067816, 3541649450, 3026941399
   \              DE8B59F520C3
   \              526834D0482A
   \              D31975D7B46B
   \   0000130C   5771421611A6       DD 1108760433, 3906539942, 3392367650, 108677089, 1292316528, 22371998
   \              E8D96C22CA33
   \              47E1067A2F70
   \              4D075E9E0155
   \   00001324   C6F19022D697       DD 2418198257, 2093143703, 1284275887, 3624159255, 1654132914
   \              7CC27EAF4C8C
   \              4817D80410B2
   \              6298        
   \   00001338   C9C11B060BC0       DD 453429697, 621874112, 4087263223, 469352555, 525513960, 1824747285
   \              2511AFF7F39E
   \              C06B1BF9B4E8
   \              1F526F156CC3
   \   00001350   206814B63A6A       DD 347480168, 1991719530, 2312845345, 1205645532, 795283265, 4271767212
   \              76B7382189DB
   \              B0DC47DC0F41
   \              2F67FEACFE9D
   \   00001368   C417B9735C93       DD 3111371799, 1650154643, 806566938, 1603047801, 160611115, 1809014590
   \              625B3C1A3013
   \              91795F8CBB2B
   \              09925F3E6BD3
   \   00001380   9E5E8540391A       DD 2235604574, 62208282, 372647783, 2038552829, 849493174, 3678783498
   \              03B527671636
   \              D8FD79813CB6
   \              32A2C80ADB45
   \   00001398   2DC3F48B6A7E       DD 4102761923, 1731553918, 2667687343, 1636377454, 3842190294
   \              6735ADAF9F01
   \              236E61892BD6
   \              E503        
   \   000013AC   E95407A1727E       DD 128051540, 2624156286, 1406543641, 1674493972, 634814017, 1671956280
   \              9C69271953D6
   \              C01463CE7E41
   \              25D6073863A8
   \   000013C4   BB6A18E7BC74       DD 417839978, 3051142260, 823311948, 2170830596, 2912605907, 3938153293
   \              B5DCBE4C3112
   \              3F048164D6D3
   \              AD9A734DEABB
   \   000013DC   12CB1161FF07       DD 291574475, 761724679, 845298366, 2183411422, 1299710720, 71923720
   \              2D663ABE3262
   \              36DE82240300
   \              4D7878080449
   \   000013F4   066C9BED6700       DD 2616002156, 2632476416, 1088104883, 2153120421, 1851678387
   \              9CE829B340DB
   \              02A580565EB3
   \              6E5E        
   \   00001408   B40DB1B927F2       DD 2981737485, 1391601650, 2543944596, 1371718849, 1055027388
   \              52F2839497A1
   \              C4C151C270BC
   \              3EE2        
   \   0000141C   CA426D8B7F72       DD 1837877826, 2410708850, 3605400830, 1895383238, 2111204409
   \              8FB00CFED6E6
   \              40C670F96C39
   \              7DD6        
   \   00001430   17CC9A0BA7B5       DD 2584418252, 1722722229, 23123753, 1979513008, 2602828469, 3202113187
   \              66AED7290160
   \              F8B075FC02B5
   \              9B245EA3BEDC
   \   00001448   EDD525FE6004       DD 637464021, 230907908, 3407570481, 2915163634, 984520554, 543091006
   \              0DC36631CB1B
   \              DDF2ADC1976A
   \              3AAEE93E205E
   \   00001460   849833C9B4E3       DD 868844696, 2049750243, 1834387244, 2098391927, 3021314558
   \              7A2C872C6D56
   \              EB777D1299FE
   \              B415        
   \   00001474   9BC18E339427       DD 2385746881, 1068274727, 1174466725, 1928413956, 273273763
   \              3FACF0A54600
   \              430472F1D3A3
   \              1049        
   \   00001488   B742B22DE020       DD 2989340482, 2069159968, 1923307321, 3580335650, 286650564, 664868747
   \              7B54573972A3
   \              9622D567F0C4
   \              1115178B27A1
   \   000014A0   5E1B19C339D6       DD 432234011, 1828403670, 2849625222, 1555656657, 4216324074
   \              6CFBD486A9D9
   \              6FD15CB9FFEA
   \              FB4F        
   \   000014B4   CEF7AF4521D1       DD 2940587767, 3130204625, 1249105842, 2159969964, 1152674634
   \              BA93D7B24A73
   \              86AC80BE6B4A
   \              44B4        
   \   000014C8   F73479E8B505       DD 2045310772, 661239045, 1953690482, 2875003038, 3421083062, 734854049
   \              2769F3727472
   \              109EAB5D95B6
   \              CBE9FBA12BCC
   \   000014E0   F6A353322611       DD 1395848867, 3221235217, 2706775123, 2060134525, 2363035097
   \              C0001C53A156
   \              287D7ACB0DD9
   \              8CD9        
   \   000014F4   5C602155AE13       DD 559242336, 2274209299, 1999753650, 3961128521, 840051701, 2162984039
   \              878DD1B27731
   \              0649EC1A2BF5
   \              3212846780EC
   \   0000150C   5FA1592BE66F       DD 1496014753, 2912740975, 2271994293, 3140780445, 1212947653
   \              AD9CE1B5876B
   \              819DBB341CC5
   \              484C        
   \   00001520   B06C5B30CC42       DD 1529917548, 149212226, 239936206, 660997727, 1233628927, 3641189732
   \              08E422CE0E4D
   \              065F2766AEFF
   \              49872564D908
   \   00001538   56A67FC45FCC       DD 2143573670, 981688268, 3430968681, 4107796946, 3394631737
   \              3A836D69CC80
   \              01D2F4D8F839
   \              CA55        
   \   0000154C   67EC41D7E74F       DD 1104635884, 32630607, 4074678781, 1176637899, 1959795607, 3533668556
   \              01F1A9FDF2DE
   \              11CB46221B97
   \              74D080CCD29F
   \   00001564   280AE43EB231       DD 3829278730, 2418651697, 1558144678, 1015426265, 3906360736
   \              902966A65CDF
   \              2CD93C8655A0
   \              E8D6        
   \   00001578   8C798D0E38B5       DD 2366540921, 948844725, 1224704930, 1570417224, 1298972276, 349633518
   \              388E83A248FF
   \              AA485D9ABE74
   \              4D6CFBEE14D6
   \   00001590   09EA9121DCDA       DD 2434861546, 69655770, 1976874305, 465025485, 3013313797, 977011972
   \              0426B54175D4
   \              B9CD1BB78505
   \              B39B05043A3C
   \   000015A8   367A2B31C588       DD 724645498, 899925384, 900089658, 1736938454, 538976308, 1722534526
   \              35A3473A35A6
   \              93D667872034
   \              2020CA7E66AB
   \   000015C0   0021AD30FF1D       DD 2905604129, 1251016477, 1414342276, 418549814, 2406025565, 540464027
   \              4A902684544D
   \              903618F2095D
   \              8F69D39B2036
   \   000015D8   8CC845D10F56       DD 1171360968, 910757718, 2329105966, 2484393782, 1163413630
   \              3649562E8AD3
   \              D7369414487E
   \              4558        
   \   000015EC   08A07F81E40B       DD 2139162784, 3595822091, 2480606806, 2516924347, 66327530, 2138204143
   \              D6530E5693DB
   \              37BB960513EA
   \              03F467EF7F72
   \   00001604   17B798477305       DD 2554795959, 2783867653, 1818074532, 906365513, 1918048476
   \              A5EE9DA46C5D
   \              0A49360618DC
   \              7253        
   \   00001618   239EE79A97F8       DD 3885638558, 658741240, 1083554480, 3181876827, 1551394531
   \              2743BAB04095
   \              965BBDA766E3
   \              5C78        
   \   0000162C   B25062926733       DD 1653781072, 1731028787, 1159706272, 37922905, 935682292, 2173637667
   \              672DB6A0451F
   \              A859024260F4
   \              37C51423818F
   \   00001644   56EB151E2EE1       DD 354309867, 4039257825, 1665472902, 979138017, 2457206663, 1244838250
   \              F0C219866345
   \              75E13A5CFF87
   \              9275B96A4A32
   \   0000165C   DC73178CAACC       DD 395107443, 1111796428, 4286241714, 3755568604, 1985055392
   \              4244DBB2FF7A
   \              6DDCDFD98AA0
   \              7651        
   \   00001670   121981071C8C       DD 2164724249, 370941068, 279176924, 92591180, 166309035, 656877610
   \              161CE6DC10A3
   \              D44C0584ACAB
   \              09E9282A2727
   \   00001688   4EBD3451E49C       DD 877743805, 312009884, 3390836333, 52678745, 2110942150, 1618135224
   \              12980E6DCA1C
   \              D05903236BC6
   \              7DD2C8B86072
   \   000016A0   6F2628D3A2AB       DD 684945190, 921477803, 2867128874, 714570933, 194332327, 4049065018
   \              36ECEA2AAAE4
   \              7CB52A9746A7
   \              0B95D43AF157
   \   000016B8   1D29ED660AF0       DD 3982892329, 81136368, 309216258, 884740224, 559452529, 1987571610
   \              04D64402126E
   \              108034BC9171
   \              2158EF9A7677
   \   000016D0   7A4078F07972       DD 2029025856, 3172170098, 3045007532, 851499760, 2204556334
   \              BD1320ACB57F
   \              DAF032C0DC2E
   \              8366        
   \   000016E4   FD1BBC8370EC       DD 3162766619, 3303436524, 1825600134, 4080655498, 4082402723
   \              C4E672866CD0
   \              DC8AF33985A3
   \              F354        
   \   000016F8   7E8BF2249285       DD 4062477963, 1853788805, 160709550, 2849086778, 4007154342
   \              6E7E3BAE0994
   \              9D3AA9D152A6
   \              EED8        
   \   0000170C   519743FA42FE       DD 1140478359, 70402814, 4178655626, 319998953, 1242566091, 3910182546
   \              0432398AF911
   \              CBE913120DCB
   \              4A10A692E910
   \   00001724   D86BBE2F7937       DD 3190806635, 915241271, 1632622633, 2838321039, 3680147633, 453888638
   \              368DD829614F
   \              578FA92D98B1
   \              DB5ACA7E1B0D
   \   0000173C   D23E46F13F36       DD 1190253118, 1585528630, 2348074610, 2167000721, 1757186311
   \              5E81C6728BF4
   \              CE9181298907
   \              68BC        
   \   00001750   5C7FE28F503A       DD 3801046143, 4283846714, 1108839653, 728633166, 3966077275
   \              FF568CE54217
   \              0F4E2B6E895B
   \              EC65        
   \   00001764   D947A97CF6C9       DD 2843531591, 672134857, 2057898854, 4049117344, 3954897709
   \              280F0B667AA9
   \              A0A0F158F32D
   \              EBBA        
   \   00001778   B713C02B8D0A       DD 3224090387, 1786023178, 434647959, 3749295574, 4131937129, 378751303
   \              6A74339719E8
   \              B5D6DF795B69
   \              F64849471693
   \   00001790   28811AB38552       DD 447948929, 3880879442, 1786011849, 544808487, 583470025, 3529261118
   \              E75160C96A74
   \              1E2720790BC9
   \              22C7403ED25C
   \   000017A8   E1D38E667951       DD 2389107155, 200309073, 490148318, 1172135063, 817767212, 1723673706
   \              0BF011DE1D37
   \              5C9745DD232C
   \              30BE2C6A66BD
   \   000017C0   53CAB29E29E5       DD 2996720586, 1618487781, 1910245538, 820855118, 3926859065
   \              607808A271DC
   \              414E30ED1D39
   \              EA0F        
   \   000017D4   85893FD3FC5C       DD 1070826889, 523762780, 1518869010, 1754823247, 666450243, 330280493
   \              1F371A125A88
   \              7A4F68983943
   \              27B9AE2D13AF
   \   000017EC   E45E321F3EA0       DD 840950878, 2163424928, 3338581840, 4099861437, 35024210
   \              80F3B750C6FE
   \              EBBDF45E6D52
   \              0216        
     14          #include "AVR/fp.h"

   \                                 In  segment FARCODE, align 2, keep-with-next
   \   __farfunc __version_3 void table_lookup_1x8(struct <unnamed> [1] *, struct <unnamed> *, unsigned int, unsigned int)
   \                     table_lookup_1x8:
   \   00000000   927A               ST      -Y, R7
   \   00000002   926A               ST      -Y, R6
   \   00000004   925A               ST      -Y, R5
   \   00000006   924A               ST      -Y, R4
   \   00000008   93BA               ST      -Y, R27
   \   0000000A   93AA               ST      -Y, R26
   \   0000000C   939A               ST      -Y, R25
   \   0000000E   938A               ST      -Y, R24
   \   00000010                      REQUIRE ?Register_R4_is_cg_reg
   \   00000010                      REQUIRE ?Register_R5_is_cg_reg
   \   00000010                      REQUIRE ?Register_R6_is_cg_reg
   \   00000010                      REQUIRE ?Register_R7_is_cg_reg
   \   00000010   95DA               DEC     R29
   \   00000012   01D9               MOVW    R27:R26, R19:R18
   \   00000014   2E66               MOV     R6, R22
   \   00000016   9556               LSR     R21
   \   00000018   9547               ROR     R20
   \   0000001A   2F54               MOV     R21, R20
   \   0000001C   E040               LDI     R20, 0
   \   0000001E   9547               ROR     R20
   \   00000020   0F04               ADD     R16, R20
   \   00000022   1F15               ADC     R17, R21
   \   00000024   01C8               MOVW    R25:R24, R17:R16
   \   00000026   019E               MOVW    R19:R18, R29:R28
   \   00000028   5820               SUBI    R18, 128
   \   0000002A   4F3F               SBCI    R19, 255
   \   0000002C   ........           CALL    fpcopy1271
   \   00000030   019E               MOVW    R19:R18, R29:R28
   \   00000032   5720               SUBI    R18, 112
   \   00000034   4F3F               SBCI    R19, 255
   \   00000036   018C               MOVW    R17:R16, R25:R24
   \   00000038   5F00               SUBI    R16, 240
   \   0000003A   4F1F               SBCI    R17, 255
   \   0000003C   ........           CALL    fpcopy1271
   \   00000040   012C               MOVW    R5:R4, R25:R24
   \   00000042   E200               LDI     R16, 32
   \   00000044   0E40               ADD     R4, R16
   \   00000046   E000               LDI     R16, 0
   \   00000048   1E50               ADC     R5, R16
   \   0000004A   019E               MOVW    R19:R18, R29:R28
   \   0000004C   5620               SUBI    R18, 96
   \   0000004E   4F3F               SBCI    R19, 255
   \   00000050   0182               MOVW    R17:R16, R5:R4
   \   00000052   ........           CALL    fpcopy1271
   \   00000056   019E               MOVW    R19:R18, R29:R28
   \   00000058   5520               SUBI    R18, 80
   \   0000005A   4F3F               SBCI    R19, 255
   \   0000005C   E100               LDI     R16, 16
   \   0000005E   0E40               ADD     R4, R16
   \   00000060   E000               LDI     R16, 0
   \   00000062   1E50               ADC     R5, R16
   \   00000064   0182               MOVW    R17:R16, R5:R4
   \   00000066   ........           CALL    fpcopy1271
   \   0000006A   012C               MOVW    R5:R4, R25:R24
   \   0000006C   E400               LDI     R16, 64
   \   0000006E   0E40               ADD     R4, R16
   \   00000070   E000               LDI     R16, 0
   \   00000072   1E50               ADC     R5, R16
   \   00000074   019E               MOVW    R19:R18, R29:R28
   \   00000076   5420               SUBI    R18, 64
   \   00000078   4F3F               SBCI    R19, 255
   \   0000007A   0182               MOVW    R17:R16, R5:R4
   \   0000007C   ........           CALL    fpcopy1271
   \   00000080   019E               MOVW    R19:R18, R29:R28
   \   00000082   5320               SUBI    R18, 48
   \   00000084   4F3F               SBCI    R19, 255
   \   00000086   E100               LDI     R16, 16
   \   00000088   0E40               ADD     R4, R16
   \   0000008A   E000               LDI     R16, 0
   \   0000008C   1E50               ADC     R5, R16
   \   0000008E   0182               MOVW    R17:R16, R5:R4
   \   00000090   ........           CALL    fpcopy1271
   \   00000094   5A80               SUBI    R24, 160
   \   00000096   4F9F               SBCI    R25, 255
   \   00000098   019E               MOVW    R19:R18, R29:R28
   \   0000009A   5220               SUBI    R18, 32
   \   0000009C   4F3F               SBCI    R19, 255
   \   0000009E   018C               MOVW    R17:R16, R25:R24
   \   000000A0   ........           CALL    fpcopy1271
   \   000000A4   019E               MOVW    R19:R18, R29:R28
   \   000000A6   5120               SUBI    R18, 16
   \   000000A8   4F3F               SBCI    R19, 255
   \   000000AA   9640               ADIW    R25:R24, 16
   \   000000AC   018C               MOVW    R17:R16, R25:R24
   \   000000AE   ........           CALL    fpcopy1271
   \   000000B2   019E               MOVW    R19:R18, R29:R28
   \   000000B4   5E20               SUBI    R18, 224
   \   000000B6   4F3F               SBCI    R19, 255
   \   000000B8   018E               MOVW    R17:R16, R29:R28
   \   000000BA   5800               SUBI    R16, 128
   \   000000BC   4F1F               SBCI    R17, 255
   \   000000BE   ........           CALL    fpcopy1271
   \   000000C2   019E               MOVW    R19:R18, R29:R28
   \   000000C4   5D20               SUBI    R18, 208
   \   000000C6   4F3F               SBCI    R19, 255
   \   000000C8   018E               MOVW    R17:R16, R29:R28
   \   000000CA   5700               SUBI    R16, 112
   \   000000CC   4F1F               SBCI    R17, 255
   \   000000CE   ........           CALL    fpcopy1271
   \   000000D2   019E               MOVW    R19:R18, R29:R28
   \   000000D4   018E               MOVW    R17:R16, R29:R28
   \   000000D6   5600               SUBI    R16, 96
   \   000000D8   4F1F               SBCI    R17, 255
   \   000000DA   ........           CALL    fpcopy1271
   \   000000DE   019E               MOVW    R19:R18, R29:R28
   \   000000E0   5F20               SUBI    R18, 240
   \   000000E2   4F3F               SBCI    R19, 255
   \   000000E4   018E               MOVW    R17:R16, R29:R28
   \   000000E6   5500               SUBI    R16, 80
   \   000000E8   4F1F               SBCI    R17, 255
   \   000000EA   ........           CALL    fpcopy1271
   \   000000EE   019E               MOVW    R19:R18, R29:R28
   \   000000F0   5A20               SUBI    R18, 160
   \   000000F2   4F3F               SBCI    R19, 255
   \   000000F4   018E               MOVW    R17:R16, R29:R28
   \   000000F6   5200               SUBI    R16, 32
   \   000000F8   4F1F               SBCI    R17, 255
   \   000000FA   ........           CALL    fpcopy1271
   \   000000FE   019E               MOVW    R19:R18, R29:R28
   \   00000100   5920               SUBI    R18, 144
   \   00000102   4F3F               SBCI    R19, 255
   \   00000104   018E               MOVW    R17:R16, R29:R28
   \   00000106   5100               SUBI    R16, 16
   \   00000108   4F1F               SBCI    R17, 255
   \   0000010A   ........           CALL    fpcopy1271
   \   0000010E   019E               MOVW    R19:R18, R29:R28
   \   00000110   5C20               SUBI    R18, 192
   \   00000112   4F3F               SBCI    R19, 255
   \   00000114   018E               MOVW    R17:R16, R29:R28
   \   00000116   5400               SUBI    R16, 64
   \   00000118   4F1F               SBCI    R17, 255
   \   0000011A   ........           CALL    fpcopy1271
   \   0000011E   019E               MOVW    R19:R18, R29:R28
   \   00000120   5B20               SUBI    R18, 176
   \   00000122   4F3F               SBCI    R19, 255
   \   00000124   018E               MOVW    R17:R16, R29:R28
   \   00000126   5300               SUBI    R16, 48
   \   00000128   4F1F               SBCI    R17, 255
   \   0000012A   ........           CALL    fpcopy1271
   \   0000012E   018E               MOVW    R17:R16, R29:R28
   \   00000130   5A00               SUBI    R16, 160
   \   00000132   4F1F               SBCI    R17, 255
   \   00000134   ........           CALL    fpneg1271
   \   00000138   018E               MOVW    R17:R16, R29:R28
   \   0000013A   5900               SUBI    R16, 144
   \   0000013C   4F1F               SBCI    R17, 255
   \   0000013E   ........           CALL    fpneg1271
   \   00000142   01CE               MOVW    R25:R24, R29:R28
   \   00000144   2D06               MOV     R16, R6
   \   00000146   7001               ANDI    R16, 0x01
   \   00000148   E010               LDI     R17, 0
   \   0000014A   9506               LSR     R16
   \   0000014C   9507               ROR     R16
   \   0000014E   0F80               ADD     R24, R16
   \   00000150   1F91               ADC     R25, R17
   \   00000152   019D               MOVW    R19:R18, R27:R26
   \   00000154   018C               MOVW    R17:R16, R25:R24
   \   00000156   ........           CALL    fpcopy1271
   \   0000015A   019D               MOVW    R19:R18, R27:R26
   \   0000015C   5F20               SUBI    R18, 240
   \   0000015E   4F3F               SBCI    R19, 255
   \   00000160   018C               MOVW    R17:R16, R25:R24
   \   00000162   5F00               SUBI    R16, 240
   \   00000164   4F1F               SBCI    R17, 255
   \   00000166   ........           CALL    fpcopy1271
   \   0000016A   013D               MOVW    R7:R6, R27:R26
   \   0000016C   E200               LDI     R16, 32
   \   0000016E   0E60               ADD     R6, R16
   \   00000170   E000               LDI     R16, 0
   \   00000172   1E70               ADC     R7, R16
   \   00000174   012C               MOVW    R5:R4, R25:R24
   \   00000176   E200               LDI     R16, 32
   \   00000178   0E40               ADD     R4, R16
   \   0000017A   E000               LDI     R16, 0
   \   0000017C   1E50               ADC     R5, R16
   \   0000017E   0193               MOVW    R19:R18, R7:R6
   \   00000180   0182               MOVW    R17:R16, R5:R4
   \   00000182   ........           CALL    fpcopy1271
   \   00000186   E100               LDI     R16, 16
   \   00000188   0E60               ADD     R6, R16
   \   0000018A   E000               LDI     R16, 0
   \   0000018C   1E70               ADC     R7, R16
   \   0000018E   0193               MOVW    R19:R18, R7:R6
   \   00000190   E100               LDI     R16, 16
   \   00000192   0E40               ADD     R4, R16
   \   00000194   E000               LDI     R16, 0
   \   00000196   1E50               ADC     R5, R16
   \   00000198   0182               MOVW    R17:R16, R5:R4
   \   0000019A   ........           CALL    fpcopy1271
   \   0000019E   013D               MOVW    R7:R6, R27:R26
   \   000001A0   E400               LDI     R16, 64
   \   000001A2   0E60               ADD     R6, R16
   \   000001A4   E000               LDI     R16, 0
   \   000001A6   1E70               ADC     R7, R16
   \   000001A8   012C               MOVW    R5:R4, R25:R24
   \   000001AA   E400               LDI     R16, 64
   \   000001AC   0E40               ADD     R4, R16
   \   000001AE   E000               LDI     R16, 0
   \   000001B0   1E50               ADC     R5, R16
   \   000001B2   0193               MOVW    R19:R18, R7:R6
   \   000001B4   0182               MOVW    R17:R16, R5:R4
   \   000001B6   ........           CALL    fpcopy1271
   \   000001BA   E100               LDI     R16, 16
   \   000001BC   0E60               ADD     R6, R16
   \   000001BE   E000               LDI     R16, 0
   \   000001C0   1E70               ADC     R7, R16
   \   000001C2   0193               MOVW    R19:R18, R7:R6
   \   000001C4   E100               LDI     R16, 16
   \   000001C6   0E40               ADD     R4, R16
   \   000001C8   E000               LDI     R16, 0
   \   000001CA   1E50               ADC     R5, R16
   \   000001CC   0182               MOVW    R17:R16, R5:R4
   \   000001CE   ........           CALL    fpcopy1271
   \   000001D2   5AA0               SUBI    R26, 160
   \   000001D4   4FBF               SBCI    R27, 255
   \   000001D6   5A80               SUBI    R24, 160
   \   000001D8   4F9F               SBCI    R25, 255
   \   000001DA   019D               MOVW    R19:R18, R27:R26
   \   000001DC   018C               MOVW    R17:R16, R25:R24
   \   000001DE   ........           CALL    fpcopy1271
   \   000001E2   9650               ADIW    R27:R26, 16
   \   000001E4   019D               MOVW    R19:R18, R27:R26
   \   000001E6   9640               ADIW    R25:R24, 16
   \   000001E8   018C               MOVW    R17:R16, R25:R24
   \   000001EA   ........           CALL    fpcopy1271
   \   000001EE   95D3               INC     R29
   \   000001F0   ....               RJMP    ??Subroutine12_0

   \                                 In  segment FARCODE, align 2, keep-with-next
   \                     ??Subroutine12_0:
   \   00000000   9189               LD      R24, Y+
   \   00000002   9199               LD      R25, Y+
   \   00000004   91A9               LD      R26, Y+
   \   00000006   91B9               LD      R27, Y+
   \   00000008   9049               LD      R4, Y+
   \   0000000A   9059               LD      R5, Y+
   \   0000000C   9069               LD      R6, Y+
   \   0000000E   9079               LD      R7, Y+
   \   00000010   9508               RET

   \                                 In  segment FARCODE, align 2, keep-with-next
   \   __farfunc __version_3 void table_lookup_fixed_base(point_precomp_t *, point_precomp *, unsigned int, unsigned int)
   \                     table_lookup_fixed_base:
   \   00000000   927A               ST      -Y, R7
   \   00000002   926A               ST      -Y, R6
   \   00000004   925A               ST      -Y, R5
   \   00000006   924A               ST      -Y, R4
   \   00000008   93BA               ST      -Y, R27
   \   0000000A   93AA               ST      -Y, R26
   \   0000000C   939A               ST      -Y, R25
   \   0000000E   938A               ST      -Y, R24
   \   00000010                      REQUIRE ?Register_R4_is_cg_reg
   \   00000010                      REQUIRE ?Register_R5_is_cg_reg
   \   00000010                      REQUIRE ?Register_R6_is_cg_reg
   \   00000010                      REQUIRE ?Register_R7_is_cg_reg
   \   00000010   97EF               SBIW    R29:R28, 63
   \   00000012   97EF               SBIW    R29:R28, 63
   \   00000014   97EF               SBIW    R29:R28, 63
   \   00000016   9723               SBIW    R29:R28, 3
   \   00000018   01D9               MOVW    R27:R26, R19:R18
   \   0000001A   2E66               MOV     R6, R22
   \   0000001C   E620               LDI     R18, 96
   \   0000001E   9F52               MUL     R21, R18
   \   00000020   2D50               MOV     R21, R0
   \   00000022   9F42               MUL     R20, R18
   \   00000024   0D51               ADD     R21, R1
   \   00000026   0D00               ADD     R16, R0
   \   00000028   1F15               ADC     R17, R21
   \   0000002A   0128               MOVW    R5:R4, R17:R16
   \   0000002C   019E               MOVW    R19:R18, R29:R28
   \   0000002E   ........           CALL    fpcopy1271_flash
   \   00000032   019E               MOVW    R19:R18, R29:R28
   \   00000034   5F20               SUBI    R18, 240
   \   00000036   4F3F               SBCI    R19, 255
   \   00000038   0182               MOVW    R17:R16, R5:R4
   \   0000003A   5F00               SUBI    R16, 240
   \   0000003C   4F1F               SBCI    R17, 255
   \   0000003E   ........           CALL    fpcopy1271_flash
   \   00000042   01C2               MOVW    R25:R24, R5:R4
   \   00000044   9680               ADIW    R25:R24, 32
   \   00000046   019E               MOVW    R19:R18, R29:R28
   \   00000048   5E20               SUBI    R18, 224
   \   0000004A   4F3F               SBCI    R19, 255
   \   0000004C   018C               MOVW    R17:R16, R25:R24
   \   0000004E   ........           CALL    fpcopy1271_flash
   \   00000052   019E               MOVW    R19:R18, R29:R28
   \   00000054   5D20               SUBI    R18, 208
   \   00000056   4F3F               SBCI    R19, 255
   \   00000058   9640               ADIW    R25:R24, 16
   \   0000005A   018C               MOVW    R17:R16, R25:R24
   \   0000005C   ........           CALL    fpcopy1271_flash
   \   00000060   E400               LDI     R16, 64
   \   00000062   0E40               ADD     R4, R16
   \   00000064   E000               LDI     R16, 0
   \   00000066   1E50               ADC     R5, R16
   \   00000068   01C2               MOVW    R25:R24, R5:R4
   \   0000006A   019E               MOVW    R19:R18, R29:R28
   \   0000006C   5C20               SUBI    R18, 192
   \   0000006E   4F3F               SBCI    R19, 255
   \   00000070   0182               MOVW    R17:R16, R5:R4
   \   00000072   ........           CALL    fpcopy1271_flash
   \   00000076   019E               MOVW    R19:R18, R29:R28
   \   00000078   5B20               SUBI    R18, 176
   \   0000007A   4F3F               SBCI    R19, 255
   \   0000007C   9640               ADIW    R25:R24, 16
   \   0000007E   018C               MOVW    R17:R16, R25:R24
   \   00000080   ........           CALL    fpcopy1271_flash
   \   00000084   019E               MOVW    R19:R18, R29:R28
   \   00000086   5820               SUBI    R18, 128
   \   00000088   4F3F               SBCI    R19, 255
   \   0000008A   018E               MOVW    R17:R16, R29:R28
   \   0000008C   ........           CALL    fpcopy1271
   \   00000090   019E               MOVW    R19:R18, R29:R28
   \   00000092   5720               SUBI    R18, 112
   \   00000094   4F3F               SBCI    R19, 255
   \   00000096   018E               MOVW    R17:R16, R29:R28
   \   00000098   5F00               SUBI    R16, 240
   \   0000009A   4F1F               SBCI    R17, 255
   \   0000009C   ........           CALL    fpcopy1271
   \   000000A0   019E               MOVW    R19:R18, R29:R28
   \   000000A2   5A20               SUBI    R18, 160
   \   000000A4   4F3F               SBCI    R19, 255
   \   000000A6   018E               MOVW    R17:R16, R29:R28
   \   000000A8   5E00               SUBI    R16, 224
   \   000000AA   4F1F               SBCI    R17, 255
   \   000000AC   ........           CALL    fpcopy1271
   \   000000B0   019E               MOVW    R19:R18, R29:R28
   \   000000B2   5920               SUBI    R18, 144
   \   000000B4   4F3F               SBCI    R19, 255
   \   000000B6   018E               MOVW    R17:R16, R29:R28
   \   000000B8   5D00               SUBI    R16, 208
   \   000000BA   4F1F               SBCI    R17, 255
   \   000000BC   ........           CALL    fpcopy1271
   \   000000C0   019E               MOVW    R19:R18, R29:R28
   \   000000C2   5620               SUBI    R18, 96
   \   000000C4   4F3F               SBCI    R19, 255
   \   000000C6   018E               MOVW    R17:R16, R29:R28
   \   000000C8   5C00               SUBI    R16, 192
   \   000000CA   4F1F               SBCI    R17, 255
   \   000000CC   ........           CALL    fpcopy1271
   \   000000D0   019E               MOVW    R19:R18, R29:R28
   \   000000D2   5520               SUBI    R18, 80
   \   000000D4   4F3F               SBCI    R19, 255
   \   000000D6   018E               MOVW    R17:R16, R29:R28
   \   000000D8   5B00               SUBI    R16, 176
   \   000000DA   4F1F               SBCI    R17, 255
   \   000000DC   ........           CALL    fpcopy1271
   \   000000E0   018E               MOVW    R17:R16, R29:R28
   \   000000E2   5600               SUBI    R16, 96
   \   000000E4   4F1F               SBCI    R17, 255
   \   000000E6   ........           CALL    fpneg1271
   \   000000EA   018E               MOVW    R17:R16, R29:R28
   \   000000EC   5500               SUBI    R16, 80
   \   000000EE   4F1F               SBCI    R17, 255
   \   000000F0   ........           CALL    fpneg1271
   \   000000F4   01CE               MOVW    R25:R24, R29:R28
   \   000000F6   2D26               MOV     R18, R6
   \   000000F8   7021               ANDI    R18, 0x01
   \   000000FA   E600               LDI     R16, 96
   \   000000FC   9F20               MUL     R18, R16
   \   000000FE   0D80               ADD     R24, R0
   \   00000100   1D91               ADC     R25, R1
   \   00000102   019D               MOVW    R19:R18, R27:R26
   \   00000104   018C               MOVW    R17:R16, R25:R24
   \   00000106   ........           CALL    fpcopy1271
   \   0000010A   019D               MOVW    R19:R18, R27:R26
   \   0000010C   5F20               SUBI    R18, 240
   \   0000010E   4F3F               SBCI    R19, 255
   \   00000110   018C               MOVW    R17:R16, R25:R24
   \   00000112   5F00               SUBI    R16, 240
   \   00000114   4F1F               SBCI    R17, 255
   \   00000116   ........           CALL    fpcopy1271
   \   0000011A   013D               MOVW    R7:R6, R27:R26
   \   0000011C   E200               LDI     R16, 32
   \   0000011E   0E60               ADD     R6, R16
   \   00000120   E000               LDI     R16, 0
   \   00000122   1E70               ADC     R7, R16
   \   00000124   012C               MOVW    R5:R4, R25:R24
   \   00000126   E200               LDI     R16, 32
   \   00000128   0E40               ADD     R4, R16
   \   0000012A   E000               LDI     R16, 0
   \   0000012C   1E50               ADC     R5, R16
   \   0000012E   0193               MOVW    R19:R18, R7:R6
   \   00000130   0182               MOVW    R17:R16, R5:R4
   \   00000132   ........           CALL    fpcopy1271
   \   00000136   E100               LDI     R16, 16
   \   00000138   0E60               ADD     R6, R16
   \   0000013A   E000               LDI     R16, 0
   \   0000013C   1E70               ADC     R7, R16
   \   0000013E   0193               MOVW    R19:R18, R7:R6
   \   00000140   E100               LDI     R16, 16
   \   00000142   0E40               ADD     R4, R16
   \   00000144   E000               LDI     R16, 0
   \   00000146   1E50               ADC     R5, R16
   \   00000148   0182               MOVW    R17:R16, R5:R4
   \   0000014A   ........           CALL    fpcopy1271
   \   0000014E   5CA0               SUBI    R26, 192
   \   00000150   4FBF               SBCI    R27, 255
   \   00000152   5C80               SUBI    R24, 192
   \   00000154   4F9F               SBCI    R25, 255
   \   00000156   019D               MOVW    R19:R18, R27:R26
   \   00000158   018C               MOVW    R17:R16, R25:R24
   \   0000015A   ........           CALL    fpcopy1271
   \   0000015E   9650               ADIW    R27:R26, 16
   \   00000160   019D               MOVW    R19:R18, R27:R26
   \   00000162   9640               ADIW    R25:R24, 16
   \   00000164   018C               MOVW    R17:R16, R25:R24
   \   00000166   ........           CALL    fpcopy1271
   \   0000016A                      REQUIRE ?Subroutine9
   \   0000016A                      ;               // Fall through to label ?Subroutine9

   \                                 In  segment FARCODE, align 2, keep-with-next
   \                     ?Subroutine9:
   \   00000000   96EF               ADIW    R29:R28, 63
   \   00000002   96EF               ADIW    R29:R28, 63
   \   00000004   96EF               ADIW    R29:R28, 63
   \   00000006   9623               ADIW    R29:R28, 3
   \   00000008   ....               RJMP    ??Subroutine12_0

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \   digit_t const mask_7fff
   \                     mask_7fff:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for mask_7fff>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \   digit_t const prime1271_0
   \                     prime1271_0:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for prime1271_0>`

   \                                 In  segment FARCODE, align 2, keep-with-next
   \   __farfunc __version_3 void digit_x_digit(digit_t, digit_t, digit_t *)
   \                     digit_x_digit:
   \   00000000   9728               SBIW    R29:R28, 8
   \   00000002   830C               STD     Y+4, R16
   \   00000004   831D               STD     Y+5, R17
   \   00000006   832E               STD     Y+6, R18
   \   00000008   833F               STD     Y+7, R19
   \   0000000A   8348               ST      Y, R20
   \   0000000C   8359               STD     Y+1, R21
   \   0000000E   836A               STD     Y+2, R22
   \   00000010   837B               STD     Y+3, R23
   \   00000012   8548               LDD     R20, Y+8
   \   00000014   8559               LDD     R21, Y+9
   \   00000016   019E               MOVW    R19:R18, R29:R28
   \   00000018   018E               MOVW    R17:R16, R29:R28
   \   0000001A   5F0C               SUBI    R16, 252
   \   0000001C   4F1F               SBCI    R17, 255
   \   0000001E   ........           CALL    mul32
   \   00000022   9628               ADIW    R29:R28, 8
   \   00000024   9622               ADIW    R29:R28, 2
   \   00000026   9508               RET

   \                                 In  segment FARCODE, align 2, keep-with-next
   \   __farfunc __version_3 void fpmul1271(digit_t *, digit_t *, digit_t *)
   \                     fpmul1271:
   \   00000000   ........           JMP     mod_mul128

   \                                 In  segment FARCODE, align 2, keep-with-next
   \   __farfunc __version_3 void fpexp1251(digit_t *, digit_t *)
   \                     fpexp1251:
   \   00000000   924A               ST      -Y, R4
   \   00000002   93BA               ST      -Y, R27
   \   00000004   93AA               ST      -Y, R26
   \   00000006   939A               ST      -Y, R25
   \   00000008   938A               ST      -Y, R24
   \   0000000A                      REQUIRE ?Register_R4_is_cg_reg
   \   0000000A   97EF               SBIW    R29:R28, 63
   \   0000000C   9761               SBIW    R29:R28, 17
   \   0000000E   01C8               MOVW    R25:R24, R17:R16
   \   00000010   01D9               MOVW    R27:R26, R19:R18
   \   00000012   019E               MOVW    R19:R18, R29:R28
   \   00000014   5F20               SUBI    R18, 240
   \   00000016   4F3F               SBCI    R19, 255
   \   00000018   ........           CALL    mod_sqr128
   \   0000001C   01AE               MOVW    R21:R20, R29:R28
   \   0000001E   5F40               SUBI    R20, 240
   \   00000020   4F5F               SBCI    R21, 255
   \   00000022   019E               MOVW    R19:R18, R29:R28
   \   00000024   5F20               SUBI    R18, 240
   \   00000026   4F3F               SBCI    R19, 255
   \   00000028   018C               MOVW    R17:R16, R25:R24
   \   0000002A   ........           CALL    mod_mul128
   \   0000002E   019E               MOVW    R19:R18, R29:R28
   \   00000030   5C20               SUBI    R18, 192
   \   00000032   4F3F               SBCI    R19, 255
   \   00000034   018E               MOVW    R17:R16, R29:R28
   \   00000036   5F00               SUBI    R16, 240
   \   00000038   4F1F               SBCI    R17, 255
   \   0000003A   ........           CALL    mod_sqr128
   \   0000003E   019E               MOVW    R19:R18, R29:R28
   \   00000040   5C20               SUBI    R18, 192
   \   00000042   4F3F               SBCI    R19, 255
   \   00000044   018E               MOVW    R17:R16, R29:R28
   \   00000046   5C00               SUBI    R16, 192
   \   00000048   4F1F               SBCI    R17, 255
   \   0000004A   ........           CALL    mod_sqr128
   \   0000004E   01AE               MOVW    R21:R20, R29:R28
   \   00000050   5C40               SUBI    R20, 192
   \   00000052   4F5F               SBCI    R21, 255
   \   00000054   019E               MOVW    R19:R18, R29:R28
   \   00000056   5C20               SUBI    R18, 192
   \   00000058   4F3F               SBCI    R19, 255
   \   0000005A   018E               MOVW    R17:R16, R29:R28
   \   0000005C   5F00               SUBI    R16, 240
   \   0000005E   4F1F               SBCI    R17, 255
   \   00000060   ........           CALL    mod_mul128
   \   00000064   019E               MOVW    R19:R18, R29:R28
   \   00000066   5E20               SUBI    R18, 224
   \   00000068   4F3F               SBCI    R19, 255
   \   0000006A   018E               MOVW    R17:R16, R29:R28
   \   0000006C   5C00               SUBI    R16, 192
   \   0000006E   4F1F               SBCI    R17, 255
   \   00000070   ........           CALL    mod_sqr128
   \   00000074   019E               MOVW    R19:R18, R29:R28
   \   00000076   5E20               SUBI    R18, 224
   \   00000078   4F3F               SBCI    R19, 255
   \   0000007A   018E               MOVW    R17:R16, R29:R28
   \   0000007C   5E00               SUBI    R16, 224
   \   0000007E   4F1F               SBCI    R17, 255
   \   00000080   ........           CALL    mod_sqr128
   \   00000084   019E               MOVW    R19:R18, R29:R28
   \   00000086   5E20               SUBI    R18, 224
   \   00000088   4F3F               SBCI    R19, 255
   \   0000008A   018E               MOVW    R17:R16, R29:R28
   \   0000008C   5E00               SUBI    R16, 224
   \   0000008E   4F1F               SBCI    R17, 255
   \   00000090   ........           CALL    mod_sqr128
   \   00000094   019E               MOVW    R19:R18, R29:R28
   \   00000096   5E20               SUBI    R18, 224
   \   00000098   4F3F               SBCI    R19, 255
   \   0000009A   018E               MOVW    R17:R16, R29:R28
   \   0000009C   5E00               SUBI    R16, 224
   \   0000009E   4F1F               SBCI    R17, 255
   \   000000A0   ........           CALL    mod_sqr128
   \   000000A4   01AE               MOVW    R21:R20, R29:R28
   \   000000A6   5E40               SUBI    R20, 224
   \   000000A8   4F5F               SBCI    R21, 255
   \   000000AA   019E               MOVW    R19:R18, R29:R28
   \   000000AC   5E20               SUBI    R18, 224
   \   000000AE   4F3F               SBCI    R19, 255
   \   000000B0   018E               MOVW    R17:R16, R29:R28
   \   000000B2   5C00               SUBI    R16, 192
   \   000000B4   4F1F               SBCI    R17, 255
   \   000000B6   ........           CALL    mod_mul128
   \   000000BA   019E               MOVW    R19:R18, R29:R28
   \   000000BC   5D20               SUBI    R18, 208
   \   000000BE   4F3F               SBCI    R19, 255
   \   000000C0   018E               MOVW    R17:R16, R29:R28
   \   000000C2   5E00               SUBI    R16, 224
   \   000000C4   4F1F               SBCI    R17, 255
   \   000000C6   ........           CALL    mod_sqr128
   \   000000CA   E007               LDI     R16, 7
   \   000000CC   2E40               MOV     R4, R16
   \                     ??fpexp1251_0:
   \   000000CE   019E               MOVW    R19:R18, R29:R28
   \   000000D0   5D20               SUBI    R18, 208
   \   000000D2   4F3F               SBCI    R19, 255
   \   000000D4   018E               MOVW    R17:R16, R29:R28
   \   000000D6   5D00               SUBI    R16, 208
   \   000000D8   4F1F               SBCI    R17, 255
   \   000000DA   ........           CALL    mod_sqr128
   \   000000DE   944A               DEC     R4
   \   000000E0   F7B1               BRNE    ??fpexp1251_0
   \   000000E2   01AE               MOVW    R21:R20, R29:R28
   \   000000E4   5D40               SUBI    R20, 208
   \   000000E6   4F5F               SBCI    R21, 255
   \   000000E8   019E               MOVW    R19:R18, R29:R28
   \   000000EA   5D20               SUBI    R18, 208
   \   000000EC   4F3F               SBCI    R19, 255
   \   000000EE   018E               MOVW    R17:R16, R29:R28
   \   000000F0   5E00               SUBI    R16, 224
   \   000000F2   4F1F               SBCI    R17, 255
   \   000000F4   ........           CALL    mod_mul128
   \   000000F8   019E               MOVW    R19:R18, R29:R28
   \   000000FA   5F20               SUBI    R18, 240
   \   000000FC   4F3F               SBCI    R19, 255
   \   000000FE   018E               MOVW    R17:R16, R29:R28
   \   00000100   5D00               SUBI    R16, 208
   \   00000102   4F1F               SBCI    R17, 255
   \   00000104   ........           CALL    mod_sqr128
   \   00000108   E00F               LDI     R16, 15
   \   0000010A   2E40               MOV     R4, R16
   \                     ??fpexp1251_1:
   \   0000010C   019E               MOVW    R19:R18, R29:R28
   \   0000010E   5F20               SUBI    R18, 240
   \   00000110   4F3F               SBCI    R19, 255
   \   00000112   018E               MOVW    R17:R16, R29:R28
   \   00000114   5F00               SUBI    R16, 240
   \   00000116   4F1F               SBCI    R17, 255
   \   00000118   ........           CALL    mod_sqr128
   \   0000011C   944A               DEC     R4
   \   0000011E   F7B1               BRNE    ??fpexp1251_1
   \   00000120   01AE               MOVW    R21:R20, R29:R28
   \   00000122   5F40               SUBI    R20, 240
   \   00000124   4F5F               SBCI    R21, 255
   \   00000126   019E               MOVW    R19:R18, R29:R28
   \   00000128   5F20               SUBI    R18, 240
   \   0000012A   4F3F               SBCI    R19, 255
   \   0000012C   018E               MOVW    R17:R16, R29:R28
   \   0000012E   5D00               SUBI    R16, 208
   \   00000130   4F1F               SBCI    R17, 255
   \   00000132   ........           CALL    mod_mul128
   \   00000136   019E               MOVW    R19:R18, R29:R28
   \   00000138   018E               MOVW    R17:R16, R29:R28
   \   0000013A   5F00               SUBI    R16, 240
   \   0000013C   4F1F               SBCI    R17, 255
   \   0000013E   ........           CALL    mod_sqr128
   \   00000142   E10F               LDI     R16, 31
   \   00000144   2E40               MOV     R4, R16
   \                     ??fpexp1251_2:
   \   00000146   019E               MOVW    R19:R18, R29:R28
   \   00000148   018E               MOVW    R17:R16, R29:R28
   \   0000014A   ........           CALL    mod_sqr128
   \   0000014E   944A               DEC     R4
   \   00000150   F7D1               BRNE    ??fpexp1251_2
   \   00000152   01AE               MOVW    R21:R20, R29:R28
   \   00000154   019E               MOVW    R19:R18, R29:R28
   \   00000156   018E               MOVW    R17:R16, R29:R28
   \   00000158   5F00               SUBI    R16, 240
   \   0000015A   4F1F               SBCI    R17, 255
   \   0000015C   ........           CALL    mod_mul128
   \   00000160   E200               LDI     R16, 32
   \   00000162   2E40               MOV     R4, R16
   \                     ??fpexp1251_3:
   \   00000164   019E               MOVW    R19:R18, R29:R28
   \   00000166   018E               MOVW    R17:R16, R29:R28
   \   00000168   ........           CALL    mod_sqr128
   \   0000016C   944A               DEC     R4
   \   0000016E   F7D1               BRNE    ??fpexp1251_3
   \   00000170   01AE               MOVW    R21:R20, R29:R28
   \   00000172   019E               MOVW    R19:R18, R29:R28
   \   00000174   5F20               SUBI    R18, 240
   \   00000176   4F3F               SBCI    R19, 255
   \   00000178   018E               MOVW    R17:R16, R29:R28
   \   0000017A   ........           CALL    mod_mul128
   \   0000017E   E100               LDI     R16, 16
   \   00000180   2E40               MOV     R4, R16
   \                     ??fpexp1251_4:
   \   00000182   019E               MOVW    R19:R18, R29:R28
   \   00000184   018E               MOVW    R17:R16, R29:R28
   \   00000186   ........           CALL    mod_sqr128
   \   0000018A   944A               DEC     R4
   \   0000018C   F7D1               BRNE    ??fpexp1251_4
   \   0000018E   01AE               MOVW    R21:R20, R29:R28
   \   00000190   019E               MOVW    R19:R18, R29:R28
   \   00000192   018E               MOVW    R17:R16, R29:R28
   \   00000194   5D00               SUBI    R16, 208
   \   00000196   4F1F               SBCI    R17, 255
   \   00000198   ........           CALL    mod_mul128
   \   0000019C   E008               LDI     R16, 8
   \   0000019E   2E40               MOV     R4, R16
   \                     ??fpexp1251_5:
   \   000001A0   019E               MOVW    R19:R18, R29:R28
   \   000001A2   018E               MOVW    R17:R16, R29:R28
   \   000001A4   ........           CALL    mod_sqr128
   \   000001A8   944A               DEC     R4
   \   000001AA   F7D1               BRNE    ??fpexp1251_5
   \   000001AC   01AE               MOVW    R21:R20, R29:R28
   \   000001AE   019E               MOVW    R19:R18, R29:R28
   \   000001B0   018E               MOVW    R17:R16, R29:R28
   \   000001B2   5E00               SUBI    R16, 224
   \   000001B4   4F1F               SBCI    R17, 255
   \   000001B6   ........           CALL    mod_mul128
   \   000001BA   E004               LDI     R16, 4
   \   000001BC   2E40               MOV     R4, R16
   \                     ??fpexp1251_6:
   \   000001BE   019E               MOVW    R19:R18, R29:R28
   \   000001C0   018E               MOVW    R17:R16, R29:R28
   \   000001C2   ........           CALL    mod_sqr128
   \   000001C6   944A               DEC     R4
   \   000001C8   F7D1               BRNE    ??fpexp1251_6
   \   000001CA   01AE               MOVW    R21:R20, R29:R28
   \   000001CC   019E               MOVW    R19:R18, R29:R28
   \   000001CE   018E               MOVW    R17:R16, R29:R28
   \   000001D0   5C00               SUBI    R16, 192
   \   000001D2   4F1F               SBCI    R17, 255
   \   000001D4   ........           CALL    mod_mul128
   \   000001D8   019E               MOVW    R19:R18, R29:R28
   \   000001DA   018E               MOVW    R17:R16, R29:R28
   \   000001DC   ........           CALL    mod_sqr128
   \   000001E0   01AD               MOVW    R21:R20, R27:R26
   \   000001E2   019E               MOVW    R19:R18, R29:R28
   \   000001E4   018C               MOVW    R17:R16, R25:R24
   \   000001E6   ........           CALL    mod_mul128
   \   000001EA   96EF               ADIW    R29:R28, 63
   \   000001EC   9661               ADIW    R29:R28, 17
   \   000001EE   9189               LD      R24, Y+
   \   000001F0   9199               LD      R25, Y+
   \   000001F2   91A9               LD      R26, Y+
   \   000001F4   91B9               LD      R27, Y+
   \   000001F6   9049               LD      R4, Y+
   \   000001F8   9508               RET

   \                                 In  segment FARCODE, align 2, keep-with-next
   \   __farfunc __version_3 void fpinv1271(digit_t *)
   \                     fpinv1271:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   9760               SBIW    R29:R28, 16
   \   00000006   01C8               MOVW    R25:R24, R17:R16
   \   00000008   019E               MOVW    R19:R18, R29:R28
   \   0000000A   ....               RCALL   fpexp1251
   \   0000000C   019E               MOVW    R19:R18, R29:R28
   \   0000000E   018E               MOVW    R17:R16, R29:R28
   \   00000010   ........           CALL    mod_sqr128
   \   00000014   019E               MOVW    R19:R18, R29:R28
   \   00000016   018E               MOVW    R17:R16, R29:R28
   \   00000018   ........           CALL    mod_sqr128
   \   0000001C   01AC               MOVW    R21:R20, R25:R24
   \   0000001E   019E               MOVW    R19:R18, R29:R28
   \   00000020   018C               MOVW    R17:R16, R25:R24
   \   00000022   ........           CALL    mod_mul128
   \   00000026   9660               ADIW    R29:R28, 16
   \   00000028   9189               LD      R24, Y+
   \   0000002A   9199               LD      R25, Y+
   \   0000002C   9508               RET

   \                                 In  segment FARCODE, align 2, keep-with-next
   \   __farfunc __version_3 void fpsqr1271(digit_t *, digit_t *)
   \                     fpsqr1271:
   \   00000000   ........           JMP     mod_sqr128

   \                                 In  segment FARCODE, align 2, keep-with-next
   \   __farfunc __version_3 void mp_mul(digit_t const *, digit_t const *, digit_t *, unsigned int const)
   \                     mp_mul:
   \   00000000   92DA               ST      -Y, R13
   \   00000002   92CA               ST      -Y, R12
   \   00000004   92BA               ST      -Y, R11
   \   00000006   92AA               ST      -Y, R10
   \   00000008   929A               ST      -Y, R9
   \   0000000A   928A               ST      -Y, R8
   \   0000000C   927A               ST      -Y, R7
   \   0000000E   926A               ST      -Y, R6
   \   00000010   925A               ST      -Y, R5
   \   00000012   924A               ST      -Y, R4
   \   00000014   93BA               ST      -Y, R27
   \   00000016   93AA               ST      -Y, R26
   \   00000018   939A               ST      -Y, R25
   \   0000001A   938A               ST      -Y, R24
   \   0000001C                      REQUIRE ?Register_R4_is_cg_reg
   \   0000001C                      REQUIRE ?Register_R5_is_cg_reg
   \   0000001C                      REQUIRE ?Register_R6_is_cg_reg
   \   0000001C                      REQUIRE ?Register_R7_is_cg_reg
   \   0000001C                      REQUIRE ?Register_R8_is_cg_reg
   \   0000001C                      REQUIRE ?Register_R9_is_cg_reg
   \   0000001C                      REQUIRE ?Register_R10_is_cg_reg
   \   0000001C                      REQUIRE ?Register_R11_is_cg_reg
   \   0000001C                      REQUIRE ?Register_R12_is_cg_reg
   \   0000001C                      REQUIRE ?Register_R13_is_cg_reg
   \   0000001C   97A2               SBIW    R29:R28, 34
   \   0000001E   832A               STD     Y+2, R18
   \   00000020   833B               STD     Y+3, R19
   \   00000022   8368               ST      Y, R22
   \   00000024   8379               STD     Y+1, R23
   \   00000026   2F86               MOV     R24, R22
   \   00000028   8199               LDD     R25, Y+1
   \   0000002A   9702               SBIW    R25:R24, 2
   \   0000002C   F429               BRNE    ??mp_mul_0
   \   0000002E   812A               LDD     R18, Y+2
   \   00000030   813B               LDD     R19, Y+3
   \   00000032   ........           CALL    mul64
   \   00000036   C0E5               RJMP    ??mp_mul_1
   \                     ??mp_mul_0:
   \   00000038   8188               LD      R24, Y
   \   0000003A   8199               LDD     R25, Y+1
   \   0000003C   9708               SBIW    R25:R24, 8
   \   0000003E   F429               BRNE    ??mp_mul_2
   \   00000040   812A               LDD     R18, Y+2
   \   00000042   813B               LDD     R19, Y+3
   \   00000044   ........           CALL    mul256
   \   00000048   C0DC               RJMP    ??mp_mul_1
   \                     ??mp_mul_2:
   \   0000004A   8128               LD      R18, Y
   \   0000004C   8139               LDD     R19, Y+1
   \   0000004E   773F               ANDI    R19, 0x7F
   \   00000050   2B23               OR      R18, R19
   \   00000052   F061               BREQ    ??mp_mul_3
   \   00000054   01DA               MOVW    R27:R26, R21:R20
   \   00000056   81E8               LD      R30, Y
   \   00000058   81F9               LDD     R31, Y+1
   \   0000005A   0FEE               LSL     R30
   \   0000005C   1FFF               ROL     R31
   \   0000005E   2400               CLR     R0
   \                     ??mp_mul_4:
   \   00000060   920D               ST      X+, R0
   \   00000062   920D               ST      X+, R0
   \   00000064   920D               ST      X+, R0
   \   00000066   920D               ST      X+, R0
   \   00000068   9731               SBIW    R31:R30, 1
   \   0000006A   F7D1               BRNE    ??mp_mul_4
   \                     ??mp_mul_3:
   \   0000006C   8128               LD      R18, Y
   \   0000006E   8139               LDD     R19, Y+1
   \   00000070   2B23               OR      R18, R19
   \   00000072   F409               BRNE    $+2+2
   \   00000074   C0C6               RJMP    ??mp_mul_1
   \   00000076   8748               STD     Y+8, R20
   \   00000078   8759               STD     Y+9, R21
   \   0000007A   8128               LD      R18, Y
   \   0000007C   8139               LDD     R19, Y+1
   \   0000007E   0F22               LSL     R18
   \   00000080   1F33               ROL     R19
   \   00000082   0F22               LSL     R18
   \   00000084   1F33               ROL     R19
   \   00000086   0F42               ADD     R20, R18
   \   00000088   1F53               ADC     R21, R19
   \   0000008A   8B48               STD     Y+16, R20
   \   0000008C   8B59               STD     Y+17, R21
   \   0000008E   830E               STD     Y+6, R16
   \   00000090   831F               STD     Y+7, R17
   \   00000092   8108               LD      R16, Y
   \   00000094   8119               LDD     R17, Y+1
   \   00000096   870E               STD     Y+14, R16
   \   00000098   871F               STD     Y+15, R17
   \                     ??mp_mul_5:
   \   0000009A   E080               LDI     R24, 0
   \   0000009C   E090               LDI     R25, 0
   \   0000009E   E0A0               LDI     R26, 0
   \   000000A0   E0B0               LDI     R27, 0
   \   000000A2   810A               LDD     R16, Y+2
   \   000000A4   811B               LDD     R17, Y+3
   \   000000A6   870C               STD     Y+12, R16
   \   000000A8   871D               STD     Y+13, R17
   \   000000AA   8508               LDD     R16, Y+8
   \   000000AC   8519               LDD     R17, Y+9
   \   000000AE   830C               STD     Y+4, R16
   \   000000B0   831D               STD     Y+5, R17
   \   000000B2   8108               LD      R16, Y
   \   000000B4   8119               LDD     R17, Y+1
   \   000000B6   870A               STD     Y+10, R16
   \   000000B8   871B               STD     Y+11, R17
   \                     ??mp_mul_6:
   \   000000BA   85EC               LDD     R30, Y+12
   \   000000BC   85FD               LDD     R31, Y+13
   \   000000BE   9141               LD      R20, Z+
   \   000000C0   9151               LD      R21, Z+
   \   000000C2   9161               LD      R22, Z+
   \   000000C4   9171               LD      R23, Z+
   \   000000C6   87EC               STD     Y+12, R30
   \   000000C8   87FD               STD     Y+13, R31
   \   000000CA   8B4E               STD     Y+22, R20
   \   000000CC   8B5F               STD     Y+23, R21
   \   000000CE   8F68               STD     Y+24, R22
   \   000000D0   8F79               STD     Y+25, R23
   \   000000D2   81EE               LDD     R30, Y+6
   \   000000D4   81FF               LDD     R31, Y+7
   \   000000D6   8100               LD      R16, Z
   \   000000D8   8111               LDD     R17, Z+1
   \   000000DA   8122               LDD     R18, Z+2
   \   000000DC   8133               LDD     R19, Z+3
   \   000000DE   8B0A               STD     Y+18, R16
   \   000000E0   8B1B               STD     Y+19, R17
   \   000000E2   8B2C               STD     Y+20, R18
   \   000000E4   8B3D               STD     Y+21, R19
   \   000000E6   01AE               MOVW    R21:R20, R29:R28
   \   000000E8   5E46               SUBI    R20, 230
   \   000000EA   4F5F               SBCI    R21, 255
   \   000000EC   019E               MOVW    R19:R18, R29:R28
   \   000000EE   5E2A               SUBI    R18, 234
   \   000000F0   4F3F               SBCI    R19, 255
   \   000000F2   018E               MOVW    R17:R16, R29:R28
   \   000000F4   5E0E               SUBI    R16, 238
   \   000000F6   4F1F               SBCI    R17, 255
   \   000000F8   ........           CALL    mul32
   \   000000FC   8D0A               LDD     R16, Y+26
   \   000000FE   8D1B               LDD     R17, Y+27
   \   00000100   8D2C               LDD     R18, Y+28
   \   00000102   8D3D               LDD     R19, Y+29
   \   00000104   0F80               ADD     R24, R16
   \   00000106   1F91               ADC     R25, R17
   \   00000108   1FA2               ADC     R26, R18
   \   0000010A   1FB3               ADC     R27, R19
   \   0000010C   81EC               LDD     R30, Y+4
   \   0000010E   81FD               LDD     R31, Y+5
   \   00000110   8000               LD      R0, Z
   \   00000112   8011               LDD     R1, Z+1
   \   00000114   8022               LDD     R2, Z+2
   \   00000116   8033               LDD     R3, Z+3
   \   00000118   01AC               MOVW    R21:R20, R25:R24
   \   0000011A   01BD               MOVW    R23:R22, R27:R26
   \   0000011C   0D40               ADD     R20, R0
   \   0000011E   1D51               ADC     R21, R1
   \   00000120   1D62               ADC     R22, R2
   \   00000122   1D73               ADC     R23, R3
   \   00000124   8C4E               LDD     R4, Y+30
   \   00000126   8C5F               LDD     R5, Y+31
   \   00000128   A068               LDD     R6, Y+32
   \   0000012A   A079               LDD     R7, Y+33
   \   0000012C   927A               ST      -Y, R7
   \   0000012E   926A               ST      -Y, R6
   \   00000130   925A               ST      -Y, R5
   \   00000132   924A               ST      -Y, R4
   \   00000134   FBB7               BST     R27, 7
   \   00000136   24CC               CLR     R12
   \   00000138   24DD               CLR     R13
   \   0000013A   F8C0               BLD     R12, 0
   \   0000013C   2488               CLR     R8
   \   0000013E   F880               BLD     R8, 0
   \   00000140   FB37               BST     R19, 7
   \   00000142   2444               CLR     R4
   \   00000144   F840               BLD     R4, 0
   \   00000146   2484               EOR     R8, R4
   \   00000148   1B80               SUB     R24, R16
   \   0000014A   0B91               SBC     R25, R17
   \   0000014C   0BA2               SBC     R26, R18
   \   0000014E   0BB3               SBC     R27, R19
   \   00000150   0FBB               LSL     R27
   \   00000152   E080               LDI     R24, 0
   \   00000154   1F88               ROL     R24
   \   00000156   2444               CLR     R4
   \   00000158   F840               BLD     R4, 0
   \   0000015A   2584               EOR     R24, R4
   \   0000015C   2A88               OR      R8, R24
   \   0000015E   24C8               EOR     R12, R8
   \   00000160   9189               LD      R24, Y+
   \   00000162   9199               LD      R25, Y+
   \   00000164   91A9               LD      R26, Y+
   \   00000166   91B9               LD      R27, Y+
   \   00000168   0D8C               ADD     R24, R12
   \   0000016A   1D9D               ADC     R25, R13
   \   0000016C   1DAD               ADC     R26, R13
   \   0000016E   1DBD               ADC     R27, R13
   \   00000170   FB77               BST     R23, 7
   \   00000172   E000               LDI     R16, 0
   \   00000174   F900               BLD     R16, 0
   \   00000176   2444               CLR     R4
   \   00000178   F840               BLD     R4, 0
   \   0000017A   FA37               BST     R3, 7
   \   0000017C   2488               CLR     R8
   \   0000017E   F880               BLD     R8, 0
   \   00000180   2448               EOR     R4, R8
   \   00000182   014A               MOVW    R9:R8, R21:R20
   \   00000184   015B               MOVW    R11:R10, R23:R22
   \   00000186   1880               SUB     R8, R0
   \   00000188   0891               SBC     R9, R1
   \   0000018A   08A2               SBC     R10, R2
   \   0000018C   08B3               SBC     R11, R3
   \   0000018E   0CBB               LSL     R11
   \   00000190   2488               CLR     R8
   \   00000192   1C88               ROL     R8
   \   00000194   24CC               CLR     R12
   \   00000196   F8C0               BLD     R12, 0
   \   00000198   248C               EOR     R8, R12
   \   0000019A   2848               OR      R4, R8
   \   0000019C   2504               EOR     R16, R4
   \   0000019E   0F80               ADD     R24, R16
   \   000001A0   1D9D               ADC     R25, R13
   \   000001A2   1DAD               ADC     R26, R13
   \   000001A4   1DBD               ADC     R27, R13
   \   000001A6   81EC               LDD     R30, Y+4
   \   000001A8   81FD               LDD     R31, Y+5
   \   000001AA   9341               ST      Z+, R20
   \   000001AC   9351               ST      Z+, R21
   \   000001AE   9361               ST      Z+, R22
   \   000001B0   9371               ST      Z+, R23
   \   000001B2   83EC               STD     Y+4, R30
   \   000001B4   83FD               STD     Y+5, R31
   \   000001B6   850A               LDD     R16, Y+10
   \   000001B8   851B               LDD     R17, Y+11
   \   000001BA   5001               SUBI    R16, 1
   \   000001BC   4010               SBCI    R17, 0
   \   000001BE   870A               STD     Y+10, R16
   \   000001C0   871B               STD     Y+11, R17
   \   000001C2   2B01               OR      R16, R17
   \   000001C4   F009               BREQ    $+2+2
   \   000001C6   CF79               RJMP    ??mp_mul_6
   \   000001C8   89E8               LDD     R30, Y+16
   \   000001CA   89F9               LDD     R31, Y+17
   \   000001CC   9381               ST      Z+, R24
   \   000001CE   9391               ST      Z+, R25
   \   000001D0   93A1               ST      Z+, R26
   \   000001D2   93B1               ST      Z+, R27
   \   000001D4   8BE8               STD     Y+16, R30
   \   000001D6   8BF9               STD     Y+17, R31
   \   000001D8   810E               LDD     R16, Y+6
   \   000001DA   811F               LDD     R17, Y+7
   \   000001DC   5F0C               SUBI    R16, 252
   \   000001DE   4F1F               SBCI    R17, 255
   \   000001E0   830E               STD     Y+6, R16
   \   000001E2   831F               STD     Y+7, R17
   \   000001E4   8508               LDD     R16, Y+8
   \   000001E6   8519               LDD     R17, Y+9
   \   000001E8   5F0C               SUBI    R16, 252
   \   000001EA   4F1F               SBCI    R17, 255
   \   000001EC   8708               STD     Y+8, R16
   \   000001EE   8719               STD     Y+9, R17
   \   000001F0   850E               LDD     R16, Y+14
   \   000001F2   851F               LDD     R17, Y+15
   \   000001F4   5001               SUBI    R16, 1
   \   000001F6   4010               SBCI    R17, 0
   \   000001F8   870E               STD     Y+14, R16
   \   000001FA   871F               STD     Y+15, R17
   \   000001FC   2B01               OR      R16, R17
   \   000001FE   F009               BREQ    $+2+2
   \   00000200   CF4C               RJMP    ??mp_mul_5
   \                     ??mp_mul_1:
   \   00000202   96A2               ADIW    R29:R28, 34
   \   00000204   9189               LD      R24, Y+
   \   00000206   9199               LD      R25, Y+
   \   00000208   91A9               LD      R26, Y+
   \   0000020A   91B9               LD      R27, Y+
   \   0000020C   9049               LD      R4, Y+
   \   0000020E   9059               LD      R5, Y+
   \   00000210   9069               LD      R6, Y+
   \   00000212   9079               LD      R7, Y+
   \   00000214   9089               LD      R8, Y+
   \   00000216   9099               LD      R9, Y+
   \   00000218   90A9               LD      R10, Y+
   \   0000021A   90B9               LD      R11, Y+
   \   0000021C   90C9               LD      R12, Y+
   \   0000021E   90D9               LD      R13, Y+
   \   00000220   9508               RET

   \                                 In  segment FARCODE, align 2, keep-with-next
   \   __farfunc __version_3 unsigned int subtract(digit_t const *, digit_t const *, digit_t *, unsigned int const)
   \                     subtract:
   \   00000000   ........           JMP     mp_sub

   \                                 In  segment FARCODE, align 2, keep-with-next
   \   __farfunc __version_3 void subtract_mod_order(digit_t const *, digit_t const *, digit_t *)
   \                     subtract_mod_order:
   \   00000000   92EA               ST      -Y, R14
   \   00000002   92CA               ST      -Y, R12
   \   00000004   92BA               ST      -Y, R11
   \   00000006   92AA               ST      -Y, R10
   \   00000008   929A               ST      -Y, R9
   \   0000000A   928A               ST      -Y, R8
   \   0000000C   927A               ST      -Y, R7
   \   0000000E   926A               ST      -Y, R6
   \   00000010   925A               ST      -Y, R5
   \   00000012   924A               ST      -Y, R4
   \   00000014   93AA               ST      -Y, R26
   \   00000016   939A               ST      -Y, R25
   \   00000018   938A               ST      -Y, R24
   \   0000001A                      REQUIRE ?Register_R4_is_cg_reg
   \   0000001A                      REQUIRE ?Register_R5_is_cg_reg
   \   0000001A                      REQUIRE ?Register_R6_is_cg_reg
   \   0000001A                      REQUIRE ?Register_R7_is_cg_reg
   \   0000001A                      REQUIRE ?Register_R8_is_cg_reg
   \   0000001A                      REQUIRE ?Register_R9_is_cg_reg
   \   0000001A                      REQUIRE ?Register_R10_is_cg_reg
   \   0000001A                      REQUIRE ?Register_R11_is_cg_reg
   \   0000001A                      REQUIRE ?Register_R12_is_cg_reg
   \   0000001A                      REQUIRE ?Register_R14_is_cg_reg
   \   0000001A   012A               MOVW    R5:R4, R21:R20
   \   0000001C   E080               LDI     R24, 0
   \   0000001E   E090               LDI     R25, 0
   \   00000020   E0A0               LDI     R26, 0
   \   00000022   E068               LDI     R22, 8
   \   00000024   E070               LDI     R23, 0
   \   00000026   ........           CALL    mp_sub
   \   0000002A   01A8               MOVW    R21:R20, R17:R16
   \   0000002C   9550               COM     R21
   \   0000002E   EF6F               LDI     R22, 255
   \   00000030   EF7F               LDI     R23, 255
   \   00000032   9541               NEG     R20
   \   00000034   4F5F               SBCI    R21, 255
   \   00000036   4F6F               SBCI    R22, 255
   \   00000038   4F7F               SBCI    R23, 255
   \   0000003A   ....               LDI     R16, LOW(curve_order)
   \   0000003C   ....               LDI     R17, (curve_order) >> 8
   \   0000003E   0138               MOVW    R7:R6, R17:R16
   \   00000040   E008               LDI     R16, 8
   \   00000042   2EC0               MOV     R12, R16
   \                     ??subtract_mod_order_0:
   \   00000044   01F2               MOVW    R31:R30, R5:R4
   \   00000046   8100               LD      R16, Z
   \   00000048   8111               LDD     R17, Z+1
   \   0000004A   8122               LDD     R18, Z+2
   \   0000004C   8133               LDD     R19, Z+3
   \   0000004E   0F08               ADD     R16, R24
   \   00000050   1F19               ADC     R17, R25
   \   00000052   1F29               ADC     R18, R25
   \   00000054   1F39               ADC     R19, R25
   \   00000056   01F3               MOVW    R31:R30, R7:R6
   \   00000058   9001               LD      R0, Z+
   \   0000005A   9011               LD      R1, Z+
   \   0000005C   9021               LD      R2, Z+
   \   0000005E   9031               LD      R3, Z+
   \   00000060   013F               MOVW    R7:R6, R31:R30
   \   00000062   014A               MOVW    R9:R8, R21:R20
   \   00000064   015B               MOVW    R11:R10, R23:R22
   \   00000066   2080               AND     R8, R0
   \   00000068   2091               AND     R9, R1
   \   0000006A   20A2               AND     R10, R2
   \   0000006C   20B3               AND     R11, R3
   \   0000006E   0E80               ADD     R8, R16
   \   00000070   1E91               ADC     R9, R17
   \   00000072   1EA2               ADC     R10, R18
   \   00000074   1EB3               ADC     R11, R19
   \   00000076   01F2               MOVW    R31:R30, R5:R4
   \   00000078   8280               ST      Z, R8
   \   0000007A   8291               STD     Z+1, R9
   \   0000007C   82A2               STD     Z+2, R10
   \   0000007E   82B3               STD     Z+3, R11
   \   00000080   9001               LD      R0, Z+
   \   00000082   9011               LD      R1, Z+
   \   00000084   9021               LD      R2, Z+
   \   00000086   9031               LD      R3, Z+
   \   00000088   012F               MOVW    R5:R4, R31:R30
   \   0000008A   FB37               BST     R19, 7
   \   0000008C   E0E0               LDI     R30, 0
   \   0000008E   F9E0               BLD     R30, 0
   \   00000090   24EE               CLR     R14
   \   00000092   F8E0               BLD     R14, 0
   \   00000094   0148               MOVW    R9:R8, R17:R16
   \   00000096   0159               MOVW    R11:R10, R19:R18
   \   00000098   1A88               SUB     R8, R24
   \   0000009A   0A99               SBC     R9, R25
   \   0000009C   0AA9               SBC     R10, R25
   \   0000009E   0AB9               SBC     R11, R25
   \   000000A0   0CBB               LSL     R11
   \   000000A2   2488               CLR     R8
   \   000000A4   1C88               ROL     R8
   \   000000A6   28E8               OR      R14, R8
   \   000000A8   25EE               EOR     R30, R14
   \   000000AA   2F8E               MOV     R24, R30
   \   000000AC   FA37               BST     R3, 7
   \   000000AE   F9A0               BLD     R26, 0
   \   000000B0   2488               CLR     R8
   \   000000B2   F880               BLD     R8, 0
   \   000000B4   FB37               BST     R19, 7
   \   000000B6   E0E0               LDI     R30, 0
   \   000000B8   F9E0               BLD     R30, 0
   \   000000BA   268E               EOR     R8, R30
   \   000000BC   1A00               SUB     R0, R16
   \   000000BE   0A11               SBC     R1, R17
   \   000000C0   0A22               SBC     R2, R18
   \   000000C2   0A33               SBC     R3, R19
   \   000000C4   0C33               LSL     R3
   \   000000C6   2400               CLR     R0
   \   000000C8   1C00               ROL     R0
   \   000000CA   260E               EOR     R0, R30
   \   000000CC   2880               OR      R8, R0
   \   000000CE   25A8               EOR     R26, R8
   \   000000D0   2B8A               OR      R24, R26
   \   000000D2   E0A0               LDI     R26, 0
   \   000000D4   94CA               DEC     R12
   \   000000D6   F009               BREQ    $+2+2
   \   000000D8   CFB5               RJMP    ??subtract_mod_order_0
   \   000000DA   9189               LD      R24, Y+
   \   000000DC   9199               LD      R25, Y+
   \   000000DE   91A9               LD      R26, Y+
   \   000000E0   9049               LD      R4, Y+
   \   000000E2   9059               LD      R5, Y+
   \   000000E4   9069               LD      R6, Y+
   \   000000E6   9079               LD      R7, Y+
   \   000000E8                      REQUIRE ?Subroutine6
   \   000000E8                      ;               // Fall through to label ?Subroutine6

   \                                 In  segment FARCODE, align 2, keep-with-next
   \                     ?Subroutine6:
   \   00000000   9089               LD      R8, Y+
   \   00000002   9099               LD      R9, Y+
   \   00000004   90A9               LD      R10, Y+
   \   00000006   90B9               LD      R11, Y+
   \   00000008   90C9               LD      R12, Y+
   \   0000000A   90E9               LD      R14, Y+
   \   0000000C   9508               RET

   \                                 In  segment FARCODE, align 2, keep-with-next
   \   __farfunc __version_3 void add_mod_order(digit_t *, digit_t *, digit_t *)
   \                     add_mod_order:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   01CA               MOVW    R25:R24, R21:R20
   \   00000006   E068               LDI     R22, 8
   \   00000008   E070               LDI     R23, 0
   \   0000000A   ........           CALL    mp_add
   \   0000000E   01AC               MOVW    R21:R20, R25:R24
   \   00000010   ....               LDI     R18, LOW(curve_order)
   \   00000012   ....               LDI     R19, (curve_order) >> 8
   \   00000014   018C               MOVW    R17:R16, R25:R24
   \   00000016   ....               RCALL   subtract_mod_order
   \   00000018   9189               LD      R24, Y+
   \   0000001A   9199               LD      R25, Y+
   \   0000001C   9508               RET

   \                                 In  segment FARCODE, align 2, keep-with-next
   \   __farfunc __version_3 void Montgomery_multiply_mod_order(digit_t const *, digit_t const *, digit_t *)
   \                     Montgomery_multiply_mod_order:
   \   00000000   927A               ST      -Y, R7
   \   00000002   926A               ST      -Y, R6
   \   00000004   925A               ST      -Y, R5
   \   00000006   924A               ST      -Y, R4
   \   00000008   93BA               ST      -Y, R27
   \   0000000A   93AA               ST      -Y, R26
   \   0000000C   939A               ST      -Y, R25
   \   0000000E   938A               ST      -Y, R24
   \   00000010                      REQUIRE ?Register_R4_is_cg_reg
   \   00000010                      REQUIRE ?Register_R5_is_cg_reg
   \   00000010                      REQUIRE ?Register_R6_is_cg_reg
   \   00000010                      REQUIRE ?Register_R7_is_cg_reg
   \   00000010   97EF               SBIW    R29:R28, 63
   \   00000012   97EF               SBIW    R29:R28, 63
   \   00000014   97EF               SBIW    R29:R28, 63
   \   00000016   9723               SBIW    R29:R28, 3
   \   00000018   01CA               MOVW    R25:R24, R21:R20
   \   0000001A   E068               LDI     R22, 8
   \   0000001C   E070               LDI     R23, 0
   \   0000001E   01AE               MOVW    R21:R20, R29:R28
   \   00000020   5840               SUBI    R20, 128
   \   00000022   4F5F               SBCI    R21, 255
   \   00000024   ....               RCALL   mp_mul
   \   00000026   E068               LDI     R22, 8
   \   00000028   E070               LDI     R23, 0
   \   0000002A   01AE               MOVW    R21:R20, R29:R28
   \   0000002C   5C40               SUBI    R20, 192
   \   0000002E   4F5F               SBCI    R21, 255
   \   00000030   ....               LDI     R18, LOW((curve_order + 32))
   \   00000032   ....               LDI     R19, HIGH((curve_order + 32))
   \   00000034   018E               MOVW    R17:R16, R29:R28
   \   00000036   5800               SUBI    R16, 128
   \   00000038   4F1F               SBCI    R17, 255
   \   0000003A   ....               RCALL   mp_mul
   \   0000003C   E068               LDI     R22, 8
   \   0000003E   E070               LDI     R23, 0
   \   00000040   01AE               MOVW    R21:R20, R29:R28
   \   00000042   ....               LDI     R18, LOW(curve_order)
   \   00000044   ....               LDI     R19, (curve_order) >> 8
   \   00000046   018E               MOVW    R17:R16, R29:R28
   \   00000048   5C00               SUBI    R16, 192
   \   0000004A   4F1F               SBCI    R17, 255
   \   0000004C   ....               RCALL   mp_mul
   \   0000004E   E160               LDI     R22, 16
   \   00000050   E070               LDI     R23, 0
   \   00000052   01AE               MOVW    R21:R20, R29:R28
   \   00000054   019E               MOVW    R19:R18, R29:R28
   \   00000056   018E               MOVW    R17:R16, R29:R28
   \   00000058   5800               SUBI    R16, 128
   \   0000005A   4F1F               SBCI    R17, 255
   \   0000005C   ........           CALL    mp_add
   \   00000060   0128               MOVW    R5:R4, R17:R16
   \   00000062   01FC               MOVW    R31:R30, R25:R24
   \   00000064   01DE               MOVW    R27:R26, R29:R28
   \   00000066   9690               ADIW    R27:R26, 32
   \   00000068   E008               LDI     R16, 8
   \                     ??Montgomery_multiply_mod_order_0:
   \   0000006A   914D               LD      R20, X+
   \   0000006C   915D               LD      R21, X+
   \   0000006E   916D               LD      R22, X+
   \   00000070   917D               LD      R23, X+
   \   00000072   9341               ST      Z+, R20
   \   00000074   9351               ST      Z+, R21
   \   00000076   9361               ST      Z+, R22
   \   00000078   9371               ST      Z+, R23
   \   0000007A   950A               DEC     R16
   \   0000007C   F7B1               BRNE    ??Montgomery_multiply_mod_order_0
   \   0000007E   2466               CLR     R6
   \   00000080   2477               CLR     R7
   \   00000082   E068               LDI     R22, 8
   \   00000084   E070               LDI     R23, 0
   \   00000086   01AC               MOVW    R21:R20, R25:R24
   \   00000088   ....               LDI     R18, LOW(curve_order)
   \   0000008A   ....               LDI     R19, (curve_order) >> 8
   \   0000008C   018C               MOVW    R17:R16, R25:R24
   \   0000008E   ........           CALL    mp_sub
   \   00000092   1A40               SUB     R4, R16
   \   00000094   0A51               SBC     R5, R17
   \   00000096   0866               SBC     R6, R6
   \   00000098   0877               SBC     R7, R7
   \   0000009A   01FE               MOVW    R31:R30, R29:R28
   \   0000009C   ....               LDI     R26, LOW(curve_order)
   \   0000009E   ....               LDI     R27, (curve_order) >> 8
   \   000000A0   E048               LDI     R20, 8
   \                     ??Montgomery_multiply_mod_order_1:
   \   000000A2   910D               LD      R16, X+
   \   000000A4   911D               LD      R17, X+
   \   000000A6   912D               LD      R18, X+
   \   000000A8   913D               LD      R19, X+
   \   000000AA   2104               AND     R16, R4
   \   000000AC   2115               AND     R17, R5
   \   000000AE   2126               AND     R18, R6
   \   000000B0   2137               AND     R19, R7
   \   000000B2   9301               ST      Z+, R16
   \   000000B4   9311               ST      Z+, R17
   \   000000B6   9321               ST      Z+, R18
   \   000000B8   9331               ST      Z+, R19
   \   000000BA   954A               DEC     R20
   \   000000BC   F791               BRNE    ??Montgomery_multiply_mod_order_1
   \   000000BE   E068               LDI     R22, 8
   \   000000C0   E070               LDI     R23, 0
   \   000000C2   01AC               MOVW    R21:R20, R25:R24
   \   000000C4   019E               MOVW    R19:R18, R29:R28
   \   000000C6   018C               MOVW    R17:R16, R25:R24
   \   000000C8   ........           CALL    mp_add
   \   000000CC   ....               RJMP    ?Subroutine9

   \                                 In  segment FARCODE, align 2, keep-with-next
   \   __farfunc __version_3 void modulo_order(digit_t *, digit_t *)
   \                     modulo_order:
   \   00000000   93AA               ST      -Y, R26
   \   00000002   939A               ST      -Y, R25
   \   00000004   938A               ST      -Y, R24
   \   00000006   97EF               SBIW    R29:R28, 63
   \   00000008   9721               SBIW    R29:R28, 1
   \   0000000A   01C9               MOVW    R25:R24, R19:R18
   \   0000000C   01FE               MOVW    R31:R30, R29:R28
   \   0000000E   E040               LDI     R20, 0
   \   00000010   E2A0               LDI     R26, 32
   \                     ??modulo_order_0:
   \   00000012   9341               ST      Z+, R20
   \   00000014   95AA               DEC     R26
   \   00000016   F7E9               BRNE    ??modulo_order_0
   \   00000018   E021               LDI     R18, 1
   \   0000001A   8328               ST      Y, R18
   \   0000001C   8349               STD     Y+1, R20
   \   0000001E   834A               STD     Y+2, R20
   \   00000020   834B               STD     Y+3, R20
   \   00000022   01AE               MOVW    R21:R20, R29:R28
   \   00000024   5E40               SUBI    R20, 224
   \   00000026   4F5F               SBCI    R21, 255
   \   00000028   ....               LDI     R18, LOW(Montgomery_Rprime)
   \   0000002A   ....               LDI     R19, (Montgomery_Rprime) >> 8
   \   0000002C   ....               RCALL   Montgomery_multiply_mod_order
   \   0000002E   01AC               MOVW    R21:R20, R25:R24
   \   00000030   019E               MOVW    R19:R18, R29:R28
   \   00000032   018E               MOVW    R17:R16, R29:R28
   \   00000034   5E00               SUBI    R16, 224
   \   00000036   4F1F               SBCI    R17, 255
   \   00000038   ....               RCALL   Montgomery_multiply_mod_order
   \   0000003A   96EF               ADIW    R29:R28, 63
   \   0000003C   9621               ADIW    R29:R28, 1
   \   0000003E   9189               LD      R24, Y+
   \   00000040   9199               LD      R25, Y+
   \   00000042   91A9               LD      R26, Y+
   \   00000044   9508               RET

   \                                 In  segment FARCODE, align 2, keep-with-next
   \   __farfunc __version_3 void conversion_to_odd(digit_t *, digit_t *)
   \                     conversion_to_odd:
   \   00000000   92FA               ST      -Y, R15
   \   00000002   92EA               ST      -Y, R14
   \   00000004   92CA               ST      -Y, R12
   \   00000006   92BA               ST      -Y, R11
   \   00000008   92AA               ST      -Y, R10
   \   0000000A   929A               ST      -Y, R9
   \   0000000C   928A               ST      -Y, R8
   \   0000000E   926A               ST      -Y, R6
   \   00000010   925A               ST      -Y, R5
   \   00000012   924A               ST      -Y, R4
   \   00000014   93BA               ST      -Y, R27
   \   00000016   93AA               ST      -Y, R26
   \   00000018   939A               ST      -Y, R25
   \   0000001A   938A               ST      -Y, R24
   \   0000001C                      REQUIRE ?Register_R4_is_cg_reg
   \   0000001C                      REQUIRE ?Register_R5_is_cg_reg
   \   0000001C                      REQUIRE ?Register_R6_is_cg_reg
   \   0000001C                      REQUIRE ?Register_R8_is_cg_reg
   \   0000001C                      REQUIRE ?Register_R9_is_cg_reg
   \   0000001C                      REQUIRE ?Register_R10_is_cg_reg
   \   0000001C                      REQUIRE ?Register_R11_is_cg_reg
   \   0000001C                      REQUIRE ?Register_R12_is_cg_reg
   \   0000001C                      REQUIRE ?Register_R14_is_cg_reg
   \   0000001C                      REQUIRE ?Register_R15_is_cg_reg
   \   0000001C   9721               SBIW    R29:R28, 1
   \   0000001E   01F8               MOVW    R31:R30, R17:R16
   \   00000020   2444               CLR     R4
   \   00000022   2455               CLR     R5
   \   00000024   8140               LD      R20, Z
   \   00000026   7041               ANDI    R20, 0x01
   \   00000028   EF5F               LDI     R21, 255
   \   0000002A   EF6F               LDI     R22, 255
   \   0000002C   EF7F               LDI     R23, 255
   \   0000002E   9541               NEG     R20
   \   00000030   4F5F               SBCI    R21, 255
   \   00000032   4F6F               SBCI    R22, 255
   \   00000034   4F7F               SBCI    R23, 255
   \   00000036   9540               COM     R20
   \   00000038   9550               COM     R21
   \   0000003A   9560               COM     R22
   \   0000003C   9570               COM     R23
   \   0000003E   ....               LDI     R24, LOW(curve_order)
   \   00000040   ....               LDI     R25, (curve_order) >> 8
   \   00000042   01D9               MOVW    R27:R26, R19:R18
   \   00000044   0178               MOVW    R15:R14, R17:R16
   \   00000046   E008               LDI     R16, 8
   \   00000048   8308               ST      Y, R16
   \                     ??conversion_to_odd_0:
   \   0000004A   01FC               MOVW    R31:R30, R25:R24
   \   0000004C   9101               LD      R16, Z+
   \   0000004E   9111               LD      R17, Z+
   \   00000050   9121               LD      R18, Z+
   \   00000052   9131               LD      R19, Z+
   \   00000054   01CF               MOVW    R25:R24, R31:R30
   \   00000056   2304               AND     R16, R20
   \   00000058   2315               AND     R17, R21
   \   0000005A   2326               AND     R18, R22
   \   0000005C   2337               AND     R19, R23
   \   0000005E   2466               CLR     R6
   \   00000060   0D04               ADD     R16, R4
   \   00000062   1D15               ADC     R17, R5
   \   00000064   1D25               ADC     R18, R5
   \   00000066   1D35               ADC     R19, R5
   \   00000068   01F7               MOVW    R31:R30, R15:R14
   \   0000006A   9001               LD      R0, Z+
   \   0000006C   9011               LD      R1, Z+
   \   0000006E   9021               LD      R2, Z+
   \   00000070   9031               LD      R3, Z+
   \   00000072   017F               MOVW    R15:R14, R31:R30
   \   00000074   0E00               ADD     R0, R16
   \   00000076   1E11               ADC     R1, R17
   \   00000078   1E22               ADC     R2, R18
   \   0000007A   1E33               ADC     R3, R19
   \   0000007C   01FD               MOVW    R31:R30, R27:R26
   \   0000007E   8200               ST      Z, R0
   \   00000080   8211               STD     Z+1, R1
   \   00000082   8222               STD     Z+2, R2
   \   00000084   8233               STD     Z+3, R3
   \   00000086   9614               ADIW    R27:R26, 4
   \   00000088   8011               LDD     R1, Z+1
   \   0000008A   8022               LDD     R2, Z+2
   \   0000008C   FB37               BST     R19, 7
   \   0000008E   E0E0               LDI     R30, 0
   \   00000090   F9E0               BLD     R30, 0
   \   00000092   24CC               CLR     R12
   \   00000094   F8C0               BLD     R12, 0
   \   00000096   0148               MOVW    R9:R8, R17:R16
   \   00000098   0159               MOVW    R11:R10, R19:R18
   \   0000009A   1884               SUB     R8, R4
   \   0000009C   0895               SBC     R9, R5
   \   0000009E   08A5               SBC     R10, R5
   \   000000A0   08B5               SBC     R11, R5
   \   000000A2   0CBB               LSL     R11
   \   000000A4   2488               CLR     R8
   \   000000A6   1C88               ROL     R8
   \   000000A8   28C8               OR      R12, R8
   \   000000AA   25EC               EOR     R30, R12
   \   000000AC   FA37               BST     R3, 7
   \   000000AE   F860               BLD     R6, 0
   \   000000B0   2488               CLR     R8
   \   000000B2   F880               BLD     R8, 0
   \   000000B4   FB37               BST     R19, 7
   \   000000B6   2444               CLR     R4
   \   000000B8   F840               BLD     R4, 0
   \   000000BA   2484               EOR     R8, R4
   \   000000BC   1A00               SUB     R0, R16
   \   000000BE   0A11               SBC     R1, R17
   \   000000C0   0A22               SBC     R2, R18
   \   000000C2   0A33               SBC     R3, R19
   \   000000C4   0C33               LSL     R3
   \   000000C6   2400               CLR     R0
   \   000000C8   1C00               ROL     R0
   \   000000CA   2404               EOR     R0, R4
   \   000000CC   2880               OR      R8, R0
   \   000000CE   2468               EOR     R6, R8
   \   000000D0   29E6               OR      R30, R6
   \   000000D2   2E4E               MOV     R4, R30
   \   000000D4   8108               LD      R16, Y
   \   000000D6   950A               DEC     R16
   \   000000D8   8308               ST      Y, R16
   \   000000DA   F009               BREQ    $+2+2
   \   000000DC   CFB6               RJMP    ??conversion_to_odd_0
   \   000000DE   9621               ADIW    R29:R28, 1
   \   000000E0   9189               LD      R24, Y+
   \   000000E2   9199               LD      R25, Y+
   \   000000E4   91A9               LD      R26, Y+
   \   000000E6   91B9               LD      R27, Y+
   \   000000E8   9049               LD      R4, Y+
   \   000000EA   9059               LD      R5, Y+
   \   000000EC   9069               LD      R6, Y+
   \   000000EE   9089               LD      R8, Y+
   \   000000F0   9099               LD      R9, Y+
   \   000000F2   90A9               LD      R10, Y+
   \   000000F4   90B9               LD      R11, Y+
   \   000000F6   90C9               LD      R12, Y+
   \   000000F8   90E9               LD      R14, Y+
   \   000000FA   90F9               LD      R15, Y+
   \   000000FC   9508               RET

   \                                 In  segment FARCODE, align 2, keep-with-next
   \   __farfunc __version_3 void fpdiv1271(digit_t *)
   \                     fpdiv1271:
   \   00000000   92EA               ST      -Y, R14
   \   00000002   92CA               ST      -Y, R12
   \   00000004   92BA               ST      -Y, R11
   \   00000006   92AA               ST      -Y, R10
   \   00000008   929A               ST      -Y, R9
   \   0000000A   928A               ST      -Y, R8
   \   0000000C   926A               ST      -Y, R6
   \   0000000E   925A               ST      -Y, R5
   \   00000010   924A               ST      -Y, R4
   \   00000012   93BA               ST      -Y, R27
   \   00000014   93AA               ST      -Y, R26
   \   00000016   939A               ST      -Y, R25
   \   00000018   2E38               MOV     R3, R24
   \   0000001A                      REQUIRE ?Register_R4_is_cg_reg
   \   0000001A                      REQUIRE ?Register_R5_is_cg_reg
   \   0000001A                      REQUIRE ?Register_R6_is_cg_reg
   \   0000001A                      REQUIRE ?Register_R8_is_cg_reg
   \   0000001A                      REQUIRE ?Register_R9_is_cg_reg
   \   0000001A                      REQUIRE ?Register_R10_is_cg_reg
   \   0000001A                      REQUIRE ?Register_R11_is_cg_reg
   \   0000001A                      REQUIRE ?Register_R12_is_cg_reg
   \   0000001A                      REQUIRE ?Register_R14_is_cg_reg
   \   0000001A   0108               MOVW    R1:R0, R17:R16
   \   0000001C   2444               CLR     R4
   \   0000001E   2455               CLR     R5
   \   00000020   01F8               MOVW    R31:R30, R17:R16
   \   00000022   8180               LD      R24, Z
   \   00000024   7081               ANDI    R24, 0x01
   \   00000026   EF9F               LDI     R25, 255
   \   00000028   EFAF               LDI     R26, 255
   \   0000002A   EFBF               LDI     R27, 255
   \   0000002C   9581               NEG     R24
   \   0000002E   4F9F               SBCI    R25, 255
   \   00000030   4FAF               SBCI    R26, 255
   \   00000032   4FBF               SBCI    R27, 255
   \   00000034   E003               LDI     R16, 3
   \   00000036   2EE0               MOV     R14, R16
   \                     ??fpdiv1271_0:
   \   00000038   2466               CLR     R6
   \   0000003A   018C               MOVW    R17:R16, R25:R24
   \   0000003C   019D               MOVW    R19:R18, R27:R26
   \   0000003E   0D04               ADD     R16, R4
   \   00000040   1D15               ADC     R17, R5
   \   00000042   1D25               ADC     R18, R5
   \   00000044   1D35               ADC     R19, R5
   \   00000046   8140               LD      R20, Z
   \   00000048   8151               LDD     R21, Z+1
   \   0000004A   8162               LDD     R22, Z+2
   \   0000004C   8173               LDD     R23, Z+3
   \   0000004E   0F40               ADD     R20, R16
   \   00000050   1F51               ADC     R21, R17
   \   00000052   1F62               ADC     R22, R18
   \   00000054   1F73               ADC     R23, R19
   \   00000056   8340               ST      Z, R20
   \   00000058   8351               STD     Z+1, R21
   \   0000005A   8362               STD     Z+2, R22
   \   0000005C   8373               STD     Z+3, R23
   \   0000005E   9141               LD      R20, Z+
   \   00000060   9151               LD      R21, Z+
   \   00000062   9161               LD      R22, Z+
   \   00000064   9631               ADIW    R31:R30, 1
   \   00000066   FB37               BST     R19, 7
   \   00000068   2422               CLR     R2
   \   0000006A   F820               BLD     R2, 0
   \   0000006C   24CC               CLR     R12
   \   0000006E   F8C0               BLD     R12, 0
   \   00000070   0148               MOVW    R9:R8, R17:R16
   \   00000072   0159               MOVW    R11:R10, R19:R18
   \   00000074   1884               SUB     R8, R4
   \   00000076   0895               SBC     R9, R5
   \   00000078   08A5               SBC     R10, R5
   \   0000007A   08B5               SBC     R11, R5
   \   0000007C   0CBB               LSL     R11
   \   0000007E   2488               CLR     R8
   \   00000080   1C88               ROL     R8
   \   00000082   28C8               OR      R12, R8
   \   00000084   242C               EOR     R2, R12
   \   00000086   FB77               BST     R23, 7
   \   00000088   F860               BLD     R6, 0
   \   0000008A   2488               CLR     R8
   \   0000008C   F880               BLD     R8, 0
   \   0000008E   FB37               BST     R19, 7
   \   00000090   2444               CLR     R4
   \   00000092   F840               BLD     R4, 0
   \   00000094   2484               EOR     R8, R4
   \   00000096   1B40               SUB     R20, R16
   \   00000098   0B51               SBC     R21, R17
   \   0000009A   0B62               SBC     R22, R18
   \   0000009C   0B73               SBC     R23, R19
   \   0000009E   0F77               LSL     R23
   \   000000A0   E040               LDI     R20, 0
   \   000000A2   1F44               ROL     R20
   \   000000A4   2544               EOR     R20, R4
   \   000000A6   2A84               OR      R8, R20
   \   000000A8   2468               EOR     R6, R8
   \   000000AA   2826               OR      R2, R6
   \   000000AC   2C42               MOV     R4, R2
   \   000000AE   94EA               DEC     R14
   \   000000B0   F619               BRNE    ??fpdiv1271_0
   \   000000B2   95B6               LSR     R27
   \   000000B4   95A7               ROR     R26
   \   000000B6   9597               ROR     R25
   \   000000B8   9587               ROR     R24
   \   000000BA   0D82               ADD     R24, R2
   \   000000BC   1D95               ADC     R25, R5
   \   000000BE   1DA5               ADC     R26, R5
   \   000000C0   1DB5               ADC     R27, R5
   \   000000C2   01F0               MOVW    R31:R30, R1:R0
   \   000000C4   8504               LDD     R16, Z+12
   \   000000C6   8515               LDD     R17, Z+13
   \   000000C8   8526               LDD     R18, Z+14
   \   000000CA   8537               LDD     R19, Z+15
   \   000000CC   0F08               ADD     R16, R24
   \   000000CE   1F19               ADC     R17, R25
   \   000000D0   1F2A               ADC     R18, R26
   \   000000D2   1F3B               ADC     R19, R27
   \   000000D4   8704               STD     Z+12, R16
   \   000000D6   8715               STD     Z+13, R17
   \   000000D8   8726               STD     Z+14, R18
   \   000000DA   8737               STD     Z+15, R19
   \   000000DC   E003               LDI     R16, 3
   \                     ??fpdiv1271_1:
   \   000000DE   8180               LD      R24, Z
   \   000000E0   8191               LDD     R25, Z+1
   \   000000E2   81A2               LDD     R26, Z+2
   \   000000E4   81B3               LDD     R27, Z+3
   \   000000E6   95B6               LSR     R27
   \   000000E8   95A7               ROR     R26
   \   000000EA   9597               ROR     R25
   \   000000EC   9587               ROR     R24
   \   000000EE   8144               LDD     R20, Z+4
   \   000000F0   7041               ANDI    R20, 0x01
   \   000000F2   9546               LSR     R20
   \   000000F4   E070               LDI     R23, 0
   \   000000F6   9577               ROR     R23
   \   000000F8   27B7               EOR     R27, R23
   \   000000FA   8380               ST      Z, R24
   \   000000FC   8391               STD     Z+1, R25
   \   000000FE   83A2               STD     Z+2, R26
   \   00000100   83B3               STD     Z+3, R27
   \   00000102   9634               ADIW    R31:R30, 4
   \   00000104   950A               DEC     R16
   \   00000106   F759               BRNE    ??fpdiv1271_1
   \   00000108   01F0               MOVW    R31:R30, R1:R0
   \   0000010A   8504               LDD     R16, Z+12
   \   0000010C   8515               LDD     R17, Z+13
   \   0000010E   8526               LDD     R18, Z+14
   \   00000110   8537               LDD     R19, Z+15
   \   00000112   9536               LSR     R19
   \   00000114   9527               ROR     R18
   \   00000116   9517               ROR     R17
   \   00000118   9507               ROR     R16
   \   0000011A   8704               STD     Z+12, R16
   \   0000011C   8715               STD     Z+13, R17
   \   0000011E   8726               STD     Z+14, R18
   \   00000120   8737               STD     Z+15, R19
   \   00000122   2D83               MOV     R24, R3
   \   00000124   9199               LD      R25, Y+
   \   00000126   91A9               LD      R26, Y+
   \   00000128   91B9               LD      R27, Y+
   \   0000012A   9049               LD      R4, Y+
   \   0000012C   9059               LD      R5, Y+
   \   0000012E   9069               LD      R6, Y+
   \   00000130   ....               RJMP    ?Subroutine6
     15          
     16          
     17          /***********************************************/
     18          /************* GF(p^2) FUNCTIONS ***************/
     19          

   \                                 In  segment FARCODE, align 2, keep-with-next
     20          void fp2copy1271(f2elm_t a, f2elm_t c)
   \                     fp2copy1271:
     21          {// Copy of a GF(p^2) element, c = a
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   939A               ST      -Y, R25
   \   00000006   938A               ST      -Y, R24
   \   00000008   01D8               MOVW    R27:R26, R17:R16
   \   0000000A   01C9               MOVW    R25:R24, R19:R18
     22              fpcopy1271(a[0], c[0]);
   \   0000000C   ........           CALL    fpcopy1271
     23              fpcopy1271(a[1], c[1]);
   \   00000010   9640               ADIW    R25:R24, 16
   \   00000012   019C               MOVW    R19:R18, R25:R24
   \   00000014   9650               ADIW    R27:R26, 16
   \   00000016   018D               MOVW    R17:R16, R27:R26
   \   00000018   ........           CALL    fpcopy1271
     24          }
   \   0000001C   ....               RJMP    ??Subroutine13_0

   \                                 In  segment FARCODE, align 2, keep-with-next
   \                     ??Subroutine13_0:
   \   00000000   9189               LD      R24, Y+
   \   00000002   9199               LD      R25, Y+
   \   00000004   91A9               LD      R26, Y+
   \   00000006   91B9               LD      R27, Y+
   \   00000008   9508               RET
     25          

   \                                 In  segment FARCODE, align 2, keep-with-next
     26          void fp2copy1271_flash(f2elm_t a, f2elm_t c)
   \                     fp2copy1271_flash:
     27          {// Copy of a GF(p^2) element, c = a
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   939A               ST      -Y, R25
   \   00000006   938A               ST      -Y, R24
   \   00000008   01D8               MOVW    R27:R26, R17:R16
   \   0000000A   01C9               MOVW    R25:R24, R19:R18
     28              fpcopy1271_flash(a[0], c[0]);
   \   0000000C   ........           CALL    fpcopy1271_flash
     29              fpcopy1271_flash(a[1], c[1]);
   \   00000010   9640               ADIW    R25:R24, 16
   \   00000012   019C               MOVW    R19:R18, R25:R24
   \   00000014   9650               ADIW    R27:R26, 16
   \   00000016   018D               MOVW    R17:R16, R27:R26
   \   00000018   ........           CALL    fpcopy1271_flash
     30          }
   \   0000001C   ....               RJMP    ??Subroutine13_0
     31          

   \                                 In  segment FARCODE, align 2, keep-with-next
     32          void fp2zero1271(f2elm_t a)
   \                     fp2zero1271:
     33          {// Zeroing a GF(p^2) element, a = 0
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   01C8               MOVW    R25:R24, R17:R16
     34              fpzero1271(a[0]);
   \   00000006   ........           CALL    fpzero1271
     35              fpzero1271(a[1]);
   \   0000000A   9640               ADIW    R25:R24, 16
   \   0000000C   018C               MOVW    R17:R16, R25:R24
   \   0000000E   ........           CALL    fpzero1271
     36          }
   \   00000012   9189               LD      R24, Y+
   \   00000014   9199               LD      R25, Y+
   \   00000016   9508               RET
     37          
     38          

   \                                 In  segment FARCODE, align 2, keep-with-next
     39          void fp2neg1271(f2elm_t a)
   \                     fp2neg1271:
     40          {// GF(p^2) negation, a = -a in GF((2^127-1)^2)
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   01C8               MOVW    R25:R24, R17:R16
     41              fpneg1271(a[0]);
   \   00000006   ........           CALL    fpneg1271
     42              fpneg1271(a[1]);
   \   0000000A   9640               ADIW    R25:R24, 16
   \   0000000C   018C               MOVW    R17:R16, R25:R24
   \   0000000E   ........           CALL    fpneg1271
     43          }
   \   00000012   9189               LD      R24, Y+
   \   00000014   9199               LD      R25, Y+
   \   00000016   9508               RET
     44          
     45          

   \                                 In  segment FARCODE, align 2, keep-with-next
     46          void fp2sqr1271(f2elm_t a, f2elm_t c)
   \                     fp2sqr1271:
     47          {// GF(p^2) squaring, c = a^2 in GF((2^127-1)^2)
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   939A               ST      -Y, R25
   \   00000006   938A               ST      -Y, R24
   \   00000008   97A0               SBIW    R29:R28, 32
   \   0000000A   01C8               MOVW    R25:R24, R17:R16
   \   0000000C   01D9               MOVW    R27:R26, R19:R18
     48              felm_t t1, t2;
     49          
     50              fpadd1271(a[0], a[1], t1);           // t1 = a0+a1 
   \   0000000E   01AE               MOVW    R21:R20, R29:R28
   \   00000010   5F40               SUBI    R20, 240
   \   00000012   4F5F               SBCI    R21, 255
   \   00000014   0198               MOVW    R19:R18, R17:R16
   \   00000016   5F20               SUBI    R18, 240
   \   00000018   4F3F               SBCI    R19, 255
   \   0000001A   ........           CALL    fpadd1271
     51              fpsub1271(a[0], a[1], t2);           // t2 = a0-a1
   \   0000001E   01AE               MOVW    R21:R20, R29:R28
   \   00000020   019C               MOVW    R19:R18, R25:R24
   \   00000022   5F20               SUBI    R18, 240
   \   00000024   4F3F               SBCI    R19, 255
   \   00000026   018C               MOVW    R17:R16, R25:R24
   \   00000028   ........           CALL    fpsub1271
     52              mod_mul_dbl128(a[0], a[1], c[1]);    // c1 = 2a0*a1 
   \   0000002C   01AD               MOVW    R21:R20, R27:R26
   \   0000002E   5F40               SUBI    R20, 240
   \   00000030   4F5F               SBCI    R21, 255
   \   00000032   019C               MOVW    R19:R18, R25:R24
   \   00000034   5F20               SUBI    R18, 240
   \   00000036   4F3F               SBCI    R19, 255
   \   00000038   018C               MOVW    R17:R16, R25:R24
   \   0000003A   ........           CALL    mod_mul_dbl128
     53              fpmul1271(t1, t2, c[0]);             // c0 = (a0+a1)(a0-a1)
   \   0000003E   01AD               MOVW    R21:R20, R27:R26
   \   00000040   019E               MOVW    R19:R18, R29:R28
   \   00000042   018E               MOVW    R17:R16, R29:R28
   \   00000044   5F00               SUBI    R16, 240
   \   00000046   4F1F               SBCI    R17, 255
   \   00000048   ........           CALL    mod_mul128
     54          }
   \   0000004C   96A0               ADIW    R29:R28, 32
   \   0000004E   ....               RJMP    ??Subroutine13_0
     55          
     56          

   \                                 In  segment FARCODE, align 2, keep-with-next
     57          void fp2mul1271(f2elm_t a, f2elm_t b, f2elm_t c)
   \                     fp2mul1271:
     58          {// GF(p^2) multiplication, c = a*b in GF((2^127-1)^2)       
   \   00000000   925A               ST      -Y, R5
   \   00000002   924A               ST      -Y, R4
   \   00000004   93BA               ST      -Y, R27
   \   00000006   93AA               ST      -Y, R26
   \   00000008   939A               ST      -Y, R25
   \   0000000A   938A               ST      -Y, R24
   \   0000000C                      REQUIRE ?Register_R4_is_cg_reg
   \   0000000C                      REQUIRE ?Register_R5_is_cg_reg
   \   0000000C   97EF               SBIW    R29:R28, 63
   \   0000000E   9721               SBIW    R29:R28, 1
   \   00000010   01D8               MOVW    R27:R26, R17:R16
   \   00000012   01C9               MOVW    R25:R24, R19:R18
   \   00000014   012A               MOVW    R5:R4, R21:R20
     59              felm_t t1, t2, t3, t4;
     60              
     61              fpmul1271(a[0], b[0], t1);          // t1 = a0*b0
   \   00000016   01AE               MOVW    R21:R20, R29:R28
   \   00000018   5E40               SUBI    R20, 224
   \   0000001A   4F5F               SBCI    R21, 255
   \   0000001C   ........           CALL    mod_mul128
     62              fpmul1271(a[1], b[1], t2);          // t2 = a1*b1
   \   00000020   01AE               MOVW    R21:R20, R29:R28
   \   00000022   5F40               SUBI    R20, 240
   \   00000024   4F5F               SBCI    R21, 255
   \   00000026   019C               MOVW    R19:R18, R25:R24
   \   00000028   5F20               SUBI    R18, 240
   \   0000002A   4F3F               SBCI    R19, 255
   \   0000002C   018D               MOVW    R17:R16, R27:R26
   \   0000002E   5F00               SUBI    R16, 240
   \   00000030   4F1F               SBCI    R17, 255
   \   00000032   ........           CALL    mod_mul128
     63              fpadd1271(a[0], a[1], t3);          // t3 = a0+a1
   \   00000036   01AE               MOVW    R21:R20, R29:R28
   \   00000038   019D               MOVW    R19:R18, R27:R26
   \   0000003A   5F20               SUBI    R18, 240
   \   0000003C   4F3F               SBCI    R19, 255
   \   0000003E   018D               MOVW    R17:R16, R27:R26
   \   00000040   ........           CALL    fpadd1271
     64              fpadd1271(b[0], b[1], t4);          // t4 = b0+b1
   \   00000044   01AE               MOVW    R21:R20, R29:R28
   \   00000046   5D40               SUBI    R20, 208
   \   00000048   4F5F               SBCI    R21, 255
   \   0000004A   019C               MOVW    R19:R18, R25:R24
   \   0000004C   5F20               SUBI    R18, 240
   \   0000004E   4F3F               SBCI    R19, 255
   \   00000050   018C               MOVW    R17:R16, R25:R24
   \   00000052   ........           CALL    fpadd1271
     65              fpsub1271(t1, t2, c[0]);            // c[0] = a0*b0 - a1*b1
   \   00000056   01A2               MOVW    R21:R20, R5:R4
   \   00000058   019E               MOVW    R19:R18, R29:R28
   \   0000005A   5F20               SUBI    R18, 240
   \   0000005C   4F3F               SBCI    R19, 255
   \   0000005E   018E               MOVW    R17:R16, R29:R28
   \   00000060   5E00               SUBI    R16, 224
   \   00000062   4F1F               SBCI    R17, 255
   \   00000064   ........           CALL    fpsub1271
     66              fpmul1271(t3, t4, t3);              // t3 = (a0+a1)*(b0+b1)
   \   00000068   01AE               MOVW    R21:R20, R29:R28
   \   0000006A   019E               MOVW    R19:R18, R29:R28
   \   0000006C   5D20               SUBI    R18, 208
   \   0000006E   4F3F               SBCI    R19, 255
   \   00000070   018E               MOVW    R17:R16, R29:R28
   \   00000072   ........           CALL    mod_mul128
     67              fpsub1271(t3, t1, t3);              // t3 = (a0+a1)*(b0+b1) - a0*b0
   \   00000076   01AE               MOVW    R21:R20, R29:R28
   \   00000078   019E               MOVW    R19:R18, R29:R28
   \   0000007A   5E20               SUBI    R18, 224
   \   0000007C   4F3F               SBCI    R19, 255
   \   0000007E   018E               MOVW    R17:R16, R29:R28
   \   00000080   ........           CALL    fpsub1271
     68              fpsub1271(t3, t2, c[1]);            // c[1] = (a0+a1)*(b0+b1) - a0*b0 - a1*b1      
   \   00000084   E100               LDI     R16, 16
   \   00000086   0E40               ADD     R4, R16
   \   00000088   E000               LDI     R16, 0
   \   0000008A   1E50               ADC     R5, R16
   \   0000008C   01A2               MOVW    R21:R20, R5:R4
   \   0000008E   019E               MOVW    R19:R18, R29:R28
   \   00000090   5F20               SUBI    R18, 240
   \   00000092   4F3F               SBCI    R19, 255
   \   00000094   018E               MOVW    R17:R16, R29:R28
   \   00000096   ........           CALL    fpsub1271
     69          }
   \   0000009A   96EF               ADIW    R29:R28, 63
   \   0000009C   9621               ADIW    R29:R28, 1
   \   0000009E   ....               RJMP    ??Subroutine14_0

   \                                 In  segment FARCODE, align 2, keep-with-next
   \                     ??Subroutine14_0:
   \   00000000   9189               LD      R24, Y+
   \   00000002   9199               LD      R25, Y+
   \   00000004   91A9               LD      R26, Y+
   \   00000006   91B9               LD      R27, Y+
   \   00000008   9049               LD      R4, Y+
   \   0000000A   9059               LD      R5, Y+
   \   0000000C   9508               RET
     70          
     71          

   \                                 In  segment FARCODE, align 2, keep-with-next
     72          void fp2add1271(f2elm_t a, f2elm_t b, f2elm_t c)
   \                     fp2add1271:
     73          {// GF(p^2) addition, c = a+b in GF((2^127-1)^2)
   \   00000000   925A               ST      -Y, R5
   \   00000002   924A               ST      -Y, R4
   \   00000004   93BA               ST      -Y, R27
   \   00000006   93AA               ST      -Y, R26
   \   00000008   939A               ST      -Y, R25
   \   0000000A   938A               ST      -Y, R24
   \   0000000C                      REQUIRE ?Register_R4_is_cg_reg
   \   0000000C                      REQUIRE ?Register_R5_is_cg_reg
   \   0000000C   0128               MOVW    R5:R4, R17:R16
   \   0000000E   01D9               MOVW    R27:R26, R19:R18
   \   00000010   01CA               MOVW    R25:R24, R21:R20
     74              fpadd1271(a[0], b[0], c[0]);
   \   00000012   ........           CALL    fpadd1271
     75              fpadd1271(a[1], b[1], c[1]);  
   \   00000016   9640               ADIW    R25:R24, 16
   \   00000018   01AC               MOVW    R21:R20, R25:R24
   \   0000001A   9650               ADIW    R27:R26, 16
   \   0000001C   019D               MOVW    R19:R18, R27:R26
   \   0000001E   E100               LDI     R16, 16
   \   00000020   0E40               ADD     R4, R16
   \   00000022   E000               LDI     R16, 0
   \   00000024   1E50               ADC     R5, R16
   \   00000026   0182               MOVW    R17:R16, R5:R4
   \   00000028   ........           CALL    fpadd1271
     76          }
   \   0000002C   ....               RJMP    ??Subroutine14_0
     77          
     78          

   \                                 In  segment FARCODE, align 2, keep-with-next
   \                     ?Subroutine4:
   \   00000000   ........           CALL    fpsub1271
   \   00000004                      REQUIRE ??Subroutine14_0
   \   00000004                      ;               // Fall through to label ??Subroutine14_0

   \                                 In  segment FARCODE, align 2, keep-with-next
     79          void fp2sub1271(f2elm_t a, f2elm_t b, f2elm_t c)
   \                     fp2sub1271:
     80          {// GF(p^2) subtraction, c = a-b in GF((2^127-1)^2)
   \   00000000   925A               ST      -Y, R5
   \   00000002   924A               ST      -Y, R4
   \   00000004   93BA               ST      -Y, R27
   \   00000006   93AA               ST      -Y, R26
   \   00000008   939A               ST      -Y, R25
   \   0000000A   938A               ST      -Y, R24
   \   0000000C                      REQUIRE ?Register_R4_is_cg_reg
   \   0000000C                      REQUIRE ?Register_R5_is_cg_reg
   \   0000000C   0128               MOVW    R5:R4, R17:R16
   \   0000000E   01D9               MOVW    R27:R26, R19:R18
   \   00000010   01CA               MOVW    R25:R24, R21:R20
     81              fpsub1271(a[0], b[0], c[0]);
   \   00000012   ........           CALL    fpsub1271
     82              fpsub1271(a[1], b[1], c[1]);  
   \   00000016   9640               ADIW    R25:R24, 16
   \   00000018   01AC               MOVW    R21:R20, R25:R24
   \   0000001A   9650               ADIW    R27:R26, 16
   \   0000001C   019D               MOVW    R19:R18, R27:R26
   \   0000001E   E100               LDI     R16, 16
   \   00000020   0E40               ADD     R4, R16
   \   00000022   E000               LDI     R16, 0
   \   00000024   1E50               ADC     R5, R16
   \   00000026   0182               MOVW    R17:R16, R5:R4
   \   00000028   ....               RJMP    ?Subroutine4
     83          }
     84          
     85          

   \                                 In  segment FARCODE, align 2, keep-with-next
     86          __inline void fp2addsub1271(f2elm_t a, f2elm_t b, f2elm_t c)
   \                     fp2addsub1271:
     87          {// GF(p^2) addition followed by subtraction, c = 2a-b in GF((2^127-1)^2)	
   \   00000000   925A               ST      -Y, R5
   \   00000002   924A               ST      -Y, R4
   \   00000004   93BA               ST      -Y, R27
   \   00000006   93AA               ST      -Y, R26
   \   00000008   939A               ST      -Y, R25
   \   0000000A   938A               ST      -Y, R24
   \   0000000C                      REQUIRE ?Register_R4_is_cg_reg
   \   0000000C                      REQUIRE ?Register_R5_is_cg_reg
   \   0000000C   01C8               MOVW    R25:R24, R17:R16
   \   0000000E   0129               MOVW    R5:R4, R19:R18
   \   00000010   01DA               MOVW    R27:R26, R21:R20
     88              fp2add1271(a, a, a);
   \   00000012   01A8               MOVW    R21:R20, R17:R16
   \   00000014   0198               MOVW    R19:R18, R17:R16
   \   00000016   ........           CALL    fpadd1271
   \   0000001A   01AC               MOVW    R21:R20, R25:R24
   \   0000001C   5F40               SUBI    R20, 240
   \   0000001E   4F5F               SBCI    R21, 255
   \   00000020   019C               MOVW    R19:R18, R25:R24
   \   00000022   5F20               SUBI    R18, 240
   \   00000024   4F3F               SBCI    R19, 255
   \   00000026   018C               MOVW    R17:R16, R25:R24
   \   00000028   5F00               SUBI    R16, 240
   \   0000002A   4F1F               SBCI    R17, 255
   \   0000002C   ........           CALL    fpadd1271
     89              fp2sub1271(a, b, c);
   \   00000030   01AD               MOVW    R21:R20, R27:R26
   \   00000032   0192               MOVW    R19:R18, R5:R4
   \   00000034   018C               MOVW    R17:R16, R25:R24
   \   00000036   ........           CALL    fpsub1271
   \   0000003A   9650               ADIW    R27:R26, 16
   \   0000003C   01AD               MOVW    R21:R20, R27:R26
   \   0000003E   E100               LDI     R16, 16
   \   00000040   0E40               ADD     R4, R16
   \   00000042   E000               LDI     R16, 0
   \   00000044   1E50               ADC     R5, R16
   \   00000046   0192               MOVW    R19:R18, R5:R4
   \   00000048   9640               ADIW    R25:R24, 16
   \   0000004A   018C               MOVW    R17:R16, R25:R24
   \   0000004C   ....               RJMP    ?Subroutine4
     90          }
     91          
     92          

   \                                 In  segment FARCODE, align 2, keep-with-next
     93          void fp2inv1271(f2elm_t a)
   \                     fp2inv1271:
     94          {// GF(p^2) inversion, a = (a0-i*a1)/(a0^2+a1^2)
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   97E0               SBIW    R29:R28, 48
   \   00000006   01C8               MOVW    R25:R24, R17:R16
     95              f2elm_t t1;
     96          
     97              fpsqr1271(a[0], t1[0]);             // t10 = a0^2
   \   00000008   019E               MOVW    R19:R18, R29:R28
   \   0000000A   5F20               SUBI    R18, 240
   \   0000000C   4F3F               SBCI    R19, 255
   \   0000000E   ........           CALL    mod_sqr128
     98              fpsqr1271(a[1], t1[1]);             // t11 = a1^2
   \   00000012   019E               MOVW    R19:R18, R29:R28
   \   00000014   5E20               SUBI    R18, 224
   \   00000016   4F3F               SBCI    R19, 255
   \   00000018   018C               MOVW    R17:R16, R25:R24
   \   0000001A   5F00               SUBI    R16, 240
   \   0000001C   4F1F               SBCI    R17, 255
   \   0000001E   ........           CALL    mod_sqr128
     99              fpadd1271(t1[0], t1[1], t1[0]);     // t10 = a0^2+a1^2
   \   00000022   01AE               MOVW    R21:R20, R29:R28
   \   00000024   5F40               SUBI    R20, 240
   \   00000026   4F5F               SBCI    R21, 255
   \   00000028   019E               MOVW    R19:R18, R29:R28
   \   0000002A   5E20               SUBI    R18, 224
   \   0000002C   4F3F               SBCI    R19, 255
   \   0000002E   018E               MOVW    R17:R16, R29:R28
   \   00000030   5F00               SUBI    R16, 240
   \   00000032   4F1F               SBCI    R17, 255
   \   00000034   ........           CALL    fpadd1271
    100              fpinv1271(t1[0]);                   // t10 = (a0^2+a1^2)^-1
   \   00000038   019E               MOVW    R19:R18, R29:R28
   \   0000003A   018E               MOVW    R17:R16, R29:R28
   \   0000003C   5F00               SUBI    R16, 240
   \   0000003E   4F1F               SBCI    R17, 255
   \   00000040   ....               RCALL   fpexp1251
   \   00000042   019E               MOVW    R19:R18, R29:R28
   \   00000044   018E               MOVW    R17:R16, R29:R28
   \   00000046   ........           CALL    mod_sqr128
   \   0000004A   019E               MOVW    R19:R18, R29:R28
   \   0000004C   018E               MOVW    R17:R16, R29:R28
   \   0000004E   ........           CALL    mod_sqr128
   \   00000052   01AE               MOVW    R21:R20, R29:R28
   \   00000054   5F40               SUBI    R20, 240
   \   00000056   4F5F               SBCI    R21, 255
   \   00000058   019E               MOVW    R19:R18, R29:R28
   \   0000005A   018E               MOVW    R17:R16, R29:R28
   \   0000005C   5F00               SUBI    R16, 240
   \   0000005E   4F1F               SBCI    R17, 255
   \   00000060   ........           CALL    mod_mul128
    101              fpneg1271(a[1]);                    // a = a0-i*a1
   \   00000064   018C               MOVW    R17:R16, R25:R24
   \   00000066   5F00               SUBI    R16, 240
   \   00000068   4F1F               SBCI    R17, 255
   \   0000006A   ........           CALL    fpneg1271
    102              fpmul1271(a[0], t1[0], a[0]);
   \   0000006E   01AC               MOVW    R21:R20, R25:R24
   \   00000070   019E               MOVW    R19:R18, R29:R28
   \   00000072   5F20               SUBI    R18, 240
   \   00000074   4F3F               SBCI    R19, 255
   \   00000076   018C               MOVW    R17:R16, R25:R24
   \   00000078   ........           CALL    mod_mul128
    103              fpmul1271(a[1], t1[0], a[1]);       // a = (a0-i*a1)*(a0^2+a1^2)^-1
   \   0000007C   01AC               MOVW    R21:R20, R25:R24
   \   0000007E   5F40               SUBI    R20, 240
   \   00000080   4F5F               SBCI    R21, 255
   \   00000082   019E               MOVW    R19:R18, R29:R28
   \   00000084   5F20               SUBI    R18, 240
   \   00000086   4F3F               SBCI    R19, 255
   \   00000088   9640               ADIW    R25:R24, 16
   \   0000008A   018C               MOVW    R17:R16, R25:R24
   \   0000008C   ........           CALL    mod_mul128
    104          }
   \   00000090   96E0               ADIW    R29:R28, 48
   \   00000092   9189               LD      R24, Y+
   \   00000094   9199               LD      R25, Y+
   \   00000096   9508               RET
    105          
    106          

   \                                 In  segment FARCODE, align 2, keep-with-next
    107          __inline void clear_words(void* mem, unsigned int nwords)
   \                     clear_words:
    108          { // Clear integer-size digits from memory. "nwords" indicates the number of integer digits to be zeroed.
    109            // This function uses the volatile type qualifier to inform the compiler not to optimize out the memory clearing.
    110            // It has been tested with MSVS 2013 and GNU GCC 4.6.3, 4.7.3, 4.8.2 and 4.8.4. Users are responsible for verifying correctness with different compilers.  
    111            // See "Compliant Solution (C99)" at https://www.securecoding.cert.org/confluence/display/c/MSC06-C.+Beware+of+compiler+optimizations 
    112                unsigned int i;
    113                volatile unsigned int *v = mem;
    114          
    115                for (i = 0; i < nwords; i++)
   \   00000000   2F42               MOV     R20, R18
   \   00000002   2B43               OR      R20, R19
   \   00000004   F041               BREQ    ??clear_words_0
   \   00000006   E040               LDI     R20, 0
    116                      v[i] = 0;
   \                     ??clear_words_1:
   \   00000008   01F8               MOVW    R31:R30, R17:R16
   \   0000000A   9341               ST      Z+, R20
   \   0000000C   9341               ST      Z+, R20
   \   0000000E   018F               MOVW    R17:R16, R31:R30
   \   00000010   5021               SUBI    R18, 1
   \   00000012   4030               SBCI    R19, 0
   \   00000014   F7C9               BRNE    ??clear_words_1
    117          }
   \                     ??clear_words_0:
   \   00000016   9508               RET
    118          
    119          
    120          #if (USE_ENDO == true)
    121          
    122          // Fixed GF(p^2) constants for the endomorphisms 

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
    123          static uint64_t ctau1[4]     = {0x74DCD57CEBCE74C3, 0x1964DE2C3AFAD20C, 0x12, 0x0C};         
   \                     ctau1:
   \   00000000                      DS8 32
   \   00000020                      REQUIRE `?<Initializer for ctau1>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
    124          static uint64_t ctaudual1[4] = {0x9ECAA6D9DECDF034, 0x4AA740EB23058652, 0x11, 0x7FFFFFFFFFFFFFF4};
   \                     ctaudual1:
   \   00000000                      DS8 32
   \   00000020                      REQUIRE `?<Initializer for ctaudual1>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
    125          static uint64_t cphi0[4] = {0xFFFFFFFFFFFFFFF7, 0x05, 0x4F65536CEF66F81A, 0x2553A0759182C329};
   \                     cphi0:
   \   00000000                      DS8 32
   \   00000020                      REQUIRE `?<Initializer for cphi0>`
   \   00000020                      DS8 32
   \   00000040                      REQUIRE `?<Initializer for cphi1>`
   \   00000040                      DS8 32
   \   00000060                      REQUIRE `?<Initializer for cphi2>`
   \   00000060                      DS8 32
   \   00000080                      REQUIRE `?<Initializer for cphi3>`
   \   00000080                      DS8 32
   \   000000A0                      REQUIRE `?<Initializer for cphi4>`
   \   000000A0                      DS8 32
   \   000000C0                      REQUIRE `?<Initializer for cphi5>`
   \   000000C0                      DS8 32
   \   000000E0                      REQUIRE `?<Initializer for cphi6>`
   \   000000E0                      DS8 32
   \   00000100                      REQUIRE `?<Initializer for cphi7>`
   \   00000100                      DS8 32
   \   00000120                      REQUIRE `?<Initializer for cphi8>`
   \   00000120                      DS8 32
   \   00000140                      REQUIRE `?<Initializer for cphi9>`
    126          static uint64_t cphi1[4] = {0x07, 0x05, 0x334D90E9E28296F9, 0x62C8CAA0C50C62CF};
    127          static uint64_t cphi2[4] = {0x15, 0x0F, 0x2C2CB7154F1DF391, 0x78DF262B6C9B5C98};
    128          static uint64_t cphi3[4] = {0x03, 0x02, 0x92440457A7962EA4, 0x5084C6491D76342A};
    129          static uint64_t cphi4[4] = {0x03, 0x03, 0xA1098C923AEC6855, 0x12440457A7962EA4};
    130          static uint64_t cphi5[4] = {0x0F, 0x0A, 0x669B21D3C5052DF3, 0x459195418A18C59E};
    131          static uint64_t cphi6[4] = {0x18, 0x12, 0xCD3643A78A0A5BE7, 0x0B232A8314318B3C};
    132          static uint64_t cphi7[4] = {0x23, 0x18, 0x66C183035F48781A, 0x3963BC1C99E2EA1A};
    133          static uint64_t cphi8[4] = {0xF0, 0xAA, 0x44E251582B5D0EF0, 0x1F529F860316CBE5};
    134          static uint64_t cphi9[4] = {0xBEF, 0x870, 0x14D3E48976E2505, 0xFD52E9CFE00375B};

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
    135          static uint64_t cpsi1[4] = {0xEDF07F4767E346EF, 0x2AF99E9A83D54A02, 0x13A, 0xDE};
   \                     cpsi1:
   \   00000000                      DS8 32
   \   00000020                      REQUIRE `?<Initializer for cpsi1>`
   \   00000020                      DS8 32
   \   00000040                      REQUIRE `?<Initializer for cpsi2>`
   \   00000040                      DS8 32
   \   00000060                      REQUIRE `?<Initializer for cpsi3>`
   \   00000060                      DS8 32
   \   00000080                      REQUIRE `?<Initializer for cpsi4>`
    136          static uint64_t cpsi2[4] = {0x143, 0xE4, 0x4C7DEB770E03F372, 0x21B8D07B99A81F03};
    137          static uint64_t cpsi3[4] = {0x09, 0x06, 0x3A6E6ABE75E73A61, 0x4CB26F161D7D6906};
    138          static uint64_t cpsi4[4] = {0xFFFFFFFFFFFFFFF6, 0x7FFFFFFFFFFFFFF9, 0xC59195418A18C59E, 0x334D90E9E28296F9};
    139          
    140          // Fixed integer constants for the decomposition
    141          // Close "offset" vector

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
    142          static uint64_t c1  = {0x72482C5251A4559C};
    143          static uint64_t c2  = {0x59F95B0ADD276F6C};
    144          static uint64_t c3  = {0x7DD2D17C4625FA78};
    145          static uint64_t c4  = {0x6BC57DEF56CE8877};
    146          // Optimal basis vectors 
    147          static uint64_t b11 = {0x0906FF27E0A0A196};   
    148          static uint64_t b12 = {0x1363E862C22A2DA0};                                              
    149          static uint64_t b13 = {0x07426031ECC8030F};                                              
    150          static uint64_t b14 = {0x084F739986B9E651};   
    151          static uint64_t b21 = {0x1D495BEA84FCC2D4};
    152          static uint64_t b24 = {0x25DBC5BC8DD167D0};
    153          static uint64_t b31 = {0x17ABAD1D231F0302};
    154          static uint64_t b32 = {0x02C4211AE388DA51};
    155          static uint64_t b33 = {0x2E4D21C98927C49F};
    156          static uint64_t b34 = {0x0A9E6F44C02ECD97};
    157          static uint64_t b41 = {0x136E340A9108C83F};
   \                     b41:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for b41>`
   \   00000008                      DS8 8
   \   00000010                      REQUIRE `?<Initializer for b42>`
   \   00000010                      DS8 8
   \   00000018                      REQUIRE `?<Initializer for b43>`
   \   00000018                      DS8 8
   \   00000020                      REQUIRE `?<Initializer for b44>`
   \   00000020                      DS8 8
   \   00000028                      REQUIRE `?<Initializer for c1>`
   \   00000028                      DS8 8
   \   00000030                      REQUIRE `?<Initializer for c2>`
   \   00000030                      DS8 8
   \   00000038                      REQUIRE `?<Initializer for c3>`
   \   00000038                      DS8 8
   \   00000040                      REQUIRE `?<Initializer for c4>`
   \   00000040                      DS8 8
   \   00000048                      REQUIRE `?<Initializer for b11>`
   \   00000048                      DS8 8
   \   00000050                      REQUIRE `?<Initializer for b12>`
   \   00000050                      DS8 8
   \   00000058                      REQUIRE `?<Initializer for b13>`
   \   00000058                      DS8 8
   \   00000060                      REQUIRE `?<Initializer for b14>`
   \   00000060                      DS8 8
   \   00000068                      REQUIRE `?<Initializer for b21>`
   \   00000068                      DS8 8
   \   00000070                      REQUIRE `?<Initializer for b24>`
   \   00000070                      DS8 8
   \   00000078                      REQUIRE `?<Initializer for b31>`
   \   00000078                      DS8 8
   \   00000080                      REQUIRE `?<Initializer for b32>`
   \   00000080                      DS8 8
   \   00000088                      REQUIRE `?<Initializer for b33>`
   \   00000088                      DS8 8
   \   00000090                      REQUIRE `?<Initializer for b34>`
   \   00000090                      DS8 32
   \   000000B0                      REQUIRE `?<Initializer for ell1>`
   \   000000B0                      DS8 32
   \   000000D0                      REQUIRE `?<Initializer for ell2>`
   \   000000D0                      DS8 32
   \   000000F0                      REQUIRE `?<Initializer for ell3>`
   \   000000F0                      DS8 32
   \   00000110                      REQUIRE `?<Initializer for ell4>`
    158          static uint64_t b42 = {0x3122DF2DC3E0FF32};
    159          static uint64_t b43 = {0x068A49F02AA8A9B5};
    160          static uint64_t b44 = {0x18D5087896DE0AEA};
    161          // Precomputed integers for fast-Babai rounding
    162          static uint64_t ell1[4] = {0x259686E09D1A7D4F, 0xF75682ACE6A6BD66, 0xFC5BB5C5EA2BE5DF, 0x07};
    163          static uint64_t ell2[4] = {0xD1BA1D84DD627AFB, 0x2BD235580F468D8D, 0x8FD4B04CAA6C0F8A, 0x03};
    164          static uint64_t ell3[4] = {0x9B291A33678C203C, 0xC42BD6C965DCA902, 0xD038BF8D0BFFBAF6, 0x00};
    165          static uint64_t ell4[4] = {0x12E5666B77E7FDC0, 0x81CBDC3714983D82, 0x1B073877A22D8410, 0x03};
    166          
    167          
    168          /***********************************************/
    169          /**********  CURVE/SCALAR FUNCTIONS  ***********/
    170          

   \                                 In  segment FARCODE, align 2, keep-with-next
    171          static __inline void ecc_tau(point_extproj_t P)
   \                     ecc_tau:
    172          { // Apply tau mapping to a point, P = tau(P)
   \   00000000   929A               ST      -Y, R9
   \   00000002   928A               ST      -Y, R8
   \   00000004   927A               ST      -Y, R7
   \   00000006   926A               ST      -Y, R6
   \   00000008   925A               ST      -Y, R5
   \   0000000A   924A               ST      -Y, R4
   \   0000000C   93BA               ST      -Y, R27
   \   0000000E   93AA               ST      -Y, R26
   \   00000010   939A               ST      -Y, R25
   \   00000012   938A               ST      -Y, R24
   \   00000014                      REQUIRE ?Register_R4_is_cg_reg
   \   00000014                      REQUIRE ?Register_R5_is_cg_reg
   \   00000014                      REQUIRE ?Register_R6_is_cg_reg
   \   00000014                      REQUIRE ?Register_R7_is_cg_reg
   \   00000014                      REQUIRE ?Register_R8_is_cg_reg
   \   00000014                      REQUIRE ?Register_R9_is_cg_reg
   \   00000014   97EF               SBIW    R29:R28, 63
   \   00000016   97A1               SBIW    R29:R28, 33
   \   00000018   01C8               MOVW    R25:R24, R17:R16
    173            // Input: P = (X1:Y1:Z1) on E in twisted Edwards coordinates
    174            // Output: P = (Xfinal:Yfinal:Zfinal) on Ehat in twisted Edwards coordinates
    175              f2elm_t t0, t1; 
    176          
    177              fp2sqr1271(P->x, t0);                     // t0 = X1^2
   \   0000001A   01AE               MOVW    R21:R20, R29:R28
   \   0000001C   5D40               SUBI    R20, 208
   \   0000001E   4F5F               SBCI    R21, 255
   \   00000020   0198               MOVW    R19:R18, R17:R16
   \   00000022   5F20               SUBI    R18, 240
   \   00000024   4F3F               SBCI    R19, 255
   \   00000026   ........           CALL    fpadd1271
   \   0000002A   01AE               MOVW    R21:R20, R29:R28
   \   0000002C   5E40               SUBI    R20, 224
   \   0000002E   4F5F               SBCI    R21, 255
   \   00000030   019C               MOVW    R19:R18, R25:R24
   \   00000032   5F20               SUBI    R18, 240
   \   00000034   4F3F               SBCI    R19, 255
   \   00000036   018C               MOVW    R17:R16, R25:R24
   \   00000038   ........           CALL    fpsub1271
   \   0000003C   01AE               MOVW    R21:R20, R29:R28
   \   0000003E   5F40               SUBI    R20, 240
   \   00000040   4F5F               SBCI    R21, 255
   \   00000042   019C               MOVW    R19:R18, R25:R24
   \   00000044   5F20               SUBI    R18, 240
   \   00000046   4F3F               SBCI    R19, 255
   \   00000048   018C               MOVW    R17:R16, R25:R24
   \   0000004A   ........           CALL    mod_mul_dbl128
   \   0000004E   01AE               MOVW    R21:R20, R29:R28
   \   00000050   019E               MOVW    R19:R18, R29:R28
   \   00000052   5E20               SUBI    R18, 224
   \   00000054   4F3F               SBCI    R19, 255
   \   00000056   018E               MOVW    R17:R16, R29:R28
   \   00000058   5D00               SUBI    R16, 208
   \   0000005A   4F1F               SBCI    R17, 255
   \   0000005C   ........           CALL    mod_mul128
    178              fp2sqr1271(P->y, t1);                     // t1 = Y1^2
   \   00000060   01DC               MOVW    R27:R26, R25:R24
   \   00000062   9690               ADIW    R27:R26, 32
   \   00000064   01AE               MOVW    R21:R20, R29:R28
   \   00000066   5D40               SUBI    R20, 208
   \   00000068   4F5F               SBCI    R21, 255
   \   0000006A   019D               MOVW    R19:R18, R27:R26
   \   0000006C   5F20               SUBI    R18, 240
   \   0000006E   4F3F               SBCI    R19, 255
   \   00000070   018D               MOVW    R17:R16, R27:R26
   \   00000072   ........           CALL    fpadd1271
   \   00000076   01AE               MOVW    R21:R20, R29:R28
   \   00000078   5E40               SUBI    R20, 224
   \   0000007A   4F5F               SBCI    R21, 255
   \   0000007C   019D               MOVW    R19:R18, R27:R26
   \   0000007E   5F20               SUBI    R18, 240
   \   00000080   4F3F               SBCI    R19, 255
   \   00000082   018D               MOVW    R17:R16, R27:R26
   \   00000084   ........           CALL    fpsub1271
   \   00000088   01AE               MOVW    R21:R20, R29:R28
   \   0000008A   5B40               SUBI    R20, 176
   \   0000008C   4F5F               SBCI    R21, 255
   \   0000008E   019D               MOVW    R19:R18, R27:R26
   \   00000090   5F20               SUBI    R18, 240
   \   00000092   4F3F               SBCI    R19, 255
   \   00000094   018D               MOVW    R17:R16, R27:R26
   \   00000096   ........           CALL    mod_mul_dbl128
   \   0000009A   01AE               MOVW    R21:R20, R29:R28
   \   0000009C   5C40               SUBI    R20, 192
   \   0000009E   4F5F               SBCI    R21, 255
   \   000000A0   019E               MOVW    R19:R18, R29:R28
   \   000000A2   5E20               SUBI    R18, 224
   \   000000A4   4F3F               SBCI    R19, 255
   \   000000A6   018E               MOVW    R17:R16, R29:R28
   \   000000A8   5D00               SUBI    R16, 208
   \   000000AA   4F1F               SBCI    R17, 255
   \   000000AC   ........           CALL    mod_mul128
    179              fp2mul1271(P->x, P->y, P->x);             // X = X1*Y1
   \   000000B0   01AC               MOVW    R21:R20, R25:R24
   \   000000B2   019C               MOVW    R19:R18, R25:R24
   \   000000B4   5E20               SUBI    R18, 224
   \   000000B6   4F3F               SBCI    R19, 255
   \   000000B8   018C               MOVW    R17:R16, R25:R24
   \   000000BA   ....               RCALL   fp2mul1271
    180              fp2sqr1271(P->z, P->y);                   // Y = Z1^2
   \   000000BC   012C               MOVW    R5:R4, R25:R24
   \   000000BE   E200               LDI     R16, 32
   \   000000C0   0E40               ADD     R4, R16
   \   000000C2   E000               LDI     R16, 0
   \   000000C4   1E50               ADC     R5, R16
   \   000000C6   01DC               MOVW    R27:R26, R25:R24
   \   000000C8   5CA0               SUBI    R26, 192
   \   000000CA   4FBF               SBCI    R27, 255
   \   000000CC   01AE               MOVW    R21:R20, R29:R28
   \   000000CE   5D40               SUBI    R20, 208
   \   000000D0   4F5F               SBCI    R21, 255
   \   000000D2   019D               MOVW    R19:R18, R27:R26
   \   000000D4   5F20               SUBI    R18, 240
   \   000000D6   4F3F               SBCI    R19, 255
   \   000000D8   018D               MOVW    R17:R16, R27:R26
   \   000000DA   ........           CALL    fpadd1271
   \   000000DE   01AE               MOVW    R21:R20, R29:R28
   \   000000E0   5E40               SUBI    R20, 224
   \   000000E2   4F5F               SBCI    R21, 255
   \   000000E4   019D               MOVW    R19:R18, R27:R26
   \   000000E6   5F20               SUBI    R18, 240
   \   000000E8   4F3F               SBCI    R19, 255
   \   000000EA   018D               MOVW    R17:R16, R27:R26
   \   000000EC   ........           CALL    fpsub1271
   \   000000F0   01A2               MOVW    R21:R20, R5:R4
   \   000000F2   5F40               SUBI    R20, 240
   \   000000F4   4F5F               SBCI    R21, 255
   \   000000F6   019D               MOVW    R19:R18, R27:R26
   \   000000F8   5F20               SUBI    R18, 240
   \   000000FA   4F3F               SBCI    R19, 255
   \   000000FC   018D               MOVW    R17:R16, R27:R26
   \   000000FE   ........           CALL    mod_mul_dbl128
   \   00000102   01A2               MOVW    R21:R20, R5:R4
   \   00000104   019E               MOVW    R19:R18, R29:R28
   \   00000106   5E20               SUBI    R18, 224
   \   00000108   4F3F               SBCI    R19, 255
   \   0000010A   018E               MOVW    R17:R16, R29:R28
   \   0000010C   5D00               SUBI    R16, 208
   \   0000010E   4F1F               SBCI    R17, 255
   \   00000110   ........           CALL    mod_mul128
    181              fp2add1271(t0, t1, P->z);                 // Z = X1^2+Y1^2
   \   00000114   01AD               MOVW    R21:R20, R27:R26
   \   00000116   019E               MOVW    R19:R18, R29:R28
   \   00000118   5C20               SUBI    R18, 192
   \   0000011A   4F3F               SBCI    R19, 255
   \   0000011C   018E               MOVW    R17:R16, R29:R28
   \   0000011E   ........           CALL    fpadd1271
   \   00000122   01AD               MOVW    R21:R20, R27:R26
   \   00000124   5F40               SUBI    R20, 240
   \   00000126   4F5F               SBCI    R21, 255
   \   00000128   019E               MOVW    R19:R18, R29:R28
   \   0000012A   5B20               SUBI    R18, 176
   \   0000012C   4F3F               SBCI    R19, 255
   \   0000012E   018E               MOVW    R17:R16, R29:R28
   \   00000130   5F00               SUBI    R16, 240
   \   00000132   4F1F               SBCI    R17, 255
   \   00000134   ........           CALL    fpadd1271
    182              fp2add1271(P->y, P->y, P->y);             // Y = 2*Z1^2
   \   00000138   014C               MOVW    R9:R8, R25:R24
   \   0000013A   E200               LDI     R16, 32
   \   0000013C   0E80               ADD     R8, R16
   \   0000013E   E000               LDI     R16, 0
   \   00000140   1E90               ADC     R9, R16
   \   00000142   013C               MOVW    R7:R6, R25:R24
   \   00000144   E200               LDI     R16, 32
   \   00000146   0E60               ADD     R6, R16
   \   00000148   E000               LDI     R16, 0
   \   0000014A   1E70               ADC     R7, R16
   \   0000014C   012C               MOVW    R5:R4, R25:R24
   \   0000014E   E200               LDI     R16, 32
   \   00000150   0E40               ADD     R4, R16
   \   00000152   E000               LDI     R16, 0
   \   00000154   1E50               ADC     R5, R16
   \   00000156   01A4               MOVW    R21:R20, R9:R8
   \   00000158   0193               MOVW    R19:R18, R7:R6
   \   0000015A   0182               MOVW    R17:R16, R5:R4
   \   0000015C   ........           CALL    fpadd1271
   \   00000160   E100               LDI     R16, 16
   \   00000162   0E80               ADD     R8, R16
   \   00000164   E000               LDI     R16, 0
   \   00000166   1E90               ADC     R9, R16
   \   00000168   01A4               MOVW    R21:R20, R9:R8
   \   0000016A   E100               LDI     R16, 16
   \   0000016C   0E60               ADD     R6, R16
   \   0000016E   E000               LDI     R16, 0
   \   00000170   1E70               ADC     R7, R16
   \   00000172   0193               MOVW    R19:R18, R7:R6
   \   00000174   E100               LDI     R16, 16
   \   00000176   0E40               ADD     R4, R16
   \   00000178   E000               LDI     R16, 0
   \   0000017A   1E50               ADC     R5, R16
   \   0000017C   0182               MOVW    R17:R16, R5:R4
   \   0000017E   ........           CALL    fpadd1271
    183              fp2sub1271(t1, t0, t0);                   // t0 = Y1^2-X1^2
   \   00000182   01AE               MOVW    R21:R20, R29:R28
   \   00000184   019E               MOVW    R19:R18, R29:R28
   \   00000186   018E               MOVW    R17:R16, R29:R28
   \   00000188   5C00               SUBI    R16, 192
   \   0000018A   4F1F               SBCI    R17, 255
   \   0000018C   ........           CALL    fpsub1271
   \   00000190   01AE               MOVW    R21:R20, R29:R28
   \   00000192   5F40               SUBI    R20, 240
   \   00000194   4F5F               SBCI    R21, 255
   \   00000196   019E               MOVW    R19:R18, R29:R28
   \   00000198   5F20               SUBI    R18, 240
   \   0000019A   4F3F               SBCI    R19, 255
   \   0000019C   018E               MOVW    R17:R16, R29:R28
   \   0000019E   5B00               SUBI    R16, 176
   \   000001A0   4F1F               SBCI    R17, 255
   \   000001A2   ........           CALL    fpsub1271
    184              fp2mul1271(P->x, t0, P->x);               // X = X1*Y1*(Y1^2-X1^2)
   \   000001A6   01AC               MOVW    R21:R20, R25:R24
   \   000001A8   019E               MOVW    R19:R18, R29:R28
   \   000001AA   018C               MOVW    R17:R16, R25:R24
   \   000001AC   ....               RCALL   fp2mul1271
    185              fp2sub1271(P->y, t0, P->y);               // Y = 2*Z1^2-(Y1^2-X1^2)
   \   000001AE   013C               MOVW    R7:R6, R25:R24
   \   000001B0   E200               LDI     R16, 32
   \   000001B2   0E60               ADD     R6, R16
   \   000001B4   E000               LDI     R16, 0
   \   000001B6   1E70               ADC     R7, R16
   \   000001B8   012C               MOVW    R5:R4, R25:R24
   \   000001BA   E200               LDI     R16, 32
   \   000001BC   0E40               ADD     R4, R16
   \   000001BE   E000               LDI     R16, 0
   \   000001C0   1E50               ADC     R5, R16
   \   000001C2   01A3               MOVW    R21:R20, R7:R6
   \   000001C4   019E               MOVW    R19:R18, R29:R28
   \   000001C6   0182               MOVW    R17:R16, R5:R4
   \   000001C8   ........           CALL    fpsub1271
   \   000001CC   E100               LDI     R16, 16
   \   000001CE   0E60               ADD     R6, R16
   \   000001D0   E000               LDI     R16, 0
   \   000001D2   1E70               ADC     R7, R16
   \   000001D4   01A3               MOVW    R21:R20, R7:R6
   \   000001D6   019E               MOVW    R19:R18, R29:R28
   \   000001D8   5F20               SUBI    R18, 240
   \   000001DA   4F3F               SBCI    R19, 255
   \   000001DC   E100               LDI     R16, 16
   \   000001DE   0E40               ADD     R4, R16
   \   000001E0   E000               LDI     R16, 0
   \   000001E2   1E50               ADC     R5, R16
   \   000001E4   0182               MOVW    R17:R16, R5:R4
   \   000001E6   ........           CALL    fpsub1271
    186              fp2mul1271(P->x, (felm_t*)&ctau1, P->x);  // Xfinal = X*ctau1
   \   000001EA   01AC               MOVW    R21:R20, R25:R24
   \   000001EC   ....               LDI     R18, LOW(ctau1)
   \   000001EE   ....               LDI     R19, (ctau1) >> 8
   \   000001F0   018C               MOVW    R17:R16, R25:R24
   \   000001F2   ....               RCALL   fp2mul1271
    187              fp2mul1271(P->y, P->z, P->y);             // Yfinal = Y*Z
   \   000001F4   01AC               MOVW    R21:R20, R25:R24
   \   000001F6   5E40               SUBI    R20, 224
   \   000001F8   4F5F               SBCI    R21, 255
   \   000001FA   019D               MOVW    R19:R18, R27:R26
   \   000001FC   9680               ADIW    R25:R24, 32
   \   000001FE   018C               MOVW    R17:R16, R25:R24
   \   00000200   ....               RCALL   fp2mul1271
    188              fp2mul1271(P->z, t0, P->z);               // Zfinal = t0*Z
   \   00000202   01AD               MOVW    R21:R20, R27:R26
   \   00000204   019E               MOVW    R19:R18, R29:R28
   \   00000206   018D               MOVW    R17:R16, R27:R26
   \   00000208   ....               RCALL   fp2mul1271
    189          }
   \   0000020A   96EF               ADIW    R29:R28, 63
   \   0000020C   96A1               ADIW    R29:R28, 33
   \   0000020E                      REQUIRE ?Subroutine3
   \   0000020E                      ;               // Fall through to label ?Subroutine3

   \                                 In  segment FARCODE, align 2, keep-with-next
   \                     ?Subroutine3:
   \   00000000   9189               LD      R24, Y+
   \   00000002   9199               LD      R25, Y+
   \   00000004   91A9               LD      R26, Y+
   \   00000006   91B9               LD      R27, Y+
   \   00000008   9049               LD      R4, Y+
   \   0000000A   9059               LD      R5, Y+
   \   0000000C   9069               LD      R6, Y+
   \   0000000E   9079               LD      R7, Y+
   \   00000010   9089               LD      R8, Y+
   \   00000012   9099               LD      R9, Y+
   \   00000014   9508               RET
    190          
    191          

   \                                 In  segment FARCODE, align 2, keep-with-next
    192          static __inline void ecc_tau_dual(point_extproj_t P)
   \                     ecc_tau_dual:
    193          { // Apply tau_dual mapping to a point, P = tau_dual(P)
   \   00000000   927A               ST      -Y, R7
   \   00000002   926A               ST      -Y, R6
   \   00000004   925A               ST      -Y, R5
   \   00000006   924A               ST      -Y, R4
   \   00000008   93BA               ST      -Y, R27
   \   0000000A   93AA               ST      -Y, R26
   \   0000000C   939A               ST      -Y, R25
   \   0000000E   938A               ST      -Y, R24
   \   00000010                      REQUIRE ?Register_R4_is_cg_reg
   \   00000010                      REQUIRE ?Register_R5_is_cg_reg
   \   00000010                      REQUIRE ?Register_R6_is_cg_reg
   \   00000010                      REQUIRE ?Register_R7_is_cg_reg
   \   00000010   97EF               SBIW    R29:R28, 63
   \   00000012   97A1               SBIW    R29:R28, 33
   \   00000014   01C8               MOVW    R25:R24, R17:R16
    194            // Input: P = (X1:Y1:Z1) on Ehat in twisted Edwards coordinates
    195            // Output: P = (Xfinal,Yfinal,Zfinal,Tafinal,Tbfinal) on E, where Tfinal = Tafinal*Tbfinal,
    196            //         corresponding to (Xfinal:Yfinal:Zfinal:Tfinal) in extended twisted Edwards coordinates
    197              f2elm_t t0, t1;
    198          
    199              fp2sqr1271(P->x, t0);                          // t0 = X1^2
   \   00000016   01AE               MOVW    R21:R20, R29:R28
   \   00000018   5D40               SUBI    R20, 208
   \   0000001A   4F5F               SBCI    R21, 255
   \   0000001C   0198               MOVW    R19:R18, R17:R16
   \   0000001E   5F20               SUBI    R18, 240
   \   00000020   4F3F               SBCI    R19, 255
   \   00000022   ........           CALL    fpadd1271
   \   00000026   01AE               MOVW    R21:R20, R29:R28
   \   00000028   5E40               SUBI    R20, 224
   \   0000002A   4F5F               SBCI    R21, 255
   \   0000002C   019C               MOVW    R19:R18, R25:R24
   \   0000002E   5F20               SUBI    R18, 240
   \   00000030   4F3F               SBCI    R19, 255
   \   00000032   018C               MOVW    R17:R16, R25:R24
   \   00000034   ........           CALL    fpsub1271
   \   00000038   01AE               MOVW    R21:R20, R29:R28
   \   0000003A   5F40               SUBI    R20, 240
   \   0000003C   4F5F               SBCI    R21, 255
   \   0000003E   019C               MOVW    R19:R18, R25:R24
   \   00000040   5F20               SUBI    R18, 240
   \   00000042   4F3F               SBCI    R19, 255
   \   00000044   018C               MOVW    R17:R16, R25:R24
   \   00000046   ........           CALL    mod_mul_dbl128
   \   0000004A   01AE               MOVW    R21:R20, R29:R28
   \   0000004C   019E               MOVW    R19:R18, R29:R28
   \   0000004E   5E20               SUBI    R18, 224
   \   00000050   4F3F               SBCI    R19, 255
   \   00000052   018E               MOVW    R17:R16, R29:R28
   \   00000054   5D00               SUBI    R16, 208
   \   00000056   4F1F               SBCI    R17, 255
   \   00000058   ........           CALL    mod_mul128
    200              fp2sqr1271(P->z, P->ta);                       // Ta = Z1^2
   \   0000005C   013C               MOVW    R7:R6, R25:R24
   \   0000005E   E600               LDI     R16, 96
   \   00000060   0E60               ADD     R6, R16
   \   00000062   E000               LDI     R16, 0
   \   00000064   1E70               ADC     R7, R16
   \   00000066   01DC               MOVW    R27:R26, R25:R24
   \   00000068   5CA0               SUBI    R26, 192
   \   0000006A   4FBF               SBCI    R27, 255
   \   0000006C   01AE               MOVW    R21:R20, R29:R28
   \   0000006E   5D40               SUBI    R20, 208
   \   00000070   4F5F               SBCI    R21, 255
   \   00000072   019D               MOVW    R19:R18, R27:R26
   \   00000074   5F20               SUBI    R18, 240
   \   00000076   4F3F               SBCI    R19, 255
   \   00000078   018D               MOVW    R17:R16, R27:R26
   \   0000007A   ........           CALL    fpadd1271
   \   0000007E   01AE               MOVW    R21:R20, R29:R28
   \   00000080   5E40               SUBI    R20, 224
   \   00000082   4F5F               SBCI    R21, 255
   \   00000084   019D               MOVW    R19:R18, R27:R26
   \   00000086   5F20               SUBI    R18, 240
   \   00000088   4F3F               SBCI    R19, 255
   \   0000008A   018D               MOVW    R17:R16, R27:R26
   \   0000008C   ........           CALL    fpsub1271
   \   00000090   01A3               MOVW    R21:R20, R7:R6
   \   00000092   5F40               SUBI    R20, 240
   \   00000094   4F5F               SBCI    R21, 255
   \   00000096   019D               MOVW    R19:R18, R27:R26
   \   00000098   5F20               SUBI    R18, 240
   \   0000009A   4F3F               SBCI    R19, 255
   \   0000009C   018D               MOVW    R17:R16, R27:R26
   \   0000009E   ........           CALL    mod_mul_dbl128
   \   000000A2   01A3               MOVW    R21:R20, R7:R6
   \   000000A4   019E               MOVW    R19:R18, R29:R28
   \   000000A6   5E20               SUBI    R18, 224
   \   000000A8   4F3F               SBCI    R19, 255
   \   000000AA   018E               MOVW    R17:R16, R29:R28
   \   000000AC   5D00               SUBI    R16, 208
   \   000000AE   4F1F               SBCI    R17, 255
   \   000000B0   ........           CALL    mod_mul128
    201              fp2sqr1271(P->y, t1);                          // t1 = Y1^2
   \   000000B4   012C               MOVW    R5:R4, R25:R24
   \   000000B6   E200               LDI     R16, 32
   \   000000B8   0E40               ADD     R4, R16
   \   000000BA   E000               LDI     R16, 0
   \   000000BC   1E50               ADC     R5, R16
   \   000000BE   01AE               MOVW    R21:R20, R29:R28
   \   000000C0   5D40               SUBI    R20, 208
   \   000000C2   4F5F               SBCI    R21, 255
   \   000000C4   0192               MOVW    R19:R18, R5:R4
   \   000000C6   5F20               SUBI    R18, 240
   \   000000C8   4F3F               SBCI    R19, 255
   \   000000CA   0182               MOVW    R17:R16, R5:R4
   \   000000CC   ........           CALL    fpadd1271
   \   000000D0   01AE               MOVW    R21:R20, R29:R28
   \   000000D2   5E40               SUBI    R20, 224
   \   000000D4   4F5F               SBCI    R21, 255
   \   000000D6   0192               MOVW    R19:R18, R5:R4
   \   000000D8   5F20               SUBI    R18, 240
   \   000000DA   4F3F               SBCI    R19, 255
   \   000000DC   0182               MOVW    R17:R16, R5:R4
   \   000000DE   ........           CALL    fpsub1271
   \   000000E2   01AE               MOVW    R21:R20, R29:R28
   \   000000E4   5B40               SUBI    R20, 176
   \   000000E6   4F5F               SBCI    R21, 255
   \   000000E8   0192               MOVW    R19:R18, R5:R4
   \   000000EA   5F20               SUBI    R18, 240
   \   000000EC   4F3F               SBCI    R19, 255
   \   000000EE   0182               MOVW    R17:R16, R5:R4
   \   000000F0   ........           CALL    mod_mul_dbl128
   \   000000F4   01AE               MOVW    R21:R20, R29:R28
   \   000000F6   5C40               SUBI    R20, 192
   \   000000F8   4F5F               SBCI    R21, 255
   \   000000FA   019E               MOVW    R19:R18, R29:R28
   \   000000FC   5E20               SUBI    R18, 224
   \   000000FE   4F3F               SBCI    R19, 255
   \   00000100   018E               MOVW    R17:R16, R29:R28
   \   00000102   5D00               SUBI    R16, 208
   \   00000104   4F1F               SBCI    R17, 255
   \   00000106   ........           CALL    mod_mul128
    202              fp2add1271(P->ta, P->ta, P->z);                // Z = 2*Z1^2
   \   0000010A   01AD               MOVW    R21:R20, R27:R26
   \   0000010C   0193               MOVW    R19:R18, R7:R6
   \   0000010E   0183               MOVW    R17:R16, R7:R6
   \   00000110   ........           CALL    fpadd1271
   \   00000114   01AD               MOVW    R21:R20, R27:R26
   \   00000116   5F40               SUBI    R20, 240
   \   00000118   4F5F               SBCI    R21, 255
   \   0000011A   0193               MOVW    R19:R18, R7:R6
   \   0000011C   5F20               SUBI    R18, 240
   \   0000011E   4F3F               SBCI    R19, 255
   \   00000120   0183               MOVW    R17:R16, R7:R6
   \   00000122   5F00               SUBI    R16, 240
   \   00000124   4F1F               SBCI    R17, 255
   \   00000126   ........           CALL    fpadd1271
    203              fp2sub1271(t1, t0, P->ta);                     // Tafinal = Y1^2-X1^2
   \   0000012A   01A3               MOVW    R21:R20, R7:R6
   \   0000012C   019E               MOVW    R19:R18, R29:R28
   \   0000012E   018E               MOVW    R17:R16, R29:R28
   \   00000130   5C00               SUBI    R16, 192
   \   00000132   4F1F               SBCI    R17, 255
   \   00000134   ........           CALL    fpsub1271
   \   00000138   01A3               MOVW    R21:R20, R7:R6
   \   0000013A   5F40               SUBI    R20, 240
   \   0000013C   4F5F               SBCI    R21, 255
   \   0000013E   019E               MOVW    R19:R18, R29:R28
   \   00000140   5F20               SUBI    R18, 240
   \   00000142   4F3F               SBCI    R19, 255
   \   00000144   018E               MOVW    R17:R16, R29:R28
   \   00000146   5B00               SUBI    R16, 176
   \   00000148   4F1F               SBCI    R17, 255
   \   0000014A   ........           CALL    fpsub1271
    204              fp2add1271(t0, t1, t0);                        // t0 = X1^2+Y1^2
   \   0000014E   01AE               MOVW    R21:R20, R29:R28
   \   00000150   019E               MOVW    R19:R18, R29:R28
   \   00000152   5C20               SUBI    R18, 192
   \   00000154   4F3F               SBCI    R19, 255
   \   00000156   018E               MOVW    R17:R16, R29:R28
   \   00000158   ........           CALL    fpadd1271
   \   0000015C   01AE               MOVW    R21:R20, R29:R28
   \   0000015E   5F40               SUBI    R20, 240
   \   00000160   4F5F               SBCI    R21, 255
   \   00000162   019E               MOVW    R19:R18, R29:R28
   \   00000164   5B20               SUBI    R18, 176
   \   00000166   4F3F               SBCI    R19, 255
   \   00000168   018E               MOVW    R17:R16, R29:R28
   \   0000016A   5F00               SUBI    R16, 240
   \   0000016C   4F1F               SBCI    R17, 255
   \   0000016E   ........           CALL    fpadd1271
    205              fp2mul1271(P->x, P->y, P->x);                  // X = X1*Y1
   \   00000172   01AC               MOVW    R21:R20, R25:R24
   \   00000174   019C               MOVW    R19:R18, R25:R24
   \   00000176   5E20               SUBI    R18, 224
   \   00000178   4F3F               SBCI    R19, 255
   \   0000017A   018C               MOVW    R17:R16, R25:R24
   \   0000017C   ....               RCALL   fp2mul1271
    206              fp2sub1271(P->z, P->ta, P->z);                 // Z = 2*Z1^2-(Y1^2-X1^2)
   \   0000017E   01AD               MOVW    R21:R20, R27:R26
   \   00000180   0193               MOVW    R19:R18, R7:R6
   \   00000182   018D               MOVW    R17:R16, R27:R26
   \   00000184   ........           CALL    fpsub1271
   \   00000188   01AD               MOVW    R21:R20, R27:R26
   \   0000018A   5F40               SUBI    R20, 240
   \   0000018C   4F5F               SBCI    R21, 255
   \   0000018E   0193               MOVW    R19:R18, R7:R6
   \   00000190   5F20               SUBI    R18, 240
   \   00000192   4F3F               SBCI    R19, 255
   \   00000194   018D               MOVW    R17:R16, R27:R26
   \   00000196   5F00               SUBI    R16, 240
   \   00000198   4F1F               SBCI    R17, 255
   \   0000019A   ........           CALL    fpsub1271
    207              fp2mul1271(P->x, (felm_t*)&ctaudual1, P->tb);  // Tbfinal = ctaudual1*X1*X1
   \   0000019E   012C               MOVW    R5:R4, R25:R24
   \   000001A0   E800               LDI     R16, 128
   \   000001A2   0E40               ADD     R4, R16
   \   000001A4   E000               LDI     R16, 0
   \   000001A6   1E50               ADC     R5, R16
   \   000001A8   01A2               MOVW    R21:R20, R5:R4
   \   000001AA   ....               LDI     R18, LOW(ctaudual1)
   \   000001AC   ....               LDI     R19, (ctaudual1) >> 8
   \   000001AE   018C               MOVW    R17:R16, R25:R24
   \   000001B0   ....               RCALL   fp2mul1271
    208              fp2mul1271(P->z, P->ta, P->y);                 // Yfinal = Z*Tafinal
   \   000001B2   01AC               MOVW    R21:R20, R25:R24
   \   000001B4   5E40               SUBI    R20, 224
   \   000001B6   4F5F               SBCI    R21, 255
   \   000001B8   0193               MOVW    R19:R18, R7:R6
   \   000001BA   018D               MOVW    R17:R16, R27:R26
   \   000001BC   ....               RCALL   fp2mul1271
    209              fp2mul1271(P->tb, t0, P->x);                   // Xfinal = Tbfinal*t0
   \   000001BE   01AC               MOVW    R21:R20, R25:R24
   \   000001C0   019E               MOVW    R19:R18, R29:R28
   \   000001C2   0182               MOVW    R17:R16, R5:R4
   \   000001C4   ....               RCALL   fp2mul1271
    210              fp2mul1271(P->z, t0, P->z);                    // Zfinal = Z*t0
   \   000001C6   01AD               MOVW    R21:R20, R27:R26
   \   000001C8   019E               MOVW    R19:R18, R29:R28
   \   000001CA   018D               MOVW    R17:R16, R27:R26
   \   000001CC                      REQUIRE ?Subroutine10
   \   000001CC                      ;               // Fall through to label ?Subroutine10
    211          }

   \                                 In  segment FARCODE, align 2, keep-with-next
   \                     ?Subroutine10:
   \   00000000   ....               RCALL   fp2mul1271
   \   00000002   96EF               ADIW    R29:R28, 63
   \   00000004   96A1               ADIW    R29:R28, 33
   \   00000006   ....               RJMP    ??Subroutine12_0
    212          
    213          

   \                                 In  segment FARCODE, align 2, keep-with-next
    214          static __inline void ecc_delphidel(point_extproj_t P)
   \                     ecc_delphidel:
    215          { // Apply delta_phi_delta mapping to a point, P = delta(phi_W(delta_inv(P))), 
   \   00000000   925A               ST      -Y, R5
   \   00000002   924A               ST      -Y, R4
   \   00000004   93BA               ST      -Y, R27
   \   00000006   93AA               ST      -Y, R26
   \   00000008   939A               ST      -Y, R25
   \   0000000A   938A               ST      -Y, R24
   \   0000000C                      REQUIRE ?Register_R4_is_cg_reg
   \   0000000C                      REQUIRE ?Register_R5_is_cg_reg
   \   0000000C   95DA               DEC     R29
   \   0000000E   01C8               MOVW    R25:R24, R17:R16
    216            // where phi_W is the endomorphism on the Weierstrass form.
    217            // Input: P = (X1:Y1:Z1) on Ehat in twisted Edwards coordinates
    218            // Output: P = (Xfinal:Yfinal:Zfinal) on Ehat in twisted Edwards coordinates
    219              f2elm_t t0, t1, t2, t3, t4, t5, t6; 
    220          
    221              fp2sqr1271(P->z, t4);                          // t4 = Z1^2
   \   00000010   0128               MOVW    R5:R4, R17:R16
   \   00000012   E400               LDI     R16, 64
   \   00000014   0E40               ADD     R4, R16
   \   00000016   E000               LDI     R16, 0
   \   00000018   1E50               ADC     R5, R16
   \   0000001A   01AE               MOVW    R21:R20, R29:R28
   \   0000001C   5140               SUBI    R20, 16
   \   0000001E   4F5F               SBCI    R21, 255
   \   00000020   0192               MOVW    R19:R18, R5:R4
   \   00000022   5F20               SUBI    R18, 240
   \   00000024   4F3F               SBCI    R19, 255
   \   00000026   0182               MOVW    R17:R16, R5:R4
   \   00000028   ........           CALL    fpadd1271
   \   0000002C   01AE               MOVW    R21:R20, R29:R28
   \   0000002E   5240               SUBI    R20, 32
   \   00000030   4F5F               SBCI    R21, 255
   \   00000032   0192               MOVW    R19:R18, R5:R4
   \   00000034   5F20               SUBI    R18, 240
   \   00000036   4F3F               SBCI    R19, 255
   \   00000038   0182               MOVW    R17:R16, R5:R4
   \   0000003A   ........           CALL    fpsub1271
   \   0000003E   01AE               MOVW    R21:R20, R29:R28
   \   00000040   5340               SUBI    R20, 48
   \   00000042   4F5F               SBCI    R21, 255
   \   00000044   0192               MOVW    R19:R18, R5:R4
   \   00000046   5F20               SUBI    R18, 240
   \   00000048   4F3F               SBCI    R19, 255
   \   0000004A   0182               MOVW    R17:R16, R5:R4
   \   0000004C   ........           CALL    mod_mul_dbl128
   \   00000050   01AE               MOVW    R21:R20, R29:R28
   \   00000052   5440               SUBI    R20, 64
   \   00000054   4F5F               SBCI    R21, 255
   \   00000056   019E               MOVW    R19:R18, R29:R28
   \   00000058   5220               SUBI    R18, 32
   \   0000005A   4F3F               SBCI    R19, 255
   \   0000005C   018E               MOVW    R17:R16, R29:R28
   \   0000005E   5100               SUBI    R16, 16
   \   00000060   4F1F               SBCI    R17, 255
   \   00000062   ........           CALL    mod_mul128
    222              fp2mul1271(P->y, P->z, t3);                    // t3 = Y1*Z1
   \   00000066   01AE               MOVW    R21:R20, R29:R28
   \   00000068   5A40               SUBI    R20, 160
   \   0000006A   4F5F               SBCI    R21, 255
   \   0000006C   0192               MOVW    R19:R18, R5:R4
   \   0000006E   018C               MOVW    R17:R16, R25:R24
   \   00000070   5E00               SUBI    R16, 224
   \   00000072   4F1F               SBCI    R17, 255
   \   00000074   ....               RCALL   fp2mul1271
    223              fp2mul1271(t4, (felm_t*)&cphi4, t0);           // t0 = cphi4*t4
   \   00000076   01AE               MOVW    R21:R20, R29:R28
   \   00000078   5840               SUBI    R20, 128
   \   0000007A   4F5F               SBCI    R21, 255
   \   0000007C   ....               LDI     R18, LOW((cphi0 + 128))
   \   0000007E   ....               LDI     R19, HIGH((cphi0 + 128))
   \   00000080   018E               MOVW    R17:R16, R29:R28
   \   00000082   5400               SUBI    R16, 64
   \   00000084   4F1F               SBCI    R17, 255
   \   00000086   ....               RCALL   fp2mul1271
    224              fp2sqr1271(P->y, t2);                          // t2 = Y1^2
   \   00000088   01DC               MOVW    R27:R26, R25:R24
   \   0000008A   9690               ADIW    R27:R26, 32
   \   0000008C   01AE               MOVW    R21:R20, R29:R28
   \   0000008E   5140               SUBI    R20, 16
   \   00000090   4F5F               SBCI    R21, 255
   \   00000092   019D               MOVW    R19:R18, R27:R26
   \   00000094   5F20               SUBI    R18, 240
   \   00000096   4F3F               SBCI    R19, 255
   \   00000098   018D               MOVW    R17:R16, R27:R26
   \   0000009A   ........           CALL    fpadd1271
   \   0000009E   01AE               MOVW    R21:R20, R29:R28
   \   000000A0   5240               SUBI    R20, 32
   \   000000A2   4F5F               SBCI    R21, 255
   \   000000A4   019D               MOVW    R19:R18, R27:R26
   \   000000A6   5F20               SUBI    R18, 240
   \   000000A8   4F3F               SBCI    R19, 255
   \   000000AA   018D               MOVW    R17:R16, R27:R26
   \   000000AC   ........           CALL    fpsub1271
   \   000000B0   01AE               MOVW    R21:R20, R29:R28
   \   000000B2   5F40               SUBI    R20, 240
   \   000000B4   4F5F               SBCI    R21, 255
   \   000000B6   019D               MOVW    R19:R18, R27:R26
   \   000000B8   5F20               SUBI    R18, 240
   \   000000BA   4F3F               SBCI    R19, 255
   \   000000BC   018D               MOVW    R17:R16, R27:R26
   \   000000BE   ........           CALL    mod_mul_dbl128
   \   000000C2   01AE               MOVW    R21:R20, R29:R28
   \   000000C4   019E               MOVW    R19:R18, R29:R28
   \   000000C6   5220               SUBI    R18, 32
   \   000000C8   4F3F               SBCI    R19, 255
   \   000000CA   018E               MOVW    R17:R16, R29:R28
   \   000000CC   5100               SUBI    R16, 16
   \   000000CE   4F1F               SBCI    R17, 255
   \   000000D0   ........           CALL    mod_mul128
    225              fp2add1271(t0, t2, t0);                        // t0 = t0+t2
   \   000000D4   01AE               MOVW    R21:R20, R29:R28
   \   000000D6   5840               SUBI    R20, 128
   \   000000D8   4F5F               SBCI    R21, 255
   \   000000DA   019E               MOVW    R19:R18, R29:R28
   \   000000DC   018E               MOVW    R17:R16, R29:R28
   \   000000DE   5800               SUBI    R16, 128
   \   000000E0   4F1F               SBCI    R17, 255
   \   000000E2   ........           CALL    fpadd1271
   \   000000E6   01AE               MOVW    R21:R20, R29:R28
   \   000000E8   5740               SUBI    R20, 112
   \   000000EA   4F5F               SBCI    R21, 255
   \   000000EC   019E               MOVW    R19:R18, R29:R28
   \   000000EE   5F20               SUBI    R18, 240
   \   000000F0   4F3F               SBCI    R19, 255
   \   000000F2   018E               MOVW    R17:R16, R29:R28
   \   000000F4   5700               SUBI    R16, 112
   \   000000F6   4F1F               SBCI    R17, 255
   \   000000F8   ........           CALL    fpadd1271
    226              fp2mul1271(t3, (felm_t*)&cphi3, t1);           // t1 = cphi3*t3
   \   000000FC   01AE               MOVW    R21:R20, R29:R28
   \   000000FE   5E40               SUBI    R20, 224
   \   00000100   4F5F               SBCI    R21, 255
   \   00000102   ....               LDI     R18, LOW((cphi0 + 96))
   \   00000104   ....               LDI     R19, HIGH((cphi0 + 96))
   \   00000106   018E               MOVW    R17:R16, R29:R28
   \   00000108   5A00               SUBI    R16, 160
   \   0000010A   4F1F               SBCI    R17, 255
   \   0000010C   ....               RCALL   fp2mul1271
    227              fp2sub1271(t0, t1, t5);                        // t5 = t0-t1
   \   0000010E   01AE               MOVW    R21:R20, R29:R28
   \   00000110   5C40               SUBI    R20, 192
   \   00000112   4F5F               SBCI    R21, 255
   \   00000114   019E               MOVW    R19:R18, R29:R28
   \   00000116   5E20               SUBI    R18, 224
   \   00000118   4F3F               SBCI    R19, 255
   \   0000011A   018E               MOVW    R17:R16, R29:R28
   \   0000011C   5800               SUBI    R16, 128
   \   0000011E   4F1F               SBCI    R17, 255
   \   00000120   ........           CALL    fpsub1271
   \   00000124   01AE               MOVW    R21:R20, R29:R28
   \   00000126   5B40               SUBI    R20, 176
   \   00000128   4F5F               SBCI    R21, 255
   \   0000012A   019E               MOVW    R19:R18, R29:R28
   \   0000012C   5D20               SUBI    R18, 208
   \   0000012E   4F3F               SBCI    R19, 255
   \   00000130   018E               MOVW    R17:R16, R29:R28
   \   00000132   5700               SUBI    R16, 112
   \   00000134   4F1F               SBCI    R17, 255
   \   00000136   ........           CALL    fpsub1271
    228              fp2add1271(t0, t1, t0);                        // t0 = t0+t1
   \   0000013A   01AE               MOVW    R21:R20, R29:R28
   \   0000013C   5840               SUBI    R20, 128
   \   0000013E   4F5F               SBCI    R21, 255
   \   00000140   019E               MOVW    R19:R18, R29:R28
   \   00000142   5E20               SUBI    R18, 224
   \   00000144   4F3F               SBCI    R19, 255
   \   00000146   018E               MOVW    R17:R16, R29:R28
   \   00000148   5800               SUBI    R16, 128
   \   0000014A   4F1F               SBCI    R17, 255
   \   0000014C   ........           CALL    fpadd1271
   \   00000150   01AE               MOVW    R21:R20, R29:R28
   \   00000152   5740               SUBI    R20, 112
   \   00000154   4F5F               SBCI    R21, 255
   \   00000156   019E               MOVW    R19:R18, R29:R28
   \   00000158   5D20               SUBI    R18, 208
   \   0000015A   4F3F               SBCI    R19, 255
   \   0000015C   018E               MOVW    R17:R16, R29:R28
   \   0000015E   5700               SUBI    R16, 112
   \   00000160   4F1F               SBCI    R17, 255
   \   00000162   ........           CALL    fpadd1271
    229              fp2mul1271(t0, P->z, t0);                      // t0 = t0*Z1
   \   00000166   01AE               MOVW    R21:R20, R29:R28
   \   00000168   5840               SUBI    R20, 128
   \   0000016A   4F5F               SBCI    R21, 255
   \   0000016C   0192               MOVW    R19:R18, R5:R4
   \   0000016E   018E               MOVW    R17:R16, R29:R28
   \   00000170   5800               SUBI    R16, 128
   \   00000172   4F1F               SBCI    R17, 255
   \   00000174   ....               RCALL   fp2mul1271
    230              fp2mul1271(t3, (felm_t*)&cphi1, t1);           // t1 = cphi1*t3
   \   00000176   01AE               MOVW    R21:R20, R29:R28
   \   00000178   5E40               SUBI    R20, 224
   \   0000017A   4F5F               SBCI    R21, 255
   \   0000017C   ....               LDI     R18, LOW((cphi0 + 32))
   \   0000017E   ....               LDI     R19, HIGH((cphi0 + 32))
   \   00000180   018E               MOVW    R17:R16, R29:R28
   \   00000182   5A00               SUBI    R16, 160
   \   00000184   4F1F               SBCI    R17, 255
   \   00000186   ....               RCALL   fp2mul1271
    231              fp2mul1271(t0, t5, t0);                        // t0 = t0*t5
   \   00000188   01AE               MOVW    R21:R20, R29:R28
   \   0000018A   5840               SUBI    R20, 128
   \   0000018C   4F5F               SBCI    R21, 255
   \   0000018E   019E               MOVW    R19:R18, R29:R28
   \   00000190   5C20               SUBI    R18, 192
   \   00000192   4F3F               SBCI    R19, 255
   \   00000194   018E               MOVW    R17:R16, R29:R28
   \   00000196   5800               SUBI    R16, 128
   \   00000198   4F1F               SBCI    R17, 255
   \   0000019A   ....               RCALL   fp2mul1271
    232              fp2mul1271(t4, (felm_t*)&cphi2, t5);           // t5 = cphi2*t4
   \   0000019C   01AE               MOVW    R21:R20, R29:R28
   \   0000019E   5C40               SUBI    R20, 192
   \   000001A0   4F5F               SBCI    R21, 255
   \   000001A2   ....               LDI     R18, LOW((cphi0 + 64))
   \   000001A4   ....               LDI     R19, HIGH((cphi0 + 64))
   \   000001A6   018E               MOVW    R17:R16, R29:R28
   \   000001A8   5400               SUBI    R16, 64
   \   000001AA   4F1F               SBCI    R17, 255
   \   000001AC   ....               RCALL   fp2mul1271
    233              fp2add1271(t2, t5, t5);                        // t5 = t2+t5
   \   000001AE   01AE               MOVW    R21:R20, R29:R28
   \   000001B0   5C40               SUBI    R20, 192
   \   000001B2   4F5F               SBCI    R21, 255
   \   000001B4   019E               MOVW    R19:R18, R29:R28
   \   000001B6   5C20               SUBI    R18, 192
   \   000001B8   4F3F               SBCI    R19, 255
   \   000001BA   018E               MOVW    R17:R16, R29:R28
   \   000001BC   ........           CALL    fpadd1271
   \   000001C0   01AE               MOVW    R21:R20, R29:R28
   \   000001C2   5B40               SUBI    R20, 176
   \   000001C4   4F5F               SBCI    R21, 255
   \   000001C6   019E               MOVW    R19:R18, R29:R28
   \   000001C8   5B20               SUBI    R18, 176
   \   000001CA   4F3F               SBCI    R19, 255
   \   000001CC   018E               MOVW    R17:R16, R29:R28
   \   000001CE   5F00               SUBI    R16, 240
   \   000001D0   4F1F               SBCI    R17, 255
   \   000001D2   ........           CALL    fpadd1271
    234              fp2sub1271(t1, t5, t6);                        // t6 = t1-t5
   \   000001D6   01AE               MOVW    R21:R20, R29:R28
   \   000001D8   5640               SUBI    R20, 96
   \   000001DA   4F5F               SBCI    R21, 255
   \   000001DC   019E               MOVW    R19:R18, R29:R28
   \   000001DE   5C20               SUBI    R18, 192
   \   000001E0   4F3F               SBCI    R19, 255
   \   000001E2   018E               MOVW    R17:R16, R29:R28
   \   000001E4   5E00               SUBI    R16, 224
   \   000001E6   4F1F               SBCI    R17, 255
   \   000001E8   ........           CALL    fpsub1271
   \   000001EC   01AE               MOVW    R21:R20, R29:R28
   \   000001EE   5540               SUBI    R20, 80
   \   000001F0   4F5F               SBCI    R21, 255
   \   000001F2   019E               MOVW    R19:R18, R29:R28
   \   000001F4   5B20               SUBI    R18, 176
   \   000001F6   4F3F               SBCI    R19, 255
   \   000001F8   018E               MOVW    R17:R16, R29:R28
   \   000001FA   5D00               SUBI    R16, 208
   \   000001FC   4F1F               SBCI    R17, 255
   \   000001FE   ........           CALL    fpsub1271
    235              fp2add1271(t1, t5, t1);                        // t1 = t1+t5
   \   00000202   01AE               MOVW    R21:R20, R29:R28
   \   00000204   5E40               SUBI    R20, 224
   \   00000206   4F5F               SBCI    R21, 255
   \   00000208   019E               MOVW    R19:R18, R29:R28
   \   0000020A   5C20               SUBI    R18, 192
   \   0000020C   4F3F               SBCI    R19, 255
   \   0000020E   018E               MOVW    R17:R16, R29:R28
   \   00000210   5E00               SUBI    R16, 224
   \   00000212   4F1F               SBCI    R17, 255
   \   00000214   ........           CALL    fpadd1271
   \   00000218   01AE               MOVW    R21:R20, R29:R28
   \   0000021A   5D40               SUBI    R20, 208
   \   0000021C   4F5F               SBCI    R21, 255
   \   0000021E   019E               MOVW    R19:R18, R29:R28
   \   00000220   5B20               SUBI    R18, 176
   \   00000222   4F3F               SBCI    R19, 255
   \   00000224   018E               MOVW    R17:R16, R29:R28
   \   00000226   5D00               SUBI    R16, 208
   \   00000228   4F1F               SBCI    R17, 255
   \   0000022A   ........           CALL    fpadd1271
    236              fp2mul1271(t6, t1, t6);                        // t6 = t1*t6
   \   0000022E   01AE               MOVW    R21:R20, R29:R28
   \   00000230   5640               SUBI    R20, 96
   \   00000232   4F5F               SBCI    R21, 255
   \   00000234   019E               MOVW    R19:R18, R29:R28
   \   00000236   5E20               SUBI    R18, 224
   \   00000238   4F3F               SBCI    R19, 255
   \   0000023A   018E               MOVW    R17:R16, R29:R28
   \   0000023C   5600               SUBI    R16, 96
   \   0000023E   4F1F               SBCI    R17, 255
   \   00000240   ....               RCALL   fp2mul1271
    237              fp2mul1271(t6, (felm_t*)&cphi0, t6);           // t6 = cphi0*t6
   \   00000242   01AE               MOVW    R21:R20, R29:R28
   \   00000244   5640               SUBI    R20, 96
   \   00000246   4F5F               SBCI    R21, 255
   \   00000248   ....               LDI     R18, LOW(cphi0)
   \   0000024A   ....               LDI     R19, (cphi0) >> 8
   \   0000024C   018E               MOVW    R17:R16, R29:R28
   \   0000024E   5600               SUBI    R16, 96
   \   00000250   4F1F               SBCI    R17, 255
   \   00000252   ....               RCALL   fp2mul1271
    238              fp2mul1271(P->x, t6, P->x);                    // X = X1*t6
   \   00000254   01AC               MOVW    R21:R20, R25:R24
   \   00000256   019E               MOVW    R19:R18, R29:R28
   \   00000258   5620               SUBI    R18, 96
   \   0000025A   4F3F               SBCI    R19, 255
   \   0000025C   018C               MOVW    R17:R16, R25:R24
   \   0000025E   ....               RCALL   fp2mul1271
    239              fp2sqr1271(t2, t6);                            // t6 = t2^2
   \   00000260   01AE               MOVW    R21:R20, R29:R28
   \   00000262   5140               SUBI    R20, 16
   \   00000264   4F5F               SBCI    R21, 255
   \   00000266   019E               MOVW    R19:R18, R29:R28
   \   00000268   5F20               SUBI    R18, 240
   \   0000026A   4F3F               SBCI    R19, 255
   \   0000026C   018E               MOVW    R17:R16, R29:R28
   \   0000026E   ........           CALL    fpadd1271
   \   00000272   01AE               MOVW    R21:R20, R29:R28
   \   00000274   5240               SUBI    R20, 32
   \   00000276   4F5F               SBCI    R21, 255
   \   00000278   019E               MOVW    R19:R18, R29:R28
   \   0000027A   5F20               SUBI    R18, 240
   \   0000027C   4F3F               SBCI    R19, 255
   \   0000027E   018E               MOVW    R17:R16, R29:R28
   \   00000280   ........           CALL    fpsub1271
   \   00000284   01AE               MOVW    R21:R20, R29:R28
   \   00000286   5540               SUBI    R20, 80
   \   00000288   4F5F               SBCI    R21, 255
   \   0000028A   019E               MOVW    R19:R18, R29:R28
   \   0000028C   5F20               SUBI    R18, 240
   \   0000028E   4F3F               SBCI    R19, 255
   \   00000290   018E               MOVW    R17:R16, R29:R28
   \   00000292   ........           CALL    mod_mul_dbl128
   \   00000296   01AE               MOVW    R21:R20, R29:R28
   \   00000298   5640               SUBI    R20, 96
   \   0000029A   4F5F               SBCI    R21, 255
   \   0000029C   019E               MOVW    R19:R18, R29:R28
   \   0000029E   5220               SUBI    R18, 32
   \   000002A0   4F3F               SBCI    R19, 255
   \   000002A2   018E               MOVW    R17:R16, R29:R28
   \   000002A4   5100               SUBI    R16, 16
   \   000002A6   4F1F               SBCI    R17, 255
   \   000002A8   ........           CALL    mod_mul128
    240              fp2sqr1271(t3, t2);                            // t2 = t3^2
   \   000002AC   01AE               MOVW    R21:R20, R29:R28
   \   000002AE   5140               SUBI    R20, 16
   \   000002B0   4F5F               SBCI    R21, 255
   \   000002B2   019E               MOVW    R19:R18, R29:R28
   \   000002B4   5920               SUBI    R18, 144
   \   000002B6   4F3F               SBCI    R19, 255
   \   000002B8   018E               MOVW    R17:R16, R29:R28
   \   000002BA   5A00               SUBI    R16, 160
   \   000002BC   4F1F               SBCI    R17, 255
   \   000002BE   ........           CALL    fpadd1271
   \   000002C2   01AE               MOVW    R21:R20, R29:R28
   \   000002C4   5240               SUBI    R20, 32
   \   000002C6   4F5F               SBCI    R21, 255
   \   000002C8   019E               MOVW    R19:R18, R29:R28
   \   000002CA   5920               SUBI    R18, 144
   \   000002CC   4F3F               SBCI    R19, 255
   \   000002CE   018E               MOVW    R17:R16, R29:R28
   \   000002D0   5A00               SUBI    R16, 160
   \   000002D2   4F1F               SBCI    R17, 255
   \   000002D4   ........           CALL    fpsub1271
   \   000002D8   01AE               MOVW    R21:R20, R29:R28
   \   000002DA   5F40               SUBI    R20, 240
   \   000002DC   4F5F               SBCI    R21, 255
   \   000002DE   019E               MOVW    R19:R18, R29:R28
   \   000002E0   5920               SUBI    R18, 144
   \   000002E2   4F3F               SBCI    R19, 255
   \   000002E4   018E               MOVW    R17:R16, R29:R28
   \   000002E6   5A00               SUBI    R16, 160
   \   000002E8   4F1F               SBCI    R17, 255
   \   000002EA   ........           CALL    mod_mul_dbl128
   \   000002EE   01AE               MOVW    R21:R20, R29:R28
   \   000002F0   019E               MOVW    R19:R18, R29:R28
   \   000002F2   5220               SUBI    R18, 32
   \   000002F4   4F3F               SBCI    R19, 255
   \   000002F6   018E               MOVW    R17:R16, R29:R28
   \   000002F8   5100               SUBI    R16, 16
   \   000002FA   4F1F               SBCI    R17, 255
   \   000002FC   ........           CALL    mod_mul128
    241              fp2sqr1271(t4, t3);                            // t3 = t4^2
   \   00000300   01AE               MOVW    R21:R20, R29:R28
   \   00000302   5140               SUBI    R20, 16
   \   00000304   4F5F               SBCI    R21, 255
   \   00000306   019E               MOVW    R19:R18, R29:R28
   \   00000308   5320               SUBI    R18, 48
   \   0000030A   4F3F               SBCI    R19, 255
   \   0000030C   018E               MOVW    R17:R16, R29:R28
   \   0000030E   5400               SUBI    R16, 64
   \   00000310   4F1F               SBCI    R17, 255
   \   00000312   ........           CALL    fpadd1271
   \   00000316   01AE               MOVW    R21:R20, R29:R28
   \   00000318   5240               SUBI    R20, 32
   \   0000031A   4F5F               SBCI    R21, 255
   \   0000031C   019E               MOVW    R19:R18, R29:R28
   \   0000031E   5320               SUBI    R18, 48
   \   00000320   4F3F               SBCI    R19, 255
   \   00000322   018E               MOVW    R17:R16, R29:R28
   \   00000324   5400               SUBI    R16, 64
   \   00000326   4F1F               SBCI    R17, 255
   \   00000328   ........           CALL    fpsub1271
   \   0000032C   01AE               MOVW    R21:R20, R29:R28
   \   0000032E   5940               SUBI    R20, 144
   \   00000330   4F5F               SBCI    R21, 255
   \   00000332   019E               MOVW    R19:R18, R29:R28
   \   00000334   5320               SUBI    R18, 48
   \   00000336   4F3F               SBCI    R19, 255
   \   00000338   018E               MOVW    R17:R16, R29:R28
   \   0000033A   5400               SUBI    R16, 64
   \   0000033C   4F1F               SBCI    R17, 255
   \   0000033E   ........           CALL    mod_mul_dbl128
   \   00000342   01AE               MOVW    R21:R20, R29:R28
   \   00000344   5A40               SUBI    R20, 160
   \   00000346   4F5F               SBCI    R21, 255
   \   00000348   019E               MOVW    R19:R18, R29:R28
   \   0000034A   5220               SUBI    R18, 32
   \   0000034C   4F3F               SBCI    R19, 255
   \   0000034E   018E               MOVW    R17:R16, R29:R28
   \   00000350   5100               SUBI    R16, 16
   \   00000352   4F1F               SBCI    R17, 255
   \   00000354   ........           CALL    mod_mul128
    242              fp2mul1271(t2, (felm_t*)&cphi8, t1);           // t1 = cphi8*t2
   \   00000358   01AE               MOVW    R21:R20, R29:R28
   \   0000035A   5E40               SUBI    R20, 224
   \   0000035C   4F5F               SBCI    R21, 255
   \   0000035E   ....               LDI     R18, LOW((cphi0 + 256))
   \   00000360   ....               LDI     R19, HIGH((cphi0 + 256))
   \   00000362   018E               MOVW    R17:R16, R29:R28
   \   00000364   ....               RCALL   fp2mul1271
    243              fp2mul1271(t3, (felm_t*)&cphi9, t5);           // t5 = cphi9*t3
   \   00000366   01AE               MOVW    R21:R20, R29:R28
   \   00000368   5C40               SUBI    R20, 192
   \   0000036A   4F5F               SBCI    R21, 255
   \   0000036C   ....               LDI     R18, LOW((cphi0 + 288))
   \   0000036E   ....               LDI     R19, HIGH((cphi0 + 288))
   \   00000370   018E               MOVW    R17:R16, R29:R28
   \   00000372   5A00               SUBI    R16, 160
   \   00000374   4F1F               SBCI    R17, 255
   \   00000376   ....               RCALL   fp2mul1271
    244              fp2add1271(t1, t6, t1);                        // t1 = t1+t6
   \   00000378   01AE               MOVW    R21:R20, R29:R28
   \   0000037A   5E40               SUBI    R20, 224
   \   0000037C   4F5F               SBCI    R21, 255
   \   0000037E   019E               MOVW    R19:R18, R29:R28
   \   00000380   5620               SUBI    R18, 96
   \   00000382   4F3F               SBCI    R19, 255
   \   00000384   018E               MOVW    R17:R16, R29:R28
   \   00000386   5E00               SUBI    R16, 224
   \   00000388   4F1F               SBCI    R17, 255
   \   0000038A   ........           CALL    fpadd1271
   \   0000038E   01AE               MOVW    R21:R20, R29:R28
   \   00000390   5D40               SUBI    R20, 208
   \   00000392   4F5F               SBCI    R21, 255
   \   00000394   019E               MOVW    R19:R18, R29:R28
   \   00000396   5520               SUBI    R18, 80
   \   00000398   4F3F               SBCI    R19, 255
   \   0000039A   018E               MOVW    R17:R16, R29:R28
   \   0000039C   5D00               SUBI    R16, 208
   \   0000039E   4F1F               SBCI    R17, 255
   \   000003A0   ........           CALL    fpadd1271
    245              fp2mul1271(t2, (felm_t*)&cphi6, t2);           // t2 = cphi6*t2
   \   000003A4   01AE               MOVW    R21:R20, R29:R28
   \   000003A6   ....               LDI     R18, LOW((cphi0 + 192))
   \   000003A8   ....               LDI     R19, HIGH((cphi0 + 192))
   \   000003AA   018E               MOVW    R17:R16, R29:R28
   \   000003AC   ....               RCALL   fp2mul1271
    246              fp2mul1271(t3, (felm_t*)&cphi7, t3);           // t3 = cphi7*t3
   \   000003AE   01AE               MOVW    R21:R20, R29:R28
   \   000003B0   5A40               SUBI    R20, 160
   \   000003B2   4F5F               SBCI    R21, 255
   \   000003B4   ....               LDI     R18, LOW((cphi0 + 224))
   \   000003B6   ....               LDI     R19, HIGH((cphi0 + 224))
   \   000003B8   018E               MOVW    R17:R16, R29:R28
   \   000003BA   5A00               SUBI    R16, 160
   \   000003BC   4F1F               SBCI    R17, 255
   \   000003BE   ....               RCALL   fp2mul1271
    247              fp2add1271(t1, t5, t1);                        // t1 = t1+t5
   \   000003C0   01AE               MOVW    R21:R20, R29:R28
   \   000003C2   5E40               SUBI    R20, 224
   \   000003C4   4F5F               SBCI    R21, 255
   \   000003C6   019E               MOVW    R19:R18, R29:R28
   \   000003C8   5C20               SUBI    R18, 192
   \   000003CA   4F3F               SBCI    R19, 255
   \   000003CC   018E               MOVW    R17:R16, R29:R28
   \   000003CE   5E00               SUBI    R16, 224
   \   000003D0   4F1F               SBCI    R17, 255
   \   000003D2   ........           CALL    fpadd1271
   \   000003D6   01AE               MOVW    R21:R20, R29:R28
   \   000003D8   5D40               SUBI    R20, 208
   \   000003DA   4F5F               SBCI    R21, 255
   \   000003DC   019E               MOVW    R19:R18, R29:R28
   \   000003DE   5B20               SUBI    R18, 176
   \   000003E0   4F3F               SBCI    R19, 255
   \   000003E2   018E               MOVW    R17:R16, R29:R28
   \   000003E4   5D00               SUBI    R16, 208
   \   000003E6   4F1F               SBCI    R17, 255
   \   000003E8   ........           CALL    fpadd1271
    248              fp2add1271(t2, t3, t2);                        // t2 = t2+t3
   \   000003EC   01AE               MOVW    R21:R20, R29:R28
   \   000003EE   019E               MOVW    R19:R18, R29:R28
   \   000003F0   5A20               SUBI    R18, 160
   \   000003F2   4F3F               SBCI    R19, 255
   \   000003F4   018E               MOVW    R17:R16, R29:R28
   \   000003F6   ........           CALL    fpadd1271
   \   000003FA   01AE               MOVW    R21:R20, R29:R28
   \   000003FC   5F40               SUBI    R20, 240
   \   000003FE   4F5F               SBCI    R21, 255
   \   00000400   019E               MOVW    R19:R18, R29:R28
   \   00000402   5920               SUBI    R18, 144
   \   00000404   4F3F               SBCI    R19, 255
   \   00000406   018E               MOVW    R17:R16, R29:R28
   \   00000408   5F00               SUBI    R16, 240
   \   0000040A   4F1F               SBCI    R17, 255
   \   0000040C   ........           CALL    fpadd1271
    249              fp2mul1271(t1, P->y, t1);                      // t1 = Y1*t1
   \   00000410   01AE               MOVW    R21:R20, R29:R28
   \   00000412   5E40               SUBI    R20, 224
   \   00000414   4F5F               SBCI    R21, 255
   \   00000416   019C               MOVW    R19:R18, R25:R24
   \   00000418   5E20               SUBI    R18, 224
   \   0000041A   4F3F               SBCI    R19, 255
   \   0000041C   018E               MOVW    R17:R16, R29:R28
   \   0000041E   5E00               SUBI    R16, 224
   \   00000420   4F1F               SBCI    R17, 255
   \   00000422   ....               RCALL   fp2mul1271
    250              fp2add1271(t6, t2, P->y);                      // Y = t6+t2
   \   00000424   01DC               MOVW    R27:R26, R25:R24
   \   00000426   9690               ADIW    R27:R26, 32
   \   00000428   01AD               MOVW    R21:R20, R27:R26
   \   0000042A   019E               MOVW    R19:R18, R29:R28
   \   0000042C   018E               MOVW    R17:R16, R29:R28
   \   0000042E   5600               SUBI    R16, 96
   \   00000430   4F1F               SBCI    R17, 255
   \   00000432   ........           CALL    fpadd1271
   \   00000436   9650               ADIW    R27:R26, 16
   \   00000438   01AD               MOVW    R21:R20, R27:R26
   \   0000043A   019E               MOVW    R19:R18, R29:R28
   \   0000043C   5F20               SUBI    R18, 240
   \   0000043E   4F3F               SBCI    R19, 255
   \   00000440   018E               MOVW    R17:R16, R29:R28
   \   00000442   5500               SUBI    R16, 80
   \   00000444   4F1F               SBCI    R17, 255
   \   00000446   ........           CALL    fpadd1271
    251              fp2mul1271(P->x, t1, P->x);                    // X = X*t1
   \   0000044A   01AC               MOVW    R21:R20, R25:R24
   \   0000044C   019E               MOVW    R19:R18, R29:R28
   \   0000044E   5E20               SUBI    R18, 224
   \   00000450   4F3F               SBCI    R19, 255
   \   00000452   018C               MOVW    R17:R16, R25:R24
   \   00000454   ....               RCALL   fp2mul1271
    252              fp2mul1271(P->y, (felm_t*)&cphi5, P->y);       // Y = cphi5*Y
   \   00000456   01AC               MOVW    R21:R20, R25:R24
   \   00000458   5E40               SUBI    R20, 224
   \   0000045A   4F5F               SBCI    R21, 255
   \   0000045C   ....               LDI     R18, LOW((cphi0 + 160))
   \   0000045E   ....               LDI     R19, HIGH((cphi0 + 160))
   \   00000460   018C               MOVW    R17:R16, R25:R24
   \   00000462   5E00               SUBI    R16, 224
   \   00000464   4F1F               SBCI    R17, 255
   \   00000466   ....               RCALL   fp2mul1271
    253              fpneg1271(P->x[1]);                            // Xfinal = X^p
   \   00000468   018C               MOVW    R17:R16, R25:R24
   \   0000046A   5F00               SUBI    R16, 240
   \   0000046C   4F1F               SBCI    R17, 255
   \   0000046E   ........           CALL    fpneg1271
    254              fp2mul1271(P->y, P->z, P->y);                  // Y = Y*Z1
   \   00000472   01AC               MOVW    R21:R20, R25:R24
   \   00000474   5E40               SUBI    R20, 224
   \   00000476   4F5F               SBCI    R21, 255
   \   00000478   0192               MOVW    R19:R18, R5:R4
   \   0000047A   018C               MOVW    R17:R16, R25:R24
   \   0000047C   5E00               SUBI    R16, 224
   \   0000047E   4F1F               SBCI    R17, 255
   \   00000480   ....               RCALL   fp2mul1271
    255              fp2mul1271(t0, t1, P->z);                      // Z = t0*t1
   \   00000482   01A2               MOVW    R21:R20, R5:R4
   \   00000484   019E               MOVW    R19:R18, R29:R28
   \   00000486   5E20               SUBI    R18, 224
   \   00000488   4F3F               SBCI    R19, 255
   \   0000048A   018E               MOVW    R17:R16, R29:R28
   \   0000048C   5800               SUBI    R16, 128
   \   0000048E   4F1F               SBCI    R17, 255
   \   00000490   ....               RCALL   fp2mul1271
    256              fp2mul1271(P->y, t0, P->y);                    // Y = Y*t0
   \   00000492   01AC               MOVW    R21:R20, R25:R24
   \   00000494   5E40               SUBI    R20, 224
   \   00000496   4F5F               SBCI    R21, 255
   \   00000498   019E               MOVW    R19:R18, R29:R28
   \   0000049A   5820               SUBI    R18, 128
   \   0000049C   4F3F               SBCI    R19, 255
   \   0000049E   018C               MOVW    R17:R16, R25:R24
   \   000004A0   5E00               SUBI    R16, 224
   \   000004A2   4F1F               SBCI    R17, 255
   \   000004A4   ....               RCALL   fp2mul1271
    257              fpneg1271(P->z[1]);                            // Zfinal = Z^p
   \   000004A6   018C               MOVW    R17:R16, R25:R24
   \   000004A8   5B00               SUBI    R16, 176
   \   000004AA   4F1F               SBCI    R17, 255
   \   000004AC   ........           CALL    fpneg1271
    258              fpneg1271(P->y[1]);                            // Yfinal = Y^p
   \   000004B0   96C0               ADIW    R25:R24, 48
   \   000004B2   018C               MOVW    R17:R16, R25:R24
   \   000004B4   ........           CALL    fpneg1271
    259          }
   \   000004B8   95D3               INC     R29
   \   000004BA   ....               RJMP    ??Subroutine14_0
    260          
    261          

   \                                 In  segment FARCODE, align 2, keep-with-next
   \                     ?Subroutine5:
   \   00000000   96EF               ADIW    R29:R28, 63
   \   00000002   96EF               ADIW    R29:R28, 63
   \   00000004   9622               ADIW    R29:R28, 2
   \   00000006                      REQUIRE ??Subroutine13_0
   \   00000006                      ;               // Fall through to label ??Subroutine13_0

   \                                 In  segment FARCODE, align 2, keep-with-next
    262          static __inline void ecc_delpsidel(point_extproj_t P)
   \                     ecc_delpsidel:
    263          { // Apply delta_psi_delta mapping to a point, P = delta(psi_W(delta_inv(P))), 
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   939A               ST      -Y, R25
   \   00000006   938A               ST      -Y, R24
   \   00000008   97EF               SBIW    R29:R28, 63
   \   0000000A   97EF               SBIW    R29:R28, 63
   \   0000000C   9722               SBIW    R29:R28, 2
   \   0000000E   01C8               MOVW    R25:R24, R17:R16
    264            // where psi_W is the endomorphism on the Weierstrass form.
    265            // Input: P = (X1:Y1:Z1) on Ehat in twisted Edwards coordinates
    266            // Output: P = (Xfinal:Yfinal:Zfinal) on Ehat in twisted Edwards coordinates
    267              f2elm_t t0, t1, t2; 
    268          
    269              fpneg1271(P->x[1]);                            // X = X1^p
   \   00000010   5F00               SUBI    R16, 240
   \   00000012   4F1F               SBCI    R17, 255
   \   00000014   ........           CALL    fpneg1271
    270              fpneg1271(P->z[1]);                            // Z = Z1^p
   \   00000018   018C               MOVW    R17:R16, R25:R24
   \   0000001A   5B00               SUBI    R16, 176
   \   0000001C   4F1F               SBCI    R17, 255
   \   0000001E   ........           CALL    fpneg1271
    271              fpneg1271(P->y[1]);                            // Y = Y1^p
   \   00000022   018C               MOVW    R17:R16, R25:R24
   \   00000024   5D00               SUBI    R16, 208
   \   00000026   4F1F               SBCI    R17, 255
   \   00000028   ........           CALL    fpneg1271
    272              fp2sqr1271(P->z, t2);                          // t2 = Z1^p^2
   \   0000002C   01DC               MOVW    R27:R26, R25:R24
   \   0000002E   5CA0               SUBI    R26, 192
   \   00000030   4FBF               SBCI    R27, 255
   \   00000032   01AE               MOVW    R21:R20, R29:R28
   \   00000034   5B40               SUBI    R20, 176
   \   00000036   4F5F               SBCI    R21, 255
   \   00000038   019D               MOVW    R19:R18, R27:R26
   \   0000003A   5F20               SUBI    R18, 240
   \   0000003C   4F3F               SBCI    R19, 255
   \   0000003E   018D               MOVW    R17:R16, R27:R26
   \   00000040   ........           CALL    fpadd1271
   \   00000044   01AE               MOVW    R21:R20, R29:R28
   \   00000046   5C40               SUBI    R20, 192
   \   00000048   4F5F               SBCI    R21, 255
   \   0000004A   019D               MOVW    R19:R18, R27:R26
   \   0000004C   5F20               SUBI    R18, 240
   \   0000004E   4F3F               SBCI    R19, 255
   \   00000050   018D               MOVW    R17:R16, R27:R26
   \   00000052   ........           CALL    fpsub1271
   \   00000056   01AE               MOVW    R21:R20, R29:R28
   \   00000058   5F40               SUBI    R20, 240
   \   0000005A   4F5F               SBCI    R21, 255
   \   0000005C   019D               MOVW    R19:R18, R27:R26
   \   0000005E   5F20               SUBI    R18, 240
   \   00000060   4F3F               SBCI    R19, 255
   \   00000062   018D               MOVW    R17:R16, R27:R26
   \   00000064   ........           CALL    mod_mul_dbl128
   \   00000068   01AE               MOVW    R21:R20, R29:R28
   \   0000006A   019E               MOVW    R19:R18, R29:R28
   \   0000006C   5C20               SUBI    R18, 192
   \   0000006E   4F3F               SBCI    R19, 255
   \   00000070   018E               MOVW    R17:R16, R29:R28
   \   00000072   5B00               SUBI    R16, 176
   \   00000074   4F1F               SBCI    R17, 255
   \   00000076   ........           CALL    mod_mul128
    273              fp2sqr1271(P->x, t0);                          // t0 = X1^p^2
   \   0000007A   01AE               MOVW    R21:R20, R29:R28
   \   0000007C   5B40               SUBI    R20, 176
   \   0000007E   4F5F               SBCI    R21, 255
   \   00000080   019C               MOVW    R19:R18, R25:R24
   \   00000082   5F20               SUBI    R18, 240
   \   00000084   4F3F               SBCI    R19, 255
   \   00000086   018C               MOVW    R17:R16, R25:R24
   \   00000088   ........           CALL    fpadd1271
   \   0000008C   01AE               MOVW    R21:R20, R29:R28
   \   0000008E   5C40               SUBI    R20, 192
   \   00000090   4F5F               SBCI    R21, 255
   \   00000092   019C               MOVW    R19:R18, R25:R24
   \   00000094   5F20               SUBI    R18, 240
   \   00000096   4F3F               SBCI    R19, 255
   \   00000098   018C               MOVW    R17:R16, R25:R24
   \   0000009A   ........           CALL    fpsub1271
   \   0000009E   01AE               MOVW    R21:R20, R29:R28
   \   000000A0   5D40               SUBI    R20, 208
   \   000000A2   4F5F               SBCI    R21, 255
   \   000000A4   019C               MOVW    R19:R18, R25:R24
   \   000000A6   5F20               SUBI    R18, 240
   \   000000A8   4F3F               SBCI    R19, 255
   \   000000AA   018C               MOVW    R17:R16, R25:R24
   \   000000AC   ........           CALL    mod_mul_dbl128
   \   000000B0   01AE               MOVW    R21:R20, R29:R28
   \   000000B2   5E40               SUBI    R20, 224
   \   000000B4   4F5F               SBCI    R21, 255
   \   000000B6   019E               MOVW    R19:R18, R29:R28
   \   000000B8   5C20               SUBI    R18, 192
   \   000000BA   4F3F               SBCI    R19, 255
   \   000000BC   018E               MOVW    R17:R16, R29:R28
   \   000000BE   5B00               SUBI    R16, 176
   \   000000C0   4F1F               SBCI    R17, 255
   \   000000C2   ........           CALL    mod_mul128
    274              fp2mul1271(P->x, t2, P->x);                    // X = X1^p*Z1^p^2
   \   000000C6   01AC               MOVW    R21:R20, R25:R24
   \   000000C8   019E               MOVW    R19:R18, R29:R28
   \   000000CA   018C               MOVW    R17:R16, R25:R24
   \   000000CC   ....               RCALL   fp2mul1271
    275              fp2mul1271(t2, (felm_t*)&cpsi2, P->z);         // Z = cpsi2*Z1^p^2
   \   000000CE   01AD               MOVW    R21:R20, R27:R26
   \   000000D0   ....               LDI     R18, LOW((cpsi1 + 32))
   \   000000D2   ....               LDI     R19, HIGH((cpsi1 + 32))
   \   000000D4   018E               MOVW    R17:R16, R29:R28
   \   000000D6   ....               RCALL   fp2mul1271
    276              fp2mul1271(t2, (felm_t*)&cpsi3, t1);           // t1 = cpsi3*Z1^p^2
   \   000000D8   01AE               MOVW    R21:R20, R29:R28
   \   000000DA   5A40               SUBI    R20, 160
   \   000000DC   4F5F               SBCI    R21, 255
   \   000000DE   ....               LDI     R18, LOW((cpsi1 + 64))
   \   000000E0   ....               LDI     R19, HIGH((cpsi1 + 64))
   \   000000E2   018E               MOVW    R17:R16, R29:R28
   \   000000E4   ....               RCALL   fp2mul1271
    277              fp2mul1271(t2, (felm_t*)&cpsi4, t2);           // t2 = cpsi4*Z1^p^2
   \   000000E6   01AE               MOVW    R21:R20, R29:R28
   \   000000E8   ....               LDI     R18, LOW((cpsi1 + 96))
   \   000000EA   ....               LDI     R19, HIGH((cpsi1 + 96))
   \   000000EC   018E               MOVW    R17:R16, R29:R28
   \   000000EE   ....               RCALL   fp2mul1271
    278              fp2add1271(t0, P->z, P->z);                    // Z = X1^p^2 + cpsi2*Z1^p^2
   \   000000F0   01AD               MOVW    R21:R20, R27:R26
   \   000000F2   019D               MOVW    R19:R18, R27:R26
   \   000000F4   018E               MOVW    R17:R16, R29:R28
   \   000000F6   5E00               SUBI    R16, 224
   \   000000F8   4F1F               SBCI    R17, 255
   \   000000FA   ........           CALL    fpadd1271
   \   000000FE   01AD               MOVW    R21:R20, R27:R26
   \   00000100   5F40               SUBI    R20, 240
   \   00000102   4F5F               SBCI    R21, 255
   \   00000104   019D               MOVW    R19:R18, R27:R26
   \   00000106   5F20               SUBI    R18, 240
   \   00000108   4F3F               SBCI    R19, 255
   \   0000010A   018E               MOVW    R17:R16, R29:R28
   \   0000010C   5D00               SUBI    R16, 208
   \   0000010E   4F1F               SBCI    R17, 255
   \   00000110   ........           CALL    fpadd1271
    279              fp2add1271(t0, t2, t2);                        // t2 = X1^p^2 + cpsi4*Z1^p^2
   \   00000114   01AE               MOVW    R21:R20, R29:R28
   \   00000116   019E               MOVW    R19:R18, R29:R28
   \   00000118   018E               MOVW    R17:R16, R29:R28
   \   0000011A   5E00               SUBI    R16, 224
   \   0000011C   4F1F               SBCI    R17, 255
   \   0000011E   ........           CALL    fpadd1271
   \   00000122   01AE               MOVW    R21:R20, R29:R28
   \   00000124   5F40               SUBI    R20, 240
   \   00000126   4F5F               SBCI    R21, 255
   \   00000128   019E               MOVW    R19:R18, R29:R28
   \   0000012A   5F20               SUBI    R18, 240
   \   0000012C   4F3F               SBCI    R19, 255
   \   0000012E   018E               MOVW    R17:R16, R29:R28
   \   00000130   5D00               SUBI    R16, 208
   \   00000132   4F1F               SBCI    R17, 255
   \   00000134   ........           CALL    fpadd1271
    280              fp2add1271(t0, t1, t1);                        // t1 = X1^p^2 + cpsi3*Z1^p^2
   \   00000138   01AE               MOVW    R21:R20, R29:R28
   \   0000013A   5A40               SUBI    R20, 160
   \   0000013C   4F5F               SBCI    R21, 255
   \   0000013E   019E               MOVW    R19:R18, R29:R28
   \   00000140   5A20               SUBI    R18, 160
   \   00000142   4F3F               SBCI    R19, 255
   \   00000144   018E               MOVW    R17:R16, R29:R28
   \   00000146   5E00               SUBI    R16, 224
   \   00000148   4F1F               SBCI    R17, 255
   \   0000014A   ........           CALL    fpadd1271
   \   0000014E   01AE               MOVW    R21:R20, R29:R28
   \   00000150   5940               SUBI    R20, 144
   \   00000152   4F5F               SBCI    R21, 255
   \   00000154   019E               MOVW    R19:R18, R29:R28
   \   00000156   5920               SUBI    R18, 144
   \   00000158   4F3F               SBCI    R19, 255
   \   0000015A   018E               MOVW    R17:R16, R29:R28
   \   0000015C   5D00               SUBI    R16, 208
   \   0000015E   4F1F               SBCI    R17, 255
   \   00000160   ........           CALL    fpadd1271
    281              fp2neg1271(t2);                                // t2 = -(X1^p^2 + cpsi4*Z1^p^2)
   \   00000164   018E               MOVW    R17:R16, R29:R28
   \   00000166   ........           CALL    fpneg1271
   \   0000016A   018E               MOVW    R17:R16, R29:R28
   \   0000016C   5F00               SUBI    R16, 240
   \   0000016E   4F1F               SBCI    R17, 255
   \   00000170   ........           CALL    fpneg1271
    282              fp2mul1271(P->z, P->y, P->z);                  // Z = Y1^p*(X1^p^2 + cpsi2*Z1^p^2)
   \   00000174   01AD               MOVW    R21:R20, R27:R26
   \   00000176   019C               MOVW    R19:R18, R25:R24
   \   00000178   5E20               SUBI    R18, 224
   \   0000017A   4F3F               SBCI    R19, 255
   \   0000017C   018D               MOVW    R17:R16, R27:R26
   \   0000017E   ....               RCALL   fp2mul1271
    283              fp2mul1271(P->x, t2, P->x);                    // X = -X1^p*Z1^p^2*(X1^p^2 + cpsi4*Z1^p^2)
   \   00000180   01AC               MOVW    R21:R20, R25:R24
   \   00000182   019E               MOVW    R19:R18, R29:R28
   \   00000184   018C               MOVW    R17:R16, R25:R24
   \   00000186   ....               RCALL   fp2mul1271
    284              fp2mul1271(t1, P->z, P->y);                    // Yfinal = t1*Z
   \   00000188   01AC               MOVW    R21:R20, R25:R24
   \   0000018A   5E40               SUBI    R20, 224
   \   0000018C   4F5F               SBCI    R21, 255
   \   0000018E   019D               MOVW    R19:R18, R27:R26
   \   00000190   018E               MOVW    R17:R16, R29:R28
   \   00000192   5A00               SUBI    R16, 160
   \   00000194   4F1F               SBCI    R17, 255
   \   00000196   ....               RCALL   fp2mul1271
    285              fp2mul1271(P->x, (felm_t*)&cpsi1, P->x);       // Xfinal = cpsi1*X
   \   00000198   01AC               MOVW    R21:R20, R25:R24
   \   0000019A   ....               LDI     R18, LOW(cpsi1)
   \   0000019C   ....               LDI     R19, (cpsi1) >> 8
   \   0000019E   018C               MOVW    R17:R16, R25:R24
   \   000001A0   ....               RCALL   fp2mul1271
    286              fp2mul1271(P->z, t2, P->z);                    // Zfinal = Z*t2
   \   000001A2   01AD               MOVW    R21:R20, R27:R26
   \   000001A4   019E               MOVW    R19:R18, R29:R28
   \   000001A6   018D               MOVW    R17:R16, R27:R26
   \   000001A8   ....               RCALL   fp2mul1271
    287          }
   \   000001AA   ....               RJMP    ?Subroutine5
    288          
    289          

   \                                 In  segment FARCODE, align 2, keep-with-next
    290          void ecc_psi(point_extproj_t P)
   \                     ecc_psi:
    291          { // Apply psi mapping to a point, P = psi(P)
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   01C8               MOVW    R25:R24, R17:R16
    292            // Input: P = (X1:Y1:Z1) on E in twisted Edwards coordinates
    293            // Output: P = (Xfinal,Yfinal,Zfinal,Tafinal,Tbfinal) on E, where Tfinal = Tafinal*Tbfinal,
    294            //         corresponding to (Xfinal:Yfinal:Zfinal:Tfinal) in extended twisted Edwards coordinates
    295          
    296              ecc_tau(P);                            
   \   00000006   ....               RCALL   ecc_tau
    297              ecc_delpsidel(P);                      		
   \   00000008   018C               MOVW    R17:R16, R25:R24
   \   0000000A   ....               RCALL   ecc_delpsidel
    298              ecc_tau_dual(P);                        
   \   0000000C                      REQUIRE ?Subroutine7
   \   0000000C                      ;               // Fall through to label ?Subroutine7
    299          }

   \                                 In  segment FARCODE, align 2, keep-with-next
   \                     ?Subroutine7:
   \   00000000   018C               MOVW    R17:R16, R25:R24
   \   00000002   ....               RCALL   ecc_tau_dual
   \   00000004   9189               LD      R24, Y+
   \   00000006   9199               LD      R25, Y+
   \   00000008   9508               RET
    300          
    301          

   \                                 In  segment FARCODE, align 2, keep-with-next
    302          void ecc_phi(point_extproj_t P)
   \                     ecc_phi:
    303          { // Apply phi mapping to a point, P = phi(P)
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   01C8               MOVW    R25:R24, R17:R16
    304            // Input: P = (X1:Y1:Z1) on E in twisted Edwards coordinates
    305            // Output: P = (Xfinal,Yfinal,Zfinal,Tafinal,Tbfinal) on E, where Tfinal = Tafinal*Tbfinal,
    306            //         corresponding to (Xfinal:Yfinal:Zfinal:Tfinal) in extended twisted Edwards coordinates
    307          
    308              ecc_tau(P);                            
   \   00000006   ....               RCALL   ecc_tau
    309              ecc_delphidel(P);                      		
   \   00000008   018C               MOVW    R17:R16, R25:R24
   \   0000000A   ....               RCALL   ecc_delphidel
    310              ecc_tau_dual(P);  
   \   0000000C   ....               RJMP    ?Subroutine7
    311          }
    312          
    313          
    314          static __inline void mul_truncate(digit_t* s, uint64_t* C, digit_t* out)       
    315          { // 256-bit multiplication with truncation for the scalar decomposition
    316            // Outputs 64-bit value "out" = (uint64_t)((s*C) >> 256).
    317              digit_t res[16];
    318              
    319              mp_mul(s, (digit_t *)C, res, 8);
    320          
    321              *out = res[8];    
    322              *(out+1) = res[9];
    323          }
    324          
    325          

   \                                 In  segment FARCODE, align 2, keep-with-next
    326          void ecc_precomp(point_extproj_t P, point_extproj_precomp_t *T)
   \                     ecc_precomp:
    327          { // Generation of the precomputation table used by the variable-base scalar multiplication ecc_mul().
   \   00000000   927A               ST      -Y, R7
   \   00000002   926A               ST      -Y, R6
   \   00000004   925A               ST      -Y, R5
   \   00000006   924A               ST      -Y, R4
   \   00000008   93BA               ST      -Y, R27
   \   0000000A   93AA               ST      -Y, R26
   \   0000000C   939A               ST      -Y, R25
   \   0000000E   938A               ST      -Y, R24
   \   00000010                      REQUIRE ?Register_R4_is_cg_reg
   \   00000010                      REQUIRE ?Register_R5_is_cg_reg
   \   00000010                      REQUIRE ?Register_R6_is_cg_reg
   \   00000010                      REQUIRE ?Register_R7_is_cg_reg
   \   00000010   97A0               SBIW    R29:R28, 32
   \   00000012   50D2               SUBI    R29, 2
   \   00000014   01C8               MOVW    R25:R24, R17:R16
   \   00000016   01D9               MOVW    R27:R26, R19:R18
    328            // Input: P = (X1,Y1,Z1,Ta,Tb), where T1 = Ta*Tb, corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates
    329            // Output: table T containing 8 points: P, P+phi(P), P+psi(P), P+phi(P)+psi(P), P+psi(phi(P)), P+phi(P)+psi(phi(P)), P+psi(P)+psi(phi(P)), P+phi(P)+psi(P)+psi(phi(P))
    330            // Precomputed points use the representation (X+Y,Y-X,2Z,2dT) corresponding to (X:Y:Z:T) in extended twisted Edwards coordinates
    331          	point_extproj_precomp_t Q, R, S;
    332          	point_extproj_t PP;
    333          
    334          	// Generating Q = phi(P) = (XQ+YQ,YQ-XQ,ZQ,TQ)
    335          	ecccopy(P, PP);
   \   00000018   019E               MOVW    R19:R18, R29:R28
   \   0000001A   ........           CALL    fpcopy1271
   \   0000001E   019E               MOVW    R19:R18, R29:R28
   \   00000020   5F20               SUBI    R18, 240
   \   00000022   4F3F               SBCI    R19, 255
   \   00000024   018C               MOVW    R17:R16, R25:R24
   \   00000026   5F00               SUBI    R16, 240
   \   00000028   4F1F               SBCI    R17, 255
   \   0000002A   ........           CALL    fpcopy1271
   \   0000002E   012C               MOVW    R5:R4, R25:R24
   \   00000030   E200               LDI     R16, 32
   \   00000032   0E40               ADD     R4, R16
   \   00000034   E000               LDI     R16, 0
   \   00000036   1E50               ADC     R5, R16
   \   00000038   019E               MOVW    R19:R18, R29:R28
   \   0000003A   5E20               SUBI    R18, 224
   \   0000003C   4F3F               SBCI    R19, 255
   \   0000003E   0182               MOVW    R17:R16, R5:R4
   \   00000040   ........           CALL    fpcopy1271
   \   00000044   019E               MOVW    R19:R18, R29:R28
   \   00000046   5D20               SUBI    R18, 208
   \   00000048   4F3F               SBCI    R19, 255
   \   0000004A   E100               LDI     R16, 16
   \   0000004C   0E40               ADD     R4, R16
   \   0000004E   E000               LDI     R16, 0
   \   00000050   1E50               ADC     R5, R16
   \   00000052   0182               MOVW    R17:R16, R5:R4
   \   00000054   ........           CALL    fpcopy1271
   \   00000058   012C               MOVW    R5:R4, R25:R24
   \   0000005A   E400               LDI     R16, 64
   \   0000005C   0E40               ADD     R4, R16
   \   0000005E   E000               LDI     R16, 0
   \   00000060   1E50               ADC     R5, R16
   \   00000062   019E               MOVW    R19:R18, R29:R28
   \   00000064   5C20               SUBI    R18, 192
   \   00000066   4F3F               SBCI    R19, 255
   \   00000068   0182               MOVW    R17:R16, R5:R4
   \   0000006A   ........           CALL    fpcopy1271
   \   0000006E   019E               MOVW    R19:R18, R29:R28
   \   00000070   5B20               SUBI    R18, 176
   \   00000072   4F3F               SBCI    R19, 255
   \   00000074   E100               LDI     R16, 16
   \   00000076   0E40               ADD     R4, R16
   \   00000078   E000               LDI     R16, 0
   \   0000007A   1E50               ADC     R5, R16
   \   0000007C   0182               MOVW    R17:R16, R5:R4
   \   0000007E   ........           CALL    fpcopy1271
   \   00000082   012C               MOVW    R5:R4, R25:R24
   \   00000084   E600               LDI     R16, 96
   \   00000086   0E40               ADD     R4, R16
   \   00000088   E000               LDI     R16, 0
   \   0000008A   1E50               ADC     R5, R16
   \   0000008C   019E               MOVW    R19:R18, R29:R28
   \   0000008E   5A20               SUBI    R18, 160
   \   00000090   4F3F               SBCI    R19, 255
   \   00000092   0182               MOVW    R17:R16, R5:R4
   \   00000094   ........           CALL    fpcopy1271
   \   00000098   019E               MOVW    R19:R18, R29:R28
   \   0000009A   5920               SUBI    R18, 144
   \   0000009C   4F3F               SBCI    R19, 255
   \   0000009E   E100               LDI     R16, 16
   \   000000A0   0E40               ADD     R4, R16
   \   000000A2   E000               LDI     R16, 0
   \   000000A4   1E50               ADC     R5, R16
   \   000000A6   0182               MOVW    R17:R16, R5:R4
   \   000000A8   ........           CALL    fpcopy1271
   \   000000AC   012C               MOVW    R5:R4, R25:R24
   \   000000AE   E800               LDI     R16, 128
   \   000000B0   0E40               ADD     R4, R16
   \   000000B2   E000               LDI     R16, 0
   \   000000B4   1E50               ADC     R5, R16
   \   000000B6   019E               MOVW    R19:R18, R29:R28
   \   000000B8   5820               SUBI    R18, 128
   \   000000BA   4F3F               SBCI    R19, 255
   \   000000BC   0182               MOVW    R17:R16, R5:R4
   \   000000BE   ........           CALL    fpcopy1271
   \   000000C2   019E               MOVW    R19:R18, R29:R28
   \   000000C4   5720               SUBI    R18, 112
   \   000000C6   4F3F               SBCI    R19, 255
   \   000000C8   E100               LDI     R16, 16
   \   000000CA   0E40               ADD     R4, R16
   \   000000CC   E000               LDI     R16, 0
   \   000000CE   1E50               ADC     R5, R16
   \   000000D0   0182               MOVW    R17:R16, R5:R4
   \   000000D2   ........           CALL    fpcopy1271
    336          	ecc_phi(PP);
   \   000000D6   018E               MOVW    R17:R16, R29:R28
   \   000000D8   ....               RCALL   ecc_tau
   \   000000DA   018E               MOVW    R17:R16, R29:R28
   \   000000DC   ....               RCALL   ecc_delphidel
   \   000000DE   018E               MOVW    R17:R16, R29:R28
   \   000000E0   ....               RCALL   ecc_tau_dual
    337          	R1_to_R3(PP, Q);                       // Converting from (X,Y,Z,Ta,Tb) to (X+Y,Y-X,Z,T) 
   \   000000E2   019E               MOVW    R19:R18, R29:R28
   \   000000E4   5620               SUBI    R18, 96
   \   000000E6   4F3E               SBCI    R19, 254
   \   000000E8   018E               MOVW    R17:R16, R29:R28
   \   000000EA   ....               RCALL   R1_to_R3
    338          
    339              // Generating S = psi(Q) = (XS+YS,YS-XS,ZS,TS)
    340          	ecc_psi(PP);
   \   000000EC   018E               MOVW    R17:R16, R29:R28
   \   000000EE   ....               RCALL   ecc_tau
   \   000000F0   018E               MOVW    R17:R16, R29:R28
   \   000000F2   ....               RCALL   ecc_delpsidel
   \   000000F4   018E               MOVW    R17:R16, R29:R28
   \   000000F6   ....               RCALL   ecc_tau_dual
    341          	R1_to_R3(PP, S);                       // Converting from (X,Y,Z,Ta,Tb) to (X+Y,Y-X,Z,T) 
   \   000000F8   019E               MOVW    R19:R18, R29:R28
   \   000000FA   5620               SUBI    R18, 96
   \   000000FC   4F3F               SBCI    R19, 255
   \   000000FE   018E               MOVW    R17:R16, R29:R28
   \   00000100   ....               RCALL   R1_to_R3
    342          
    343          	// Generating T[0] = P = (XP+YP,YP-XP,2ZP,2dTP) 
    344          	R1_to_R2(P, T[0]);                     // Converting from (X,Y,Z,Ta,Tb) to (X+Y,Y-X,2Z,2dT)
   \   00000102   019D               MOVW    R19:R18, R27:R26
   \   00000104   018C               MOVW    R17:R16, R25:R24
   \   00000106   ....               RCALL   R1_to_R2
    345          
    346          	// Generating R = psi(P) = (XR+YR,YR-XR,ZR,TR)
    347          	ecc_psi(P);
   \   00000108   018C               MOVW    R17:R16, R25:R24
   \   0000010A   ....               RCALL   ecc_tau
   \   0000010C   018C               MOVW    R17:R16, R25:R24
   \   0000010E   ....               RCALL   ecc_delpsidel
   \   00000110   018C               MOVW    R17:R16, R25:R24
   \   00000112   ....               RCALL   ecc_tau_dual
    348          	R1_to_R3(P, R);                        // Converting from (X,Y,Z,Ta,Tb) to (X+Y,Y-X,Z,T)  
   \   00000114   019E               MOVW    R19:R18, R29:R28
   \   00000116   5E20               SUBI    R18, 224
   \   00000118   4F3E               SBCI    R19, 254
   \   0000011A   018C               MOVW    R17:R16, R25:R24
   \   0000011C   ....               RCALL   R1_to_R3
    349          
    350          	eccadd_core(T[0], Q, PP);              // T[1] = P+Q using the representations (X,Y,Z,Ta,Tb) <- (X+Y,Y-X,2Z,2dT) + (X+Y,Y-X,Z,T)
   \   0000011E   01AE               MOVW    R21:R20, R29:R28
   \   00000120   019E               MOVW    R19:R18, R29:R28
   \   00000122   5620               SUBI    R18, 96
   \   00000124   4F3E               SBCI    R19, 254
   \   00000126   018D               MOVW    R17:R16, R27:R26
   \   00000128   ....               RCALL   eccadd_core
    351          	R1_to_R2(PP, T[1]);                    // Converting from (X,Y,Z,Ta,Tb) to (X+Y,Y-X,2Z,2dT)
   \   0000012A   01CD               MOVW    R25:R24, R27:R26
   \   0000012C   5880               SUBI    R24, 128
   \   0000012E   4F9F               SBCI    R25, 255
   \   00000130   019C               MOVW    R19:R18, R25:R24
   \   00000132   018E               MOVW    R17:R16, R29:R28
   \   00000134   ....               RCALL   R1_to_R2
    352          	eccadd_core(T[0], R, PP);              // T[2] = P+R 
   \   00000136   01AE               MOVW    R21:R20, R29:R28
   \   00000138   019E               MOVW    R19:R18, R29:R28
   \   0000013A   5E20               SUBI    R18, 224
   \   0000013C   4F3E               SBCI    R19, 254
   \   0000013E   018D               MOVW    R17:R16, R27:R26
   \   00000140   ....               RCALL   eccadd_core
    353          	R1_to_R2(PP, T[2]);
   \   00000142   013D               MOVW    R7:R6, R27:R26
   \   00000144   9473               INC     R7
   \   00000146   0193               MOVW    R19:R18, R7:R6
   \   00000148   018E               MOVW    R17:R16, R29:R28
   \   0000014A   ....               RCALL   R1_to_R2
    354          	eccadd_core(T[1], R, PP);              // T[3] = P+Q+R 
   \   0000014C   01AE               MOVW    R21:R20, R29:R28
   \   0000014E   019E               MOVW    R19:R18, R29:R28
   \   00000150   5E20               SUBI    R18, 224
   \   00000152   4F3E               SBCI    R19, 254
   \   00000154   018C               MOVW    R17:R16, R25:R24
   \   00000156   ....               RCALL   eccadd_core
    355          	R1_to_R2(PP, T[3]);
   \   00000158   012D               MOVW    R5:R4, R27:R26
   \   0000015A   E800               LDI     R16, 128
   \   0000015C   0E40               ADD     R4, R16
   \   0000015E   E001               LDI     R16, 1
   \   00000160   1E50               ADC     R5, R16
   \   00000162   0192               MOVW    R19:R18, R5:R4
   \   00000164   018E               MOVW    R17:R16, R29:R28
   \   00000166   ....               RCALL   R1_to_R2
    356          	eccadd_core(T[0], S, PP);              // T[4] = P+S 
   \   00000168   01AE               MOVW    R21:R20, R29:R28
   \   0000016A   019E               MOVW    R19:R18, R29:R28
   \   0000016C   5620               SUBI    R18, 96
   \   0000016E   4F3F               SBCI    R19, 255
   \   00000170   018D               MOVW    R17:R16, R27:R26
   \   00000172   ....               RCALL   eccadd_core
    357          	R1_to_R2(PP, T[4]);
   \   00000174   019D               MOVW    R19:R18, R27:R26
   \   00000176   5F3E               SUBI    R19, 254
   \   00000178   018E               MOVW    R17:R16, R29:R28
   \   0000017A   ....               RCALL   R1_to_R2
    358          	eccadd_core(T[1], S, PP);              // T[5] = P+Q+S 
   \   0000017C   01AE               MOVW    R21:R20, R29:R28
   \   0000017E   019E               MOVW    R19:R18, R29:R28
   \   00000180   5620               SUBI    R18, 96
   \   00000182   4F3F               SBCI    R19, 255
   \   00000184   018C               MOVW    R17:R16, R25:R24
   \   00000186   ....               RCALL   eccadd_core
    359          	R1_to_R2(PP, T[5]);
   \   00000188   019D               MOVW    R19:R18, R27:R26
   \   0000018A   5820               SUBI    R18, 128
   \   0000018C   4F3D               SBCI    R19, 253
   \   0000018E   018E               MOVW    R17:R16, R29:R28
   \   00000190   ....               RCALL   R1_to_R2
    360          	eccadd_core(T[2], S, PP);              // T[6] = P+R+S 
   \   00000192   01AE               MOVW    R21:R20, R29:R28
   \   00000194   019E               MOVW    R19:R18, R29:R28
   \   00000196   5620               SUBI    R18, 96
   \   00000198   4F3F               SBCI    R19, 255
   \   0000019A   0183               MOVW    R17:R16, R7:R6
   \   0000019C   ....               RCALL   eccadd_core
    361          	R1_to_R2(PP, T[6]);
   \   0000019E   019D               MOVW    R19:R18, R27:R26
   \   000001A0   5F3D               SUBI    R19, 253
   \   000001A2   018E               MOVW    R17:R16, R29:R28
   \   000001A4   ....               RCALL   R1_to_R2
    362          	eccadd_core(T[3], S, PP);              // T[7] = P+Q+R+S 
   \   000001A6   01AE               MOVW    R21:R20, R29:R28
   \   000001A8   019E               MOVW    R19:R18, R29:R28
   \   000001AA   5620               SUBI    R18, 96
   \   000001AC   4F3F               SBCI    R19, 255
   \   000001AE   0182               MOVW    R17:R16, R5:R4
   \   000001B0   ....               RCALL   eccadd_core
    363          	R1_to_R2(PP, T[7]);
   \   000001B2   58A0               SUBI    R26, 128
   \   000001B4   4FBC               SBCI    R27, 252
   \   000001B6   019D               MOVW    R19:R18, R27:R26
   \   000001B8   018E               MOVW    R17:R16, R29:R28
   \   000001BA   ....               RCALL   R1_to_R2
    364          }
   \   000001BC   96A0               ADIW    R29:R28, 32
   \   000001BE   5FDE               SUBI    R29, 254
   \   000001C0   ........           JMP     ??Subroutine12_0
    365          
    366          

   \                                 In  segment FARCODE, align 2, keep-with-next
    367          void decompose(digit_t* k, digit_t* scalars)
   \                     decompose:
    368          { // Scalar decomposition for the variable-base scalar multiplication
   \   00000000   925A               ST      -Y, R5
   \   00000002   924A               ST      -Y, R4
   \   00000004   93BA               ST      -Y, R27
   \   00000006   93AA               ST      -Y, R26
   \   00000008   939A               ST      -Y, R25
   \   0000000A   938A               ST      -Y, R24
   \   0000000C                      REQUIRE ?Register_R4_is_cg_reg
   \   0000000C                      REQUIRE ?Register_R5_is_cg_reg
   \   0000000C   97EF               SBIW    R29:R28, 63
   \   0000000E   97EF               SBIW    R29:R28, 63
   \   00000010   9722               SBIW    R29:R28, 2
   \   00000012   01C8               MOVW    R25:R24, R17:R16
   \   00000014   0129               MOVW    R5:R4, R19:R18
    369            // Input: scalar in the range [0, 2^256-1].
    370            // Output: 4 64-bit sub-scalars. 
    371              digit_t a1[2], a2[2], a3[2], a4[2];
    372              digit_t temp[4], temp2[4], mask;
    373          
    374              mul_truncate(k, ell1, a1);
   \   00000016   E068               LDI     R22, 8
   \   00000018   E070               LDI     R23, 0
   \   0000001A   01AE               MOVW    R21:R20, R29:R28
   \   0000001C   5C40               SUBI    R20, 192
   \   0000001E   4F5F               SBCI    R21, 255
   \   00000020   ....               LDI     R18, LOW((b41 + 144))
   \   00000022   ....               LDI     R19, HIGH((b41 + 144))
   \   00000024   ........           CALL    mp_mul
   \   00000028   01FE               MOVW    R31:R30, R29:R28
   \   0000002A   96FF               ADIW    R31:R30, 63
   \   0000002C   A101               LDD     R16, Z+33
   \   0000002E   A112               LDD     R17, Z+34
   \   00000030   A123               LDD     R18, Z+35
   \   00000032   A134               LDD     R19, Z+36
   \   00000034   AF08               STD     Y+56, R16
   \   00000036   AF19               STD     Y+57, R17
   \   00000038   AF2A               STD     Y+58, R18
   \   0000003A   AF3B               STD     Y+59, R19
   \   0000003C   01FE               MOVW    R31:R30, R29:R28
   \   0000003E   96FF               ADIW    R31:R30, 63
   \   00000040   A105               LDD     R16, Z+37
   \   00000042   A116               LDD     R17, Z+38
   \   00000044   A127               LDD     R18, Z+39
   \   00000046   A530               LDD     R19, Z+40
   \   00000048   AF0C               STD     Y+60, R16
   \   0000004A   AF1D               STD     Y+61, R17
   \   0000004C   AF2E               STD     Y+62, R18
   \   0000004E   AF3F               STD     Y+63, R19
    375              mul_truncate(k, ell2, a2);
   \   00000050   E068               LDI     R22, 8
   \   00000052   E070               LDI     R23, 0
   \   00000054   01AE               MOVW    R21:R20, R29:R28
   \   00000056   5C40               SUBI    R20, 192
   \   00000058   4F5F               SBCI    R21, 255
   \   0000005A   ....               LDI     R18, LOW((b41 + 176))
   \   0000005C   ....               LDI     R19, HIGH((b41 + 176))
   \   0000005E   018C               MOVW    R17:R16, R25:R24
   \   00000060   ........           CALL    mp_mul
   \   00000064   01FE               MOVW    R31:R30, R29:R28
   \   00000066   96FF               ADIW    R31:R30, 63
   \   00000068   A101               LDD     R16, Z+33
   \   0000006A   A112               LDD     R17, Z+34
   \   0000006C   A123               LDD     R18, Z+35
   \   0000006E   A134               LDD     R19, Z+36
   \   00000070   AB08               STD     Y+48, R16
   \   00000072   AB19               STD     Y+49, R17
   \   00000074   AB2A               STD     Y+50, R18
   \   00000076   AB3B               STD     Y+51, R19
   \   00000078   01FE               MOVW    R31:R30, R29:R28
   \   0000007A   96FF               ADIW    R31:R30, 63
   \   0000007C   A105               LDD     R16, Z+37
   \   0000007E   A116               LDD     R17, Z+38
   \   00000080   A127               LDD     R18, Z+39
   \   00000082   A530               LDD     R19, Z+40
   \   00000084   AB0C               STD     Y+52, R16
   \   00000086   AB1D               STD     Y+53, R17
   \   00000088   AB2E               STD     Y+54, R18
   \   0000008A   AB3F               STD     Y+55, R19
    376              mul_truncate(k, ell3, a3);
   \   0000008C   E068               LDI     R22, 8
   \   0000008E   E070               LDI     R23, 0
   \   00000090   01AE               MOVW    R21:R20, R29:R28
   \   00000092   5C40               SUBI    R20, 192
   \   00000094   4F5F               SBCI    R21, 255
   \   00000096   ....               LDI     R18, LOW((b41 + 208))
   \   00000098   ....               LDI     R19, HIGH((b41 + 208))
   \   0000009A   018C               MOVW    R17:R16, R25:R24
   \   0000009C   ........           CALL    mp_mul
   \   000000A0   01FE               MOVW    R31:R30, R29:R28
   \   000000A2   96FF               ADIW    R31:R30, 63
   \   000000A4   A101               LDD     R16, Z+33
   \   000000A6   A112               LDD     R17, Z+34
   \   000000A8   A123               LDD     R18, Z+35
   \   000000AA   A134               LDD     R19, Z+36
   \   000000AC   A708               STD     Y+40, R16
   \   000000AE   A719               STD     Y+41, R17
   \   000000B0   A72A               STD     Y+42, R18
   \   000000B2   A73B               STD     Y+43, R19
   \   000000B4   01FE               MOVW    R31:R30, R29:R28
   \   000000B6   96FF               ADIW    R31:R30, 63
   \   000000B8   A105               LDD     R16, Z+37
   \   000000BA   A116               LDD     R17, Z+38
   \   000000BC   A127               LDD     R18, Z+39
   \   000000BE   A530               LDD     R19, Z+40
   \   000000C0   A70C               STD     Y+44, R16
   \   000000C2   A71D               STD     Y+45, R17
   \   000000C4   A72E               STD     Y+46, R18
   \   000000C6   A73F               STD     Y+47, R19
    377              mul_truncate(k, ell4, a4);
   \   000000C8   E068               LDI     R22, 8
   \   000000CA   E070               LDI     R23, 0
   \   000000CC   01AE               MOVW    R21:R20, R29:R28
   \   000000CE   5C40               SUBI    R20, 192
   \   000000D0   4F5F               SBCI    R21, 255
   \   000000D2   ....               LDI     R18, LOW((b41 + 240))
   \   000000D4   ....               LDI     R19, HIGH((b41 + 240))
   \   000000D6   018C               MOVW    R17:R16, R25:R24
   \   000000D8   ........           CALL    mp_mul
   \   000000DC   01FE               MOVW    R31:R30, R29:R28
   \   000000DE   96FF               ADIW    R31:R30, 63
   \   000000E0   A101               LDD     R16, Z+33
   \   000000E2   A112               LDD     R17, Z+34
   \   000000E4   A123               LDD     R18, Z+35
   \   000000E6   A134               LDD     R19, Z+36
   \   000000E8   A308               STD     Y+32, R16
   \   000000EA   A319               STD     Y+33, R17
   \   000000EC   A32A               STD     Y+34, R18
   \   000000EE   A33B               STD     Y+35, R19
   \   000000F0   01FE               MOVW    R31:R30, R29:R28
   \   000000F2   96FF               ADIW    R31:R30, 63
   \   000000F4   A105               LDD     R16, Z+37
   \   000000F6   A116               LDD     R17, Z+38
   \   000000F8   A127               LDD     R18, Z+39
   \   000000FA   A530               LDD     R19, Z+40
   \   000000FC   A30C               STD     Y+36, R16
   \   000000FE   A31D               STD     Y+37, R17
   \   00000100   A32E               STD     Y+38, R18
   \   00000102   A33F               STD     Y+39, R19
    378          
    379              mp_mul(a1, (digit_t *)&b11, temp2, 2);
   \   00000104   E062               LDI     R22, 2
   \   00000106   E070               LDI     R23, 0
   \   00000108   01AE               MOVW    R21:R20, R29:R28
   \   0000010A   ....               LDI     R18, LOW((b41 + 64))
   \   0000010C   ....               LDI     R19, HIGH((b41 + 64))
   \   0000010E   018E               MOVW    R17:R16, R29:R28
   \   00000110   5C08               SUBI    R16, 200
   \   00000112   4F1F               SBCI    R17, 255
   \   00000114   ........           CALL    mp_mul
    380              subtract(k, temp2, temp2, 2);
   \   00000118   E062               LDI     R22, 2
   \   0000011A   E070               LDI     R23, 0
   \   0000011C   01AE               MOVW    R21:R20, R29:R28
   \   0000011E   019E               MOVW    R19:R18, R29:R28
   \   00000120   018C               MOVW    R17:R16, R25:R24
   \   00000122   ........           CALL    mp_sub
    381              mp_mul(a2, (digit_t *)&b21, temp, 2);
   \   00000126   E062               LDI     R22, 2
   \   00000128   E070               LDI     R23, 0
   \   0000012A   01AE               MOVW    R21:R20, R29:R28
   \   0000012C   5F40               SUBI    R20, 240
   \   0000012E   4F5F               SBCI    R21, 255
   \   00000130   ....               LDI     R18, LOW((b41 + 96))
   \   00000132   ....               LDI     R19, HIGH((b41 + 96))
   \   00000134   018E               MOVW    R17:R16, R29:R28
   \   00000136   5D00               SUBI    R16, 208
   \   00000138   4F1F               SBCI    R17, 255
   \   0000013A   ........           CALL    mp_mul
    382              subtract(temp2, temp, temp2, 2);
   \   0000013E   E062               LDI     R22, 2
   \   00000140   E070               LDI     R23, 0
   \   00000142   01AE               MOVW    R21:R20, R29:R28
   \   00000144   019E               MOVW    R19:R18, R29:R28
   \   00000146   5F20               SUBI    R18, 240
   \   00000148   4F3F               SBCI    R19, 255
   \   0000014A   018E               MOVW    R17:R16, R29:R28
   \   0000014C   ........           CALL    mp_sub
    383              mp_mul(a3, (digit_t *)&b31, temp, 2);
   \   00000150   E062               LDI     R22, 2
   \   00000152   E070               LDI     R23, 0
   \   00000154   01AE               MOVW    R21:R20, R29:R28
   \   00000156   5F40               SUBI    R20, 240
   \   00000158   4F5F               SBCI    R21, 255
   \   0000015A   ....               LDI     R18, LOW((b41 + 112))
   \   0000015C   ....               LDI     R19, HIGH((b41 + 112))
   \   0000015E   018E               MOVW    R17:R16, R29:R28
   \   00000160   5D08               SUBI    R16, 216
   \   00000162   4F1F               SBCI    R17, 255
   \   00000164   ........           CALL    mp_mul
    384              subtract(temp2, temp, temp2, 2);
   \   00000168   E062               LDI     R22, 2
   \   0000016A   E070               LDI     R23, 0
   \   0000016C   01AE               MOVW    R21:R20, R29:R28
   \   0000016E   019E               MOVW    R19:R18, R29:R28
   \   00000170   5F20               SUBI    R18, 240
   \   00000172   4F3F               SBCI    R19, 255
   \   00000174   018E               MOVW    R17:R16, R29:R28
   \   00000176   ........           CALL    mp_sub
    385              mp_mul(a4, (digit_t *)&b41, temp, 2);
   \   0000017A   E062               LDI     R22, 2
   \   0000017C   E070               LDI     R23, 0
   \   0000017E   01AE               MOVW    R21:R20, R29:R28
   \   00000180   5F40               SUBI    R20, 240
   \   00000182   4F5F               SBCI    R21, 255
   \   00000184   ....               LDI     R18, LOW(b41)
   \   00000186   ....               LDI     R19, (b41) >> 8
   \   00000188   018E               MOVW    R17:R16, R29:R28
   \   0000018A   5E00               SUBI    R16, 224
   \   0000018C   4F1F               SBCI    R17, 255
   \   0000018E   ........           CALL    mp_mul
    386              subtract(temp2, temp, temp2, 2);
   \   00000192   E062               LDI     R22, 2
   \   00000194   E070               LDI     R23, 0
   \   00000196   01AE               MOVW    R21:R20, R29:R28
   \   00000198   019E               MOVW    R19:R18, R29:R28
   \   0000019A   5F20               SUBI    R18, 240
   \   0000019C   4F3F               SBCI    R19, 255
   \   0000019E   018E               MOVW    R17:R16, R29:R28
   \   000001A0   ........           CALL    mp_sub
    387              add(temp2, (digit_t *)&c1, temp, 2); //temp = (uint64_t)k[0] - (uint64_t)a1*b11 - (uint64_t)a2*b21 - (uint64_t)a3*b31 - (uint64_t)a4*b41 + c1;
   \   000001A4   E062               LDI     R22, 2
   \   000001A6   E070               LDI     R23, 0
   \   000001A8   01AE               MOVW    R21:R20, R29:R28
   \   000001AA   5F40               SUBI    R20, 240
   \   000001AC   4F5F               SBCI    R21, 255
   \   000001AE   ....               LDI     R18, LOW((b41 + 32))
   \   000001B0   ....               LDI     R19, HIGH((b41 + 32))
   \   000001B2   018E               MOVW    R17:R16, R29:R28
   \   000001B4   ........           CALL    mp_add
    388              
    389              mask = ~(0 - (temp[0] & 1));         // If temp is even then mask = 0xFF...FF, else mask = 0
   \   000001B8   8988               LDD     R24, Y+16
   \   000001BA   7081               ANDI    R24, 0x01
   \   000001BC   EF9F               LDI     R25, 255
   \   000001BE   EFAF               LDI     R26, 255
   \   000001C0   EFBF               LDI     R27, 255
   \   000001C2   9581               NEG     R24
   \   000001C4   4F9F               SBCI    R25, 255
   \   000001C6   4FAF               SBCI    R26, 255
   \   000001C8   4FBF               SBCI    R27, 255
   \   000001CA   9580               COM     R24
   \   000001CC   9590               COM     R25
   \   000001CE   95A0               COM     R26
   \   000001D0   95B0               COM     R27
    390              
    391              temp2[0] = (mask & ((digit_t) b41));
   \   000001D2   9100....           LDS     R16, b41
   \   000001D6   9110....           LDS     R17, (b41 + 1)
   \   000001DA   9120....           LDS     R18, (b41 + 2)
   \   000001DE   9130....           LDS     R19, (b41 + 3)
   \   000001E2   01AC               MOVW    R21:R20, R25:R24
   \   000001E4   01BD               MOVW    R23:R22, R27:R26
   \   000001E6   2340               AND     R20, R16
   \   000001E8   2351               AND     R21, R17
   \   000001EA   2362               AND     R22, R18
   \   000001EC   2373               AND     R23, R19
   \   000001EE   8348               ST      Y, R20
   \   000001F0   8359               STD     Y+1, R21
   \   000001F2   836A               STD     Y+2, R22
   \   000001F4   837B               STD     Y+3, R23
    392              temp2[1] = (mask & ((digit_t *) &b41)[1]);
   \   000001F6   9100....           LDS     R16, (b41 + 4)
   \   000001FA   9110....           LDS     R17, (b41 + 5)
   \   000001FE   9120....           LDS     R18, (b41 + 6)
   \   00000202   9130....           LDS     R19, (b41 + 7)
   \   00000206   01AC               MOVW    R21:R20, R25:R24
   \   00000208   01BD               MOVW    R23:R22, R27:R26
   \   0000020A   2340               AND     R20, R16
   \   0000020C   2351               AND     R21, R17
   \   0000020E   2362               AND     R22, R18
   \   00000210   2373               AND     R23, R19
   \   00000212   834C               STD     Y+4, R20
   \   00000214   835D               STD     Y+5, R21
   \   00000216   836E               STD     Y+6, R22
   \   00000218   837F               STD     Y+7, R23
    393              add(temp, temp2, scalars, 2); //scalars[0] = temp + (mask & b41);
   \   0000021A   E062               LDI     R22, 2
   \   0000021C   E070               LDI     R23, 0
   \   0000021E   01A2               MOVW    R21:R20, R5:R4
   \   00000220   019E               MOVW    R19:R18, R29:R28
   \   00000222   018E               MOVW    R17:R16, R29:R28
   \   00000224   5F00               SUBI    R16, 240
   \   00000226   4F1F               SBCI    R17, 255
   \   00000228   ........           CALL    mp_add
    394          
    395              mp_mul(a1, (digit_t *)&b12, temp2, 2);
   \   0000022C   E062               LDI     R22, 2
   \   0000022E   E070               LDI     R23, 0
   \   00000230   01AE               MOVW    R21:R20, R29:R28
   \   00000232   ....               LDI     R18, LOW((b41 + 72))
   \   00000234   ....               LDI     R19, HIGH((b41 + 72))
   \   00000236   018E               MOVW    R17:R16, R29:R28
   \   00000238   5C08               SUBI    R16, 200
   \   0000023A   4F1F               SBCI    R17, 255
   \   0000023C   ........           CALL    mp_mul
    396              add(temp2, a2, temp2, 2);
   \   00000240   E062               LDI     R22, 2
   \   00000242   E070               LDI     R23, 0
   \   00000244   01AE               MOVW    R21:R20, R29:R28
   \   00000246   019E               MOVW    R19:R18, R29:R28
   \   00000248   5D20               SUBI    R18, 208
   \   0000024A   4F3F               SBCI    R19, 255
   \   0000024C   018E               MOVW    R17:R16, R29:R28
   \   0000024E   ........           CALL    mp_add
    397              mp_mul(a3, (digit_t *)&b32, temp, 2);
   \   00000252   E062               LDI     R22, 2
   \   00000254   E070               LDI     R23, 0
   \   00000256   01AE               MOVW    R21:R20, R29:R28
   \   00000258   5F40               SUBI    R20, 240
   \   0000025A   4F5F               SBCI    R21, 255
   \   0000025C   ....               LDI     R18, LOW((b41 + 120))
   \   0000025E   ....               LDI     R19, HIGH((b41 + 120))
   \   00000260   018E               MOVW    R17:R16, R29:R28
   \   00000262   5D08               SUBI    R16, 216
   \   00000264   4F1F               SBCI    R17, 255
   \   00000266   ........           CALL    mp_mul
    398              subtract(temp2, temp, temp2, 2);
   \   0000026A   E062               LDI     R22, 2
   \   0000026C   E070               LDI     R23, 0
   \   0000026E   01AE               MOVW    R21:R20, R29:R28
   \   00000270   019E               MOVW    R19:R18, R29:R28
   \   00000272   5F20               SUBI    R18, 240
   \   00000274   4F3F               SBCI    R19, 255
   \   00000276   018E               MOVW    R17:R16, R29:R28
   \   00000278   ........           CALL    mp_sub
    399              mp_mul(a4, (digit_t *)&b42, temp, 2);
   \   0000027C   E062               LDI     R22, 2
   \   0000027E   E070               LDI     R23, 0
   \   00000280   01AE               MOVW    R21:R20, R29:R28
   \   00000282   5F40               SUBI    R20, 240
   \   00000284   4F5F               SBCI    R21, 255
   \   00000286   ....               LDI     R18, LOW((b41 + 8))
   \   00000288   ....               LDI     R19, HIGH((b41 + 8))
   \   0000028A   018E               MOVW    R17:R16, R29:R28
   \   0000028C   5E00               SUBI    R16, 224
   \   0000028E   4F1F               SBCI    R17, 255
   \   00000290   ........           CALL    mp_mul
    400              subtract(temp2, temp, temp2, 2);
   \   00000294   E062               LDI     R22, 2
   \   00000296   E070               LDI     R23, 0
   \   00000298   01AE               MOVW    R21:R20, R29:R28
   \   0000029A   019E               MOVW    R19:R18, R29:R28
   \   0000029C   5F20               SUBI    R18, 240
   \   0000029E   4F3F               SBCI    R19, 255
   \   000002A0   018E               MOVW    R17:R16, R29:R28
   \   000002A2   ........           CALL    mp_sub
    401              add(temp2, (digit_t *)&c2, temp2, 2);
   \   000002A6   E062               LDI     R22, 2
   \   000002A8   E070               LDI     R23, 0
   \   000002AA   01AE               MOVW    R21:R20, R29:R28
   \   000002AC   ....               LDI     R18, LOW((b41 + 40))
   \   000002AE   ....               LDI     R19, HIGH((b41 + 40))
   \   000002B0   018E               MOVW    R17:R16, R29:R28
   \   000002B2   ........           CALL    mp_add
    402              temp[0] = (mask & ((digit_t) b42));
   \   000002B6   9100....           LDS     R16, (b41 + 8)
   \   000002BA   9110....           LDS     R17, (b41 + 9)
   \   000002BE   9120....           LDS     R18, (b41 + 10)
   \   000002C2   9130....           LDS     R19, (b41 + 11)
   \   000002C6   01AC               MOVW    R21:R20, R25:R24
   \   000002C8   01BD               MOVW    R23:R22, R27:R26
   \   000002CA   2340               AND     R20, R16
   \   000002CC   2351               AND     R21, R17
   \   000002CE   2362               AND     R22, R18
   \   000002D0   2373               AND     R23, R19
   \   000002D2   8B48               STD     Y+16, R20
   \   000002D4   8B59               STD     Y+17, R21
   \   000002D6   8B6A               STD     Y+18, R22
   \   000002D8   8B7B               STD     Y+19, R23
    403              temp[1] = (mask & ((digit_t *) &b42)[1]);
   \   000002DA   9100....           LDS     R16, (b41 + 12)
   \   000002DE   9110....           LDS     R17, (b41 + 13)
   \   000002E2   9120....           LDS     R18, (b41 + 14)
   \   000002E6   9130....           LDS     R19, (b41 + 15)
   \   000002EA   01AC               MOVW    R21:R20, R25:R24
   \   000002EC   01BD               MOVW    R23:R22, R27:R26
   \   000002EE   2340               AND     R20, R16
   \   000002F0   2351               AND     R21, R17
   \   000002F2   2362               AND     R22, R18
   \   000002F4   2373               AND     R23, R19
   \   000002F6   8B4C               STD     Y+20, R20
   \   000002F8   8B5D               STD     Y+21, R21
   \   000002FA   8B6E               STD     Y+22, R22
   \   000002FC   8B7F               STD     Y+23, R23
    404              add(temp2, temp, &scalars[2], 2); //scalars[1] = (uint64_t)a1*b12 + (uint64_t)a2 - (uint64_t)a3*b32 - (uint64_t)a4*b42 + c2 + (mask & b42);
   \   000002FE   E062               LDI     R22, 2
   \   00000300   E070               LDI     R23, 0
   \   00000302   01A2               MOVW    R21:R20, R5:R4
   \   00000304   5F48               SUBI    R20, 248
   \   00000306   4F5F               SBCI    R21, 255
   \   00000308   019E               MOVW    R19:R18, R29:R28
   \   0000030A   5F20               SUBI    R18, 240
   \   0000030C   4F3F               SBCI    R19, 255
   \   0000030E   018E               MOVW    R17:R16, R29:R28
   \   00000310   ........           CALL    mp_add
    405              
    406              mp_mul(a3, (digit_t *)&b33, temp2, 2);
   \   00000314   E062               LDI     R22, 2
   \   00000316   E070               LDI     R23, 0
   \   00000318   01AE               MOVW    R21:R20, R29:R28
   \   0000031A   ....               LDI     R18, LOW((b41 + 128))
   \   0000031C   ....               LDI     R19, HIGH((b41 + 128))
   \   0000031E   018E               MOVW    R17:R16, R29:R28
   \   00000320   5D08               SUBI    R16, 216
   \   00000322   4F1F               SBCI    R17, 255
   \   00000324   ........           CALL    mp_mul
    407              mp_mul(a1, (digit_t *)&b13, temp, 2);
   \   00000328   E062               LDI     R22, 2
   \   0000032A   E070               LDI     R23, 0
   \   0000032C   01AE               MOVW    R21:R20, R29:R28
   \   0000032E   5F40               SUBI    R20, 240
   \   00000330   4F5F               SBCI    R21, 255
   \   00000332   ....               LDI     R18, LOW((b41 + 80))
   \   00000334   ....               LDI     R19, HIGH((b41 + 80))
   \   00000336   018E               MOVW    R17:R16, R29:R28
   \   00000338   5C08               SUBI    R16, 200
   \   0000033A   4F1F               SBCI    R17, 255
   \   0000033C   ........           CALL    mp_mul
    408              subtract(temp2, temp, temp2, 2);
   \   00000340   E062               LDI     R22, 2
   \   00000342   E070               LDI     R23, 0
   \   00000344   01AE               MOVW    R21:R20, R29:R28
   \   00000346   019E               MOVW    R19:R18, R29:R28
   \   00000348   5F20               SUBI    R18, 240
   \   0000034A   4F3F               SBCI    R19, 255
   \   0000034C   018E               MOVW    R17:R16, R29:R28
   \   0000034E   ........           CALL    mp_sub
    409              subtract(temp2, a2, temp2, 2);
   \   00000352   E062               LDI     R22, 2
   \   00000354   E070               LDI     R23, 0
   \   00000356   01AE               MOVW    R21:R20, R29:R28
   \   00000358   019E               MOVW    R19:R18, R29:R28
   \   0000035A   5D20               SUBI    R18, 208
   \   0000035C   4F3F               SBCI    R19, 255
   \   0000035E   018E               MOVW    R17:R16, R29:R28
   \   00000360   ........           CALL    mp_sub
    410              mp_mul(a4, (digit_t *)&b43, temp, 2);
   \   00000364   E062               LDI     R22, 2
   \   00000366   E070               LDI     R23, 0
   \   00000368   01AE               MOVW    R21:R20, R29:R28
   \   0000036A   5F40               SUBI    R20, 240
   \   0000036C   4F5F               SBCI    R21, 255
   \   0000036E   ....               LDI     R18, LOW((b41 + 16))
   \   00000370   ....               LDI     R19, HIGH((b41 + 16))
   \   00000372   018E               MOVW    R17:R16, R29:R28
   \   00000374   5E00               SUBI    R16, 224
   \   00000376   4F1F               SBCI    R17, 255
   \   00000378   ........           CALL    mp_mul
    411              add(temp2, temp, temp2, 2);
   \   0000037C   E062               LDI     R22, 2
   \   0000037E   E070               LDI     R23, 0
   \   00000380   01AE               MOVW    R21:R20, R29:R28
   \   00000382   019E               MOVW    R19:R18, R29:R28
   \   00000384   5F20               SUBI    R18, 240
   \   00000386   4F3F               SBCI    R19, 255
   \   00000388   018E               MOVW    R17:R16, R29:R28
   \   0000038A   ........           CALL    mp_add
    412              add(temp2, (digit_t *)&c3, temp2, 2);
   \   0000038E   E062               LDI     R22, 2
   \   00000390   E070               LDI     R23, 0
   \   00000392   01AE               MOVW    R21:R20, R29:R28
   \   00000394   ....               LDI     R18, LOW((b41 + 48))
   \   00000396   ....               LDI     R19, HIGH((b41 + 48))
   \   00000398   018E               MOVW    R17:R16, R29:R28
   \   0000039A   ........           CALL    mp_add
    413              temp[0] = (mask & ((digit_t) b43));
   \   0000039E   9100....           LDS     R16, (b41 + 16)
   \   000003A2   9110....           LDS     R17, (b41 + 17)
   \   000003A6   9120....           LDS     R18, (b41 + 18)
   \   000003AA   9130....           LDS     R19, (b41 + 19)
   \   000003AE   01AC               MOVW    R21:R20, R25:R24
   \   000003B0   01BD               MOVW    R23:R22, R27:R26
   \   000003B2   2340               AND     R20, R16
   \   000003B4   2351               AND     R21, R17
   \   000003B6   2362               AND     R22, R18
   \   000003B8   2373               AND     R23, R19
   \   000003BA   8B48               STD     Y+16, R20
   \   000003BC   8B59               STD     Y+17, R21
   \   000003BE   8B6A               STD     Y+18, R22
   \   000003C0   8B7B               STD     Y+19, R23
    414              temp[1] = (mask & ((digit_t *) &b43)[1]);   
   \   000003C2   9100....           LDS     R16, (b41 + 20)
   \   000003C6   9110....           LDS     R17, (b41 + 21)
   \   000003CA   9120....           LDS     R18, (b41 + 22)
   \   000003CE   9130....           LDS     R19, (b41 + 23)
   \   000003D2   01AC               MOVW    R21:R20, R25:R24
   \   000003D4   01BD               MOVW    R23:R22, R27:R26
   \   000003D6   2340               AND     R20, R16
   \   000003D8   2351               AND     R21, R17
   \   000003DA   2362               AND     R22, R18
   \   000003DC   2373               AND     R23, R19
   \   000003DE   8B4C               STD     Y+20, R20
   \   000003E0   8B5D               STD     Y+21, R21
   \   000003E2   8B6E               STD     Y+22, R22
   \   000003E4   8B7F               STD     Y+23, R23
    415              subtract(temp2, temp, &scalars[4], 2); //scalars[2] = (uint64_t)a3*b33 - (uint64_t)a1*b13 - (uint64_t)a2 + (uint64_t)a4*b43 + c3 - (mask & b43);
   \   000003E6   E062               LDI     R22, 2
   \   000003E8   E070               LDI     R23, 0
   \   000003EA   01A2               MOVW    R21:R20, R5:R4
   \   000003EC   5F40               SUBI    R20, 240
   \   000003EE   4F5F               SBCI    R21, 255
   \   000003F0   019E               MOVW    R19:R18, R29:R28
   \   000003F2   5F20               SUBI    R18, 240
   \   000003F4   4F3F               SBCI    R19, 255
   \   000003F6   018E               MOVW    R17:R16, R29:R28
   \   000003F8   ........           CALL    mp_sub
    416              
    417              mp_mul(a1, (digit_t *)&b14, temp2, 2);
   \   000003FC   E062               LDI     R22, 2
   \   000003FE   E070               LDI     R23, 0
   \   00000400   01AE               MOVW    R21:R20, R29:R28
   \   00000402   ....               LDI     R18, LOW((b41 + 88))
   \   00000404   ....               LDI     R19, HIGH((b41 + 88))
   \   00000406   018E               MOVW    R17:R16, R29:R28
   \   00000408   5C08               SUBI    R16, 200
   \   0000040A   4F1F               SBCI    R17, 255
   \   0000040C   ........           CALL    mp_mul
    418              mp_mul(a2, (digit_t *)&b24, temp, 2);
   \   00000410   E062               LDI     R22, 2
   \   00000412   E070               LDI     R23, 0
   \   00000414   01AE               MOVW    R21:R20, R29:R28
   \   00000416   5F40               SUBI    R20, 240
   \   00000418   4F5F               SBCI    R21, 255
   \   0000041A   ....               LDI     R18, LOW((b41 + 104))
   \   0000041C   ....               LDI     R19, HIGH((b41 + 104))
   \   0000041E   018E               MOVW    R17:R16, R29:R28
   \   00000420   5D00               SUBI    R16, 208
   \   00000422   4F1F               SBCI    R17, 255
   \   00000424   ........           CALL    mp_mul
    419              subtract(temp2, temp, temp2, 2);
   \   00000428   E062               LDI     R22, 2
   \   0000042A   E070               LDI     R23, 0
   \   0000042C   01AE               MOVW    R21:R20, R29:R28
   \   0000042E   019E               MOVW    R19:R18, R29:R28
   \   00000430   5F20               SUBI    R18, 240
   \   00000432   4F3F               SBCI    R19, 255
   \   00000434   018E               MOVW    R17:R16, R29:R28
   \   00000436   ........           CALL    mp_sub
    420              mp_mul(a3, (digit_t *)&b34, temp, 2);
   \   0000043A   E062               LDI     R22, 2
   \   0000043C   E070               LDI     R23, 0
   \   0000043E   01AE               MOVW    R21:R20, R29:R28
   \   00000440   5F40               SUBI    R20, 240
   \   00000442   4F5F               SBCI    R21, 255
   \   00000444   ....               LDI     R18, LOW((b41 + 136))
   \   00000446   ....               LDI     R19, HIGH((b41 + 136))
   \   00000448   018E               MOVW    R17:R16, R29:R28
   \   0000044A   5D08               SUBI    R16, 216
   \   0000044C   4F1F               SBCI    R17, 255
   \   0000044E   ........           CALL    mp_mul
    421              subtract(temp2, temp, temp2, 2);
   \   00000452   E062               LDI     R22, 2
   \   00000454   E070               LDI     R23, 0
   \   00000456   01AE               MOVW    R21:R20, R29:R28
   \   00000458   019E               MOVW    R19:R18, R29:R28
   \   0000045A   5F20               SUBI    R18, 240
   \   0000045C   4F3F               SBCI    R19, 255
   \   0000045E   018E               MOVW    R17:R16, R29:R28
   \   00000460   ........           CALL    mp_sub
    422              mp_mul(a4, (digit_t *)&b44, temp, 2);
   \   00000464   E062               LDI     R22, 2
   \   00000466   E070               LDI     R23, 0
   \   00000468   01AE               MOVW    R21:R20, R29:R28
   \   0000046A   5F40               SUBI    R20, 240
   \   0000046C   4F5F               SBCI    R21, 255
   \   0000046E   ....               LDI     R18, LOW((b41 + 24))
   \   00000470   ....               LDI     R19, HIGH((b41 + 24))
   \   00000472   018E               MOVW    R17:R16, R29:R28
   \   00000474   5E00               SUBI    R16, 224
   \   00000476   4F1F               SBCI    R17, 255
   \   00000478   ........           CALL    mp_mul
    423              add(temp2, temp, temp2, 2);
   \   0000047C   E062               LDI     R22, 2
   \   0000047E   E070               LDI     R23, 0
   \   00000480   01AE               MOVW    R21:R20, R29:R28
   \   00000482   019E               MOVW    R19:R18, R29:R28
   \   00000484   5F20               SUBI    R18, 240
   \   00000486   4F3F               SBCI    R19, 255
   \   00000488   018E               MOVW    R17:R16, R29:R28
   \   0000048A   ........           CALL    mp_add
    424              add(temp2, (digit_t *)&c4, temp2, 2);
   \   0000048E   E062               LDI     R22, 2
   \   00000490   E070               LDI     R23, 0
   \   00000492   01AE               MOVW    R21:R20, R29:R28
   \   00000494   ....               LDI     R18, LOW((b41 + 56))
   \   00000496   ....               LDI     R19, HIGH((b41 + 56))
   \   00000498   018E               MOVW    R17:R16, R29:R28
   \   0000049A   ........           CALL    mp_add
    425              temp[0] = (mask & ((digit_t) b44));
   \   0000049E   9100....           LDS     R16, (b41 + 24)
   \   000004A2   9110....           LDS     R17, (b41 + 25)
   \   000004A6   9120....           LDS     R18, (b41 + 26)
   \   000004AA   9130....           LDS     R19, (b41 + 27)
   \   000004AE   01AC               MOVW    R21:R20, R25:R24
   \   000004B0   01BD               MOVW    R23:R22, R27:R26
   \   000004B2   2340               AND     R20, R16
   \   000004B4   2351               AND     R21, R17
   \   000004B6   2362               AND     R22, R18
   \   000004B8   2373               AND     R23, R19
   \   000004BA   8B48               STD     Y+16, R20
   \   000004BC   8B59               STD     Y+17, R21
   \   000004BE   8B6A               STD     Y+18, R22
   \   000004C0   8B7B               STD     Y+19, R23
    426              temp[1] = (mask & ((digit_t*) &b44)[1]);      
   \   000004C2   9100....           LDS     R16, (b41 + 28)
   \   000004C6   9110....           LDS     R17, (b41 + 29)
   \   000004CA   9120....           LDS     R18, (b41 + 30)
   \   000004CE   9130....           LDS     R19, (b41 + 31)
   \   000004D2   2380               AND     R24, R16
   \   000004D4   2391               AND     R25, R17
   \   000004D6   23A2               AND     R26, R18
   \   000004D8   23B3               AND     R27, R19
   \   000004DA   8B8C               STD     Y+20, R24
   \   000004DC   8B9D               STD     Y+21, R25
   \   000004DE   8BAE               STD     Y+22, R26
   \   000004E0   8BBF               STD     Y+23, R27
    427              subtract(temp2, temp, &scalars[6], 2); //scalars[3] = (uint64_t)a1*b14 - (uint64_t)a2*b24 - (uint64_t)a3*b34 + (uint64_t)a4*b44 + c4 - (mask & b44);
   \   000004E2   E062               LDI     R22, 2
   \   000004E4   E070               LDI     R23, 0
   \   000004E6   E108               LDI     R16, 24
   \   000004E8   0E40               ADD     R4, R16
   \   000004EA   1E57               ADC     R5, R23
   \   000004EC   01A2               MOVW    R21:R20, R5:R4
   \   000004EE   019E               MOVW    R19:R18, R29:R28
   \   000004F0   5F20               SUBI    R18, 240
   \   000004F2   4F3F               SBCI    R19, 255
   \   000004F4   018E               MOVW    R17:R16, R29:R28
   \   000004F6   ........           CALL    mp_sub
    428          
    429          }
   \   000004FA   96EF               ADIW    R29:R28, 63
   \   000004FC   96EF               ADIW    R29:R28, 63
   \   000004FE   9622               ADIW    R29:R28, 2
   \   00000500   ........           JMP     ??Subroutine14_0
    430          
    431          

   \                                 In  segment FARCODE, align 2, keep-with-next
    432          void recode(digit_t* scalars, unsigned int* digits, unsigned int* sign_masks)
   \                     recode:
    433          { // Recoding sub-scalars for use in the variable-base scalar multiplication. See Algorithm 1 in "Efficient and Secure Methods for GLV-Based Scalar 
   \   00000000   92AA               ST      -Y, R10
   \   00000002   929A               ST      -Y, R9
   \   00000004   928A               ST      -Y, R8
   \   00000006   927A               ST      -Y, R7
   \   00000008   924A               ST      -Y, R4
   \   0000000A   93BA               ST      -Y, R27
   \   0000000C   93AA               ST      -Y, R26
   \   0000000E   939A               ST      -Y, R25
   \   00000010   938A               ST      -Y, R24
   \   00000012                      REQUIRE ?Register_R4_is_cg_reg
   \   00000012                      REQUIRE ?Register_R7_is_cg_reg
   \   00000012                      REQUIRE ?Register_R8_is_cg_reg
   \   00000012                      REQUIRE ?Register_R9_is_cg_reg
   \   00000012                      REQUIRE ?Register_R10_is_cg_reg
   \   00000012   01B8               MOVW    R23:R22, R17:R16
   \   00000014   0149               MOVW    R9:R8, R19:R18
    434            // Multiplication and their Implementation on GLV-GLS Curves (Extended Version)", A. Faz-Hernandez, P. Longa, and A.H. Sanchez, in Journal
    435            // of Cryptographic Engineering, Vol. 5(1), 2015.
    436            //Input: 8 32-bit sub-scalars passed through "scalars", which are obtained after calling decompose().
    437            // Outputs: "digits" array with 65 nonzero entries. Each entry is in the range [0, 7], corresponding to one entry in the precomputed table.
    438            //          "sign_masks" array with 65 entries storing the signs for their corresponding digits in "digits". 
    439            //          Notation: if the corresponding digit > 0 then sign_mask = 0xFF...FF, else if digit < 0 then sign_mask = 0.
    440              unsigned int i, bit, bit0, carry;
    441              sign_masks[64] = (unsigned int)-1; 
   \   00000016   01FA               MOVW    R31:R30, R21:R20
   \   00000018   58E0               SUBI    R30, 128
   \   0000001A   4FFF               SBCI    R31, 255
   \   0000001C   EF0F               LDI     R16, 255
   \   0000001E   8300               ST      Z, R16
   \   00000020   8301               STD     Z+1, R16
    442          
    443              for (i = 0; i < 64; i++)
   \   00000022   01CA               MOVW    R25:R24, R21:R20
   \   00000024   01D9               MOVW    R27:R26, R19:R18
   \   00000026   E400               LDI     R16, 64
   \   00000028   2EA0               MOV     R10, R16
    444              {
    445                  scalars[0] >>= 1;
   \                     ??recode_0:
   \   0000002A   01FB               MOVW    R31:R30, R23:R22
   \   0000002C   8100               LD      R16, Z
   \   0000002E   8111               LDD     R17, Z+1
   \   00000030   8122               LDD     R18, Z+2
   \   00000032   8133               LDD     R19, Z+3
   \   00000034   9536               LSR     R19
   \   00000036   9527               ROR     R18
   \   00000038   9517               ROR     R17
   \   0000003A   9507               ROR     R16
   \   0000003C   8300               ST      Z, R16
   \   0000003E   8311               STD     Z+1, R17
   \   00000040   8322               STD     Z+2, R18
   \   00000042   8333               STD     Z+3, R19
    446                  scalars[0] = scalars[0] | ((scalars[1] & 1) << 31);
   \   00000044   8104               LDD     R16, Z+4
   \   00000046   7001               ANDI    R16, 0x01
   \   00000048   9506               LSR     R16
   \   0000004A   9507               ROR     R16
   \   0000004C   2B30               OR      R19, R16
   \   0000004E   8333               STD     Z+3, R19
    447                  scalars[1] >>= 1;
   \   00000050   8104               LDD     R16, Z+4
   \   00000052   8115               LDD     R17, Z+5
   \   00000054   8126               LDD     R18, Z+6
   \   00000056   8137               LDD     R19, Z+7
   \   00000058   9536               LSR     R19
   \   0000005A   9527               ROR     R18
   \   0000005C   9517               ROR     R17
   \   0000005E   9507               ROR     R16
   \   00000060   8304               STD     Z+4, R16
   \   00000062   8315               STD     Z+5, R17
   \   00000064   8326               STD     Z+6, R18
   \   00000066   8337               STD     Z+7, R19
    448                  bit0 = (unsigned int)scalars[0] & 1;
   \   00000068   8100               LD      R16, Z
   \   0000006A   7001               ANDI    R16, 0x01
   \   0000006C   E010               LDI     R17, 0
    449                  sign_masks[i] = 0 - bit0;
   \   0000006E   0198               MOVW    R19:R18, R17:R16
   \   00000070   9521               NEG     R18
   \   00000072   4030               SBCI    R19, 0
   \   00000074   01FC               MOVW    R31:R30, R25:R24
   \   00000076   9321               ST      Z+, R18
   \   00000078   9331               ST      Z+, R19
   \   0000007A   01CF               MOVW    R25:R24, R31:R30
    450          
    451                  bit = (unsigned int)scalars[2] & 1;
   \   0000007C   01FB               MOVW    R31:R30, R23:R22
   \   0000007E   8520               LDD     R18, Z+8
   \   00000080   7021               ANDI    R18, 0x01
   \   00000082   E030               LDI     R19, 0
    452                  carry = (bit0 | bit) ^ bit0; 
    453                  scalars[2] = (scalars[2] >> 1) + (digit_t)carry;
   \   00000084   8400               LDD     R0, Z+8
   \   00000086   8411               LDD     R1, Z+9
   \   00000088   8422               LDD     R2, Z+10
   \   0000008A   8433               LDD     R3, Z+11
   \   0000008C   9436               LSR     R3
   \   0000008E   9427               ROR     R2
   \   00000090   9417               ROR     R1
   \   00000092   9407               ROR     R0
   \   00000094   2E40               MOV     R4, R16
   \   00000096   2A42               OR      R4, R18
   \   00000098   2640               EOR     R4, R16
   \   0000009A   0C04               ADD     R0, R4
   \   0000009C   1E11               ADC     R1, R17
   \   0000009E   1E21               ADC     R2, R17
   \   000000A0   1E31               ADC     R3, R17
   \   000000A2   8600               STD     Z+8, R0
   \   000000A4   8611               STD     Z+9, R1
   \   000000A6   8622               STD     Z+10, R2
   \   000000A8   8633               STD     Z+11, R3
    454                  scalars[2] = scalars[2] | ((scalars[3] & 1) << 31);
   \   000000AA   8404               LDD     R0, Z+12
   \   000000AC   FA00               BST     R0, 0
   \   000000AE   2400               CLR     R0
   \   000000B0   F800               BLD     R0, 0
   \   000000B2   9406               LSR     R0
   \   000000B4   2433               CLR     R3
   \   000000B6   9437               ROR     R3
   \   000000B8   8473               LDD     R7, Z+11
   \   000000BA   2873               OR      R7, R3
   \   000000BC   8673               STD     Z+11, R7
    455                  scalars[3] >>= 1;
   \   000000BE   8404               LDD     R0, Z+12
   \   000000C0   8415               LDD     R1, Z+13
   \   000000C2   8426               LDD     R2, Z+14
   \   000000C4   8437               LDD     R3, Z+15
   \   000000C6   9436               LSR     R3
   \   000000C8   9427               ROR     R2
   \   000000CA   9417               ROR     R1
   \   000000CC   9407               ROR     R0
   \   000000CE   8604               STD     Z+12, R0
   \   000000D0   8615               STD     Z+13, R1
   \   000000D2   8626               STD     Z+14, R2
   \   000000D4   8637               STD     Z+15, R3
    456                  digits[i] = bit;
   \   000000D6   2F42               MOV     R20, R18
    457          
    458                  bit = (unsigned int)scalars[4] & 1;
   \   000000D8   8920               LDD     R18, Z+16
   \   000000DA   7021               ANDI    R18, 0x01
    459                  carry = (bit0 | bit) ^ bit0; 
    460                  scalars[4] = (scalars[4] >> 1) + (digit_t)carry; 
   \   000000DC   8800               LDD     R0, Z+16
   \   000000DE   8811               LDD     R1, Z+17
   \   000000E0   8822               LDD     R2, Z+18
   \   000000E2   8833               LDD     R3, Z+19
   \   000000E4   9436               LSR     R3
   \   000000E6   9427               ROR     R2
   \   000000E8   9417               ROR     R1
   \   000000EA   9407               ROR     R0
   \   000000EC   2E40               MOV     R4, R16
   \   000000EE   2A42               OR      R4, R18
   \   000000F0   2640               EOR     R4, R16
   \   000000F2   0C04               ADD     R0, R4
   \   000000F4   1E11               ADC     R1, R17
   \   000000F6   1E21               ADC     R2, R17
   \   000000F8   1E31               ADC     R3, R17
   \   000000FA   8A00               STD     Z+16, R0
   \   000000FC   8A11               STD     Z+17, R1
   \   000000FE   8A22               STD     Z+18, R2
   \   00000100   8A33               STD     Z+19, R3
    461                  scalars[4] = scalars[4] | ((scalars[5] & 1) << 31);
   \   00000102   8804               LDD     R0, Z+20
   \   00000104   FA00               BST     R0, 0
   \   00000106   2400               CLR     R0
   \   00000108   F800               BLD     R0, 0
   \   0000010A   9406               LSR     R0
   \   0000010C   2433               CLR     R3
   \   0000010E   9437               ROR     R3
   \   00000110   8873               LDD     R7, Z+19
   \   00000112   2873               OR      R7, R3
   \   00000114   8A73               STD     Z+19, R7
    462                  scalars[5] >>= 1;        
   \   00000116   8804               LDD     R0, Z+20
   \   00000118   8815               LDD     R1, Z+21
   \   0000011A   8826               LDD     R2, Z+22
   \   0000011C   8837               LDD     R3, Z+23
   \   0000011E   9436               LSR     R3
   \   00000120   9427               ROR     R2
   \   00000122   9417               ROR     R1
   \   00000124   9407               ROR     R0
   \   00000126   8A04               STD     Z+20, R0
   \   00000128   8A15               STD     Z+21, R1
   \   0000012A   8A26               STD     Z+22, R2
   \   0000012C   8A37               STD     Z+23, R3
    463                  digits[i] += (bit << 1);
   \   0000012E   0F22               LSL     R18
   \   00000130   0F42               ADD     R20, R18
    464          
    465                  bit = (unsigned int)scalars[6] & 1;
   \   00000132   8D20               LDD     R18, Z+24
   \   00000134   7021               ANDI    R18, 0x01
    466                  carry = (bit0 | bit) ^ bit0; 
    467                  scalars[6] = (scalars[6] >> 1) + (digit_t)carry; 
   \   00000136   8C00               LDD     R0, Z+24
   \   00000138   8C11               LDD     R1, Z+25
   \   0000013A   8C22               LDD     R2, Z+26
   \   0000013C   8C33               LDD     R3, Z+27
   \   0000013E   9436               LSR     R3
   \   00000140   9427               ROR     R2
   \   00000142   9417               ROR     R1
   \   00000144   9407               ROR     R0
   \   00000146   2E40               MOV     R4, R16
   \   00000148   2A42               OR      R4, R18
   \   0000014A   2640               EOR     R4, R16
   \   0000014C   0C04               ADD     R0, R4
   \   0000014E   1E11               ADC     R1, R17
   \   00000150   1E21               ADC     R2, R17
   \   00000152   1E31               ADC     R3, R17
   \   00000154   8E00               STD     Z+24, R0
   \   00000156   8E11               STD     Z+25, R1
   \   00000158   8E22               STD     Z+26, R2
   \   0000015A   8E33               STD     Z+27, R3
    468                  scalars[6] = scalars[6] | ((scalars[7] & 1) << 31);
   \   0000015C   8C04               LDD     R0, Z+28
   \   0000015E   FA00               BST     R0, 0
   \   00000160   2400               CLR     R0
   \   00000162   F800               BLD     R0, 0
   \   00000164   9406               LSR     R0
   \   00000166   2433               CLR     R3
   \   00000168   9437               ROR     R3
   \   0000016A   8C73               LDD     R7, Z+27
   \   0000016C   2873               OR      R7, R3
   \   0000016E   8E73               STD     Z+27, R7
    469                  scalars[7] >>= 1;        
   \   00000170   8C04               LDD     R0, Z+28
   \   00000172   8C15               LDD     R1, Z+29
   \   00000174   8C26               LDD     R2, Z+30
   \   00000176   8C37               LDD     R3, Z+31
   \   00000178   9436               LSR     R3
   \   0000017A   9427               ROR     R2
   \   0000017C   9417               ROR     R1
   \   0000017E   9407               ROR     R0
   \   00000180   8E04               STD     Z+28, R0
   \   00000182   8E15               STD     Z+29, R1
   \   00000184   8E26               STD     Z+30, R2
   \   00000186   8E37               STD     Z+31, R3
    470                  digits[i] += (bit << 2);
   \   00000188   0F22               LSL     R18
   \   0000018A   0F22               LSL     R18
   \   0000018C   0F42               ADD     R20, R18
   \   0000018E   1F11               ADC     R17, R17
   \   00000190   934D               ST      X+, R20
   \   00000192   931D               ST      X+, R17
    471                  
    472              }
   \   00000194   94AA               DEC     R10
   \   00000196   F009               BREQ    $+2+2
   \   00000198   CF48               RJMP    ??recode_0
    473              digits[64] = (unsigned int)(scalars[2] + (scalars[4] << 1) + (scalars[6] << 2));    
   \   0000019A   8500               LDD     R16, Z+8
   \   0000019C   8511               LDD     R17, Z+9
   \   0000019E   8800               LDD     R0, Z+16
   \   000001A0   8811               LDD     R1, Z+17
   \   000001A2   0C00               LSL     R0
   \   000001A4   1C11               ROL     R1
   \   000001A6   0D00               ADD     R16, R0
   \   000001A8   1D11               ADC     R17, R1
   \   000001AA   8D40               LDD     R20, Z+24
   \   000001AC   8D51               LDD     R21, Z+25
   \   000001AE   0F44               LSL     R20
   \   000001B0   1F55               ROL     R21
   \   000001B2   0F44               LSL     R20
   \   000001B4   1F55               ROL     R21
   \   000001B6   0F04               ADD     R16, R20
   \   000001B8   1F15               ADC     R17, R21
   \   000001BA   E820               LDI     R18, 128
   \   000001BC   0E82               ADD     R8, R18
   \   000001BE   1E93               ADC     R9, R19
   \   000001C0   01F4               MOVW    R31:R30, R9:R8
   \   000001C2   8300               ST      Z, R16
   \   000001C4   8311               STD     Z+1, R17
    474              
    475          }
   \   000001C6   9189               LD      R24, Y+
   \   000001C8   9199               LD      R25, Y+
   \   000001CA   91A9               LD      R26, Y+
   \   000001CC   91B9               LD      R27, Y+
   \   000001CE   9049               LD      R4, Y+
   \   000001D0                      REQUIRE ?Subroutine8
   \   000001D0                      ;               // Fall through to label ?Subroutine8

   \                                 In  segment FARCODE, align 2, keep-with-next
   \                     ?Subroutine8:
   \   00000000   9079               LD      R7, Y+
   \   00000002   9089               LD      R8, Y+
   \   00000004   9099               LD      R9, Y+
   \   00000006   90A9               LD      R10, Y+
   \   00000008   9508               RET
    476          
    477          

   \                                 In  segment FARCODE, align 2, keep-with-next
    478          void cofactor_clearing(point_extproj_t P)
   \                     cofactor_clearing:
    479          { // Co-factor clearing
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   95DA               DEC     R29
   \   00000006   01C8               MOVW    R25:R24, R17:R16
    480            // Input: P = (X1,Y1,Z1,Ta,Tb), where T1 = Ta*Tb, corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates
    481            // Output: P = 392*P = (Xfinal,Yfinal,Zfinal,Tafinal,Tbfinal), where Tfinal = Tafinal*Tbfinal,
    482            //         corresponding to (Xfinal:Yfinal:Zfinal:Tfinal) in extended twisted Edwards coordinates
    483                point_extproj_precomp_t Q;
    484          
    485                R1_to_R2(P, Q);                      // Converting from (X,Y,Z,Ta,Tb) to (X+Y,Y-X,2Z,2dT)
   \   00000008   019E               MOVW    R19:R18, R29:R28
   \   0000000A   5820               SUBI    R18, 128
   \   0000000C   4F3F               SBCI    R19, 255
   \   0000000E   ....               RCALL   R1_to_R2
    486                eccdouble(P);                        // P = 2*P using representations (X,Y,Z,Ta,Tb) <- 2*(X,Y,Z)
   \   00000010   018C               MOVW    R17:R16, R25:R24
   \   00000012   ....               RCALL   eccdouble
    487                eccadd(Q, P);                        // P = P+Q using representations (X,Y,Z,Ta,Tb) <- (X,Y,Z,Ta,Tb) + (X+Y,Y-X,2Z,2dT)
   \   00000014   019E               MOVW    R19:R18, R29:R28
   \   00000016   018C               MOVW    R17:R16, R25:R24
   \   00000018   ....               RCALL   R1_to_R3
   \   0000001A   01AC               MOVW    R21:R20, R25:R24
   \   0000001C   019E               MOVW    R19:R18, R29:R28
   \   0000001E   018E               MOVW    R17:R16, R29:R28
   \   00000020   5800               SUBI    R16, 128
   \   00000022   4F1F               SBCI    R17, 255
   \   00000024   ....               RCALL   eccadd_core
    488                eccdouble(P);
   \   00000026   018C               MOVW    R17:R16, R25:R24
   \   00000028   ....               RCALL   eccdouble
    489                eccdouble(P);
   \   0000002A   018C               MOVW    R17:R16, R25:R24
   \   0000002C   ....               RCALL   eccdouble
    490                eccdouble(P);
   \   0000002E   018C               MOVW    R17:R16, R25:R24
   \   00000030   ....               RCALL   eccdouble
    491                eccdouble(P);
   \   00000032   018C               MOVW    R17:R16, R25:R24
   \   00000034   ....               RCALL   eccdouble
    492                eccadd(Q, P);
   \   00000036   019E               MOVW    R19:R18, R29:R28
   \   00000038   018C               MOVW    R17:R16, R25:R24
   \   0000003A   ....               RCALL   R1_to_R3
   \   0000003C   01AC               MOVW    R21:R20, R25:R24
   \   0000003E   019E               MOVW    R19:R18, R29:R28
   \   00000040   018E               MOVW    R17:R16, R29:R28
   \   00000042   5800               SUBI    R16, 128
   \   00000044   4F1F               SBCI    R17, 255
   \   00000046   ....               RCALL   eccadd_core
    493                eccdouble(P);
   \   00000048   018C               MOVW    R17:R16, R25:R24
   \   0000004A   ....               RCALL   eccdouble
    494                eccdouble(P);
   \   0000004C   018C               MOVW    R17:R16, R25:R24
   \   0000004E   ....               RCALL   eccdouble
    495                eccdouble(P);
   \   00000050   018C               MOVW    R17:R16, R25:R24
   \   00000052   ....               RCALL   eccdouble
    496          }
   \   00000054   95D3               INC     R29
   \   00000056   9189               LD      R24, Y+
   \   00000058   9199               LD      R25, Y+
   \   0000005A   9508               RET
    497          
    498          

   \                                 In  segment FARCODE, align 2, keep-with-next
    499          bool ecc_mul(point_t P, digit_t* k, point_t Q, bool clear_cofactor)
   \                     ecc_mul:
    500          { // Variable-base scalar multiplication Q = k*P using a 4-dimensional decomposition
   \   00000000   926A               ST      -Y, R6
   \   00000002   925A               ST      -Y, R5
   \   00000004   924A               ST      -Y, R4
   \   00000006   93BA               ST      -Y, R27
   \   00000008   93AA               ST      -Y, R26
   \   0000000A   939A               ST      -Y, R25
   \   0000000C   938A               ST      -Y, R24
   \   0000000E                      REQUIRE ?Register_R4_is_cg_reg
   \   0000000E                      REQUIRE ?Register_R5_is_cg_reg
   \   0000000E                      REQUIRE ?Register_R6_is_cg_reg
   \   0000000E   97EF               SBIW    R29:R28, 63
   \   00000010   97EF               SBIW    R29:R28, 63
   \   00000012   97EF               SBIW    R29:R28, 63
   \   00000014   9727               SBIW    R29:R28, 7
   \   00000016   50D6               SUBI    R29, 6
   \   00000018   01D9               MOVW    R27:R26, R19:R18
   \   0000001A   012A               MOVW    R5:R4, R21:R20
   \   0000001C   01CB               MOVW    R25:R24, R23:R22
    501            // Inputs: scalar "k" in [0, 2^256-1],
    502            //         point P = (x,y) in affine coordinates,
    503            //         clear_cofactor = 1 (TRUE) or 0 (FALSE) whether cofactor clearing is required or not, respectively.
    504            // Output: Q = k*P in affine coordinates (x,y).
    505            // This function performs point validation and (if selected) cofactor clearing.
    506                point_extproj_t R;
    507                point_extproj_precomp_t S, Table[8];
    508                digit_t scalars[2*NWORDS64_ORDER];
    509                unsigned int digits[65], sign_masks[65];
    510                int i;
    511          
    512                point_setup(P, R);                                        // Convert to representation (X,Y,1,Ta,Tb)
   \   0000001E   019E               MOVW    R19:R18, R29:R28
   \   00000020   5D2C               SUBI    R18, 220
   \   00000022   4F39               SBCI    R19, 249
   \   00000024   ....               RCALL   point_setup
    513                decompose(k, scalars);                         // Scalar decomposition
   \   00000026   019E               MOVW    R19:R18, R29:R28
   \   00000028   572C               SUBI    R18, 124
   \   0000002A   4F3E               SBCI    R19, 254
   \   0000002C   018D               MOVW    R17:R16, R27:R26
   \   0000002E   ....               RCALL   decompose
    514          
    515                if (ecc_point_validate(R) == false) {                     // Check if point lies on the curve
   \   00000030   018E               MOVW    R17:R16, R29:R28
   \   00000032   5D0C               SUBI    R16, 220
   \   00000034   4F19               SBCI    R17, 249
   \   00000036   ....               RCALL   ecc_point_validate
   \   00000038   2B01               OR      R16, R17
   \   0000003A   F411               BRNE    ??ecc_mul_0
    516                        return false;
   \   0000003C   E000               LDI     R16, 0
   \   0000003E   C095               RJMP    ??ecc_mul_1
    517                }
    518          
    519                if (clear_cofactor == true) {
   \                     ??ecc_mul_0:
   \   00000040   9701               SBIW    R25:R24, 1
   \   00000042   F421               BRNE    ??ecc_mul_2
    520                        cofactor_clearing(R);
   \   00000044   018E               MOVW    R17:R16, R29:R28
   \   00000046   5D0C               SUBI    R16, 220
   \   00000048   4F19               SBCI    R17, 249
   \   0000004A   ....               RCALL   cofactor_clearing
    521                }
    522                recode(scalars, digits, sign_masks);                      // Scalar recoding
   \                     ??ecc_mul_2:
   \   0000004C   01AE               MOVW    R21:R20, R29:R28
   \   0000004E   5840               SUBI    R20, 128
   \   00000050   4F5F               SBCI    R21, 255
   \   00000052   019E               MOVW    R19:R18, R29:R28
   \   00000054   5F2E               SUBI    R18, 254
   \   00000056   4F3E               SBCI    R19, 254
   \   00000058   018E               MOVW    R17:R16, R29:R28
   \   0000005A   570C               SUBI    R16, 124
   \   0000005C   4F1E               SBCI    R17, 254
   \   0000005E   ....               RCALL   recode
    523                ecc_precomp(R, Table);                                    // Precomputation
   \   00000060   019E               MOVW    R19:R18, R29:R28
   \   00000062   552C               SUBI    R18, 92
   \   00000064   4F3E               SBCI    R19, 254
   \   00000066   018E               MOVW    R17:R16, R29:R28
   \   00000068   5D0C               SUBI    R16, 220
   \   0000006A   4F19               SBCI    R17, 249
   \   0000006C   ....               RCALL   ecc_precomp
    524                table_lookup_1x8(Table, S, digits[64], sign_masks[64]);   // Extract initial point in (X+Y,Y-X,2Z,2dT) representation
   \   0000006E   01FE               MOVW    R31:R30, R29:R28
   \   00000070   95F3               INC     R31
   \   00000072   8160               LD      R22, Z
   \   00000074   8171               LDD     R23, Z+1
   \   00000076   2FFD               MOV     R31, R29
   \   00000078   57EE               SUBI    R30, 126
   \   0000007A   4FFE               SBCI    R31, 254
   \   0000007C   8140               LD      R20, Z
   \   0000007E   8151               LDD     R21, Z+1
   \   00000080   019E               MOVW    R19:R18, R29:R28
   \   00000082   552C               SUBI    R18, 92
   \   00000084   4F3A               SBCI    R19, 250
   \   00000086   018E               MOVW    R17:R16, R29:R28
   \   00000088   550C               SUBI    R16, 92
   \   0000008A   4F1E               SBCI    R17, 254
   \   0000008C   ........           CALL    table_lookup_1x8
    525                R2_to_R4(S, R);                                           // Conversion to representation (2X,2Y,2Z)
   \   00000090   01AE               MOVW    R21:R20, R29:R28
   \   00000092   5D4C               SUBI    R20, 220
   \   00000094   4F59               SBCI    R21, 249
   \   00000096   019E               MOVW    R19:R18, R29:R28
   \   00000098   532C               SUBI    R18, 60
   \   0000009A   4F3A               SBCI    R19, 250
   \   0000009C   018E               MOVW    R17:R16, R29:R28
   \   0000009E   550C               SUBI    R16, 92
   \   000000A0   4F1A               SBCI    R17, 250
   \   000000A2   ........           CALL    fpsub1271
   \   000000A6   01AE               MOVW    R21:R20, R29:R28
   \   000000A8   5C4C               SUBI    R20, 204
   \   000000AA   4F59               SBCI    R21, 249
   \   000000AC   019E               MOVW    R19:R18, R29:R28
   \   000000AE   522C               SUBI    R18, 44
   \   000000B0   4F3A               SBCI    R19, 250
   \   000000B2   018E               MOVW    R17:R16, R29:R28
   \   000000B4   540C               SUBI    R16, 76
   \   000000B6   4F1A               SBCI    R17, 250
   \   000000B8   ........           CALL    fpsub1271
   \   000000BC   01AE               MOVW    R21:R20, R29:R28
   \   000000BE   5B4C               SUBI    R20, 188
   \   000000C0   4F59               SBCI    R21, 249
   \   000000C2   019E               MOVW    R19:R18, R29:R28
   \   000000C4   532C               SUBI    R18, 60
   \   000000C6   4F3A               SBCI    R19, 250
   \   000000C8   018E               MOVW    R17:R16, R29:R28
   \   000000CA   550C               SUBI    R16, 92
   \   000000CC   4F1A               SBCI    R17, 250
   \   000000CE   ........           CALL    fpadd1271
   \   000000D2   01AE               MOVW    R21:R20, R29:R28
   \   000000D4   5A4C               SUBI    R20, 172
   \   000000D6   4F59               SBCI    R21, 249
   \   000000D8   019E               MOVW    R19:R18, R29:R28
   \   000000DA   522C               SUBI    R18, 44
   \   000000DC   4F3A               SBCI    R19, 250
   \   000000DE   018E               MOVW    R17:R16, R29:R28
   \   000000E0   540C               SUBI    R16, 76
   \   000000E2   4F1A               SBCI    R17, 250
   \   000000E4   ........           CALL    fpadd1271
   \   000000E8   019E               MOVW    R19:R18, R29:R28
   \   000000EA   592C               SUBI    R18, 156
   \   000000EC   4F39               SBCI    R19, 249
   \   000000EE   018E               MOVW    R17:R16, R29:R28
   \   000000F0   510C               SUBI    R16, 28
   \   000000F2   4F1A               SBCI    R17, 250
   \   000000F4   ........           CALL    fpcopy1271
   \   000000F8   019E               MOVW    R19:R18, R29:R28
   \   000000FA   582C               SUBI    R18, 140
   \   000000FC   4F39               SBCI    R19, 249
   \   000000FE   018E               MOVW    R17:R16, R29:R28
   \   00000100   500C               SUBI    R16, 12
   \   00000102   4F1A               SBCI    R17, 250
   \   00000104   ........           CALL    fpcopy1271
    526          
    527                for (i = 63; i >= 0; i--)
   \   00000108   01CE               MOVW    R25:R24, R29:R28
   \   0000010A   5082               SUBI    R24, 2
   \   0000010C   4F9F               SBCI    R25, 255
   \   0000010E   01DE               MOVW    R27:R26, R29:R28
   \   00000110   58A0               SUBI    R26, 128
   \   00000112   4FBE               SBCI    R27, 254
   \   00000114   E400               LDI     R16, 64
   \   00000116   2E60               MOV     R6, R16
    528                {
    529                        table_lookup_1x8(Table, S, digits[i], sign_masks[i]); // Extract point S in (X+Y,Y-X,2Z,2dT) representation
   \                     ??ecc_mul_3:
   \   00000118   01FC               MOVW    R31:R30, R25:R24
   \   0000011A   8160               LD      R22, Z
   \   0000011C   8171               LDD     R23, Z+1
   \   0000011E   914D               LD      R20, X+
   \   00000120   915C               LD      R21, X
   \   00000122   9713               SBIW    R27:R26, 3
   \   00000124   019E               MOVW    R19:R18, R29:R28
   \   00000126   552C               SUBI    R18, 92
   \   00000128   4F3A               SBCI    R19, 250
   \   0000012A   018E               MOVW    R17:R16, R29:R28
   \   0000012C   550C               SUBI    R16, 92
   \   0000012E   4F1E               SBCI    R17, 254
   \   00000130   ........           CALL    table_lookup_1x8
    530                        eccdouble(R);                                         // P = 2*P using representations (X,Y,Z,Ta,Tb) <- 2*(X,Y,Z)
   \   00000134   018E               MOVW    R17:R16, R29:R28
   \   00000136   5D0C               SUBI    R16, 220
   \   00000138   4F19               SBCI    R17, 249
   \   0000013A   ....               RCALL   eccdouble
    531                        eccadd(S, R);                                         // P = P+S using representations (X,Y,Z,Ta,Tb) <- (X,Y,Z,Ta,Tb) + (X+Y,Y-X,2Z,2dT)
   \   0000013C   019E               MOVW    R19:R18, R29:R28
   \   0000013E   018E               MOVW    R17:R16, R29:R28
   \   00000140   5D0C               SUBI    R16, 220
   \   00000142   4F19               SBCI    R17, 249
   \   00000144   ....               RCALL   R1_to_R3
   \   00000146   01AE               MOVW    R21:R20, R29:R28
   \   00000148   5D4C               SUBI    R20, 220
   \   0000014A   4F59               SBCI    R21, 249
   \   0000014C   019E               MOVW    R19:R18, R29:R28
   \   0000014E   018E               MOVW    R17:R16, R29:R28
   \   00000150   550C               SUBI    R16, 92
   \   00000152   4F1A               SBCI    R17, 250
   \   00000154   ........           CALL    eccadd_core
    532                }
   \   00000158   9702               SBIW    R25:R24, 2
   \   0000015A   946A               DEC     R6
   \   0000015C   F6E9               BRNE    ??ecc_mul_3
    533                eccnorm(R, Q);                                            // Conversion to affine coordinates (x,y) and modular correction. 
   \   0000015E   0192               MOVW    R19:R18, R5:R4
   \   00000160   018E               MOVW    R17:R16, R29:R28
   \   00000162   5D0C               SUBI    R16, 220
   \   00000164   4F19               SBCI    R17, 249
   \   00000166   ....               RCALL   eccnorm
    534          
    535            return true;
   \   00000168   E001               LDI     R16, 1
   \                     ??ecc_mul_1:
   \   0000016A   E010               LDI     R17, 0
   \   0000016C   96EF               ADIW    R29:R28, 63
   \   0000016E   96EF               ADIW    R29:R28, 63
   \   00000170   96EF               ADIW    R29:R28, 63
   \   00000172   9627               ADIW    R29:R28, 7
   \   00000174   5FDA               SUBI    R29, 250
   \   00000176   9189               LD      R24, Y+
   \   00000178   9199               LD      R25, Y+
   \   0000017A   91A9               LD      R26, Y+
   \   0000017C   91B9               LD      R27, Y+
   \   0000017E   9049               LD      R4, Y+
   \   00000180   9059               LD      R5, Y+
   \   00000182   9069               LD      R6, Y+
   \   00000184   9508               RET
    536          }
    537          
    538          #endif
    539          
    540          

   \                                 In  segment FARCODE, align 2, keep-with-next
    541          void eccset(point_t P)
   \                     eccset:
    542          { // Set generator  
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   01C8               MOVW    R25:R24, R17:R16
    543            // Output: P = (x,y)
    544          
    545                fp2copy1271((felm_t*)&GENERATOR_x, P->x);    // X1
   \   00000006   0198               MOVW    R19:R18, R17:R16
   \   00000008   ....               LDI     R16, LOW(GENERATOR_x)
   \   0000000A   ....               LDI     R17, (GENERATOR_x) >> 8
   \   0000000C   ........           CALL    fpcopy1271
   \   00000010   019C               MOVW    R19:R18, R25:R24
   \   00000012   5F20               SUBI    R18, 240
   \   00000014   4F3F               SBCI    R19, 255
   \   00000016   ....               LDI     R16, LOW((GENERATOR_x + 16))
   \   00000018   ....               LDI     R17, HIGH((GENERATOR_x + 16))
   \   0000001A   ........           CALL    fpcopy1271
    546                fp2copy1271((felm_t*)&GENERATOR_y, P->y);    // Y1
   \   0000001E   9680               ADIW    R25:R24, 32
   \   00000020   019C               MOVW    R19:R18, R25:R24
   \   00000022   ....               LDI     R16, LOW((GENERATOR_x + 32))
   \   00000024   ....               LDI     R17, HIGH((GENERATOR_x + 32))
   \   00000026   ........           CALL    fpcopy1271
   \   0000002A   9640               ADIW    R25:R24, 16
   \   0000002C   019C               MOVW    R19:R18, R25:R24
   \   0000002E   ....               LDI     R16, LOW((GENERATOR_x + 48))
   \   00000030   ....               LDI     R17, HIGH((GENERATOR_x + 48))
   \   00000032   ........           CALL    fpcopy1271
    547          }
   \   00000036   9189               LD      R24, Y+
   \   00000038   9199               LD      R25, Y+
   \   0000003A   9508               RET
    548          
    549          

   \                                 In  segment FARCODE, align 2, keep-with-next
    550          void eccnorm(point_extproj_t P, point_t Q)
   \                     eccnorm:
    551          { // Normalize a projective point (X1:Y1:Z1), including full reduction
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   939A               ST      -Y, R25
   \   00000006   938A               ST      -Y, R24
   \   00000008   01D8               MOVW    R27:R26, R17:R16
   \   0000000A   01C9               MOVW    R25:R24, R19:R18
    552            // Input: P = (X1:Y1:Z1) in twisted Edwards coordinates    
    553            // Output: Q = (X1/Z1,Y1/Z1), corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates
    554              
    555              fp2inv1271(P->z);                      // Z1 = Z1^-1
   \   0000000C   5C00               SUBI    R16, 192
   \   0000000E   4F1F               SBCI    R17, 255
   \   00000010   ........           CALL    fp2inv1271
    556              fp2mul1271(P->x, P->z, Q->x);          // X1 = X1/Z1
   \   00000014   01AC               MOVW    R21:R20, R25:R24
   \   00000016   019D               MOVW    R19:R18, R27:R26
   \   00000018   5C20               SUBI    R18, 192
   \   0000001A   4F3F               SBCI    R19, 255
   \   0000001C   018D               MOVW    R17:R16, R27:R26
   \   0000001E   ........           CALL    fp2mul1271
    557              fp2mul1271(P->y, P->z, Q->y);          // Y1 = Y1/Z1
   \   00000022   01AC               MOVW    R21:R20, R25:R24
   \   00000024   5E40               SUBI    R20, 224
   \   00000026   4F5F               SBCI    R21, 255
   \   00000028   019D               MOVW    R19:R18, R27:R26
   \   0000002A   5C20               SUBI    R18, 192
   \   0000002C   4F3F               SBCI    R19, 255
   \   0000002E   9690               ADIW    R27:R26, 32
   \   00000030   018D               MOVW    R17:R16, R27:R26
   \   00000032   ........           CALL    fp2mul1271
    558              mod1271(Q->x[0]); mod1271(Q->x[1]); 
   \   00000036   018C               MOVW    R17:R16, R25:R24
   \   00000038   ........           CALL    mod1271
   \   0000003C   018C               MOVW    R17:R16, R25:R24
   \   0000003E   5F00               SUBI    R16, 240
   \   00000040   4F1F               SBCI    R17, 255
   \   00000042   ........           CALL    mod1271
    559              mod1271(Q->y[0]); mod1271(Q->y[1]); 
   \   00000046   018C               MOVW    R17:R16, R25:R24
   \   00000048   5E00               SUBI    R16, 224
   \   0000004A   4F1F               SBCI    R17, 255
   \   0000004C   ........           CALL    mod1271
   \   00000050   96C0               ADIW    R25:R24, 48
   \   00000052   018C               MOVW    R17:R16, R25:R24
   \   00000054   ........           CALL    mod1271
    560          }
   \   00000058   ........           JMP     ??Subroutine13_0
    561          
    562          

   \                                 In  segment FARCODE, align 2, keep-with-next
    563          void R1_to_R2(point_extproj_t P, point_extproj_precomp_t Q)
   \                     R1_to_R2:
    564          { // Conversion from representation (X,Y,Z,Ta,Tb) to (X+Y,Y-X,2Z,2dT), where T = Ta*Tb
   \   00000000   929A               ST      -Y, R9
   \   00000002   928A               ST      -Y, R8
   \   00000004   927A               ST      -Y, R7
   \   00000006   926A               ST      -Y, R6
   \   00000008   925A               ST      -Y, R5
   \   0000000A   924A               ST      -Y, R4
   \   0000000C   93BA               ST      -Y, R27
   \   0000000E   93AA               ST      -Y, R26
   \   00000010   939A               ST      -Y, R25
   \   00000012   938A               ST      -Y, R24
   \   00000014                      REQUIRE ?Register_R4_is_cg_reg
   \   00000014                      REQUIRE ?Register_R5_is_cg_reg
   \   00000014                      REQUIRE ?Register_R6_is_cg_reg
   \   00000014                      REQUIRE ?Register_R7_is_cg_reg
   \   00000014                      REQUIRE ?Register_R8_is_cg_reg
   \   00000014                      REQUIRE ?Register_R9_is_cg_reg
   \   00000014   01C8               MOVW    R25:R24, R17:R16
   \   00000016   01D9               MOVW    R27:R26, R19:R18
    565            // Input:  P = (X1,Y1,Z1,Ta,Tb), where T1 = Ta*Tb, corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates
    566            // Output: Q = (X1+Y1,Y1-X1,2Z1,2dT1) corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates
    567          
    568              fp2add1271(P->ta, P->ta, Q->t2);                  // T = 2*Ta
   \   00000018   0129               MOVW    R5:R4, R19:R18
   \   0000001A   E600               LDI     R16, 96
   \   0000001C   0E40               ADD     R4, R16
   \   0000001E   E000               LDI     R16, 0
   \   00000020   1E50               ADC     R5, R16
   \   00000022   013C               MOVW    R7:R6, R25:R24
   \   00000024   E600               LDI     R16, 96
   \   00000026   0E60               ADD     R6, R16
   \   00000028   E000               LDI     R16, 0
   \   0000002A   1E70               ADC     R7, R16
   \   0000002C   01A2               MOVW    R21:R20, R5:R4
   \   0000002E   0193               MOVW    R19:R18, R7:R6
   \   00000030   0183               MOVW    R17:R16, R7:R6
   \   00000032   ........           CALL    fpadd1271
   \   00000036   01A2               MOVW    R21:R20, R5:R4
   \   00000038   5F40               SUBI    R20, 240
   \   0000003A   4F5F               SBCI    R21, 255
   \   0000003C   0193               MOVW    R19:R18, R7:R6
   \   0000003E   5F20               SUBI    R18, 240
   \   00000040   4F3F               SBCI    R19, 255
   \   00000042   E100               LDI     R16, 16
   \   00000044   0E60               ADD     R6, R16
   \   00000046   E000               LDI     R16, 0
   \   00000048   1E70               ADC     R7, R16
   \   0000004A   0183               MOVW    R17:R16, R7:R6
   \   0000004C   ........           CALL    fpadd1271
    569              fp2add1271(P->x, P->y, Q->xy);                    // QX = X+Y
   \   00000050   013C               MOVW    R7:R6, R25:R24
   \   00000052   E200               LDI     R16, 32
   \   00000054   0E60               ADD     R6, R16
   \   00000056   E000               LDI     R16, 0
   \   00000058   1E70               ADC     R7, R16
   \   0000005A   01AD               MOVW    R21:R20, R27:R26
   \   0000005C   0193               MOVW    R19:R18, R7:R6
   \   0000005E   018C               MOVW    R17:R16, R25:R24
   \   00000060   ........           CALL    fpadd1271
   \   00000064   01AD               MOVW    R21:R20, R27:R26
   \   00000066   5F40               SUBI    R20, 240
   \   00000068   4F5F               SBCI    R21, 255
   \   0000006A   E100               LDI     R16, 16
   \   0000006C   0E60               ADD     R6, R16
   \   0000006E   E000               LDI     R16, 0
   \   00000070   1E70               ADC     R7, R16
   \   00000072   0193               MOVW    R19:R18, R7:R6
   \   00000074   018C               MOVW    R17:R16, R25:R24
   \   00000076   5F00               SUBI    R16, 240
   \   00000078   4F1F               SBCI    R17, 255
   \   0000007A   ........           CALL    fpadd1271
    570              fp2sub1271(P->y, P->x, Q->yx);                    // QY = Y-X 
   \   0000007E   014D               MOVW    R9:R8, R27:R26
   \   00000080   E200               LDI     R16, 32
   \   00000082   0E80               ADD     R8, R16
   \   00000084   E000               LDI     R16, 0
   \   00000086   1E90               ADC     R9, R16
   \   00000088   013C               MOVW    R7:R6, R25:R24
   \   0000008A   E200               LDI     R16, 32
   \   0000008C   0E60               ADD     R6, R16
   \   0000008E   E000               LDI     R16, 0
   \   00000090   1E70               ADC     R7, R16
   \   00000092   01A4               MOVW    R21:R20, R9:R8
   \   00000094   019C               MOVW    R19:R18, R25:R24
   \   00000096   0183               MOVW    R17:R16, R7:R6
   \   00000098   ........           CALL    fpsub1271
   \   0000009C   E100               LDI     R16, 16
   \   0000009E   0E80               ADD     R8, R16
   \   000000A0   E000               LDI     R16, 0
   \   000000A2   1E90               ADC     R9, R16
   \   000000A4   01A4               MOVW    R21:R20, R9:R8
   \   000000A6   019C               MOVW    R19:R18, R25:R24
   \   000000A8   5F20               SUBI    R18, 240
   \   000000AA   4F3F               SBCI    R19, 255
   \   000000AC   E100               LDI     R16, 16
   \   000000AE   0E60               ADD     R6, R16
   \   000000B0   E000               LDI     R16, 0
   \   000000B2   1E70               ADC     R7, R16
   \   000000B4   0183               MOVW    R17:R16, R7:R6
   \   000000B6   ........           CALL    fpsub1271
    571              fp2mul1271(Q->t2, P->tb, Q->t2);                  // T = 2*T
   \   000000BA   01A2               MOVW    R21:R20, R5:R4
   \   000000BC   019C               MOVW    R19:R18, R25:R24
   \   000000BE   5820               SUBI    R18, 128
   \   000000C0   4F3F               SBCI    R19, 255
   \   000000C2   0182               MOVW    R17:R16, R5:R4
   \   000000C4   ....               RCALL   fp2mul1271
    572              fp2add1271(P->z, P->z, Q->z2);                    // QZ = 2*Z
   \   000000C6   5CA0               SUBI    R26, 192
   \   000000C8   4FBF               SBCI    R27, 255
   \   000000CA   5C80               SUBI    R24, 192
   \   000000CC   4F9F               SBCI    R25, 255
   \   000000CE   01AD               MOVW    R21:R20, R27:R26
   \   000000D0   019C               MOVW    R19:R18, R25:R24
   \   000000D2   018C               MOVW    R17:R16, R25:R24
   \   000000D4   ........           CALL    fpadd1271
   \   000000D8   9650               ADIW    R27:R26, 16
   \   000000DA   01AD               MOVW    R21:R20, R27:R26
   \   000000DC   019C               MOVW    R19:R18, R25:R24
   \   000000DE   5F20               SUBI    R18, 240
   \   000000E0   4F3F               SBCI    R19, 255
   \   000000E2   9640               ADIW    R25:R24, 16
   \   000000E4   018C               MOVW    R17:R16, R25:R24
   \   000000E6   ........           CALL    fpadd1271
    573              fp2mul1271(Q->t2, (felm_t*)&PARAMETER_d, Q->t2);  // QT = 2d*T
   \   000000EA   01A2               MOVW    R21:R20, R5:R4
   \   000000EC   ....               LDI     R18, LOW(PARAMETER_d)
   \   000000EE   ....               LDI     R19, (PARAMETER_d) >> 8
   \   000000F0   0182               MOVW    R17:R16, R5:R4
   \   000000F2   ....               RCALL   fp2mul1271
    574          }
   \   000000F4   ....               RJMP    ?Subroutine3
    575          
    576          

   \                                 In  segment FARCODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   5CA0               SUBI    R26, 192
   \   00000002   4FBF               SBCI    R27, 255
   \   00000004   5C80               SUBI    R24, 192
   \   00000006   4F9F               SBCI    R25, 255
   \   00000008                      REQUIRE ??Subroutine11_0
   \   00000008                      ;               // Fall through to label ??Subroutine11_0

   \                                 In  segment FARCODE, align 2, keep-with-next
   \                     ??Subroutine11_0:
   \   00000000   019D               MOVW    R19:R18, R27:R26
   \   00000002   018C               MOVW    R17:R16, R25:R24
   \   00000004   ........           CALL    fpcopy1271
   \   00000008   9650               ADIW    R27:R26, 16
   \   0000000A   019D               MOVW    R19:R18, R27:R26
   \   0000000C   9640               ADIW    R25:R24, 16
   \   0000000E   018C               MOVW    R17:R16, R25:R24
   \   00000010   ........           CALL    fpcopy1271
   \   00000014                      REQUIRE ??Subroutine12_0
   \   00000014                      ;               // Fall through to label ??Subroutine12_0

   \                                 In  segment FARCODE, align 2, keep-with-next
    577          __inline void R1_to_R3(point_extproj_t P, point_extproj_precomp_t Q)      
   \                     R1_to_R3:
    578          { // Conversion from representation (X,Y,Z,Ta,Tb) to (X+Y,Y-X,Z,T), where T = Ta*Tb 
   \   00000000   927A               ST      -Y, R7
   \   00000002   926A               ST      -Y, R6
   \   00000004   925A               ST      -Y, R5
   \   00000006   924A               ST      -Y, R4
   \   00000008   93BA               ST      -Y, R27
   \   0000000A   93AA               ST      -Y, R26
   \   0000000C   939A               ST      -Y, R25
   \   0000000E   938A               ST      -Y, R24
   \   00000010                      REQUIRE ?Register_R4_is_cg_reg
   \   00000010                      REQUIRE ?Register_R5_is_cg_reg
   \   00000010                      REQUIRE ?Register_R6_is_cg_reg
   \   00000010                      REQUIRE ?Register_R7_is_cg_reg
   \   00000010   01C8               MOVW    R25:R24, R17:R16
   \   00000012   01D9               MOVW    R27:R26, R19:R18
    579            // Input:  P = (X1,Y1,Z1,Ta,Tb), where T1 = Ta*Tb, corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates
    580            // Output: Q = (X1+Y1,Y1-X1,Z1,T1) corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates 
    581              
    582              fp2add1271(P->x, P->y, Q->xy);         // XQ = (X1+Y1) 
   \   00000014   0128               MOVW    R5:R4, R17:R16
   \   00000016   E200               LDI     R16, 32
   \   00000018   0E40               ADD     R4, R16
   \   0000001A   E000               LDI     R16, 0
   \   0000001C   1E50               ADC     R5, R16
   \   0000001E   01A9               MOVW    R21:R20, R19:R18
   \   00000020   0192               MOVW    R19:R18, R5:R4
   \   00000022   2F08               MOV     R16, R24
   \   00000024   ........           CALL    fpadd1271
   \   00000028   01AD               MOVW    R21:R20, R27:R26
   \   0000002A   5F40               SUBI    R20, 240
   \   0000002C   4F5F               SBCI    R21, 255
   \   0000002E   E100               LDI     R16, 16
   \   00000030   0E40               ADD     R4, R16
   \   00000032   E000               LDI     R16, 0
   \   00000034   1E50               ADC     R5, R16
   \   00000036   0192               MOVW    R19:R18, R5:R4
   \   00000038   018C               MOVW    R17:R16, R25:R24
   \   0000003A   5F00               SUBI    R16, 240
   \   0000003C   4F1F               SBCI    R17, 255
   \   0000003E   ........           CALL    fpadd1271
    583              fp2sub1271(P->y, P->x, Q->yx);         // YQ = (Y1-X1) 
   \   00000042   013D               MOVW    R7:R6, R27:R26
   \   00000044   E200               LDI     R16, 32
   \   00000046   0E60               ADD     R6, R16
   \   00000048   E000               LDI     R16, 0
   \   0000004A   1E70               ADC     R7, R16
   \   0000004C   012C               MOVW    R5:R4, R25:R24
   \   0000004E   E200               LDI     R16, 32
   \   00000050   0E40               ADD     R4, R16
   \   00000052   E000               LDI     R16, 0
   \   00000054   1E50               ADC     R5, R16
   \   00000056   01A3               MOVW    R21:R20, R7:R6
   \   00000058   019C               MOVW    R19:R18, R25:R24
   \   0000005A   0182               MOVW    R17:R16, R5:R4
   \   0000005C   ........           CALL    fpsub1271
   \   00000060   E100               LDI     R16, 16
   \   00000062   0E60               ADD     R6, R16
   \   00000064   E000               LDI     R16, 0
   \   00000066   1E70               ADC     R7, R16
   \   00000068   01A3               MOVW    R21:R20, R7:R6
   \   0000006A   019C               MOVW    R19:R18, R25:R24
   \   0000006C   5F20               SUBI    R18, 240
   \   0000006E   4F3F               SBCI    R19, 255
   \   00000070   E100               LDI     R16, 16
   \   00000072   0E40               ADD     R4, R16
   \   00000074   E000               LDI     R16, 0
   \   00000076   1E50               ADC     R5, R16
   \   00000078   0182               MOVW    R17:R16, R5:R4
   \   0000007A   ........           CALL    fpsub1271
    584              fp2mul1271(P->ta, P->tb, Q->t2);       // TQ = T1
   \   0000007E   01AD               MOVW    R21:R20, R27:R26
   \   00000080   5A40               SUBI    R20, 160
   \   00000082   4F5F               SBCI    R21, 255
   \   00000084   019C               MOVW    R19:R18, R25:R24
   \   00000086   5820               SUBI    R18, 128
   \   00000088   4F3F               SBCI    R19, 255
   \   0000008A   018C               MOVW    R17:R16, R25:R24
   \   0000008C   5A00               SUBI    R16, 160
   \   0000008E   4F1F               SBCI    R17, 255
   \   00000090   ....               RCALL   fp2mul1271
    585              fp2copy1271(P->z, Q->z2);              // ZQ = Z1 
   \   00000092   ........           JMP     ?Subroutine0
    586          }
    587          
    588          

   \                                 In  segment FARCODE, align 2, keep-with-next
    589          void R2_to_R4(point_extproj_precomp_t P, point_extproj_t Q)      
   \                     R2_to_R4:
    590          { // Conversion from representation (X+Y,Y-X,2Z,2dT) to (2X,2Y,2Z,2dT) 
   \   00000000   927A               ST      -Y, R7
   \   00000002   926A               ST      -Y, R6
   \   00000004   925A               ST      -Y, R5
   \   00000006   924A               ST      -Y, R4
   \   00000008   93BA               ST      -Y, R27
   \   0000000A   93AA               ST      -Y, R26
   \   0000000C   939A               ST      -Y, R25
   \   0000000E   938A               ST      -Y, R24
   \   00000010                      REQUIRE ?Register_R4_is_cg_reg
   \   00000010                      REQUIRE ?Register_R5_is_cg_reg
   \   00000010                      REQUIRE ?Register_R6_is_cg_reg
   \   00000010                      REQUIRE ?Register_R7_is_cg_reg
   \   00000010   01C8               MOVW    R25:R24, R17:R16
   \   00000012   01D9               MOVW    R27:R26, R19:R18
    591            // Input:  P = (X1+Y1,Y1-X1,2Z1,2dT1) corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates
    592            // Output: Q = (2X1,2Y1,2Z1) corresponding to (X1:Y1:Z1) in twisted Edwards coordinates 
    593              
    594              fp2sub1271(P->xy, P->yx, Q->x);        // XQ = 2*X1
   \   00000014   0128               MOVW    R5:R4, R17:R16
   \   00000016   E200               LDI     R16, 32
   \   00000018   0E40               ADD     R4, R16
   \   0000001A   E000               LDI     R16, 0
   \   0000001C   1E50               ADC     R5, R16
   \   0000001E   01A9               MOVW    R21:R20, R19:R18
   \   00000020   0192               MOVW    R19:R18, R5:R4
   \   00000022   2F08               MOV     R16, R24
   \   00000024   ........           CALL    fpsub1271
   \   00000028   01AD               MOVW    R21:R20, R27:R26
   \   0000002A   5F40               SUBI    R20, 240
   \   0000002C   4F5F               SBCI    R21, 255
   \   0000002E   E100               LDI     R16, 16
   \   00000030   0E40               ADD     R4, R16
   \   00000032   E000               LDI     R16, 0
   \   00000034   1E50               ADC     R5, R16
   \   00000036   0192               MOVW    R19:R18, R5:R4
   \   00000038   018C               MOVW    R17:R16, R25:R24
   \   0000003A   5F00               SUBI    R16, 240
   \   0000003C   4F1F               SBCI    R17, 255
   \   0000003E   ........           CALL    fpsub1271
    595              fp2add1271(P->xy, P->yx, Q->y);        // YQ = 2*Y1
   \   00000042   013D               MOVW    R7:R6, R27:R26
   \   00000044   E200               LDI     R16, 32
   \   00000046   0E60               ADD     R6, R16
   \   00000048   E000               LDI     R16, 0
   \   0000004A   1E70               ADC     R7, R16
   \   0000004C   012C               MOVW    R5:R4, R25:R24
   \   0000004E   E200               LDI     R16, 32
   \   00000050   0E40               ADD     R4, R16
   \   00000052   E000               LDI     R16, 0
   \   00000054   1E50               ADC     R5, R16
   \   00000056   01A3               MOVW    R21:R20, R7:R6
   \   00000058   0192               MOVW    R19:R18, R5:R4
   \   0000005A   018C               MOVW    R17:R16, R25:R24
   \   0000005C   ........           CALL    fpadd1271
   \   00000060   E100               LDI     R16, 16
   \   00000062   0E60               ADD     R6, R16
   \   00000064   E000               LDI     R16, 0
   \   00000066   1E70               ADC     R7, R16
   \   00000068   01A3               MOVW    R21:R20, R7:R6
   \   0000006A   E100               LDI     R16, 16
   \   0000006C   0E40               ADD     R4, R16
   \   0000006E   E000               LDI     R16, 0
   \   00000070   1E50               ADC     R5, R16
   \   00000072   0192               MOVW    R19:R18, R5:R4
   \   00000074   018C               MOVW    R17:R16, R25:R24
   \   00000076   5F00               SUBI    R16, 240
   \   00000078   4F1F               SBCI    R17, 255
   \   0000007A   ........           CALL    fpadd1271
    596              fp2copy1271(P->z2, Q->z);              // ZQ = 2*Z1
   \   0000007E   ........           JMP     ?Subroutine0
    597          }
    598          
    599          

   \                                 In  segment FARCODE, align 2, keep-with-next
    600          void eccdouble(point_extproj_t P)
   \                     eccdouble:
    601          { // Point doubling 2P
   \   00000000   927A               ST      -Y, R7
   \   00000002   926A               ST      -Y, R6
   \   00000004   925A               ST      -Y, R5
   \   00000006   924A               ST      -Y, R4
   \   00000008   93BA               ST      -Y, R27
   \   0000000A   93AA               ST      -Y, R26
   \   0000000C   939A               ST      -Y, R25
   \   0000000E   938A               ST      -Y, R24
   \   00000010                      REQUIRE ?Register_R4_is_cg_reg
   \   00000010                      REQUIRE ?Register_R5_is_cg_reg
   \   00000010                      REQUIRE ?Register_R6_is_cg_reg
   \   00000010                      REQUIRE ?Register_R7_is_cg_reg
   \   00000010   97EF               SBIW    R29:R28, 63
   \   00000012   97A1               SBIW    R29:R28, 33
   \   00000014   01C8               MOVW    R25:R24, R17:R16
    602            // Input: P = (X1:Y1:Z1) in twisted Edwards coordinates
    603            // Output: 2P = (Xfinal,Yfinal,Zfinal,Tafinal,Tbfinal), where Tfinal = Tafinal*Tbfinal,
    604            //         corresponding to (Xfinal:Yfinal:Zfinal:Tfinal) in extended twisted Edwards coordinates
    605              f2elm_t t1, t2;  
    606          
    607              fp2sqr1271(P->x, t1);                  // t1 = X1^2
   \   00000016   01AE               MOVW    R21:R20, R29:R28
   \   00000018   5B40               SUBI    R20, 176
   \   0000001A   4F5F               SBCI    R21, 255
   \   0000001C   0198               MOVW    R19:R18, R17:R16
   \   0000001E   5F20               SUBI    R18, 240
   \   00000020   4F3F               SBCI    R19, 255
   \   00000022   ........           CALL    fpadd1271
   \   00000026   01AE               MOVW    R21:R20, R29:R28
   \   00000028   5C40               SUBI    R20, 192
   \   0000002A   4F5F               SBCI    R21, 255
   \   0000002C   019C               MOVW    R19:R18, R25:R24
   \   0000002E   5F20               SUBI    R18, 240
   \   00000030   4F3F               SBCI    R19, 255
   \   00000032   018C               MOVW    R17:R16, R25:R24
   \   00000034   ........           CALL    fpsub1271
   \   00000038   01AE               MOVW    R21:R20, R29:R28
   \   0000003A   5D40               SUBI    R20, 208
   \   0000003C   4F5F               SBCI    R21, 255
   \   0000003E   019C               MOVW    R19:R18, R25:R24
   \   00000040   5F20               SUBI    R18, 240
   \   00000042   4F3F               SBCI    R19, 255
   \   00000044   018C               MOVW    R17:R16, R25:R24
   \   00000046   ........           CALL    mod_mul_dbl128
   \   0000004A   01AE               MOVW    R21:R20, R29:R28
   \   0000004C   5E40               SUBI    R20, 224
   \   0000004E   4F5F               SBCI    R21, 255
   \   00000050   019E               MOVW    R19:R18, R29:R28
   \   00000052   5C20               SUBI    R18, 192
   \   00000054   4F3F               SBCI    R19, 255
   \   00000056   018E               MOVW    R17:R16, R29:R28
   \   00000058   5B00               SUBI    R16, 176
   \   0000005A   4F1F               SBCI    R17, 255
   \   0000005C   ........           CALL    mod_mul128
    608              fp2sqr1271(P->y, t2);                  // t2 = Y1^2
   \   00000060   01DC               MOVW    R27:R26, R25:R24
   \   00000062   9690               ADIW    R27:R26, 32
   \   00000064   01AE               MOVW    R21:R20, R29:R28
   \   00000066   5B40               SUBI    R20, 176
   \   00000068   4F5F               SBCI    R21, 255
   \   0000006A   019D               MOVW    R19:R18, R27:R26
   \   0000006C   5F20               SUBI    R18, 240
   \   0000006E   4F3F               SBCI    R19, 255
   \   00000070   018D               MOVW    R17:R16, R27:R26
   \   00000072   ........           CALL    fpadd1271
   \   00000076   01AE               MOVW    R21:R20, R29:R28
   \   00000078   5C40               SUBI    R20, 192
   \   0000007A   4F5F               SBCI    R21, 255
   \   0000007C   019D               MOVW    R19:R18, R27:R26
   \   0000007E   5F20               SUBI    R18, 240
   \   00000080   4F3F               SBCI    R19, 255
   \   00000082   018D               MOVW    R17:R16, R27:R26
   \   00000084   ........           CALL    fpsub1271
   \   00000088   01AE               MOVW    R21:R20, R29:R28
   \   0000008A   5F40               SUBI    R20, 240
   \   0000008C   4F5F               SBCI    R21, 255
   \   0000008E   019D               MOVW    R19:R18, R27:R26
   \   00000090   5F20               SUBI    R18, 240
   \   00000092   4F3F               SBCI    R19, 255
   \   00000094   018D               MOVW    R17:R16, R27:R26
   \   00000096   ........           CALL    mod_mul_dbl128
   \   0000009A   01AE               MOVW    R21:R20, R29:R28
   \   0000009C   019E               MOVW    R19:R18, R29:R28
   \   0000009E   5C20               SUBI    R18, 192
   \   000000A0   4F3F               SBCI    R19, 255
   \   000000A2   018E               MOVW    R17:R16, R29:R28
   \   000000A4   5B00               SUBI    R16, 176
   \   000000A6   4F1F               SBCI    R17, 255
   \   000000A8   ........           CALL    mod_mul128
    609              fp2add1271(P->x, P->y, P->x);          // t3 = X1+Y1
   \   000000AC   01DC               MOVW    R27:R26, R25:R24
   \   000000AE   9690               ADIW    R27:R26, 32
   \   000000B0   01AC               MOVW    R21:R20, R25:R24
   \   000000B2   019D               MOVW    R19:R18, R27:R26
   \   000000B4   018C               MOVW    R17:R16, R25:R24
   \   000000B6   ........           CALL    fpadd1271
   \   000000BA   01AC               MOVW    R21:R20, R25:R24
   \   000000BC   5F40               SUBI    R20, 240
   \   000000BE   4F5F               SBCI    R21, 255
   \   000000C0   9650               ADIW    R27:R26, 16
   \   000000C2   019D               MOVW    R19:R18, R27:R26
   \   000000C4   018C               MOVW    R17:R16, R25:R24
   \   000000C6   5F00               SUBI    R16, 240
   \   000000C8   4F1F               SBCI    R17, 255
   \   000000CA   ........           CALL    fpadd1271
    610              fp2add1271(t1, t2, P->tb);             // Tbfinal = X1^2+Y1^2      
   \   000000CE   012C               MOVW    R5:R4, R25:R24
   \   000000D0   E800               LDI     R16, 128
   \   000000D2   0E40               ADD     R4, R16
   \   000000D4   E000               LDI     R16, 0
   \   000000D6   1E50               ADC     R5, R16
   \   000000D8   01A2               MOVW    R21:R20, R5:R4
   \   000000DA   019E               MOVW    R19:R18, R29:R28
   \   000000DC   018E               MOVW    R17:R16, R29:R28
   \   000000DE   5E00               SUBI    R16, 224
   \   000000E0   4F1F               SBCI    R17, 255
   \   000000E2   ........           CALL    fpadd1271
   \   000000E6   01A2               MOVW    R21:R20, R5:R4
   \   000000E8   5F40               SUBI    R20, 240
   \   000000EA   4F5F               SBCI    R21, 255
   \   000000EC   019E               MOVW    R19:R18, R29:R28
   \   000000EE   5F20               SUBI    R18, 240
   \   000000F0   4F3F               SBCI    R19, 255
   \   000000F2   018E               MOVW    R17:R16, R29:R28
   \   000000F4   5D00               SUBI    R16, 208
   \   000000F6   4F1F               SBCI    R17, 255
   \   000000F8   ........           CALL    fpadd1271
    611              fp2sub1271(t2, t1, t1);                // t1 = Y1^2-X1^2       
   \   000000FC   01AE               MOVW    R21:R20, R29:R28
   \   000000FE   5E40               SUBI    R20, 224
   \   00000100   4F5F               SBCI    R21, 255
   \   00000102   019E               MOVW    R19:R18, R29:R28
   \   00000104   5E20               SUBI    R18, 224
   \   00000106   4F3F               SBCI    R19, 255
   \   00000108   018E               MOVW    R17:R16, R29:R28
   \   0000010A   ........           CALL    fpsub1271
   \   0000010E   01AE               MOVW    R21:R20, R29:R28
   \   00000110   5D40               SUBI    R20, 208
   \   00000112   4F5F               SBCI    R21, 255
   \   00000114   019E               MOVW    R19:R18, R29:R28
   \   00000116   5D20               SUBI    R18, 208
   \   00000118   4F3F               SBCI    R19, 255
   \   0000011A   018E               MOVW    R17:R16, R29:R28
   \   0000011C   5F00               SUBI    R16, 240
   \   0000011E   4F1F               SBCI    R17, 255
   \   00000120   ........           CALL    fpsub1271
    612              fp2sqr1271(P->x, P->ta);               // Ta = (X1+Y1)^2 
   \   00000124   01DC               MOVW    R27:R26, R25:R24
   \   00000126   5AA0               SUBI    R26, 160
   \   00000128   4FBF               SBCI    R27, 255
   \   0000012A   01AE               MOVW    R21:R20, R29:R28
   \   0000012C   5B40               SUBI    R20, 176
   \   0000012E   4F5F               SBCI    R21, 255
   \   00000130   019C               MOVW    R19:R18, R25:R24
   \   00000132   5F20               SUBI    R18, 240
   \   00000134   4F3F               SBCI    R19, 255
   \   00000136   018C               MOVW    R17:R16, R25:R24
   \   00000138   ........           CALL    fpadd1271
   \   0000013C   01AE               MOVW    R21:R20, R29:R28
   \   0000013E   5C40               SUBI    R20, 192
   \   00000140   4F5F               SBCI    R21, 255
   \   00000142   019C               MOVW    R19:R18, R25:R24
   \   00000144   5F20               SUBI    R18, 240
   \   00000146   4F3F               SBCI    R19, 255
   \   00000148   018C               MOVW    R17:R16, R25:R24
   \   0000014A   ........           CALL    fpsub1271
   \   0000014E   01AD               MOVW    R21:R20, R27:R26
   \   00000150   5F40               SUBI    R20, 240
   \   00000152   4F5F               SBCI    R21, 255
   \   00000154   019C               MOVW    R19:R18, R25:R24
   \   00000156   5F20               SUBI    R18, 240
   \   00000158   4F3F               SBCI    R19, 255
   \   0000015A   018C               MOVW    R17:R16, R25:R24
   \   0000015C   ........           CALL    mod_mul_dbl128
   \   00000160   01AD               MOVW    R21:R20, R27:R26
   \   00000162   019E               MOVW    R19:R18, R29:R28
   \   00000164   5C20               SUBI    R18, 192
   \   00000166   4F3F               SBCI    R19, 255
   \   00000168   018E               MOVW    R17:R16, R29:R28
   \   0000016A   5B00               SUBI    R16, 176
   \   0000016C   4F1F               SBCI    R17, 255
   \   0000016E   ........           CALL    mod_mul128
    613              fp2sqr1271(P->z, t2);                  // t2 = Z1^2 
   \   00000172   013C               MOVW    R7:R6, R25:R24
   \   00000174   E400               LDI     R16, 64
   \   00000176   0E60               ADD     R6, R16
   \   00000178   E000               LDI     R16, 0
   \   0000017A   1E70               ADC     R7, R16
   \   0000017C   01AE               MOVW    R21:R20, R29:R28
   \   0000017E   5B40               SUBI    R20, 176
   \   00000180   4F5F               SBCI    R21, 255
   \   00000182   0193               MOVW    R19:R18, R7:R6
   \   00000184   5F20               SUBI    R18, 240
   \   00000186   4F3F               SBCI    R19, 255
   \   00000188   0183               MOVW    R17:R16, R7:R6
   \   0000018A   ........           CALL    fpadd1271
   \   0000018E   01AE               MOVW    R21:R20, R29:R28
   \   00000190   5C40               SUBI    R20, 192
   \   00000192   4F5F               SBCI    R21, 255
   \   00000194   0193               MOVW    R19:R18, R7:R6
   \   00000196   5F20               SUBI    R18, 240
   \   00000198   4F3F               SBCI    R19, 255
   \   0000019A   0183               MOVW    R17:R16, R7:R6
   \   0000019C   ........           CALL    fpsub1271
   \   000001A0   01AE               MOVW    R21:R20, R29:R28
   \   000001A2   5F40               SUBI    R20, 240
   \   000001A4   4F5F               SBCI    R21, 255
   \   000001A6   0193               MOVW    R19:R18, R7:R6
   \   000001A8   5F20               SUBI    R18, 240
   \   000001AA   4F3F               SBCI    R19, 255
   \   000001AC   0183               MOVW    R17:R16, R7:R6
   \   000001AE   ........           CALL    mod_mul_dbl128
   \   000001B2   01AE               MOVW    R21:R20, R29:R28
   \   000001B4   019E               MOVW    R19:R18, R29:R28
   \   000001B6   5C20               SUBI    R18, 192
   \   000001B8   4F3F               SBCI    R19, 255
   \   000001BA   018E               MOVW    R17:R16, R29:R28
   \   000001BC   5B00               SUBI    R16, 176
   \   000001BE   4F1F               SBCI    R17, 255
   \   000001C0   ........           CALL    mod_mul128
    614              fp2sub1271(P->ta, P->tb, P->ta);       // Tafinal = 2X1*Y1 = (X1+Y1)^2-(X1^2+Y1^2)  
   \   000001C4   01AD               MOVW    R21:R20, R27:R26
   \   000001C6   0192               MOVW    R19:R18, R5:R4
   \   000001C8   018D               MOVW    R17:R16, R27:R26
   \   000001CA   ........           CALL    fpsub1271
   \   000001CE   01AD               MOVW    R21:R20, R27:R26
   \   000001D0   5F40               SUBI    R20, 240
   \   000001D2   4F5F               SBCI    R21, 255
   \   000001D4   0192               MOVW    R19:R18, R5:R4
   \   000001D6   5F20               SUBI    R18, 240
   \   000001D8   4F3F               SBCI    R19, 255
   \   000001DA   018D               MOVW    R17:R16, R27:R26
   \   000001DC   5F00               SUBI    R16, 240
   \   000001DE   4F1F               SBCI    R17, 255
   \   000001E0   ........           CALL    fpsub1271
    615              fp2addsub1271(t2, t1, t2);             // t2 = 2Z1^2-(Y1^2-X1^2) 
   \   000001E4   01AE               MOVW    R21:R20, R29:R28
   \   000001E6   019E               MOVW    R19:R18, R29:R28
   \   000001E8   018E               MOVW    R17:R16, R29:R28
   \   000001EA   ........           CALL    fpadd1271
   \   000001EE   01AE               MOVW    R21:R20, R29:R28
   \   000001F0   5F40               SUBI    R20, 240
   \   000001F2   4F5F               SBCI    R21, 255
   \   000001F4   019E               MOVW    R19:R18, R29:R28
   \   000001F6   5F20               SUBI    R18, 240
   \   000001F8   4F3F               SBCI    R19, 255
   \   000001FA   018E               MOVW    R17:R16, R29:R28
   \   000001FC   5F00               SUBI    R16, 240
   \   000001FE   4F1F               SBCI    R17, 255
   \   00000200   ........           CALL    fpadd1271
   \   00000204   01AE               MOVW    R21:R20, R29:R28
   \   00000206   019E               MOVW    R19:R18, R29:R28
   \   00000208   5E20               SUBI    R18, 224
   \   0000020A   4F3F               SBCI    R19, 255
   \   0000020C   018E               MOVW    R17:R16, R29:R28
   \   0000020E   ........           CALL    fpsub1271
   \   00000212   01AE               MOVW    R21:R20, R29:R28
   \   00000214   5F40               SUBI    R20, 240
   \   00000216   4F5F               SBCI    R21, 255
   \   00000218   019E               MOVW    R19:R18, R29:R28
   \   0000021A   5D20               SUBI    R18, 208
   \   0000021C   4F3F               SBCI    R19, 255
   \   0000021E   018E               MOVW    R17:R16, R29:R28
   \   00000220   5F00               SUBI    R16, 240
   \   00000222   4F1F               SBCI    R17, 255
   \   00000224   ........           CALL    fpsub1271
    616              fp2mul1271(t1, P->tb, P->y);           // Yfinal = (X1^2+Y1^2)(Y1^2-X1^2)  
   \   00000228   01AC               MOVW    R21:R20, R25:R24
   \   0000022A   5E40               SUBI    R20, 224
   \   0000022C   4F5F               SBCI    R21, 255
   \   0000022E   0192               MOVW    R19:R18, R5:R4
   \   00000230   018E               MOVW    R17:R16, R29:R28
   \   00000232   5E00               SUBI    R16, 224
   \   00000234   4F1F               SBCI    R17, 255
   \   00000236   ........           CALL    fp2mul1271
    617              fp2mul1271(t2, P->ta, P->x);           // Xfinal = 2X1*Y1*[2Z1^2-(Y1^2-X1^2)]
   \   0000023A   01AC               MOVW    R21:R20, R25:R24
   \   0000023C   019D               MOVW    R19:R18, R27:R26
   \   0000023E   018E               MOVW    R17:R16, R29:R28
   \   00000240   ........           CALL    fp2mul1271
    618              fp2mul1271(t1, t2, P->z);              // Zfinal = (Y1^2-X1^2)[2Z1^2-(Y1^2-X1^2)]
   \   00000244   01A3               MOVW    R21:R20, R7:R6
   \   00000246   019E               MOVW    R19:R18, R29:R28
   \   00000248   018E               MOVW    R17:R16, R29:R28
   \   0000024A   5E00               SUBI    R16, 224
   \   0000024C   4F1F               SBCI    R17, 255
   \   0000024E   ........           JMP     ?Subroutine10
    619          }
    620          
    621          

   \                                 In  segment FARCODE, align 2, keep-with-next
    622          __inline void eccadd_core(point_extproj_precomp_t P, point_extproj_precomp_t Q, point_extproj_t R)      
   \                     eccadd_core:
    623          { // Basic point addition R = P+Q or R = P+P
   \   00000000   929A               ST      -Y, R9
   \   00000002   928A               ST      -Y, R8
   \   00000004   927A               ST      -Y, R7
   \   00000006   926A               ST      -Y, R6
   \   00000008   925A               ST      -Y, R5
   \   0000000A   924A               ST      -Y, R4
   \   0000000C   93BA               ST      -Y, R27
   \   0000000E   93AA               ST      -Y, R26
   \   00000010   939A               ST      -Y, R25
   \   00000012   938A               ST      -Y, R24
   \   00000014                      REQUIRE ?Register_R4_is_cg_reg
   \   00000014                      REQUIRE ?Register_R5_is_cg_reg
   \   00000014                      REQUIRE ?Register_R6_is_cg_reg
   \   00000014                      REQUIRE ?Register_R7_is_cg_reg
   \   00000014                      REQUIRE ?Register_R8_is_cg_reg
   \   00000014                      REQUIRE ?Register_R9_is_cg_reg
   \   00000014   97EF               SBIW    R29:R28, 63
   \   00000016   9721               SBIW    R29:R28, 1
   \   00000018   0128               MOVW    R5:R4, R17:R16
   \   0000001A   01D9               MOVW    R27:R26, R19:R18
   \   0000001C   01CA               MOVW    R25:R24, R21:R20
    624            // Inputs: P = (X1+Y1,Y1-X1,2Z1,2dT1) corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates
    625            //         Q = (X2+Y2,Y2-X2,Z2,T2) corresponding to (X2:Y2:Z2:T2) in extended twisted Edwards coordinates    
    626            // Output: R = (Xfinal,Yfinal,Zfinal,Tafinal,Tbfinal), where Tfinal = Tafinal*Tbfinal,
    627            //         corresponding to (Xfinal:Yfinal:Zfinal:Tfinal) in extended twisted Edwards coordinates
    628              f2elm_t t1, t2; 
    629                    
    630              fp2mul1271(P->t2, Q->t2, R->z);        // Z = 2dT1*T2 
   \   0000001E   013A               MOVW    R7:R6, R21:R20
   \   00000020   E400               LDI     R16, 64
   \   00000022   0E60               ADD     R6, R16
   \   00000024   E000               LDI     R16, 0
   \   00000026   1E70               ADC     R7, R16
   \   00000028   01A3               MOVW    R21:R20, R7:R6
   \   0000002A   5A20               SUBI    R18, 160
   \   0000002C   4F3F               SBCI    R19, 255
   \   0000002E   2D04               MOV     R16, R4
   \   00000030   5A00               SUBI    R16, 160
   \   00000032   4F1F               SBCI    R17, 255
   \   00000034   ....               RCALL   fp2mul1271
    631              fp2mul1271(P->z2, Q->z2, t1);          // t1 = 2Z1*Z2  
   \   00000036   01AE               MOVW    R21:R20, R29:R28
   \   00000038   019D               MOVW    R19:R18, R27:R26
   \   0000003A   5C20               SUBI    R18, 192
   \   0000003C   4F3F               SBCI    R19, 255
   \   0000003E   0182               MOVW    R17:R16, R5:R4
   \   00000040   5C00               SUBI    R16, 192
   \   00000042   4F1F               SBCI    R17, 255
   \   00000044   ....               RCALL   fp2mul1271
    632              fp2mul1271(P->xy, Q->xy, R->x);        // X = (X1+Y1)(X2+Y2) 
   \   00000046   01AC               MOVW    R21:R20, R25:R24
   \   00000048   019D               MOVW    R19:R18, R27:R26
   \   0000004A   0182               MOVW    R17:R16, R5:R4
   \   0000004C   ....               RCALL   fp2mul1271
    633              fp2mul1271(P->yx, Q->yx, R->y);        // Y = (Y1-X1)(Y2-X2) 
   \   0000004E   01AC               MOVW    R21:R20, R25:R24
   \   00000050   5E40               SUBI    R20, 224
   \   00000052   4F5F               SBCI    R21, 255
   \   00000054   9690               ADIW    R27:R26, 32
   \   00000056   019D               MOVW    R19:R18, R27:R26
   \   00000058   E200               LDI     R16, 32
   \   0000005A   0E40               ADD     R4, R16
   \   0000005C   E000               LDI     R16, 0
   \   0000005E   1E50               ADC     R5, R16
   \   00000060   0182               MOVW    R17:R16, R5:R4
   \   00000062   ....               RCALL   fp2mul1271
    634              fp2sub1271(t1, R->z, t2);              // t2 = theta
   \   00000064   01AE               MOVW    R21:R20, R29:R28
   \   00000066   5E40               SUBI    R20, 224
   \   00000068   4F5F               SBCI    R21, 255
   \   0000006A   0193               MOVW    R19:R18, R7:R6
   \   0000006C   018E               MOVW    R17:R16, R29:R28
   \   0000006E   ........           CALL    fpsub1271
   \   00000072   01AE               MOVW    R21:R20, R29:R28
   \   00000074   5D40               SUBI    R20, 208
   \   00000076   4F5F               SBCI    R21, 255
   \   00000078   0193               MOVW    R19:R18, R7:R6
   \   0000007A   5F20               SUBI    R18, 240
   \   0000007C   4F3F               SBCI    R19, 255
   \   0000007E   018E               MOVW    R17:R16, R29:R28
   \   00000080   5F00               SUBI    R16, 240
   \   00000082   4F1F               SBCI    R17, 255
   \   00000084   ........           CALL    fpsub1271
    635              fp2add1271(t1, R->z, t1);              // t1 = alpha
   \   00000088   01AE               MOVW    R21:R20, R29:R28
   \   0000008A   0193               MOVW    R19:R18, R7:R6
   \   0000008C   018E               MOVW    R17:R16, R29:R28
   \   0000008E   ........           CALL    fpadd1271
   \   00000092   01AE               MOVW    R21:R20, R29:R28
   \   00000094   5F40               SUBI    R20, 240
   \   00000096   4F5F               SBCI    R21, 255
   \   00000098   0193               MOVW    R19:R18, R7:R6
   \   0000009A   5F20               SUBI    R18, 240
   \   0000009C   4F3F               SBCI    R19, 255
   \   0000009E   018E               MOVW    R17:R16, R29:R28
   \   000000A0   5F00               SUBI    R16, 240
   \   000000A2   4F1F               SBCI    R17, 255
   \   000000A4   ........           CALL    fpadd1271
    636              fp2sub1271(R->x, R->y, R->tb);         // Tbfinal = beta
   \   000000A8   014C               MOVW    R9:R8, R25:R24
   \   000000AA   E800               LDI     R16, 128
   \   000000AC   0E80               ADD     R8, R16
   \   000000AE   E000               LDI     R16, 0
   \   000000B0   1E90               ADC     R9, R16
   \   000000B2   01DC               MOVW    R27:R26, R25:R24
   \   000000B4   9690               ADIW    R27:R26, 32
   \   000000B6   01A4               MOVW    R21:R20, R9:R8
   \   000000B8   019D               MOVW    R19:R18, R27:R26
   \   000000BA   018C               MOVW    R17:R16, R25:R24
   \   000000BC   ........           CALL    fpsub1271
   \   000000C0   01A4               MOVW    R21:R20, R9:R8
   \   000000C2   5F40               SUBI    R20, 240
   \   000000C4   4F5F               SBCI    R21, 255
   \   000000C6   9650               ADIW    R27:R26, 16
   \   000000C8   019D               MOVW    R19:R18, R27:R26
   \   000000CA   018C               MOVW    R17:R16, R25:R24
   \   000000CC   5F00               SUBI    R16, 240
   \   000000CE   4F1F               SBCI    R17, 255
   \   000000D0   ........           CALL    fpsub1271
    637              fp2add1271(R->x, R->y, R->ta);         // Tafinal = omega
   \   000000D4   012C               MOVW    R5:R4, R25:R24
   \   000000D6   E600               LDI     R16, 96
   \   000000D8   0E40               ADD     R4, R16
   \   000000DA   E000               LDI     R16, 0
   \   000000DC   1E50               ADC     R5, R16
   \   000000DE   01DC               MOVW    R27:R26, R25:R24
   \   000000E0   9690               ADIW    R27:R26, 32
   \   000000E2   01A2               MOVW    R21:R20, R5:R4
   \   000000E4   019D               MOVW    R19:R18, R27:R26
   \   000000E6   018C               MOVW    R17:R16, R25:R24
   \   000000E8   ........           CALL    fpadd1271
   \   000000EC   01A2               MOVW    R21:R20, R5:R4
   \   000000EE   5F40               SUBI    R20, 240
   \   000000F0   4F5F               SBCI    R21, 255
   \   000000F2   9650               ADIW    R27:R26, 16
   \   000000F4   019D               MOVW    R19:R18, R27:R26
   \   000000F6   018C               MOVW    R17:R16, R25:R24
   \   000000F8   5F00               SUBI    R16, 240
   \   000000FA   4F1F               SBCI    R17, 255
   \   000000FC   ........           CALL    fpadd1271
    638              fp2mul1271(R->tb, t2, R->x);           // Xfinal = beta*theta
   \   00000100   01AC               MOVW    R21:R20, R25:R24
   \   00000102   019E               MOVW    R19:R18, R29:R28
   \   00000104   5E20               SUBI    R18, 224
   \   00000106   4F3F               SBCI    R19, 255
   \   00000108   0184               MOVW    R17:R16, R9:R8
   \   0000010A   ....               RCALL   fp2mul1271
    639              fp2mul1271(t1, t2, R->z);              // Zfinal = theta*alpha
   \   0000010C   01A3               MOVW    R21:R20, R7:R6
   \   0000010E   019E               MOVW    R19:R18, R29:R28
   \   00000110   5E20               SUBI    R18, 224
   \   00000112   4F3F               SBCI    R19, 255
   \   00000114   018E               MOVW    R17:R16, R29:R28
   \   00000116   ....               RCALL   fp2mul1271
    640              fp2mul1271(R->ta, t1, R->y);           // Yfinal = alpha*omega
   \   00000118   9680               ADIW    R25:R24, 32
   \   0000011A   01AC               MOVW    R21:R20, R25:R24
   \   0000011C   019E               MOVW    R19:R18, R29:R28
   \   0000011E   0182               MOVW    R17:R16, R5:R4
   \   00000120   ....               RCALL   fp2mul1271
    641          }
   \   00000122   96EF               ADIW    R29:R28, 63
   \   00000124   9621               ADIW    R29:R28, 1
   \   00000126   ....               RJMP    ?Subroutine3
    642          
    643          

   \                                 In  segment FARCODE, align 2, keep-with-next
    644          void eccadd(point_extproj_precomp_t Q, point_extproj_t P)      
   \                     eccadd:
    645          { // Complete point addition P = P+Q or P = P+P
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   939A               ST      -Y, R25
   \   00000006   938A               ST      -Y, R24
   \   00000008   97EF               SBIW    R29:R28, 63
   \   0000000A   97EF               SBIW    R29:R28, 63
   \   0000000C   9722               SBIW    R29:R28, 2
   \   0000000E   01D8               MOVW    R27:R26, R17:R16
   \   00000010   01C9               MOVW    R25:R24, R19:R18
    646            // Inputs: P = (X1,Y1,Z1,Ta,Tb), where T1 = Ta*Tb, corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates
    647            //         Q = (X2+Y2,Y2-X2,2Z2,2dT2) corresponding to (X2:Y2:Z2:T2) in extended twisted Edwards coordinates   
    648            // Output: P = (Xfinal,Yfinal,Zfinal,Tafinal,Tbfinal), where Tfinal = Tafinal*Tbfinal, 
    649            //         corresponding to (Xfinal:Yfinal:Zfinal:Tfinal) in extended twisted Edwards coordinates
    650              point_extproj_precomp_t R;
    651              
    652              R1_to_R3(P, R);                        // R = (X1+Y1,Y1-Z1,Z1,T1)
   \   00000012   019E               MOVW    R19:R18, R29:R28
   \   00000014   018C               MOVW    R17:R16, R25:R24
   \   00000016   ....               RCALL   R1_to_R3
    653              eccadd_core(Q, R, P);                  // P = (X2+Y2,Y2-X2,2Z2,2dT2) + (X1+Y1,Y1-Z1,Z1,T1)
   \   00000018   01AC               MOVW    R21:R20, R25:R24
   \   0000001A   019E               MOVW    R19:R18, R29:R28
   \   0000001C   018D               MOVW    R17:R16, R27:R26
   \   0000001E   ........           CALL    eccadd_core
    654          }
   \   00000022   ........           JMP     ?Subroutine5
    655          
    656          

   \                                 In  segment FARCODE, align 2, keep-with-next
    657          void point_setup(point_t P, point_extproj_t Q)
   \                     point_setup:
    658          { // Point conversion to representation (X,Y,Z,Ta,Tb) 
   \   00000000   925A               ST      -Y, R5
   \   00000002   924A               ST      -Y, R4
   \   00000004   93BA               ST      -Y, R27
   \   00000006   93AA               ST      -Y, R26
   \   00000008   939A               ST      -Y, R25
   \   0000000A   938A               ST      -Y, R24
   \   0000000C                      REQUIRE ?Register_R4_is_cg_reg
   \   0000000C                      REQUIRE ?Register_R5_is_cg_reg
   \   0000000C   01D8               MOVW    R27:R26, R17:R16
   \   0000000E   01C9               MOVW    R25:R24, R19:R18
    659            // Input: P = (x,y) in affine coordinates
    660            // Output: P = (X,Y,1,Ta,Tb), where Ta=X, Tb=Y and T=Ta*Tb, corresponding to (X:Y:Z:T) in extended twisted Edwards coordinates
    661          
    662              fp2copy1271(P->x, Q->x);
   \   00000010   ........           CALL    fpcopy1271
   \   00000014   019C               MOVW    R19:R18, R25:R24
   \   00000016   5F20               SUBI    R18, 240
   \   00000018   4F3F               SBCI    R19, 255
   \   0000001A   018D               MOVW    R17:R16, R27:R26
   \   0000001C   5F00               SUBI    R16, 240
   \   0000001E   4F1F               SBCI    R17, 255
   \   00000020   ........           CALL    fpcopy1271
    663              fp2copy1271(P->y, Q->y);
   \   00000024   012C               MOVW    R5:R4, R25:R24
   \   00000026   E200               LDI     R16, 32
   \   00000028   0E40               ADD     R4, R16
   \   0000002A   E000               LDI     R16, 0
   \   0000002C   1E50               ADC     R5, R16
   \   0000002E   9690               ADIW    R27:R26, 32
   \   00000030   0192               MOVW    R19:R18, R5:R4
   \   00000032   018D               MOVW    R17:R16, R27:R26
   \   00000034   ........           CALL    fpcopy1271
   \   00000038   E100               LDI     R16, 16
   \   0000003A   0E40               ADD     R4, R16
   \   0000003C   E000               LDI     R16, 0
   \   0000003E   1E50               ADC     R5, R16
   \   00000040   0192               MOVW    R19:R18, R5:R4
   \   00000042   9650               ADIW    R27:R26, 16
   \   00000044   018D               MOVW    R17:R16, R27:R26
   \   00000046   ........           CALL    fpcopy1271
    664              fp2copy1271(Q->x, Q->ta);              // Ta = X1
   \   0000004A   01DC               MOVW    R27:R26, R25:R24
   \   0000004C   5AA0               SUBI    R26, 160
   \   0000004E   4FBF               SBCI    R27, 255
   \   00000050   019D               MOVW    R19:R18, R27:R26
   \   00000052   018C               MOVW    R17:R16, R25:R24
   \   00000054   ........           CALL    fpcopy1271
   \   00000058   9650               ADIW    R27:R26, 16
   \   0000005A   019D               MOVW    R19:R18, R27:R26
   \   0000005C   018C               MOVW    R17:R16, R25:R24
   \   0000005E   5F00               SUBI    R16, 240
   \   00000060   4F1F               SBCI    R17, 255
   \   00000062   ........           CALL    fpcopy1271
    665              fp2copy1271(Q->y, Q->tb);              // Tb = Y1
   \   00000066   012C               MOVW    R5:R4, R25:R24
   \   00000068   E800               LDI     R16, 128
   \   0000006A   0E40               ADD     R4, R16
   \   0000006C   E000               LDI     R16, 0
   \   0000006E   1E50               ADC     R5, R16
   \   00000070   01DC               MOVW    R27:R26, R25:R24
   \   00000072   9690               ADIW    R27:R26, 32
   \   00000074   0192               MOVW    R19:R18, R5:R4
   \   00000076   018D               MOVW    R17:R16, R27:R26
   \   00000078   ........           CALL    fpcopy1271
   \   0000007C   E100               LDI     R16, 16
   \   0000007E   0E40               ADD     R4, R16
   \   00000080   E000               LDI     R16, 0
   \   00000082   1E50               ADC     R5, R16
   \   00000084   0192               MOVW    R19:R18, R5:R4
   \   00000086   9650               ADIW    R27:R26, 16
   \   00000088   018D               MOVW    R17:R16, R27:R26
   \   0000008A   ........           CALL    fpcopy1271
    666              fp2zero1271(Q->z); Q->z[0][0]=1;       // Z1 = 1
   \   0000008E   5C80               SUBI    R24, 192
   \   00000090   4F9F               SBCI    R25, 255
   \   00000092   01DC               MOVW    R27:R26, R25:R24
   \   00000094   018C               MOVW    R17:R16, R25:R24
   \   00000096   ........           CALL    fpzero1271
   \   0000009A   018C               MOVW    R17:R16, R25:R24
   \   0000009C   5F00               SUBI    R16, 240
   \   0000009E   4F1F               SBCI    R17, 255
   \   000000A0   ........           CALL    fpzero1271
   \   000000A4   E001               LDI     R16, 1
   \   000000A6   930D               ST      X+, R16
   \   000000A8   E000               LDI     R16, 0
   \   000000AA   930D               ST      X+, R16
   \   000000AC   930D               ST      X+, R16
   \   000000AE   930C               ST      X, R16
    667          }
   \   000000B0   ........           JMP     ??Subroutine14_0
    668          
    669          

   \                                 In  segment FARCODE, align 2, keep-with-next
    670          bool ecc_point_validate(point_extproj_t P)
   \                     ecc_point_validate:
    671          { // Point validation: check if point lies on the curve
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   939A               ST      -Y, R25
   \   00000006   938A               ST      -Y, R24
   \   00000008   97EF               SBIW    R29:R28, 63
   \   0000000A   97EF               SBIW    R29:R28, 63
   \   0000000C   9722               SBIW    R29:R28, 2
   \   0000000E   01C8               MOVW    R25:R24, R17:R16
    672            // Input: P = (x,y) in affine coordinates, where x, y in [0, 2^127-1]. 
    673            // Output: TRUE (1) if point lies on the curve E: -x^2+y^2-1-dx^2*y^2 = 0, FALSE (0) otherwise. 
    674            // SECURITY NOTE: this function does not run in constant time (input point P is assumed to be public).
    675              f2elm_t t1, t2, t3;
    676          
    677              fp2sqr1271(P->y, t1);
   \   00000010   01D8               MOVW    R27:R26, R17:R16
   \   00000012   9690               ADIW    R27:R26, 32
   \   00000014   01AE               MOVW    R21:R20, R29:R28
   \   00000016   5B40               SUBI    R20, 176
   \   00000018   4F5F               SBCI    R21, 255
   \   0000001A   019D               MOVW    R19:R18, R27:R26
   \   0000001C   5F20               SUBI    R18, 240
   \   0000001E   4F3F               SBCI    R19, 255
   \   00000020   018D               MOVW    R17:R16, R27:R26
   \   00000022   ........           CALL    fpadd1271
   \   00000026   01AE               MOVW    R21:R20, R29:R28
   \   00000028   5C40               SUBI    R20, 192
   \   0000002A   4F5F               SBCI    R21, 255
   \   0000002C   019D               MOVW    R19:R18, R27:R26
   \   0000002E   5F20               SUBI    R18, 240
   \   00000030   4F3F               SBCI    R19, 255
   \   00000032   018D               MOVW    R17:R16, R27:R26
   \   00000034   ........           CALL    fpsub1271
   \   00000038   01AE               MOVW    R21:R20, R29:R28
   \   0000003A   5F40               SUBI    R20, 240
   \   0000003C   4F5F               SBCI    R21, 255
   \   0000003E   019D               MOVW    R19:R18, R27:R26
   \   00000040   5F20               SUBI    R18, 240
   \   00000042   4F3F               SBCI    R19, 255
   \   00000044   018D               MOVW    R17:R16, R27:R26
   \   00000046   ........           CALL    mod_mul_dbl128
   \   0000004A   01AE               MOVW    R21:R20, R29:R28
   \   0000004C   019E               MOVW    R19:R18, R29:R28
   \   0000004E   5C20               SUBI    R18, 192
   \   00000050   4F3F               SBCI    R19, 255
   \   00000052   018E               MOVW    R17:R16, R29:R28
   \   00000054   5B00               SUBI    R16, 176
   \   00000056   4F1F               SBCI    R17, 255
   \   00000058   ........           CALL    mod_mul128
    678              fp2sqr1271(P->x, t2);
   \   0000005C   01AE               MOVW    R21:R20, R29:R28
   \   0000005E   5B40               SUBI    R20, 176
   \   00000060   4F5F               SBCI    R21, 255
   \   00000062   019C               MOVW    R19:R18, R25:R24
   \   00000064   5F20               SUBI    R18, 240
   \   00000066   4F3F               SBCI    R19, 255
   \   00000068   018C               MOVW    R17:R16, R25:R24
   \   0000006A   ........           CALL    fpadd1271
   \   0000006E   01AE               MOVW    R21:R20, R29:R28
   \   00000070   5C40               SUBI    R20, 192
   \   00000072   4F5F               SBCI    R21, 255
   \   00000074   019C               MOVW    R19:R18, R25:R24
   \   00000076   5F20               SUBI    R18, 240
   \   00000078   4F3F               SBCI    R19, 255
   \   0000007A   018C               MOVW    R17:R16, R25:R24
   \   0000007C   ........           CALL    fpsub1271
   \   00000080   01AE               MOVW    R21:R20, R29:R28
   \   00000082   5D40               SUBI    R20, 208
   \   00000084   4F5F               SBCI    R21, 255
   \   00000086   019C               MOVW    R19:R18, R25:R24
   \   00000088   5F20               SUBI    R18, 240
   \   0000008A   4F3F               SBCI    R19, 255
   \   0000008C   018C               MOVW    R17:R16, R25:R24
   \   0000008E   ........           CALL    mod_mul_dbl128
   \   00000092   01AE               MOVW    R21:R20, R29:R28
   \   00000094   5E40               SUBI    R20, 224
   \   00000096   4F5F               SBCI    R21, 255
   \   00000098   019E               MOVW    R19:R18, R29:R28
   \   0000009A   5C20               SUBI    R18, 192
   \   0000009C   4F3F               SBCI    R19, 255
   \   0000009E   018E               MOVW    R17:R16, R29:R28
   \   000000A0   5B00               SUBI    R16, 176
   \   000000A2   4F1F               SBCI    R17, 255
   \   000000A4   ........           CALL    mod_mul128
    679              fp2sub1271(t1, t2, t3);                     // -x^2 + y^2 
   \   000000A8   01AE               MOVW    R21:R20, R29:R28
   \   000000AA   5A40               SUBI    R20, 160
   \   000000AC   4F5F               SBCI    R21, 255
   \   000000AE   019E               MOVW    R19:R18, R29:R28
   \   000000B0   5E20               SUBI    R18, 224
   \   000000B2   4F3F               SBCI    R19, 255
   \   000000B4   018E               MOVW    R17:R16, R29:R28
   \   000000B6   ........           CALL    fpsub1271
   \   000000BA   01AE               MOVW    R21:R20, R29:R28
   \   000000BC   5940               SUBI    R20, 144
   \   000000BE   4F5F               SBCI    R21, 255
   \   000000C0   019E               MOVW    R19:R18, R29:R28
   \   000000C2   5D20               SUBI    R18, 208
   \   000000C4   4F3F               SBCI    R19, 255
   \   000000C6   018E               MOVW    R17:R16, R29:R28
   \   000000C8   5F00               SUBI    R16, 240
   \   000000CA   4F1F               SBCI    R17, 255
   \   000000CC   ........           CALL    fpsub1271
    680              fp2mul1271(t1, t2, t1);                     // x^2*y^2
   \   000000D0   01AE               MOVW    R21:R20, R29:R28
   \   000000D2   019E               MOVW    R19:R18, R29:R28
   \   000000D4   5E20               SUBI    R18, 224
   \   000000D6   4F3F               SBCI    R19, 255
   \   000000D8   018E               MOVW    R17:R16, R29:R28
   \   000000DA   ........           CALL    fp2mul1271
    681              fp2mul1271((felm_t*)&PARAMETER_d, t1, t2);  // dx^2*y^2
   \   000000DE   01AE               MOVW    R21:R20, R29:R28
   \   000000E0   5E40               SUBI    R20, 224
   \   000000E2   4F5F               SBCI    R21, 255
   \   000000E4   019E               MOVW    R19:R18, R29:R28
   \   000000E6   ....               LDI     R16, LOW(PARAMETER_d)
   \   000000E8   ....               LDI     R17, (PARAMETER_d) >> 8
   \   000000EA   ........           CALL    fp2mul1271
    682              fp2zero1271(t1);  t1[0][0] = 1;             // t1 = 1
   \   000000EE   018E               MOVW    R17:R16, R29:R28
   \   000000F0   ........           CALL    fpzero1271
   \   000000F4   018E               MOVW    R17:R16, R29:R28
   \   000000F6   5F00               SUBI    R16, 240
   \   000000F8   4F1F               SBCI    R17, 255
   \   000000FA   ........           CALL    fpzero1271
   \   000000FE   E001               LDI     R16, 1
   \   00000100   8308               ST      Y, R16
   \   00000102   E000               LDI     R16, 0
   \   00000104   8309               STD     Y+1, R16
   \   00000106   830A               STD     Y+2, R16
   \   00000108   830B               STD     Y+3, R16
    683              fp2add1271(t2, t1, t2);                     // 1 + dx^2*y^2
   \   0000010A   01AE               MOVW    R21:R20, R29:R28
   \   0000010C   5E40               SUBI    R20, 224
   \   0000010E   4F5F               SBCI    R21, 255
   \   00000110   019E               MOVW    R19:R18, R29:R28
   \   00000112   018E               MOVW    R17:R16, R29:R28
   \   00000114   5E00               SUBI    R16, 224
   \   00000116   4F1F               SBCI    R17, 255
   \   00000118   ........           CALL    fpadd1271
   \   0000011C   01AE               MOVW    R21:R20, R29:R28
   \   0000011E   5D40               SUBI    R20, 208
   \   00000120   4F5F               SBCI    R21, 255
   \   00000122   019E               MOVW    R19:R18, R29:R28
   \   00000124   5F20               SUBI    R18, 240
   \   00000126   4F3F               SBCI    R19, 255
   \   00000128   018E               MOVW    R17:R16, R29:R28
   \   0000012A   5D00               SUBI    R16, 208
   \   0000012C   4F1F               SBCI    R17, 255
   \   0000012E   ........           CALL    fpadd1271
    684              fp2sub1271(t3, t2, t1);                     // -x^2 + y^2 - 1 - dx^2*y^2
   \   00000132   01AE               MOVW    R21:R20, R29:R28
   \   00000134   019E               MOVW    R19:R18, R29:R28
   \   00000136   5E20               SUBI    R18, 224
   \   00000138   4F3F               SBCI    R19, 255
   \   0000013A   018E               MOVW    R17:R16, R29:R28
   \   0000013C   5A00               SUBI    R16, 160
   \   0000013E   4F1F               SBCI    R17, 255
   \   00000140   ........           CALL    fpsub1271
   \   00000144   01AE               MOVW    R21:R20, R29:R28
   \   00000146   5F40               SUBI    R20, 240
   \   00000148   4F5F               SBCI    R21, 255
   \   0000014A   019E               MOVW    R19:R18, R29:R28
   \   0000014C   5D20               SUBI    R18, 208
   \   0000014E   4F3F               SBCI    R19, 255
   \   00000150   018E               MOVW    R17:R16, R29:R28
   \   00000152   5900               SUBI    R16, 144
   \   00000154   4F1F               SBCI    R17, 255
   \   00000156   ........           CALL    fpsub1271
    685          
    686              return ((is_digit_zero_ct(t1[0][0] | t1[0][1]) || is_digit_zero_ct((t1[0][0] + 1) | (t1[0][1] + 1))) &
    687                      (is_digit_zero_ct(t1[1][0] | t1[1][1]) || is_digit_zero_ct((t1[1][0] + 1) | (t1[1][1] + 1))));	
   \   0000015A   8108               LD      R16, Y
   \   0000015C   8119               LDD     R17, Y+1
   \   0000015E   812A               LDD     R18, Y+2
   \   00000160   813B               LDD     R19, Y+3
   \   00000162   814C               LDD     R20, Y+4
   \   00000164   815D               LDD     R21, Y+5
   \   00000166   816E               LDD     R22, Y+6
   \   00000168   817F               LDD     R23, Y+7
   \   0000016A   2B04               OR      R16, R20
   \   0000016C   2B15               OR      R17, R21
   \   0000016E   2B26               OR      R18, R22
   \   00000170   2B37               OR      R19, R23
   \   00000172   FB37               BST     R19, 7
   \   00000174   E040               LDI     R20, 0
   \   00000176   F940               BLD     R20, 0
   \   00000178   9510               COM     R17
   \   0000017A   9520               COM     R18
   \   0000017C   9530               COM     R19
   \   0000017E   9501               NEG     R16
   \   00000180   4F1F               SBCI    R17, 255
   \   00000182   4F2F               SBCI    R18, 255
   \   00000184   4F3F               SBCI    R19, 255
   \   00000186   0F33               LSL     R19
   \   00000188   E000               LDI     R16, 0
   \   0000018A   1F00               ROL     R16
   \   0000018C   2B40               OR      R20, R16
   \   0000018E   E001               LDI     R16, 1
   \   00000190   2740               EOR     R20, R16
   \   00000192   F511               BRNE    ??ecc_point_validate_0
   \   00000194   8108               LD      R16, Y
   \   00000196   8119               LDD     R17, Y+1
   \   00000198   812A               LDD     R18, Y+2
   \   0000019A   813B               LDD     R19, Y+3
   \   0000019C   5F0F               SUBI    R16, 255
   \   0000019E   4F1F               SBCI    R17, 255
   \   000001A0   4F2F               SBCI    R18, 255
   \   000001A2   4F3F               SBCI    R19, 255
   \   000001A4   814C               LDD     R20, Y+4
   \   000001A6   5F4F               SUBI    R20, 255
   \   000001A8   4F5F               SBCI    R21, 255
   \   000001AA   4F6F               SBCI    R22, 255
   \   000001AC   4F7F               SBCI    R23, 255
   \   000001AE   2B04               OR      R16, R20
   \   000001B0   2B15               OR      R17, R21
   \   000001B2   2B26               OR      R18, R22
   \   000001B4   2B37               OR      R19, R23
   \   000001B6   FB37               BST     R19, 7
   \   000001B8   E040               LDI     R20, 0
   \   000001BA   F940               BLD     R20, 0
   \   000001BC   9510               COM     R17
   \   000001BE   9520               COM     R18
   \   000001C0   9530               COM     R19
   \   000001C2   9501               NEG     R16
   \   000001C4   4F1F               SBCI    R17, 255
   \   000001C6   4F2F               SBCI    R18, 255
   \   000001C8   4F3F               SBCI    R19, 255
   \   000001CA   0F33               LSL     R19
   \   000001CC   E000               LDI     R16, 0
   \   000001CE   1F00               ROL     R16
   \   000001D0   2B40               OR      R20, R16
   \   000001D2   E001               LDI     R16, 1
   \   000001D4   2740               EOR     R20, R16
   \   000001D6   F011               BREQ    ??ecc_point_validate_1
   \                     ??ecc_point_validate_0:
   \   000001D8   E081               LDI     R24, 1
   \   000001DA   C001               RJMP    ??ecc_point_validate_2
   \                     ??ecc_point_validate_1:
   \   000001DC   E080               LDI     R24, 0
   \                     ??ecc_point_validate_2:
   \   000001DE   8908               LDD     R16, Y+16
   \   000001E0   8919               LDD     R17, Y+17
   \   000001E2   892A               LDD     R18, Y+18
   \   000001E4   893B               LDD     R19, Y+19
   \   000001E6   894C               LDD     R20, Y+20
   \   000001E8   895D               LDD     R21, Y+21
   \   000001EA   896E               LDD     R22, Y+22
   \   000001EC   897F               LDD     R23, Y+23
   \   000001EE   2B04               OR      R16, R20
   \   000001F0   2B15               OR      R17, R21
   \   000001F2   2B26               OR      R18, R22
   \   000001F4   2B37               OR      R19, R23
   \   000001F6   FB37               BST     R19, 7
   \   000001F8   E040               LDI     R20, 0
   \   000001FA   F940               BLD     R20, 0
   \   000001FC   9510               COM     R17
   \   000001FE   9520               COM     R18
   \   00000200   9530               COM     R19
   \   00000202   9501               NEG     R16
   \   00000204   4F1F               SBCI    R17, 255
   \   00000206   4F2F               SBCI    R18, 255
   \   00000208   4F3F               SBCI    R19, 255
   \   0000020A   0F33               LSL     R19
   \   0000020C   E000               LDI     R16, 0
   \   0000020E   1F00               ROL     R16
   \   00000210   2B40               OR      R20, R16
   \   00000212   E001               LDI     R16, 1
   \   00000214   2740               EOR     R20, R16
   \   00000216   F519               BRNE    ??ecc_point_validate_3
   \   00000218   8908               LDD     R16, Y+16
   \   0000021A   8919               LDD     R17, Y+17
   \   0000021C   892A               LDD     R18, Y+18
   \   0000021E   893B               LDD     R19, Y+19
   \   00000220   5F0F               SUBI    R16, 255
   \   00000222   4F1F               SBCI    R17, 255
   \   00000224   4F2F               SBCI    R18, 255
   \   00000226   4F3F               SBCI    R19, 255
   \   00000228   894C               LDD     R20, Y+20
   \   0000022A   5F4F               SUBI    R20, 255
   \   0000022C   4F5F               SBCI    R21, 255
   \   0000022E   4F6F               SBCI    R22, 255
   \   00000230   4F7F               SBCI    R23, 255
   \   00000232   2B04               OR      R16, R20
   \   00000234   2B15               OR      R17, R21
   \   00000236   2B26               OR      R18, R22
   \   00000238   2B37               OR      R19, R23
   \   0000023A   FB37               BST     R19, 7
   \   0000023C   E040               LDI     R20, 0
   \   0000023E   F940               BLD     R20, 0
   \   00000240   9510               COM     R17
   \   00000242   9520               COM     R18
   \   00000244   9530               COM     R19
   \   00000246   9501               NEG     R16
   \   00000248   4F1F               SBCI    R17, 255
   \   0000024A   4F2F               SBCI    R18, 255
   \   0000024C   4F3F               SBCI    R19, 255
   \   0000024E   0F33               LSL     R19
   \   00000250   E000               LDI     R16, 0
   \   00000252   1F00               ROL     R16
   \   00000254   2B40               OR      R20, R16
   \   00000256   E001               LDI     R16, 1
   \   00000258   2740               EOR     R20, R16
   \   0000025A   F409               BRNE    ??ecc_point_validate_3
   \   0000025C   E000               LDI     R16, 0
   \                     ??ecc_point_validate_3:
   \   0000025E   2308               AND     R16, R24
   \   00000260   E010               LDI     R17, 0
   \   00000262   ........           JMP     ?Subroutine5
    688          }
    689          
    690          

   \                                 In  segment FARCODE, align 2, keep-with-next
    691          __inline void R5_to_R1(point_precomp_t P, point_extproj_t Q)
   \                     R5_to_R1:
    692          { // Conversion from representation (x+y,y-x,2dt) to (X,Y,Z,Ta,Tb) 
   \   00000000   927A               ST      -Y, R7
   \   00000002   926A               ST      -Y, R6
   \   00000004   925A               ST      -Y, R5
   \   00000006   924A               ST      -Y, R4
   \   00000008   93BA               ST      -Y, R27
   \   0000000A   93AA               ST      -Y, R26
   \   0000000C   939A               ST      -Y, R25
   \   0000000E   938A               ST      -Y, R24
   \   00000010                      REQUIRE ?Register_R4_is_cg_reg
   \   00000010                      REQUIRE ?Register_R5_is_cg_reg
   \   00000010                      REQUIRE ?Register_R6_is_cg_reg
   \   00000010                      REQUIRE ?Register_R7_is_cg_reg
   \   00000010   01D8               MOVW    R27:R26, R17:R16
   \   00000012   01C9               MOVW    R25:R24, R19:R18
    693            // Input:  P = (x1+y1,y1-x1,2dt1) corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates, where Z1=1
    694            // Output: Q = (x1,y1,z1,x1,y1), where z1=1, corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates 
    695          
    696              fp2sub1271(P->xy, P->yx, Q->x);        // 2*x1
   \   00000014   0128               MOVW    R5:R4, R17:R16
   \   00000016   E200               LDI     R16, 32
   \   00000018   0E40               ADD     R4, R16
   \   0000001A   E000               LDI     R16, 0
   \   0000001C   1E50               ADC     R5, R16
   \   0000001E   01A9               MOVW    R21:R20, R19:R18
   \   00000020   0192               MOVW    R19:R18, R5:R4
   \   00000022   2F0A               MOV     R16, R26
   \   00000024   ........           CALL    fpsub1271
   \   00000028   01AC               MOVW    R21:R20, R25:R24
   \   0000002A   5F40               SUBI    R20, 240
   \   0000002C   4F5F               SBCI    R21, 255
   \   0000002E   E100               LDI     R16, 16
   \   00000030   0E40               ADD     R4, R16
   \   00000032   E000               LDI     R16, 0
   \   00000034   1E50               ADC     R5, R16
   \   00000036   0192               MOVW    R19:R18, R5:R4
   \   00000038   018D               MOVW    R17:R16, R27:R26
   \   0000003A   5F00               SUBI    R16, 240
   \   0000003C   4F1F               SBCI    R17, 255
   \   0000003E   ........           CALL    fpsub1271
    697              fp2add1271(P->xy, P->yx, Q->y);        // 2*y1
   \   00000042   013C               MOVW    R7:R6, R25:R24
   \   00000044   E200               LDI     R16, 32
   \   00000046   0E60               ADD     R6, R16
   \   00000048   E000               LDI     R16, 0
   \   0000004A   1E70               ADC     R7, R16
   \   0000004C   012D               MOVW    R5:R4, R27:R26
   \   0000004E   E200               LDI     R16, 32
   \   00000050   0E40               ADD     R4, R16
   \   00000052   E000               LDI     R16, 0
   \   00000054   1E50               ADC     R5, R16
   \   00000056   01A3               MOVW    R21:R20, R7:R6
   \   00000058   0192               MOVW    R19:R18, R5:R4
   \   0000005A   018D               MOVW    R17:R16, R27:R26
   \   0000005C   ........           CALL    fpadd1271
   \   00000060   E100               LDI     R16, 16
   \   00000062   0E60               ADD     R6, R16
   \   00000064   E000               LDI     R16, 0
   \   00000066   1E70               ADC     R7, R16
   \   00000068   01A3               MOVW    R21:R20, R7:R6
   \   0000006A   E100               LDI     R16, 16
   \   0000006C   0E40               ADD     R4, R16
   \   0000006E   E000               LDI     R16, 0
   \   00000070   1E50               ADC     R5, R16
   \   00000072   0192               MOVW    R19:R18, R5:R4
   \   00000074   9650               ADIW    R27:R26, 16
   \   00000076   018D               MOVW    R17:R16, R27:R26
   \   00000078   ........           CALL    fpadd1271
    698              fp2div1271(Q->x);                      // XQ = x1
   \   0000007C   018C               MOVW    R17:R16, R25:R24
   \   0000007E   ........           CALL    fpdiv1271
   \   00000082   018C               MOVW    R17:R16, R25:R24
   \   00000084   5F00               SUBI    R16, 240
   \   00000086   4F1F               SBCI    R17, 255
   \   00000088   ........           CALL    fpdiv1271
    699              fp2div1271(Q->y);                      // YQ = y1 
   \   0000008C   01DC               MOVW    R27:R26, R25:R24
   \   0000008E   9690               ADIW    R27:R26, 32
   \   00000090   018D               MOVW    R17:R16, R27:R26
   \   00000092   ........           CALL    fpdiv1271
   \   00000096   9650               ADIW    R27:R26, 16
   \   00000098   018D               MOVW    R17:R16, R27:R26
   \   0000009A   ........           CALL    fpdiv1271
    700              fp2zero1271(Q->z); Q->z[0][0] = 1;     // ZQ = 1
   \   0000009E   01DC               MOVW    R27:R26, R25:R24
   \   000000A0   5CA0               SUBI    R26, 192
   \   000000A2   4FBF               SBCI    R27, 255
   \   000000A4   018D               MOVW    R17:R16, R27:R26
   \   000000A6   ........           CALL    fpzero1271
   \   000000AA   018D               MOVW    R17:R16, R27:R26
   \   000000AC   5F00               SUBI    R16, 240
   \   000000AE   4F1F               SBCI    R17, 255
   \   000000B0   ........           CALL    fpzero1271
   \   000000B4   E001               LDI     R16, 1
   \   000000B6   930D               ST      X+, R16
   \   000000B8   E000               LDI     R16, 0
   \   000000BA   930D               ST      X+, R16
   \   000000BC   930D               ST      X+, R16
   \   000000BE   930C               ST      X, R16
    701              fp2copy1271(Q->x, Q->ta);              // TaQ = x1
   \   000000C0   01DC               MOVW    R27:R26, R25:R24
   \   000000C2   5AA0               SUBI    R26, 160
   \   000000C4   4FBF               SBCI    R27, 255
   \   000000C6   019D               MOVW    R19:R18, R27:R26
   \   000000C8   018C               MOVW    R17:R16, R25:R24
   \   000000CA   ........           CALL    fpcopy1271
   \   000000CE   9650               ADIW    R27:R26, 16
   \   000000D0   019D               MOVW    R19:R18, R27:R26
   \   000000D2   018C               MOVW    R17:R16, R25:R24
   \   000000D4   5F00               SUBI    R16, 240
   \   000000D6   4F1F               SBCI    R17, 255
   \   000000D8   ........           CALL    fpcopy1271
    702              fp2copy1271(Q->y, Q->tb);              // TbQ = y1
   \   000000DC   01DC               MOVW    R27:R26, R25:R24
   \   000000DE   58A0               SUBI    R26, 128
   \   000000E0   4FBF               SBCI    R27, 255
   \   000000E2   9680               ADIW    R25:R24, 32
   \   000000E4   ........           JMP     ??Subroutine11_0
    703          }
    704          

   \                                 In  segment FARCODE, align 2, keep-with-next
    705          static __inline void eccmadd(point_precomp_t Q, point_extproj_t P)
   \                     eccmadd:
    706          { // Mixed point addition P = P+Q or P = P+P
   \   00000000   92BA               ST      -Y, R11
   \   00000002   92AA               ST      -Y, R10
   \   00000004   929A               ST      -Y, R9
   \   00000006   928A               ST      -Y, R8
   \   00000008   927A               ST      -Y, R7
   \   0000000A   926A               ST      -Y, R6
   \   0000000C   925A               ST      -Y, R5
   \   0000000E   924A               ST      -Y, R4
   \   00000010   93BA               ST      -Y, R27
   \   00000012   93AA               ST      -Y, R26
   \   00000014   939A               ST      -Y, R25
   \   00000016   938A               ST      -Y, R24
   \   00000018                      REQUIRE ?Register_R4_is_cg_reg
   \   00000018                      REQUIRE ?Register_R5_is_cg_reg
   \   00000018                      REQUIRE ?Register_R6_is_cg_reg
   \   00000018                      REQUIRE ?Register_R7_is_cg_reg
   \   00000018                      REQUIRE ?Register_R8_is_cg_reg
   \   00000018                      REQUIRE ?Register_R9_is_cg_reg
   \   00000018                      REQUIRE ?Register_R10_is_cg_reg
   \   00000018                      REQUIRE ?Register_R11_is_cg_reg
   \   00000018   97EF               SBIW    R29:R28, 63
   \   0000001A   9721               SBIW    R29:R28, 1
   \   0000001C   0148               MOVW    R9:R8, R17:R16
   \   0000001E   01C9               MOVW    R25:R24, R19:R18
    707            // Inputs: P = (X1,Y1,Z1,Ta,Tb), where T1 = Ta*Tb, corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates
    708            //         Q = (x2+y2,y2-x2,2dt2) corresponding to (X2:Y2:Z2:T2) in extended twisted Edwards coordinates, where Z2=1  
    709            // Output: P = (Xfinal,Yfinal,Zfinal,Tafinal,Tbfinal), where Tfinal = Tafinal*Tbfinal, 
    710            //         corresponding to (Xfinal:Yfinal:Zfinal:Tfinal) in extended twisted Edwards coordinates
    711              f2elm_t t1, t2;
    712              
    713              fp2mul1271(P->ta, P->tb, P->ta);        // Ta = T1
   \   00000020   0139               MOVW    R7:R6, R19:R18
   \   00000022   E800               LDI     R16, 128
   \   00000024   0E60               ADD     R6, R16
   \   00000026   E000               LDI     R16, 0
   \   00000028   1E70               ADC     R7, R16
   \   0000002A   01D9               MOVW    R27:R26, R19:R18
   \   0000002C   5AA0               SUBI    R26, 160
   \   0000002E   4FBF               SBCI    R27, 255
   \   00000030   01AD               MOVW    R21:R20, R27:R26
   \   00000032   0193               MOVW    R19:R18, R7:R6
   \   00000034   018D               MOVW    R17:R16, R27:R26
   \   00000036   ........           CALL    fp2mul1271
    714              fp2add1271(P->z, P->z, t1);             // t1 = 2Z1        
   \   0000003A   012C               MOVW    R5:R4, R25:R24
   \   0000003C   E400               LDI     R16, 64
   \   0000003E   0E40               ADD     R4, R16
   \   00000040   E000               LDI     R16, 0
   \   00000042   1E50               ADC     R5, R16
   \   00000044   01AE               MOVW    R21:R20, R29:R28
   \   00000046   0192               MOVW    R19:R18, R5:R4
   \   00000048   0182               MOVW    R17:R16, R5:R4
   \   0000004A   ........           CALL    fpadd1271
   \   0000004E   01AE               MOVW    R21:R20, R29:R28
   \   00000050   5F40               SUBI    R20, 240
   \   00000052   4F5F               SBCI    R21, 255
   \   00000054   0192               MOVW    R19:R18, R5:R4
   \   00000056   5F20               SUBI    R18, 240
   \   00000058   4F3F               SBCI    R19, 255
   \   0000005A   0182               MOVW    R17:R16, R5:R4
   \   0000005C   5F00               SUBI    R16, 240
   \   0000005E   4F1F               SBCI    R17, 255
   \   00000060   ........           CALL    fpadd1271
    715              fp2mul1271(P->ta, Q->t2, P->ta);        // Ta = 2dT1*t2
   \   00000064   01AD               MOVW    R21:R20, R27:R26
   \   00000066   0194               MOVW    R19:R18, R9:R8
   \   00000068   5C20               SUBI    R18, 192
   \   0000006A   4F3F               SBCI    R19, 255
   \   0000006C   018D               MOVW    R17:R16, R27:R26
   \   0000006E   ........           CALL    fp2mul1271
    716              fp2add1271(P->x, P->y, P->z);           // Z = (X1+Y1) 
   \   00000072   018C               MOVW    R17:R16, R25:R24
   \   00000074   5E00               SUBI    R16, 224
   \   00000076   4F1F               SBCI    R17, 255
   \   00000078   0158               MOVW    R11:R10, R17:R16
   \   0000007A   01A2               MOVW    R21:R20, R5:R4
   \   0000007C   0198               MOVW    R19:R18, R17:R16
   \   0000007E   018C               MOVW    R17:R16, R25:R24
   \   00000080   ........           CALL    fpadd1271
   \   00000084   01A2               MOVW    R21:R20, R5:R4
   \   00000086   5F40               SUBI    R20, 240
   \   00000088   4F5F               SBCI    R21, 255
   \   0000008A   0195               MOVW    R19:R18, R11:R10
   \   0000008C   5F20               SUBI    R18, 240
   \   0000008E   4F3F               SBCI    R19, 255
   \   00000090   018C               MOVW    R17:R16, R25:R24
   \   00000092   5F00               SUBI    R16, 240
   \   00000094   4F1F               SBCI    R17, 255
   \   00000096   ........           CALL    fpadd1271
    717              fp2sub1271(P->y, P->x, P->tb);          // Tb = (Y1-X1)
   \   0000009A   018C               MOVW    R17:R16, R25:R24
   \   0000009C   5E00               SUBI    R16, 224
   \   0000009E   4F1F               SBCI    R17, 255
   \   000000A0   01A3               MOVW    R21:R20, R7:R6
   \   000000A2   019C               MOVW    R19:R18, R25:R24
   \   000000A4   ........           CALL    fpsub1271
   \   000000A8   01A3               MOVW    R21:R20, R7:R6
   \   000000AA   5F40               SUBI    R20, 240
   \   000000AC   4F5F               SBCI    R21, 255
   \   000000AE   019C               MOVW    R19:R18, R25:R24
   \   000000B0   5F20               SUBI    R18, 240
   \   000000B2   4F3F               SBCI    R19, 255
   \   000000B4   0185               MOVW    R17:R16, R11:R10
   \   000000B6   5F00               SUBI    R16, 240
   \   000000B8   4F1F               SBCI    R17, 255
   \   000000BA   ........           CALL    fpsub1271
    718              fp2sub1271(t1, P->ta, t2);              // t2 = theta
   \   000000BE   01AE               MOVW    R21:R20, R29:R28
   \   000000C0   5E40               SUBI    R20, 224
   \   000000C2   4F5F               SBCI    R21, 255
   \   000000C4   019D               MOVW    R19:R18, R27:R26
   \   000000C6   018E               MOVW    R17:R16, R29:R28
   \   000000C8   ........           CALL    fpsub1271
   \   000000CC   01AE               MOVW    R21:R20, R29:R28
   \   000000CE   5D40               SUBI    R20, 208
   \   000000D0   4F5F               SBCI    R21, 255
   \   000000D2   019D               MOVW    R19:R18, R27:R26
   \   000000D4   5F20               SUBI    R18, 240
   \   000000D6   4F3F               SBCI    R19, 255
   \   000000D8   018E               MOVW    R17:R16, R29:R28
   \   000000DA   5F00               SUBI    R16, 240
   \   000000DC   4F1F               SBCI    R17, 255
   \   000000DE   ........           CALL    fpsub1271
    719              fp2add1271(t1, P->ta, t1);              // t1 = alpha
   \   000000E2   01AE               MOVW    R21:R20, R29:R28
   \   000000E4   019D               MOVW    R19:R18, R27:R26
   \   000000E6   018E               MOVW    R17:R16, R29:R28
   \   000000E8   ........           CALL    fpadd1271
   \   000000EC   01AE               MOVW    R21:R20, R29:R28
   \   000000EE   5F40               SUBI    R20, 240
   \   000000F0   4F5F               SBCI    R21, 255
   \   000000F2   019D               MOVW    R19:R18, R27:R26
   \   000000F4   5F20               SUBI    R18, 240
   \   000000F6   4F3F               SBCI    R19, 255
   \   000000F8   018E               MOVW    R17:R16, R29:R28
   \   000000FA   5F00               SUBI    R16, 240
   \   000000FC   4F1F               SBCI    R17, 255
   \   000000FE   ........           CALL    fpadd1271
    720              fp2mul1271(Q->xy, P->z, P->ta);         // Ta = (X1+Y1)(x2+y2)
   \   00000102   01AD               MOVW    R21:R20, R27:R26
   \   00000104   0192               MOVW    R19:R18, R5:R4
   \   00000106   0184               MOVW    R17:R16, R9:R8
   \   00000108   ........           CALL    fp2mul1271
    721              fp2mul1271(Q->yx, P->tb, P->x);         // X = (Y1-X1)(y2-x2)
   \   0000010C   01AC               MOVW    R21:R20, R25:R24
   \   0000010E   0193               MOVW    R19:R18, R7:R6
   \   00000110   0184               MOVW    R17:R16, R9:R8
   \   00000112   5E00               SUBI    R16, 224
   \   00000114   4F1F               SBCI    R17, 255
   \   00000116   ........           CALL    fp2mul1271
    722              fp2mul1271(t1, t2, P->z);               // Zfinal = theta*alpha
   \   0000011A   01A2               MOVW    R21:R20, R5:R4
   \   0000011C   019E               MOVW    R19:R18, R29:R28
   \   0000011E   5E20               SUBI    R18, 224
   \   00000120   4F3F               SBCI    R19, 255
   \   00000122   018E               MOVW    R17:R16, R29:R28
   \   00000124   ........           CALL    fp2mul1271
    723              fp2sub1271(P->ta, P->x, P->tb);         // Tbfinal = beta
   \   00000128   01A3               MOVW    R21:R20, R7:R6
   \   0000012A   019C               MOVW    R19:R18, R25:R24
   \   0000012C   018D               MOVW    R17:R16, R27:R26
   \   0000012E   ........           CALL    fpsub1271
   \   00000132   01A3               MOVW    R21:R20, R7:R6
   \   00000134   5F40               SUBI    R20, 240
   \   00000136   4F5F               SBCI    R21, 255
   \   00000138   019C               MOVW    R19:R18, R25:R24
   \   0000013A   5F20               SUBI    R18, 240
   \   0000013C   4F3F               SBCI    R19, 255
   \   0000013E   018D               MOVW    R17:R16, R27:R26
   \   00000140   5F00               SUBI    R16, 240
   \   00000142   4F1F               SBCI    R17, 255
   \   00000144   ........           CALL    fpsub1271
    724              fp2add1271(P->ta, P->x, P->ta);         // Tafinal = omega
   \   00000148   01AD               MOVW    R21:R20, R27:R26
   \   0000014A   019C               MOVW    R19:R18, R25:R24
   \   0000014C   018D               MOVW    R17:R16, R27:R26
   \   0000014E   ........           CALL    fpadd1271
   \   00000152   01AD               MOVW    R21:R20, R27:R26
   \   00000154   5F40               SUBI    R20, 240
   \   00000156   4F5F               SBCI    R21, 255
   \   00000158   019C               MOVW    R19:R18, R25:R24
   \   0000015A   5F20               SUBI    R18, 240
   \   0000015C   4F3F               SBCI    R19, 255
   \   0000015E   018D               MOVW    R17:R16, R27:R26
   \   00000160   5F00               SUBI    R16, 240
   \   00000162   4F1F               SBCI    R17, 255
   \   00000164   ........           CALL    fpadd1271
    725              fp2mul1271(P->tb, t2, P->x);            // Xfinal = beta*theta
   \   00000168   01AC               MOVW    R21:R20, R25:R24
   \   0000016A   019E               MOVW    R19:R18, R29:R28
   \   0000016C   5E20               SUBI    R18, 224
   \   0000016E   4F3F               SBCI    R19, 255
   \   00000170   0183               MOVW    R17:R16, R7:R6
   \   00000172   ........           CALL    fp2mul1271
    726              fp2mul1271(P->ta, t1, P->y);            // Yfinal = alpha*omega
   \   00000176   9680               ADIW    R25:R24, 32
   \   00000178   01AC               MOVW    R21:R20, R25:R24
   \   0000017A   019E               MOVW    R19:R18, R29:R28
   \   0000017C   018D               MOVW    R17:R16, R27:R26
   \   0000017E   ........           CALL    fp2mul1271
    727          }
   \   00000182   96EF               ADIW    R29:R28, 63
   \   00000184   9621               ADIW    R29:R28, 1
   \   00000186                      REQUIRE ?Subroutine2
   \   00000186                      ;               // Fall through to label ?Subroutine2

   \                                 In  segment FARCODE, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   9189               LD      R24, Y+
   \   00000002   9199               LD      R25, Y+
   \   00000004   91A9               LD      R26, Y+
   \   00000006   91B9               LD      R27, Y+
   \   00000008   9049               LD      R4, Y+
   \   0000000A   9059               LD      R5, Y+
   \   0000000C   9069               LD      R6, Y+
   \   0000000E   9079               LD      R7, Y+
   \   00000010   9089               LD      R8, Y+
   \   00000012   9099               LD      R9, Y+
   \   00000014   90A9               LD      R10, Y+
   \   00000016   90B9               LD      R11, Y+
   \   00000018   9508               RET
    728          

   \                                 In  segment FARCODE, align 2, keep-with-next
    729          static __inline void eccmadd2(point_precomp_t Q, point_extproj_t P)
   \                     eccmadd2:
    730          { // Mixed point addition P = P+Q or P = P+P
   \   00000000   92BA               ST      -Y, R11
   \   00000002   92AA               ST      -Y, R10
   \   00000004   929A               ST      -Y, R9
   \   00000006   928A               ST      -Y, R8
   \   00000008   927A               ST      -Y, R7
   \   0000000A   926A               ST      -Y, R6
   \   0000000C   925A               ST      -Y, R5
   \   0000000E   924A               ST      -Y, R4
   \   00000010   93BA               ST      -Y, R27
   \   00000012   93AA               ST      -Y, R26
   \   00000014   939A               ST      -Y, R25
   \   00000016   938A               ST      -Y, R24
   \   00000018                      REQUIRE ?Register_R4_is_cg_reg
   \   00000018                      REQUIRE ?Register_R5_is_cg_reg
   \   00000018                      REQUIRE ?Register_R6_is_cg_reg
   \   00000018                      REQUIRE ?Register_R7_is_cg_reg
   \   00000018                      REQUIRE ?Register_R8_is_cg_reg
   \   00000018                      REQUIRE ?Register_R9_is_cg_reg
   \   00000018                      REQUIRE ?Register_R10_is_cg_reg
   \   00000018                      REQUIRE ?Register_R11_is_cg_reg
   \   00000018   97EF               SBIW    R29:R28, 63
   \   0000001A   97A1               SBIW    R29:R28, 33
   \   0000001C   0128               MOVW    R5:R4, R17:R16
   \   0000001E   01C9               MOVW    R25:R24, R19:R18
    731            // Inputs: P = (X1,Y1,Z1,Ta,Tb), where T1 = Ta*Tb, corresponding to (X1:Y1:Z1:T1) in extended twisted Edwards coordinates
    732            //         Q = (x2+y2,y2-x2,2dt2) corresponding to (X2:Y2:Z2:T2) in extended twisted Edwards coordinates, where Z2=1  
    733            // Output: P = (Xfinal,Yfinal,Zfinal,Tafinal,Tbfinal), where Tfinal = Tafinal*Tbfinal, 
    734            //         corresponding to (Xfinal:Yfinal:Zfinal:Tfinal) in extended twisted Edwards coordinates
    735              f2elm_t t1, t2, t3;
    736              
    737              fp2mul1271(P->ta, P->tb, P->ta);        // Ta = T1
   \   00000020   0149               MOVW    R9:R8, R19:R18
   \   00000022   E800               LDI     R16, 128
   \   00000024   0E80               ADD     R8, R16
   \   00000026   E000               LDI     R16, 0
   \   00000028   1E90               ADC     R9, R16
   \   0000002A   01D9               MOVW    R27:R26, R19:R18
   \   0000002C   5AA0               SUBI    R26, 160
   \   0000002E   4FBF               SBCI    R27, 255
   \   00000030   01AD               MOVW    R21:R20, R27:R26
   \   00000032   0194               MOVW    R19:R18, R9:R8
   \   00000034   018D               MOVW    R17:R16, R27:R26
   \   00000036   ........           CALL    fp2mul1271
    738              fp2add1271(P->z, P->z, t1);             // t1 = 2Z1      
   \   0000003A   013C               MOVW    R7:R6, R25:R24
   \   0000003C   E400               LDI     R16, 64
   \   0000003E   0E60               ADD     R6, R16
   \   00000040   E000               LDI     R16, 0
   \   00000042   1E70               ADC     R7, R16
   \   00000044   01AE               MOVW    R21:R20, R29:R28
   \   00000046   5E40               SUBI    R20, 224
   \   00000048   4F5F               SBCI    R21, 255
   \   0000004A   0193               MOVW    R19:R18, R7:R6
   \   0000004C   0183               MOVW    R17:R16, R7:R6
   \   0000004E   ........           CALL    fpadd1271
   \   00000052   01AE               MOVW    R21:R20, R29:R28
   \   00000054   5D40               SUBI    R20, 208
   \   00000056   4F5F               SBCI    R21, 255
   \   00000058   0193               MOVW    R19:R18, R7:R6
   \   0000005A   5F20               SUBI    R18, 240
   \   0000005C   4F3F               SBCI    R19, 255
   \   0000005E   0183               MOVW    R17:R16, R7:R6
   \   00000060   5F00               SUBI    R16, 240
   \   00000062   4F1F               SBCI    R17, 255
   \   00000064   ........           CALL    fpadd1271
    739              fp2copy1271_flash(Q->t2, t3);
   \   00000068   0152               MOVW    R11:R10, R5:R4
   \   0000006A   E400               LDI     R16, 64
   \   0000006C   0EA0               ADD     R10, R16
   \   0000006E   E000               LDI     R16, 0
   \   00000070   1EB0               ADC     R11, R16
   \   00000072   019E               MOVW    R19:R18, R29:R28
   \   00000074   0185               MOVW    R17:R16, R11:R10
   \   00000076   ........           CALL    fpcopy1271_flash
   \   0000007A   019E               MOVW    R19:R18, R29:R28
   \   0000007C   5F20               SUBI    R18, 240
   \   0000007E   4F3F               SBCI    R19, 255
   \   00000080   0185               MOVW    R17:R16, R11:R10
   \   00000082   5F00               SUBI    R16, 240
   \   00000084   4F1F               SBCI    R17, 255
   \   00000086   ........           CALL    fpcopy1271_flash
    740              fp2mul1271(P->ta, t3, P->ta);           // Ta = 2dT1*t2 
   \   0000008A   01AD               MOVW    R21:R20, R27:R26
   \   0000008C   019E               MOVW    R19:R18, R29:R28
   \   0000008E   018D               MOVW    R17:R16, R27:R26
   \   00000090   ........           CALL    fp2mul1271
    741              fp2add1271(P->x, P->y, P->z);           // Z = (X1+Y1) 
   \   00000094   018C               MOVW    R17:R16, R25:R24
   \   00000096   5E00               SUBI    R16, 224
   \   00000098   4F1F               SBCI    R17, 255
   \   0000009A   0158               MOVW    R11:R10, R17:R16
   \   0000009C   01A3               MOVW    R21:R20, R7:R6
   \   0000009E   0198               MOVW    R19:R18, R17:R16
   \   000000A0   018C               MOVW    R17:R16, R25:R24
   \   000000A2   ........           CALL    fpadd1271
   \   000000A6   01A3               MOVW    R21:R20, R7:R6
   \   000000A8   5F40               SUBI    R20, 240
   \   000000AA   4F5F               SBCI    R21, 255
   \   000000AC   0195               MOVW    R19:R18, R11:R10
   \   000000AE   5F20               SUBI    R18, 240
   \   000000B0   4F3F               SBCI    R19, 255
   \   000000B2   018C               MOVW    R17:R16, R25:R24
   \   000000B4   5F00               SUBI    R16, 240
   \   000000B6   4F1F               SBCI    R17, 255
   \   000000B8   ........           CALL    fpadd1271
    742              fp2sub1271(P->y, P->x, P->tb);          // Tb = (Y1-X1)
   \   000000BC   018C               MOVW    R17:R16, R25:R24
   \   000000BE   5E00               SUBI    R16, 224
   \   000000C0   4F1F               SBCI    R17, 255
   \   000000C2   01A4               MOVW    R21:R20, R9:R8
   \   000000C4   019C               MOVW    R19:R18, R25:R24
   \   000000C6   ........           CALL    fpsub1271
   \   000000CA   01A4               MOVW    R21:R20, R9:R8
   \   000000CC   5F40               SUBI    R20, 240
   \   000000CE   4F5F               SBCI    R21, 255
   \   000000D0   019C               MOVW    R19:R18, R25:R24
   \   000000D2   5F20               SUBI    R18, 240
   \   000000D4   4F3F               SBCI    R19, 255
   \   000000D6   0185               MOVW    R17:R16, R11:R10
   \   000000D8   5F00               SUBI    R16, 240
   \   000000DA   4F1F               SBCI    R17, 255
   \   000000DC   ........           CALL    fpsub1271
    743              fp2sub1271(t1, P->ta, t2);              // t2 = theta
   \   000000E0   01AE               MOVW    R21:R20, R29:R28
   \   000000E2   5C40               SUBI    R20, 192
   \   000000E4   4F5F               SBCI    R21, 255
   \   000000E6   019D               MOVW    R19:R18, R27:R26
   \   000000E8   018E               MOVW    R17:R16, R29:R28
   \   000000EA   5E00               SUBI    R16, 224
   \   000000EC   4F1F               SBCI    R17, 255
   \   000000EE   ........           CALL    fpsub1271
   \   000000F2   01AE               MOVW    R21:R20, R29:R28
   \   000000F4   5B40               SUBI    R20, 176
   \   000000F6   4F5F               SBCI    R21, 255
   \   000000F8   019D               MOVW    R19:R18, R27:R26
   \   000000FA   5F20               SUBI    R18, 240
   \   000000FC   4F3F               SBCI    R19, 255
   \   000000FE   018E               MOVW    R17:R16, R29:R28
   \   00000100   5D00               SUBI    R16, 208
   \   00000102   4F1F               SBCI    R17, 255
   \   00000104   ........           CALL    fpsub1271
    744              fp2add1271(t1, P->ta, t1);              // t1 = alpha
   \   00000108   01AE               MOVW    R21:R20, R29:R28
   \   0000010A   5E40               SUBI    R20, 224
   \   0000010C   4F5F               SBCI    R21, 255
   \   0000010E   019D               MOVW    R19:R18, R27:R26
   \   00000110   018E               MOVW    R17:R16, R29:R28
   \   00000112   5E00               SUBI    R16, 224
   \   00000114   4F1F               SBCI    R17, 255
   \   00000116   ........           CALL    fpadd1271
   \   0000011A   01AE               MOVW    R21:R20, R29:R28
   \   0000011C   5D40               SUBI    R20, 208
   \   0000011E   4F5F               SBCI    R21, 255
   \   00000120   019D               MOVW    R19:R18, R27:R26
   \   00000122   5F20               SUBI    R18, 240
   \   00000124   4F3F               SBCI    R19, 255
   \   00000126   018E               MOVW    R17:R16, R29:R28
   \   00000128   5D00               SUBI    R16, 208
   \   0000012A   4F1F               SBCI    R17, 255
   \   0000012C   ........           CALL    fpadd1271
    745              fp2copy1271_flash(Q->xy, t3);
   \   00000130   019E               MOVW    R19:R18, R29:R28
   \   00000132   0182               MOVW    R17:R16, R5:R4
   \   00000134   ........           CALL    fpcopy1271_flash
   \   00000138   019E               MOVW    R19:R18, R29:R28
   \   0000013A   5F20               SUBI    R18, 240
   \   0000013C   4F3F               SBCI    R19, 255
   \   0000013E   0182               MOVW    R17:R16, R5:R4
   \   00000140   5F00               SUBI    R16, 240
   \   00000142   4F1F               SBCI    R17, 255
   \   00000144   ........           CALL    fpcopy1271_flash
    746              fp2mul1271(t3, P->z, P->ta);            // Ta = (X1+Y1)(x2+y2)   
   \   00000148   01AD               MOVW    R21:R20, R27:R26
   \   0000014A   0193               MOVW    R19:R18, R7:R6
   \   0000014C   018E               MOVW    R17:R16, R29:R28
   \   0000014E   ........           CALL    fp2mul1271
    747              fp2copy1271_flash(Q->yx, t3);
   \   00000152   E200               LDI     R16, 32
   \   00000154   0E40               ADD     R4, R16
   \   00000156   E000               LDI     R16, 0
   \   00000158   1E50               ADC     R5, R16
   \   0000015A   019E               MOVW    R19:R18, R29:R28
   \   0000015C   0182               MOVW    R17:R16, R5:R4
   \   0000015E   ........           CALL    fpcopy1271_flash
   \   00000162   019E               MOVW    R19:R18, R29:R28
   \   00000164   5F20               SUBI    R18, 240
   \   00000166   4F3F               SBCI    R19, 255
   \   00000168   E100               LDI     R16, 16
   \   0000016A   0E40               ADD     R4, R16
   \   0000016C   E000               LDI     R16, 0
   \   0000016E   1E50               ADC     R5, R16
   \   00000170   0182               MOVW    R17:R16, R5:R4
   \   00000172   ........           CALL    fpcopy1271_flash
    748              fp2mul1271(t3, P->tb, P->x);            // X = (Y1-X1)(y2-x2)       
   \   00000176   01AC               MOVW    R21:R20, R25:R24
   \   00000178   0194               MOVW    R19:R18, R9:R8
   \   0000017A   018E               MOVW    R17:R16, R29:R28
   \   0000017C   ........           CALL    fp2mul1271
    749              fp2mul1271(t1, t2, P->z);               // Zfinal = theta*alpha
   \   00000180   01A3               MOVW    R21:R20, R7:R6
   \   00000182   019E               MOVW    R19:R18, R29:R28
   \   00000184   5C20               SUBI    R18, 192
   \   00000186   4F3F               SBCI    R19, 255
   \   00000188   018E               MOVW    R17:R16, R29:R28
   \   0000018A   5E00               SUBI    R16, 224
   \   0000018C   4F1F               SBCI    R17, 255
   \   0000018E   ........           CALL    fp2mul1271
    750              fp2sub1271(P->ta, P->x, P->tb);         // Tbfinal = beta
   \   00000192   01A4               MOVW    R21:R20, R9:R8
   \   00000194   019C               MOVW    R19:R18, R25:R24
   \   00000196   018D               MOVW    R17:R16, R27:R26
   \   00000198   ........           CALL    fpsub1271
   \   0000019C   01A4               MOVW    R21:R20, R9:R8
   \   0000019E   5F40               SUBI    R20, 240
   \   000001A0   4F5F               SBCI    R21, 255
   \   000001A2   019C               MOVW    R19:R18, R25:R24
   \   000001A4   5F20               SUBI    R18, 240
   \   000001A6   4F3F               SBCI    R19, 255
   \   000001A8   018D               MOVW    R17:R16, R27:R26
   \   000001AA   5F00               SUBI    R16, 240
   \   000001AC   4F1F               SBCI    R17, 255
   \   000001AE   ........           CALL    fpsub1271
    751              fp2add1271(P->ta, P->x, P->ta);         // Tafinal = omega
   \   000001B2   01AD               MOVW    R21:R20, R27:R26
   \   000001B4   019C               MOVW    R19:R18, R25:R24
   \   000001B6   018D               MOVW    R17:R16, R27:R26
   \   000001B8   ........           CALL    fpadd1271
   \   000001BC   01AD               MOVW    R21:R20, R27:R26
   \   000001BE   5F40               SUBI    R20, 240
   \   000001C0   4F5F               SBCI    R21, 255
   \   000001C2   019C               MOVW    R19:R18, R25:R24
   \   000001C4   5F20               SUBI    R18, 240
   \   000001C6   4F3F               SBCI    R19, 255
   \   000001C8   018D               MOVW    R17:R16, R27:R26
   \   000001CA   5F00               SUBI    R16, 240
   \   000001CC   4F1F               SBCI    R17, 255
   \   000001CE   ........           CALL    fpadd1271
    752              fp2mul1271(P->tb, t2, P->x);            // Xfinal = beta*theta
   \   000001D2   01AC               MOVW    R21:R20, R25:R24
   \   000001D4   019E               MOVW    R19:R18, R29:R28
   \   000001D6   5C20               SUBI    R18, 192
   \   000001D8   4F3F               SBCI    R19, 255
   \   000001DA   0184               MOVW    R17:R16, R9:R8
   \   000001DC   ........           CALL    fp2mul1271
    753              fp2mul1271(P->ta, t1, P->y);            // Yfinal = alpha*omega
   \   000001E0   9680               ADIW    R25:R24, 32
   \   000001E2   01AC               MOVW    R21:R20, R25:R24
   \   000001E4   019E               MOVW    R19:R18, R29:R28
   \   000001E6   5E20               SUBI    R18, 224
   \   000001E8   4F3F               SBCI    R19, 255
   \   000001EA   018D               MOVW    R17:R16, R27:R26
   \   000001EC   ........           CALL    fp2mul1271
    754          }
   \   000001F0   96EF               ADIW    R29:R28, 63
   \   000001F2   96A1               ADIW    R29:R28, 33
   \   000001F4   ....               RJMP    ?Subroutine2
    755          
    756          

   \                                 In  segment FARCODE, align 2, keep-with-next
    757          bool ecc_mul_fixed(digit_t* k, point_t Q)
   \                     ecc_mul_fixed:
    758          { // Fixed-base scalar multiplication Q = k*G, where G is the generator. FIXED_BASE_TABLE stores v*2^(w-1) = 80 multiples of G.
   \   00000000   92FA               ST      -Y, R15
   \   00000002   92EA               ST      -Y, R14
   \   00000004   92DA               ST      -Y, R13
   \   00000006   92CA               ST      -Y, R12
   \   00000008   92BA               ST      -Y, R11
   \   0000000A   92AA               ST      -Y, R10
   \   0000000C   929A               ST      -Y, R9
   \   0000000E   928A               ST      -Y, R8
   \   00000010   927A               ST      -Y, R7
   \   00000012   926A               ST      -Y, R6
   \   00000014   925A               ST      -Y, R5
   \   00000016   924A               ST      -Y, R4
   \   00000018   93BA               ST      -Y, R27
   \   0000001A   93AA               ST      -Y, R26
   \   0000001C   939A               ST      -Y, R25
   \   0000001E   938A               ST      -Y, R24
   \   00000020                      REQUIRE ?Register_R4_is_cg_reg
   \   00000020                      REQUIRE ?Register_R5_is_cg_reg
   \   00000020                      REQUIRE ?Register_R6_is_cg_reg
   \   00000020                      REQUIRE ?Register_R7_is_cg_reg
   \   00000020                      REQUIRE ?Register_R8_is_cg_reg
   \   00000020                      REQUIRE ?Register_R9_is_cg_reg
   \   00000020                      REQUIRE ?Register_R10_is_cg_reg
   \   00000020                      REQUIRE ?Register_R11_is_cg_reg
   \   00000020                      REQUIRE ?Register_R12_is_cg_reg
   \   00000020                      REQUIRE ?Register_R13_is_cg_reg
   \   00000020                      REQUIRE ?Register_R14_is_cg_reg
   \   00000020                      REQUIRE ?Register_R15_is_cg_reg
   \   00000020   9722               SBIW    R29:R28, 2
   \   00000022   50D4               SUBI    R29, 4
   \   00000024   832A               STD     Y+2, R18
   \   00000026   833B               STD     Y+3, R19
    759            // Inputs: scalar "k" in [0, 2^256-1].
    760            // Output: Q = k*G in affine coordinates (x,y).
    761            // The function is based on the modified LSB-set comb method, which converts the scalar to an odd signed representation
    762            // with (bitlength(order)+w*v) digits.
    763          	unsigned int j, w = W_FIXEDBASE, v = V_FIXEDBASE, d = D_FIXEDBASE, e = E_FIXEDBASE;
    764          	unsigned int digit = 0, digits[NBITS_ORDER_PLUS_ONE + (W_FIXEDBASE*V_FIXEDBASE) - 1] = {0};
   \   00000028   019E               MOVW    R19:R18, R29:R28
   \   0000002A   512C               SUBI    R18, 28
   \   0000002C   4F3E               SBCI    R19, 254
   \   0000002E   01F9               MOVW    R31:R30, R19:R18
   \   00000030   E040               LDI     R20, 0
   \   00000032   E18E               LDI     R24, 30
   \   00000034   E092               LDI     R25, 2
   \                     ??ecc_mul_fixed_0:
   \   00000036   9341               ST      Z+, R20
   \   00000038   9701               SBIW    R25:R24, 1
   \   0000003A   F7E9               BRNE    ??ecc_mul_fixed_0
    765          	digit_t temp[NWORDS_ORDER];
    766          	point_extproj_t R;
    767          	point_precomp_t S;
    768          	int i, ii;
    769          
    770          	modulo_order(k, temp);                                      // temp = k mod (order) 
   \   0000003C   019E               MOVW    R19:R18, R29:R28
   \   0000003E   572C               SUBI    R18, 124
   \   00000040   4F3F               SBCI    R19, 255
   \   00000042   01F9               MOVW    R31:R30, R19:R18
   \   00000044   E280               LDI     R24, 32
   \                     ??ecc_mul_fixed_1:
   \   00000046   9341               ST      Z+, R20
   \   00000048   958A               DEC     R24
   \   0000004A   F7E9               BRNE    ??ecc_mul_fixed_1
   \   0000004C   01FE               MOVW    R31:R30, R29:R28
   \   0000004E   57EC               SUBI    R30, 124
   \   00000050   4FFF               SBCI    R31, 255
   \   00000052   E021               LDI     R18, 1
   \   00000054   8320               ST      Z, R18
   \   00000056   8341               STD     Z+1, R20
   \   00000058   8342               STD     Z+2, R20
   \   0000005A   8343               STD     Z+3, R20
   \   0000005C   01AE               MOVW    R21:R20, R29:R28
   \   0000005E   554C               SUBI    R20, 92
   \   00000060   4F5F               SBCI    R21, 255
   \   00000062   ....               LDI     R18, LOW(Montgomery_Rprime)
   \   00000064   ....               LDI     R19, (Montgomery_Rprime) >> 8
   \   00000066   ........           CALL    Montgomery_multiply_mod_order
   \   0000006A   01AE               MOVW    R21:R20, R29:R28
   \   0000006C   594C               SUBI    R20, 156
   \   0000006E   4F5F               SBCI    R21, 255
   \   00000070   019E               MOVW    R19:R18, R29:R28
   \   00000072   572C               SUBI    R18, 124
   \   00000074   4F3F               SBCI    R19, 255
   \   00000076   018E               MOVW    R17:R16, R29:R28
   \   00000078   550C               SUBI    R16, 92
   \   0000007A   4F1F               SBCI    R17, 255
   \   0000007C   ........           CALL    Montgomery_multiply_mod_order
    771          	conversion_to_odd(temp, temp);                              // Converting scalar to odd using the prime subgroup order
   \   00000080   019E               MOVW    R19:R18, R29:R28
   \   00000082   592C               SUBI    R18, 156
   \   00000084   4F3F               SBCI    R19, 255
   \   00000086   018E               MOVW    R17:R16, R29:R28
   \   00000088   590C               SUBI    R16, 156
   \   0000008A   4F1F               SBCI    R17, 255
   \   0000008C   ........           CALL    conversion_to_odd
    772          	mLSB_set_recode((uint64_t*)temp, digits);                   // Scalar recoding
   \   00000090   019E               MOVW    R19:R18, R29:R28
   \   00000092   512C               SUBI    R18, 28
   \   00000094   4F3E               SBCI    R19, 254
   \   00000096   018E               MOVW    R17:R16, R29:R28
   \   00000098   590C               SUBI    R16, 156
   \   0000009A   4F1F               SBCI    R17, 255
   \   0000009C   ....               RCALL   mLSB_set_recode
    773          
    774          	// Extracting initial digit 
    775          	digit = digits[w*d-1];
   \   0000009E   01FE               MOVW    R31:R30, R29:R28
   \   000000A0   52EA               SUBI    R30, 42
   \   000000A2   4FFC               SBCI    R31, 252
   \   000000A4   8140               LD      R20, Z
   \   000000A6   8151               LDD     R21, Z+1
    776          	for (i = (int)((w-1)*d-1); i >= (int)(2*d-1); i = i-d)
   \   000000A8   01FE               MOVW    R31:R30, R29:R28
   \   000000AA   58EE               SUBI    R30, 142
   \   000000AC   4FFC               SBCI    R31, 252
   \   000000AE   E003               LDI     R16, 3
    777          	{
    778          		digit = 2*digit + digits[i];
   \                     ??ecc_mul_fixed_2:
   \   000000B0   0F44               LSL     R20
   \   000000B2   1F55               ROL     R21
   \   000000B4   8120               LD      R18, Z
   \   000000B6   8131               LDD     R19, Z+1
   \   000000B8   0F42               ADD     R20, R18
   \   000000BA   1F53               ADC     R21, R19
    779          	}
   \   000000BC   56E4               SUBI    R30, 100
   \   000000BE   40F0               SBCI    R31, 0
   \   000000C0   950A               DEC     R16
   \   000000C2   F7B1               BRNE    ??ecc_mul_fixed_2
    780          	// Initialize R = (x+y,y-x,2dt) with a point from the table
    781          	table_lookup_fixed_base(((point_precomp_t*)&FIXED_BASE_TABLE)+(v-1)*(1 << (w-1)), S, digit, digits[d-1]);
   \   000000C4   ....               LDI     R16, LOW(FIXED_BASE_TABLE)
   \   000000C6   ....               LDI     R17, (FIXED_BASE_TABLE) >> 8
   \   000000C8   0178               MOVW    R15:R14, R17:R16
   \   000000CA   E108               LDI     R16, 24
   \   000000CC   0EF0               ADD     R15, R16
   \   000000CE   01FE               MOVW    R31:R30, R29:R28
   \   000000D0   5BEA               SUBI    R30, 186
   \   000000D2   4FFD               SBCI    R31, 253
   \   000000D4   8160               LD      R22, Z
   \   000000D6   8171               LDD     R23, Z+1
   \   000000D8   019E               MOVW    R19:R18, R29:R28
   \   000000DA   5F2C               SUBI    R18, 252
   \   000000DC   4F3F               SBCI    R19, 255
   \   000000DE   0187               MOVW    R17:R16, R15:R14
   \   000000E0   ........           CALL    table_lookup_fixed_base
    782          	R5_to_R1(S, R);                                             // Converting to representation (X:Y:1:Ta:Tb)
   \   000000E4   019E               MOVW    R19:R18, R29:R28
   \   000000E6   5B2C               SUBI    R18, 188
   \   000000E8   4F3E               SBCI    R19, 254
   \   000000EA   018E               MOVW    R17:R16, R29:R28
   \   000000EC   5F0C               SUBI    R16, 252
   \   000000EE   4F1F               SBCI    R17, 255
   \   000000F0   ....               RCALL   R5_to_R1
    783          
    784          	for (j = 0; j < (v-1); j++)
   \   000000F2   2466               CLR     R6
   \   000000F4   2477               CLR     R7
   \   000000F6   ....               LDI     R24, LOW(FIXED_BASE_TABLE)
   \   000000F8   ....               LDI     R25, (((FIXED_BASE_TABLE >> 8) + 18) & 0xff) & 0xFF
   \   000000FA   EB0D               LDI     R16, 189
   \   000000FC   2E40               MOV     R4, R16
   \   000000FE   2455               CLR     R5
   \   00000100   01DE               MOVW    R27:R26, R29:R28
   \   00000102   5CAE               SUBI    R26, 206
   \   00000104   4FBD               SBCI    R27, 253
    785          	{
    786          		digit = digits[w*d-(j+1)*e-1];
   \                     ??ecc_mul_fixed_3:
   \   00000106   01FD               MOVW    R31:R30, R27:R26
   \   00000108   57E0               SUBI    R30, 112
   \   0000010A   4FFE               SBCI    R31, 254
   \   0000010C   8140               LD      R20, Z
   \   0000010E   8151               LDD     R21, Z+1
    787          		for (i = (int)((w-1)*d-(j+1)*e-1); i >= (int)(2*d-(j+1)*e-1); i = i-d)
   \   00000110   0182               MOVW    R17:R16, R5:R4
   \   00000112   01B2               MOVW    R23:R22, R5:R4
   \   00000114   5664               SUBI    R22, 100
   \   00000116   4070               SBCI    R23, 0
   \   00000118   1646               CP      R4, R22
   \   0000011A   0657               CPC     R5, R23
   \   0000011C   F0AC               BRLT    ??ecc_mul_fixed_4
   \   0000011E   01FE               MOVW    R31:R30, R29:R28
   \   00000120   51EC               SUBI    R30, 28
   \   00000122   4FFE               SBCI    R31, 254
   \   00000124   0192               MOVW    R19:R18, R5:R4
   \   00000126   0F22               LSL     R18
   \   00000128   1F33               ROL     R19
   \   0000012A   0FE2               ADD     R30, R18
   \   0000012C   1FF3               ADC     R31, R19
    788          		{
    789          			digit = 2*digit + digits[i];
   \                     ??ecc_mul_fixed_5:
   \   0000012E   0F44               LSL     R20
   \   00000130   1F55               ROL     R21
   \   00000132   8120               LD      R18, Z
   \   00000134   8131               LDD     R19, Z+1
   \   00000136   0F42               ADD     R20, R18
   \   00000138   1F53               ADC     R21, R19
    790          		}
   \   0000013A   56E4               SUBI    R30, 100
   \   0000013C   40F0               SBCI    R31, 0
   \   0000013E   5302               SUBI    R16, 50
   \   00000140   4010               SBCI    R17, 0
   \   00000142   1706               CP      R16, R22
   \   00000144   0717               CPC     R17, R23
   \   00000146   F79C               BRGE    ??ecc_mul_fixed_5
    791          		// Extract point in (x+y,y-x,2dt) representation
    792          		table_lookup_fixed_base(((point_precomp_t*)&FIXED_BASE_TABLE)+(v-j-2)*(1 << (w-1)), S, digit, digits[d-(j+1)*e-1]);
   \                     ??ecc_mul_fixed_4:
   \   00000148   916D               LD      R22, X+
   \   0000014A   917C               LD      R23, X
   \   0000014C   9755               SBIW    R27:R26, 21
   \   0000014E   019E               MOVW    R19:R18, R29:R28
   \   00000150   5F2C               SUBI    R18, 252
   \   00000152   4F3F               SBCI    R19, 255
   \   00000154   018C               MOVW    R17:R16, R25:R24
   \   00000156   ........           CALL    table_lookup_fixed_base
    793          		eccmadd(S, R);                                          // R = R+S using representations (X,Y,Z,Ta,Tb) <- (X,Y,Z,Ta,Tb) + (x+y,y-x,2dt) 
   \   0000015A   019E               MOVW    R19:R18, R29:R28
   \   0000015C   5B2C               SUBI    R18, 188
   \   0000015E   4F3E               SBCI    R19, 254
   \   00000160   018E               MOVW    R17:R16, R29:R28
   \   00000162   5F0C               SUBI    R16, 252
   \   00000164   4F1F               SBCI    R17, 255
   \   00000166   ....               RCALL   eccmadd
    794          	}
   \   00000168   E001               LDI     R16, 1
   \   0000016A   0E60               ADD     R6, R16
   \   0000016C   E000               LDI     R16, 0
   \   0000016E   1E70               ADC     R7, R16
   \   00000170   EF06               LDI     R16, 246
   \   00000172   0E40               ADD     R4, R16
   \   00000174   EF0F               LDI     R16, 255
   \   00000176   1E50               ADC     R5, R16
   \   00000178   5096               SUBI    R25, 6
   \   0000017A   E004               LDI     R16, 4
   \   0000017C   1660               CP      R6, R16
   \   0000017E   E000               LDI     R16, 0
   \   00000180   0670               CPC     R7, R16
   \   00000182   F208               BRCS    ??ecc_mul_fixed_3
    795          
    796          	for (ii = (e-2); ii >= 0; ii--)
   \   00000184   E008               LDI     R16, 8
   \   00000186   8308               ST      Y, R16
   \   00000188   E000               LDI     R16, 0
   \   0000018A   8309               STD     Y+1, R16
   \   0000018C   01CE               MOVW    R25:R24, R29:R28
   \   0000018E   5B8C               SUBI    R24, 188
   \   00000190   4F9D               SBCI    R25, 253
   \   00000192   E009               LDI     R16, 9
   \   00000194   2ED0               MOV     R13, R16
    797          	{
    798          		eccdouble(R);                                           // R = 2*R using representations (X,Y,Z,Ta,Tb) <- 2*(X,Y,Z)
   \                     ??ecc_mul_fixed_6:
   \   00000196   018E               MOVW    R17:R16, R29:R28
   \   00000198   5B0C               SUBI    R16, 188
   \   0000019A   4F1E               SBCI    R17, 254
   \   0000019C   ........           CALL    eccdouble
    799          		for (j = 0; j < v; j++)
   \   000001A0   0157               MOVW    R11:R10, R15:R14
   \   000001A2   014C               MOVW    R9:R8, R25:R24
   \   000001A4   8048               LD      R4, Y
   \   000001A6   8059               LDD     R5, Y+1
   \   000001A8   EB0E               LDI     R16, 190
   \   000001AA   0E40               ADD     R4, R16
   \   000001AC   E000               LDI     R16, 0
   \   000001AE   1E50               ADC     R5, R16
   \   000001B0   E005               LDI     R16, 5
   \   000001B2   2EC0               MOV     R12, R16
    800          		{
    801          			digit = digits[w*d-j*e+ii-e];
   \                     ??ecc_mul_fixed_7:
   \   000001B4   01F4               MOVW    R31:R30, R9:R8
   \   000001B6   57E0               SUBI    R30, 112
   \   000001B8   4FFE               SBCI    R31, 254
   \   000001BA   8140               LD      R20, Z
   \   000001BC   8151               LDD     R21, Z+1
    802          			for (i = (int)((w-1)*d-j*e+ii-e); i >= (int)(2*d-j*e+ii-e); i = i-d)
   \   000001BE   0182               MOVW    R17:R16, R5:R4
   \   000001C0   01B2               MOVW    R23:R22, R5:R4
   \   000001C2   5664               SUBI    R22, 100
   \   000001C4   4070               SBCI    R23, 0
   \   000001C6   1646               CP      R4, R22
   \   000001C8   0657               CPC     R5, R23
   \   000001CA   F0AC               BRLT    ??ecc_mul_fixed_8
   \   000001CC   01FE               MOVW    R31:R30, R29:R28
   \   000001CE   51EC               SUBI    R30, 28
   \   000001D0   4FFE               SBCI    R31, 254
   \   000001D2   0192               MOVW    R19:R18, R5:R4
   \   000001D4   0F22               LSL     R18
   \   000001D6   1F33               ROL     R19
   \   000001D8   0FE2               ADD     R30, R18
   \   000001DA   1FF3               ADC     R31, R19
    803          			{
    804          				digit = 2*digit + digits[i];
   \                     ??ecc_mul_fixed_9:
   \   000001DC   0F44               LSL     R20
   \   000001DE   1F55               ROL     R21
   \   000001E0   8120               LD      R18, Z
   \   000001E2   8131               LDD     R19, Z+1
   \   000001E4   0F42               ADD     R20, R18
   \   000001E6   1F53               ADC     R21, R19
    805          			}
   \   000001E8   56E4               SUBI    R30, 100
   \   000001EA   40F0               SBCI    R31, 0
   \   000001EC   5302               SUBI    R16, 50
   \   000001EE   4010               SBCI    R17, 0
   \   000001F0   1706               CP      R16, R22
   \   000001F2   0717               CPC     R17, R23
   \   000001F4   F79C               BRGE    ??ecc_mul_fixed_9
    806          			// Extract point in (x+y,y-x,2dt) representation
    807          			table_lookup_fixed_base(((point_precomp_t*)&FIXED_BASE_TABLE)+(v-j-1)*(1 << (w-1)), S, digit, digits[d-j*e+ii-e]);
   \                     ??ecc_mul_fixed_8:
   \   000001F6   01F4               MOVW    R31:R30, R9:R8
   \   000001F8   8060               LD      R6, Z
   \   000001FA   E600               LDI     R16, 96
   \   000001FC   9F50               MUL     R21, R16
   \   000001FE   2D50               MOV     R21, R0
   \   00000200   9F40               MUL     R20, R16
   \   00000202   0D51               ADD     R21, R1
   \   00000204   01C5               MOVW    R25:R24, R11:R10
   \   00000206   0D80               ADD     R24, R0
   \   00000208   1F95               ADC     R25, R21
   \   0000020A   019E               MOVW    R19:R18, R29:R28
   \   0000020C   572C               SUBI    R18, 124
   \   0000020E   4F3F               SBCI    R19, 255
   \   00000210   018C               MOVW    R17:R16, R25:R24
   \   00000212   ........           CALL    fpcopy1271_flash
   \   00000216   019E               MOVW    R19:R18, R29:R28
   \   00000218   562C               SUBI    R18, 108
   \   0000021A   4F3F               SBCI    R19, 255
   \   0000021C   018C               MOVW    R17:R16, R25:R24
   \   0000021E   5F00               SUBI    R16, 240
   \   00000220   4F1F               SBCI    R17, 255
   \   00000222   ........           CALL    fpcopy1271_flash
   \   00000226   01DC               MOVW    R27:R26, R25:R24
   \   00000228   9690               ADIW    R27:R26, 32
   \   0000022A   019E               MOVW    R19:R18, R29:R28
   \   0000022C   552C               SUBI    R18, 92
   \   0000022E   4F3F               SBCI    R19, 255
   \   00000230   018D               MOVW    R17:R16, R27:R26
   \   00000232   ........           CALL    fpcopy1271_flash
   \   00000236   019E               MOVW    R19:R18, R29:R28
   \   00000238   542C               SUBI    R18, 76
   \   0000023A   4F3F               SBCI    R19, 255
   \   0000023C   018D               MOVW    R17:R16, R27:R26
   \   0000023E   5F00               SUBI    R16, 240
   \   00000240   4F1F               SBCI    R17, 255
   \   00000242   ........           CALL    fpcopy1271_flash
   \   00000246   5C80               SUBI    R24, 192
   \   00000248   4F9F               SBCI    R25, 255
   \   0000024A   019E               MOVW    R19:R18, R29:R28
   \   0000024C   532C               SUBI    R18, 60
   \   0000024E   4F3F               SBCI    R19, 255
   \   00000250   018C               MOVW    R17:R16, R25:R24
   \   00000252   ........           CALL    fpcopy1271_flash
   \   00000256   019E               MOVW    R19:R18, R29:R28
   \   00000258   522C               SUBI    R18, 44
   \   0000025A   4F3F               SBCI    R19, 255
   \   0000025C   018C               MOVW    R17:R16, R25:R24
   \   0000025E   5F00               SUBI    R16, 240
   \   00000260   4F1F               SBCI    R17, 255
   \   00000262   ........           CALL    fpcopy1271_flash
   \   00000266   019E               MOVW    R19:R18, R29:R28
   \   00000268   5F2C               SUBI    R18, 252
   \   0000026A   4F3E               SBCI    R19, 254
   \   0000026C   018E               MOVW    R17:R16, R29:R28
   \   0000026E   570C               SUBI    R16, 124
   \   00000270   4F1F               SBCI    R17, 255
   \   00000272   ........           CALL    fpcopy1271
   \   00000276   019E               MOVW    R19:R18, R29:R28
   \   00000278   5E2C               SUBI    R18, 236
   \   0000027A   4F3E               SBCI    R19, 254
   \   0000027C   018E               MOVW    R17:R16, R29:R28
   \   0000027E   560C               SUBI    R16, 108
   \   00000280   4F1F               SBCI    R17, 255
   \   00000282   ........           CALL    fpcopy1271
   \   00000286   019E               MOVW    R19:R18, R29:R28
   \   00000288   512C               SUBI    R18, 28
   \   0000028A   4F3F               SBCI    R19, 255
   \   0000028C   018E               MOVW    R17:R16, R29:R28
   \   0000028E   550C               SUBI    R16, 92
   \   00000290   4F1F               SBCI    R17, 255
   \   00000292   ........           CALL    fpcopy1271
   \   00000296   019E               MOVW    R19:R18, R29:R28
   \   00000298   502C               SUBI    R18, 12
   \   0000029A   4F3F               SBCI    R19, 255
   \   0000029C   018E               MOVW    R17:R16, R29:R28
   \   0000029E   540C               SUBI    R16, 76
   \   000002A0   4F1F               SBCI    R17, 255
   \   000002A2   ........           CALL    fpcopy1271
   \   000002A6   019E               MOVW    R19:R18, R29:R28
   \   000002A8   5D2C               SUBI    R18, 220
   \   000002AA   4F3E               SBCI    R19, 254
   \   000002AC   018E               MOVW    R17:R16, R29:R28
   \   000002AE   530C               SUBI    R16, 60
   \   000002B0   4F1F               SBCI    R17, 255
   \   000002B2   ........           CALL    fpcopy1271
   \   000002B6   019E               MOVW    R19:R18, R29:R28
   \   000002B8   5C2C               SUBI    R18, 204
   \   000002BA   4F3E               SBCI    R19, 254
   \   000002BC   018E               MOVW    R17:R16, R29:R28
   \   000002BE   520C               SUBI    R16, 44
   \   000002C0   4F1F               SBCI    R17, 255
   \   000002C2   ........           CALL    fpcopy1271
   \   000002C6   018E               MOVW    R17:R16, R29:R28
   \   000002C8   5D0C               SUBI    R16, 220
   \   000002CA   4F1E               SBCI    R17, 254
   \   000002CC   ........           CALL    fpneg1271
   \   000002D0   018E               MOVW    R17:R16, R29:R28
   \   000002D2   5C0C               SUBI    R16, 204
   \   000002D4   4F1E               SBCI    R17, 254
   \   000002D6   ........           CALL    fpneg1271
   \   000002DA   01CE               MOVW    R25:R24, R29:R28
   \   000002DC   578C               SUBI    R24, 124
   \   000002DE   4F9F               SBCI    R25, 255
   \   000002E0   2D26               MOV     R18, R6
   \   000002E2   7021               ANDI    R18, 0x01
   \   000002E4   E600               LDI     R16, 96
   \   000002E6   9F20               MUL     R18, R16
   \   000002E8   0D80               ADD     R24, R0
   \   000002EA   1D91               ADC     R25, R1
   \   000002EC   019E               MOVW    R19:R18, R29:R28
   \   000002EE   5F2C               SUBI    R18, 252
   \   000002F0   4F3F               SBCI    R19, 255
   \   000002F2   018C               MOVW    R17:R16, R25:R24
   \   000002F4   ........           CALL    fpcopy1271
   \   000002F8   019E               MOVW    R19:R18, R29:R28
   \   000002FA   5E2C               SUBI    R18, 236
   \   000002FC   4F3F               SBCI    R19, 255
   \   000002FE   018C               MOVW    R17:R16, R25:R24
   \   00000300   5F00               SUBI    R16, 240
   \   00000302   4F1F               SBCI    R17, 255
   \   00000304   ........           CALL    fpcopy1271
   \   00000308   01DC               MOVW    R27:R26, R25:R24
   \   0000030A   9690               ADIW    R27:R26, 32
   \   0000030C   019E               MOVW    R19:R18, R29:R28
   \   0000030E   5D2C               SUBI    R18, 220
   \   00000310   4F3F               SBCI    R19, 255
   \   00000312   018D               MOVW    R17:R16, R27:R26
   \   00000314   ........           CALL    fpcopy1271
   \   00000318   019E               MOVW    R19:R18, R29:R28
   \   0000031A   5C2C               SUBI    R18, 204
   \   0000031C   4F3F               SBCI    R19, 255
   \   0000031E   018D               MOVW    R17:R16, R27:R26
   \   00000320   5F00               SUBI    R16, 240
   \   00000322   4F1F               SBCI    R17, 255
   \   00000324   ........           CALL    fpcopy1271
   \   00000328   5C80               SUBI    R24, 192
   \   0000032A   4F9F               SBCI    R25, 255
   \   0000032C   019E               MOVW    R19:R18, R29:R28
   \   0000032E   5B2C               SUBI    R18, 188
   \   00000330   4F3F               SBCI    R19, 255
   \   00000332   018C               MOVW    R17:R16, R25:R24
   \   00000334   ........           CALL    fpcopy1271
   \   00000338   019E               MOVW    R19:R18, R29:R28
   \   0000033A   5A2C               SUBI    R18, 172
   \   0000033C   4F3F               SBCI    R19, 255
   \   0000033E   018C               MOVW    R17:R16, R25:R24
   \   00000340   5F00               SUBI    R16, 240
   \   00000342   4F1F               SBCI    R17, 255
   \   00000344   ........           CALL    fpcopy1271
    808          			eccmadd(S, R);                                      // R = R+S using representations (X,Y,Z,Ta,Tb) <- (X,Y,Z,Ta,Tb) + (x+y,y-x,2dt)
   \   00000348   019E               MOVW    R19:R18, R29:R28
   \   0000034A   5B2C               SUBI    R18, 188
   \   0000034C   4F3E               SBCI    R19, 254
   \   0000034E   018E               MOVW    R17:R16, R29:R28
   \   00000350   5F0C               SUBI    R16, 252
   \   00000352   4F1F               SBCI    R17, 255
   \   00000354   ....               RCALL   eccmadd
    809          		}
   \   00000356   EF06               LDI     R16, 246
   \   00000358   0E40               ADD     R4, R16
   \   0000035A   EF0F               LDI     R16, 255
   \   0000035C   1E50               ADC     R5, R16
   \   0000035E   EE0C               LDI     R16, 236
   \   00000360   0E80               ADD     R8, R16
   \   00000362   EF0F               LDI     R16, 255
   \   00000364   1E90               ADC     R9, R16
   \   00000366   EF0A               LDI     R16, 250
   \   00000368   0EB0               ADD     R11, R16
   \   0000036A   94CA               DEC     R12
   \   0000036C   F009               BREQ    $+2+2
   \   0000036E   CF22               RJMP    ??ecc_mul_fixed_7
    810          	}
   \   00000370   8108               LD      R16, Y
   \   00000372   8119               LDD     R17, Y+1
   \   00000374   5001               SUBI    R16, 1
   \   00000376   4010               SBCI    R17, 0
   \   00000378   8308               ST      Y, R16
   \   0000037A   8319               STD     Y+1, R17
   \   0000037C   01C4               MOVW    R25:R24, R9:R8
   \   0000037E   598E               SUBI    R24, 158
   \   00000380   4F9F               SBCI    R25, 255
   \   00000382   94DA               DEC     R13
   \   00000384   F009               BREQ    $+2+2
   \   00000386   CF07               RJMP    ??ecc_mul_fixed_6
    811          	eccnorm(R, Q);                                              // Conversion to affine coordinates (x,y) and modular correction.
   \   00000388   812A               LDD     R18, Y+2
   \   0000038A   813B               LDD     R19, Y+3
   \   0000038C   018E               MOVW    R17:R16, R29:R28
   \   0000038E   5B0C               SUBI    R16, 188
   \   00000390   4F1E               SBCI    R17, 254
   \   00000392   ........           CALL    eccnorm
    812          
    813          	return true;
   \   00000396   E001               LDI     R16, 1
   \   00000398   E010               LDI     R17, 0
   \   0000039A   9622               ADIW    R29:R28, 2
   \   0000039C   5FDC               SUBI    R29, 252
   \   0000039E                      REQUIRE ?Subroutine1
   \   0000039E                      ;               // Fall through to label ?Subroutine1
    814          }

   \                                 In  segment FARCODE, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   9189               LD      R24, Y+
   \   00000002   9199               LD      R25, Y+
   \   00000004   91A9               LD      R26, Y+
   \   00000006   91B9               LD      R27, Y+
   \   00000008   9049               LD      R4, Y+
   \   0000000A   9059               LD      R5, Y+
   \   0000000C   9069               LD      R6, Y+
   \   0000000E   9079               LD      R7, Y+
   \   00000010   9089               LD      R8, Y+
   \   00000012   9099               LD      R9, Y+
   \   00000014   90A9               LD      R10, Y+
   \   00000016   90B9               LD      R11, Y+
   \   00000018   90C9               LD      R12, Y+
   \   0000001A   90D9               LD      R13, Y+
   \   0000001C   90E9               LD      R14, Y+
   \   0000001E   90F9               LD      R15, Y+
   \   00000020   9508               RET
    815          
    816          

   \                                 In  segment FARCODE, align 2, keep-with-next
    817          void mLSB_set_recode(uint64_t* scalar, unsigned int *digits)
   \                     mLSB_set_recode:
    818          { // Computes the modified LSB-set representation of a scalar
   \   00000000   92AA               ST      -Y, R10
   \   00000002   929A               ST      -Y, R9
   \   00000004   928A               ST      -Y, R8
   \   00000006   927A               ST      -Y, R7
   \   00000008   926A               ST      -Y, R6
   \   0000000A   925A               ST      -Y, R5
   \   0000000C   924A               ST      -Y, R4
   \   0000000E   93BA               ST      -Y, R27
   \   00000010   93AA               ST      -Y, R26
   \   00000012   939A               ST      -Y, R25
   \   00000014   938A               ST      -Y, R24
   \   00000016                      REQUIRE ?Register_R4_is_cg_reg
   \   00000016                      REQUIRE ?Register_R5_is_cg_reg
   \   00000016                      REQUIRE ?Register_R6_is_cg_reg
   \   00000016                      REQUIRE ?Register_R7_is_cg_reg
   \   00000016                      REQUIRE ?Register_R8_is_cg_reg
   \   00000016                      REQUIRE ?Register_R9_is_cg_reg
   \   00000016                      REQUIRE ?Register_R10_is_cg_reg
   \   00000016   9768               SBIW    R29:R28, 24
   \   00000018   0118               MOVW    R3:R2, R17:R16
   \   0000001A   0149               MOVW    R9:R8, R19:R18
    819            // Inputs: scalar in [0, order-1], where the order of FourQ's subgroup is 246 bits.
    820            // Output: digits, where the first "d" values (from index 0 to (d-1)) store the signs for the recoded values using the convention: -1 (negative), 0 (positive), and
    821            //         the remaining values (from index d to (l-1)) store the recoded values in mLSB-set representation, excluding their sign, 
    822            //         where l = d*w and d = ceil(bitlength(order)/(w*v))*v. The values v and w are fixed and must be in the range [1, 10] (see FourQ.h); they determine the size 
    823            //         of the precomputed table "FIXED_BASE_TABLE" used by ecc_mul_fixed(). 
    824              unsigned int i, j, d = D_FIXEDBASE, l = L_FIXEDBASE;
    825              uint64_t temp, carry;
    826              
    827              digits[d-1] = 0;
   \   0000001C   01F9               MOVW    R31:R30, R19:R18
   \   0000001E   59EE               SUBI    R30, 158
   \   00000020   4FFF               SBCI    R31, 255
   \   00000022   E000               LDI     R16, 0
   \   00000024   8300               ST      Z, R16
   \   00000026   8301               STD     Z+1, R16
    828          
    829              // Shift scalar to the right by 1   
    830              for (j = 0; j < (NWORDS64_ORDER-1); j++) {
   \   00000028   01D1               MOVW    R27:R26, R3:R2
   \   0000002A   E093               LDI     R25, 3
    831                  SHIFTR(scalar[j+1], scalar[j], 1, scalar[j], RADIX64);
   \                     ??mLSB_set_recode_0:
   \   0000002C   01FD               MOVW    R31:R30, R27:R26
   \   0000002E   8500               LDD     R16, Z+8
   \   00000030   7001               ANDI    R16, 0x01
   \   00000032   9506               LSR     R16
   \   00000034   E070               LDI     R23, 0
   \   00000036   9577               ROR     R23
   \   00000038   8308               ST      Y, R16
   \   0000003A   8309               STD     Y+1, R16
   \   0000003C   830A               STD     Y+2, R16
   \   0000003E   830B               STD     Y+3, R16
   \   00000040   830C               STD     Y+4, R16
   \   00000042   830D               STD     Y+5, R16
   \   00000044   830E               STD     Y+6, R16
   \   00000046   837F               STD     Y+7, R23
   \   00000048   8100               LD      R16, Z
   \   0000004A   8111               LDD     R17, Z+1
   \   0000004C   8122               LDD     R18, Z+2
   \   0000004E   8133               LDD     R19, Z+3
   \   00000050   8144               LDD     R20, Z+4
   \   00000052   8155               LDD     R21, Z+5
   \   00000054   8166               LDD     R22, Z+6
   \   00000056   8177               LDD     R23, Z+7
   \   00000058   9576               LSR     R23
   \   0000005A   9567               ROR     R22
   \   0000005C   9557               ROR     R21
   \   0000005E   9547               ROR     R20
   \   00000060   9537               ROR     R19
   \   00000062   9527               ROR     R18
   \   00000064   9517               ROR     R17
   \   00000066   9507               ROR     R16
   \   00000068   01FE               MOVW    R31:R30, R29:R28
   \   0000006A   ........           CALL    ?LL_XOR_L12
   \   0000006E   01FD               MOVW    R31:R30, R27:R26
   \   00000070   8300               ST      Z, R16
   \   00000072   8311               STD     Z+1, R17
   \   00000074   8322               STD     Z+2, R18
   \   00000076   8333               STD     Z+3, R19
   \   00000078   8344               STD     Z+4, R20
   \   0000007A   8355               STD     Z+5, R21
   \   0000007C   8366               STD     Z+6, R22
   \   0000007E   8377               STD     Z+7, R23
    832              }
   \   00000080   9618               ADIW    R27:R26, 8
   \   00000082   959A               DEC     R25
   \   00000084   F699               BRNE    ??mLSB_set_recode_0
    833              scalar[NWORDS64_ORDER-1] >>= 1;
   \   00000086   01F1               MOVW    R31:R30, R3:R2
   \   00000088   8D00               LDD     R16, Z+24
   \   0000008A   8D11               LDD     R17, Z+25
   \   0000008C   8D22               LDD     R18, Z+26
   \   0000008E   8D33               LDD     R19, Z+27
   \   00000090   8D44               LDD     R20, Z+28
   \   00000092   8D55               LDD     R21, Z+29
   \   00000094   8D66               LDD     R22, Z+30
   \   00000096   8D77               LDD     R23, Z+31
   \   00000098   9576               LSR     R23
   \   0000009A   9567               ROR     R22
   \   0000009C   9557               ROR     R21
   \   0000009E   9547               ROR     R20
   \   000000A0   9537               ROR     R19
   \   000000A2   9527               ROR     R18
   \   000000A4   9517               ROR     R17
   \   000000A6   9507               ROR     R16
   \   000000A8   8F00               STD     Z+24, R16
   \   000000AA   8F11               STD     Z+25, R17
   \   000000AC   8F22               STD     Z+26, R18
   \   000000AE   8F33               STD     Z+27, R19
   \   000000B0   8F44               STD     Z+28, R20
   \   000000B2   8F55               STD     Z+29, R21
   \   000000B4   8F66               STD     Z+30, R22
   \   000000B6   8F77               STD     Z+31, R23
    834          
    835              for (i = 0; i < (d-1); i++)
   \   000000B8   2444               CLR     R4
   \   000000BA   2455               CLR     R5
   \   000000BC   0104               MOVW    R1:R0, R9:R8
    836              {
    837                  digits[i] = (unsigned int)((scalar[0] & 1) - 1);  // Convention for the "sign" row: 
   \                     ??mLSB_set_recode_1:
   \   000000BE   8180               LD      R24, Z
   \   000000C0   7081               ANDI    R24, 0x01
   \   000000C2   E090               LDI     R25, 0
   \   000000C4   9701               SBIW    R25:R24, 1
   \   000000C6   01F0               MOVW    R31:R30, R1:R0
   \   000000C8   8380               ST      Z, R24
   \   000000CA   8391               STD     Z+1, R25
    838                                                                    // if scalar_(i+1) = 0 then digit_i = -1 (negative), else if scalar_(i+1) = 1 then digit_i = 0 (positive)
    839                  // Shift scalar to the right by 1   
    840                  for (j = 0; j < (NWORDS64_ORDER-1); j++) {
   \   000000CC   01D1               MOVW    R27:R26, R3:R2
   \   000000CE   E093               LDI     R25, 3
    841                      SHIFTR(scalar[j+1], scalar[j], 1, scalar[j], RADIX64);
   \                     ??mLSB_set_recode_2:
   \   000000D0   01FD               MOVW    R31:R30, R27:R26
   \   000000D2   8500               LDD     R16, Z+8
   \   000000D4   7001               ANDI    R16, 0x01
   \   000000D6   9506               LSR     R16
   \   000000D8   E070               LDI     R23, 0
   \   000000DA   9577               ROR     R23
   \   000000DC   8308               ST      Y, R16
   \   000000DE   8309               STD     Y+1, R16
   \   000000E0   830A               STD     Y+2, R16
   \   000000E2   830B               STD     Y+3, R16
   \   000000E4   830C               STD     Y+4, R16
   \   000000E6   830D               STD     Y+5, R16
   \   000000E8   830E               STD     Y+6, R16
   \   000000EA   837F               STD     Y+7, R23
   \   000000EC   8100               LD      R16, Z
   \   000000EE   8111               LDD     R17, Z+1
   \   000000F0   8122               LDD     R18, Z+2
   \   000000F2   8133               LDD     R19, Z+3
   \   000000F4   8144               LDD     R20, Z+4
   \   000000F6   8155               LDD     R21, Z+5
   \   000000F8   8166               LDD     R22, Z+6
   \   000000FA   8177               LDD     R23, Z+7
   \   000000FC   9576               LSR     R23
   \   000000FE   9567               ROR     R22
   \   00000100   9557               ROR     R21
   \   00000102   9547               ROR     R20
   \   00000104   9537               ROR     R19
   \   00000106   9527               ROR     R18
   \   00000108   9517               ROR     R17
   \   0000010A   9507               ROR     R16
   \   0000010C   01FE               MOVW    R31:R30, R29:R28
   \   0000010E   ........           CALL    ?LL_XOR_L12
   \   00000112   01FD               MOVW    R31:R30, R27:R26
   \   00000114   8300               ST      Z, R16
   \   00000116   8311               STD     Z+1, R17
   \   00000118   8322               STD     Z+2, R18
   \   0000011A   8333               STD     Z+3, R19
   \   0000011C   8344               STD     Z+4, R20
   \   0000011E   8355               STD     Z+5, R21
   \   00000120   8366               STD     Z+6, R22
   \   00000122   8377               STD     Z+7, R23
    842                  }
   \   00000124   9618               ADIW    R27:R26, 8
   \   00000126   959A               DEC     R25
   \   00000128   F699               BRNE    ??mLSB_set_recode_2
    843                  scalar[NWORDS64_ORDER-1] >>= 1;
   \   0000012A   01F1               MOVW    R31:R30, R3:R2
   \   0000012C   8D00               LDD     R16, Z+24
   \   0000012E   8D11               LDD     R17, Z+25
   \   00000130   8D22               LDD     R18, Z+26
   \   00000132   8D33               LDD     R19, Z+27
   \   00000134   8D44               LDD     R20, Z+28
   \   00000136   8D55               LDD     R21, Z+29
   \   00000138   8D66               LDD     R22, Z+30
   \   0000013A   8D77               LDD     R23, Z+31
   \   0000013C   9576               LSR     R23
   \   0000013E   9567               ROR     R22
   \   00000140   9557               ROR     R21
   \   00000142   9547               ROR     R20
   \   00000144   9537               ROR     R19
   \   00000146   9527               ROR     R18
   \   00000148   9517               ROR     R17
   \   0000014A   9507               ROR     R16
   \   0000014C   8F00               STD     Z+24, R16
   \   0000014E   8F11               STD     Z+25, R17
   \   00000150   8F22               STD     Z+26, R18
   \   00000152   8F33               STD     Z+27, R19
   \   00000154   8F44               STD     Z+28, R20
   \   00000156   8F55               STD     Z+29, R21
   \   00000158   8F66               STD     Z+30, R22
   \   0000015A   8F77               STD     Z+31, R23
    844              } 
   \   0000015C   E001               LDI     R16, 1
   \   0000015E   0E40               ADD     R4, R16
   \   00000160   E000               LDI     R16, 0
   \   00000162   1E50               ADC     R5, R16
   \   00000164   E002               LDI     R16, 2
   \   00000166   0E00               ADD     R0, R16
   \   00000168   E000               LDI     R16, 0
   \   0000016A   1E10               ADC     R1, R16
   \   0000016C   E301               LDI     R16, 49
   \   0000016E   1640               CP      R4, R16
   \   00000170   E000               LDI     R16, 0
   \   00000172   0650               CPC     R5, R16
   \   00000174   F408               BRCC    $+2+2
   \   00000176   CFA3               RJMP    ??mLSB_set_recode_1
    845          
    846              for (i = d; i < l; i++)
   \   00000178   E302               LDI     R16, 50
   \   0000017A   2E40               MOV     R4, R16
   \   0000017C   2455               CLR     R5
   \   0000017E   0134               MOVW    R7:R6, R9:R8
   \   00000180   E604               LDI     R16, 100
   \   00000182   0E60               ADD     R6, R16
   \   00000184   1C75               ADC     R7, R5
   \   00000186   EC08               LDI     R16, 200
   \   00000188   2EA0               MOV     R10, R16
    847              {
    848                  digits[i] = (unsigned int)(scalar[0] & 1);        // digits_i = k mod 2. Sign is determined by the "sign" row
   \                     ??mLSB_set_recode_3:
   \   0000018A   01F1               MOVW    R31:R30, R3:R2
   \   0000018C   8100               LD      R16, Z
   \   0000018E   7001               ANDI    R16, 0x01
   \   00000190   E010               LDI     R17, 0
   \   00000192   01F3               MOVW    R31:R30, R7:R6
   \   00000194   8300               ST      Z, R16
   \   00000196   8311               STD     Z+1, R17
    849          
    850                  // Shift scalar to the right by 1  
    851                  for (j = 0; j < (NWORDS64_ORDER-1); j++) {
   \   00000198   01D1               MOVW    R27:R26, R3:R2
   \   0000019A   E093               LDI     R25, 3
    852                      SHIFTR(scalar[j+1], scalar[j], 1, scalar[j], RADIX64);
   \                     ??mLSB_set_recode_4:
   \   0000019C   01FD               MOVW    R31:R30, R27:R26
   \   0000019E   8500               LDD     R16, Z+8
   \   000001A0   7001               ANDI    R16, 0x01
   \   000001A2   9506               LSR     R16
   \   000001A4   E070               LDI     R23, 0
   \   000001A6   9577               ROR     R23
   \   000001A8   8308               ST      Y, R16
   \   000001AA   8309               STD     Y+1, R16
   \   000001AC   830A               STD     Y+2, R16
   \   000001AE   830B               STD     Y+3, R16
   \   000001B0   830C               STD     Y+4, R16
   \   000001B2   830D               STD     Y+5, R16
   \   000001B4   830E               STD     Y+6, R16
   \   000001B6   837F               STD     Y+7, R23
   \   000001B8   8100               LD      R16, Z
   \   000001BA   8111               LDD     R17, Z+1
   \   000001BC   8122               LDD     R18, Z+2
   \   000001BE   8133               LDD     R19, Z+3
   \   000001C0   8144               LDD     R20, Z+4
   \   000001C2   8155               LDD     R21, Z+5
   \   000001C4   8166               LDD     R22, Z+6
   \   000001C6   8177               LDD     R23, Z+7
   \   000001C8   9576               LSR     R23
   \   000001CA   9567               ROR     R22
   \   000001CC   9557               ROR     R21
   \   000001CE   9547               ROR     R20
   \   000001D0   9537               ROR     R19
   \   000001D2   9527               ROR     R18
   \   000001D4   9517               ROR     R17
   \   000001D6   9507               ROR     R16
   \   000001D8   01FE               MOVW    R31:R30, R29:R28
   \   000001DA   ........           CALL    ?LL_XOR_L12
   \   000001DE   01FD               MOVW    R31:R30, R27:R26
   \   000001E0   8300               ST      Z, R16
   \   000001E2   8311               STD     Z+1, R17
   \   000001E4   8322               STD     Z+2, R18
   \   000001E6   8333               STD     Z+3, R19
   \   000001E8   8344               STD     Z+4, R20
   \   000001EA   8355               STD     Z+5, R21
   \   000001EC   8366               STD     Z+6, R22
   \   000001EE   8377               STD     Z+7, R23
    853                  }
   \   000001F0   9618               ADIW    R27:R26, 8
   \   000001F2   959A               DEC     R25
   \   000001F4   F699               BRNE    ??mLSB_set_recode_4
    854                  scalar[NWORDS64_ORDER-1] >>= 1;
   \   000001F6   01F1               MOVW    R31:R30, R3:R2
   \   000001F8   8D00               LDD     R16, Z+24
   \   000001FA   8D11               LDD     R17, Z+25
   \   000001FC   8D22               LDD     R18, Z+26
   \   000001FE   8D33               LDD     R19, Z+27
   \   00000200   8D44               LDD     R20, Z+28
   \   00000202   8D55               LDD     R21, Z+29
   \   00000204   8D66               LDD     R22, Z+30
   \   00000206   8D77               LDD     R23, Z+31
   \   00000208   9576               LSR     R23
   \   0000020A   9567               ROR     R22
   \   0000020C   9557               ROR     R21
   \   0000020E   9547               ROR     R20
   \   00000210   9537               ROR     R19
   \   00000212   9527               ROR     R18
   \   00000214   9517               ROR     R17
   \   00000216   9507               ROR     R16
   \   00000218   8F00               STD     Z+24, R16
   \   0000021A   8F11               STD     Z+25, R17
   \   0000021C   8F22               STD     Z+26, R18
   \   0000021E   8F33               STD     Z+27, R19
   \   00000220   8F44               STD     Z+28, R20
   \   00000222   8F55               STD     Z+29, R21
   \   00000224   8F66               STD     Z+30, R22
   \   00000226   8F77               STD     Z+31, R23
    855          
    856                  temp = (0 - digits[i-(i/d)*d]) & digits[i];       // if (digits_i=0 \/ 1) then temp = 0, else if (digits_i=-1) then temp = 1 
   \   00000228   E342               LDI     R20, 50
   \   0000022A   E050               LDI     R21, 0
   \   0000022C   0182               MOVW    R17:R16, R5:R4
   \   0000022E   ........           CALL    ?US_DIVMOD_S_L02
   \   00000232   0198               MOVW    R19:R18, R17:R16
   \   00000234   E302               LDI     R16, 50
   \   00000236   9F30               MUL     R19, R16
   \   00000238   2D30               MOV     R19, R0
   \   0000023A   9F20               MUL     R18, R16
   \   0000023C   0D31               ADD     R19, R1
   \   0000023E   0182               MOVW    R17:R16, R5:R4
   \   00000240   1900               SUB     R16, R0
   \   00000242   0B13               SBC     R17, R19
   \   00000244   0F00               LSL     R16
   \   00000246   1F11               ROL     R17
   \   00000248   01F4               MOVW    R31:R30, R9:R8
   \   0000024A   0FE0               ADD     R30, R16
   \   0000024C   1FF1               ADC     R31, R17
   \   0000024E   8100               LD      R16, Z
   \   00000250   8111               LDD     R17, Z+1
   \   00000252   9511               NEG     R17
   \   00000254   9501               NEG     R16
   \   00000256   4010               SBCI    R17, 0
   \   00000258   01F3               MOVW    R31:R30, R7:R6
   \   0000025A   8120               LD      R18, Z
   \   0000025C   8131               LDD     R19, Z+1
   \   0000025E   2302               AND     R16, R18
   \   00000260   2313               AND     R17, R19
   \   00000262   E020               LDI     R18, 0
   \   00000264   8B08               STD     Y+16, R16
   \   00000266   8B19               STD     Y+17, R17
   \   00000268   8B2A               STD     Y+18, R18
   \   0000026A   8B2B               STD     Y+19, R18
   \   0000026C   8B2C               STD     Y+20, R18
   \   0000026E   8B2D               STD     Y+21, R18
   \   00000270   8B2E               STD     Y+22, R18
   \   00000272   8B2F               STD     Y+23, R18
    857                      
    858                  // floor(scalar/2) + temp
    859                  scalar[0] = scalar[0] + temp;
   \   00000274   01F1               MOVW    R31:R30, R3:R2
   \   00000276   8100               LD      R16, Z
   \   00000278   8111               LDD     R17, Z+1
   \   0000027A   8122               LDD     R18, Z+2
   \   0000027C   8133               LDD     R19, Z+3
   \   0000027E   8144               LDD     R20, Z+4
   \   00000280   8155               LDD     R21, Z+5
   \   00000282   8166               LDD     R22, Z+6
   \   00000284   8177               LDD     R23, Z+7
   \   00000286   01FE               MOVW    R31:R30, R29:R28
   \   00000288   9670               ADIW    R31:R30, 16
   \   0000028A   ........           CALL    ?LL_ADD_L12
   \   0000028E   01F1               MOVW    R31:R30, R3:R2
   \   00000290   8300               ST      Z, R16
   \   00000292   8311               STD     Z+1, R17
   \   00000294   8322               STD     Z+2, R18
   \   00000296   8333               STD     Z+3, R19
   \   00000298   8344               STD     Z+4, R20
   \   0000029A   8355               STD     Z+5, R21
   \   0000029C   8366               STD     Z+6, R22
   \   0000029E   8377               STD     Z+7, R23
    860                  carry = (temp & (uint64_t)is_digit_zero_ct((digit_t)scalar[0]));       // carry = (scalar[0] < temp);
   \   000002A0   FB37               BST     R19, 7
   \   000002A2   E040               LDI     R20, 0
   \   000002A4   E050               LDI     R21, 0
   \   000002A6   F940               BLD     R20, 0
   \   000002A8   9510               COM     R17
   \   000002AA   9520               COM     R18
   \   000002AC   9530               COM     R19
   \   000002AE   9501               NEG     R16
   \   000002B0   4F1F               SBCI    R17, 255
   \   000002B2   4F2F               SBCI    R18, 255
   \   000002B4   4F3F               SBCI    R19, 255
   \   000002B6   0F33               LSL     R19
   \   000002B8   E000               LDI     R16, 0
   \   000002BA   1F00               ROL     R16
   \   000002BC   2B40               OR      R20, R16
   \   000002BE   E001               LDI     R16, 1
   \   000002C0   2704               EOR     R16, R20
   \   000002C2   8308               ST      Y, R16
   \   000002C4   8359               STD     Y+1, R21
   \   000002C6   835A               STD     Y+2, R21
   \   000002C8   835B               STD     Y+3, R21
   \   000002CA   835C               STD     Y+4, R21
   \   000002CC   835D               STD     Y+5, R21
   \   000002CE   835E               STD     Y+6, R21
   \   000002D0   835F               STD     Y+7, R21
   \   000002D2   8908               LDD     R16, Y+16
   \   000002D4   8919               LDD     R17, Y+17
   \   000002D6   892A               LDD     R18, Y+18
   \   000002D8   893B               LDD     R19, Y+19
   \   000002DA   894C               LDD     R20, Y+20
   \   000002DC   895D               LDD     R21, Y+21
   \   000002DE   896E               LDD     R22, Y+22
   \   000002E0   897F               LDD     R23, Y+23
   \   000002E2   01FE               MOVW    R31:R30, R29:R28
   \   000002E4   ........           CALL    ?LL_AND_L12
   \   000002E8   8708               STD     Y+8, R16
   \   000002EA   8719               STD     Y+9, R17
   \   000002EC   872A               STD     Y+10, R18
   \   000002EE   873B               STD     Y+11, R19
   \   000002F0   874C               STD     Y+12, R20
   \   000002F2   875D               STD     Y+13, R21
   \   000002F4   876E               STD     Y+14, R22
   \   000002F6   877F               STD     Y+15, R23
    861                  for (j = 1; j < NWORDS64_ORDER; j++)
   \   000002F8   01D1               MOVW    R27:R26, R3:R2
   \   000002FA   9618               ADIW    R27:R26, 8
   \   000002FC   E093               LDI     R25, 3
    862                  {
    863                      scalar[j] = scalar[j] + carry; 
   \                     ??mLSB_set_recode_5:
   \   000002FE   910D               LD      R16, X+
   \   00000300   911D               LD      R17, X+
   \   00000302   912D               LD      R18, X+
   \   00000304   913D               LD      R19, X+
   \   00000306   914D               LD      R20, X+
   \   00000308   915D               LD      R21, X+
   \   0000030A   916D               LD      R22, X+
   \   0000030C   917C               LD      R23, X
   \   0000030E   9717               SBIW    R27:R26, 7
   \   00000310   9638               ADIW    R31:R30, 8
   \   00000312   ........           CALL    ?LL_ADD_L12
   \   00000316   01FD               MOVW    R31:R30, R27:R26
   \   00000318   8300               ST      Z, R16
   \   0000031A   8311               STD     Z+1, R17
   \   0000031C   8322               STD     Z+2, R18
   \   0000031E   8333               STD     Z+3, R19
   \   00000320   8344               STD     Z+4, R20
   \   00000322   8355               STD     Z+5, R21
   \   00000324   8366               STD     Z+6, R22
   \   00000326   8377               STD     Z+7, R23
    864                      carry = (carry & (uint64_t)is_digit_zero_ct((digit_t)scalar[j]));  // carry = (scalar[j] < temp);
   \   00000328   9618               ADIW    R27:R26, 8
   \   0000032A   8111               LDD     R17, Z+1
   \   0000032C   8122               LDD     R18, Z+2
   \   0000032E   8133               LDD     R19, Z+3
    865                  }
   \   00000330   FB37               BST     R19, 7
   \   00000332   E040               LDI     R20, 0
   \   00000334   E050               LDI     R21, 0
   \   00000336   F940               BLD     R20, 0
   \   00000338   9510               COM     R17
   \   0000033A   9520               COM     R18
   \   0000033C   9530               COM     R19
   \   0000033E   9501               NEG     R16
   \   00000340   4F1F               SBCI    R17, 255
   \   00000342   4F2F               SBCI    R18, 255
   \   00000344   4F3F               SBCI    R19, 255
   \   00000346   0F33               LSL     R19
   \   00000348   E000               LDI     R16, 0
   \   0000034A   1F00               ROL     R16
   \   0000034C   2B40               OR      R20, R16
   \   0000034E   E001               LDI     R16, 1
   \   00000350   2704               EOR     R16, R20
   \   00000352   8308               ST      Y, R16
   \   00000354   8359               STD     Y+1, R21
   \   00000356   835A               STD     Y+2, R21
   \   00000358   835B               STD     Y+3, R21
   \   0000035A   835C               STD     Y+4, R21
   \   0000035C   835D               STD     Y+5, R21
   \   0000035E   835E               STD     Y+6, R21
   \   00000360   835F               STD     Y+7, R21
   \   00000362   8508               LDD     R16, Y+8
   \   00000364   8519               LDD     R17, Y+9
   \   00000366   852A               LDD     R18, Y+10
   \   00000368   853B               LDD     R19, Y+11
   \   0000036A   854C               LDD     R20, Y+12
   \   0000036C   855D               LDD     R21, Y+13
   \   0000036E   856E               LDD     R22, Y+14
   \   00000370   857F               LDD     R23, Y+15
   \   00000372   01FE               MOVW    R31:R30, R29:R28
   \   00000374   ........           CALL    ?LL_AND_L12
   \   00000378   8708               STD     Y+8, R16
   \   0000037A   8719               STD     Y+9, R17
   \   0000037C   872A               STD     Y+10, R18
   \   0000037E   873B               STD     Y+11, R19
   \   00000380   874C               STD     Y+12, R20
   \   00000382   875D               STD     Y+13, R21
   \   00000384   876E               STD     Y+14, R22
   \   00000386   877F               STD     Y+15, R23
   \   00000388   959A               DEC     R25
   \   0000038A   F009               BREQ    $+2+2
   \   0000038C   CFB8               RJMP    ??mLSB_set_recode_5
    866              } 
   \   0000038E   E001               LDI     R16, 1
   \   00000390   0E40               ADD     R4, R16
   \   00000392   E000               LDI     R16, 0
   \   00000394   1E50               ADC     R5, R16
   \   00000396   E002               LDI     R16, 2
   \   00000398   0E60               ADD     R6, R16
   \   0000039A   E000               LDI     R16, 0
   \   0000039C   1E70               ADC     R7, R16
   \   0000039E   94AA               DEC     R10
   \   000003A0   F009               BREQ    $+2+2
   \   000003A2   CEF3               RJMP    ??mLSB_set_recode_3
    867              return;              
   \   000003A4   9668               ADIW    R29:R28, 24
   \   000003A6   9189               LD      R24, Y+
   \   000003A8   9199               LD      R25, Y+
   \   000003AA   91A9               LD      R26, Y+
   \   000003AC   91B9               LD      R27, Y+
   \   000003AE   9049               LD      R4, Y+
   \   000003B0   9059               LD      R5, Y+
   \   000003B2   9069               LD      R6, Y+
   \   000003B4   ........           JMP     ?Subroutine8
    868          }
    869          
    870          
    871          static __inline void eccneg_extproj_precomp(point_extproj_precomp_t P, point_extproj_precomp_t Q)
    872          { // Point negation
    873            // Input : point P in coordinates (X+Y,Y-X,2Z,2dT)
    874            // Output: point Q = -P = (Y-X,X+Y,2Z,-2dT)
    875              fp2copy1271(P->t2, Q->t2);
    876              fp2copy1271(P->xy, Q->yx);
    877              fp2copy1271(P->yx, Q->xy);
    878              fp2copy1271(P->z2, Q->z2);
    879              fp2neg1271(Q->t2);
    880          }
    881          
    882          
    883          static __inline void eccneg_precomp(point_precomp_t P, point_precomp_t Q)
    884          { // Point negation
    885            // Input : point P in coordinates (x+y,y-x,2dt)
    886            // Output: point Q = -P = (y-x,x+y,-2dt)
    887              fp2copy1271_flash(P->t2, Q->t2);
    888              fp2copy1271_flash(P->xy, Q->yx);
    889              fp2copy1271_flash(P->yx, Q->xy);
    890              fp2neg1271(Q->t2);
    891          }
    892          
    893          

   \                                 In  segment FARCODE, align 2, keep-with-next
    894          bool ecc_mul_double(digit_t* k, point_t Q, digit_t* l, point_t R)
   \                     ecc_mul_double:
    895          { // Double scalar multiplication R = k*G + l*Q, where the G is the generator. Uses DOUBLE_SCALAR_TABLE, which contains multiples of G, Phi(G), Psi(G) and Phi(Psi(G)).
   \   00000000   92FA               ST      -Y, R15
   \   00000002   92EA               ST      -Y, R14
   \   00000004   92DA               ST      -Y, R13
   \   00000006   92CA               ST      -Y, R12
   \   00000008   92BA               ST      -Y, R11
   \   0000000A   92AA               ST      -Y, R10
   \   0000000C   929A               ST      -Y, R9
   \   0000000E   928A               ST      -Y, R8
   \   00000010   927A               ST      -Y, R7
   \   00000012   926A               ST      -Y, R6
   \   00000014   925A               ST      -Y, R5
   \   00000016   924A               ST      -Y, R4
   \   00000018   93BA               ST      -Y, R27
   \   0000001A   93AA               ST      -Y, R26
   \   0000001C   939A               ST      -Y, R25
   \   0000001E   938A               ST      -Y, R24
   \   00000020                      REQUIRE ?Register_R4_is_cg_reg
   \   00000020                      REQUIRE ?Register_R5_is_cg_reg
   \   00000020                      REQUIRE ?Register_R6_is_cg_reg
   \   00000020                      REQUIRE ?Register_R7_is_cg_reg
   \   00000020                      REQUIRE ?Register_R8_is_cg_reg
   \   00000020                      REQUIRE ?Register_R9_is_cg_reg
   \   00000020                      REQUIRE ?Register_R10_is_cg_reg
   \   00000020                      REQUIRE ?Register_R11_is_cg_reg
   \   00000020                      REQUIRE ?Register_R12_is_cg_reg
   \   00000020                      REQUIRE ?Register_R13_is_cg_reg
   \   00000020                      REQUIRE ?Register_R14_is_cg_reg
   \   00000020                      REQUIRE ?Register_R15_is_cg_reg
   \   00000020   97EF               SBIW    R29:R28, 63
   \   00000022   97EA               SBIW    R29:R28, 58
   \   00000024   51D1               SUBI    R29, 17
   \   00000026   836F               STD     Y+7, R22
   \   00000028   8778               STD     Y+8, R23
   \   0000002A   01D8               MOVW    R27:R26, R17:R16
   \   0000002C   01B9               MOVW    R23:R22, R19:R18
   \   0000002E   01CA               MOVW    R25:R24, R21:R20
    896            // Inputs: point Q in affine coordinates,
    897            //         scalars "k" and "l" in [0, 2^256-1].
    898            // Output: R = k*G + l*Q in affine coordinates (x,y).
    899            // The function uses wNAF with interleaving.
    900          
    901            // SECURITY NOTE: this function is intended for a non-constant-time operation such as signature verification. 
    902          
    903          #if (USE_ENDO == true)
    904          	unsigned int position;
    905          	int i, digits_k1[65] = {0}, digits_k2[65] = {0}, digits_k3[65] = {0}, digits_k4[65] = {0};
   \   00000030   018E               MOVW    R17:R16, R29:R28
   \   00000032   5009               SUBI    R16, 9
   \   00000034   4E1F               SBCI    R17, 239
   \   00000036   01F8               MOVW    R31:R30, R17:R16
   \   00000038   E040               LDI     R20, 0
   \   0000003A   E822               LDI     R18, 130
   \                     ??ecc_mul_double_0:
   \   0000003C   9341               ST      Z+, R20
   \   0000003E   952A               DEC     R18
   \   00000040   F7E9               BRNE    ??ecc_mul_double_0
   \   00000042   018E               MOVW    R17:R16, R29:R28
   \   00000044   580B               SUBI    R16, 139
   \   00000046   4E1F               SBCI    R17, 239
   \   00000048   ....               LDI     R30, LOW((`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_1` + 130))
   \   0000004A   ....               LDI     R31, HIGH((`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_1` + 130))
   \   0000004C   ....               LDI     R19, BYTE3(`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_1`)
   \   0000004E   E842               LDI     R20, 130
   \   00000050   E050               LDI     R21, 0
   \   00000052   ........           CALL    ?ML_FLASH_SRAM_24EC_16_L07
   \   00000056   018E               MOVW    R17:R16, R29:R28
   \   00000058   500D               SUBI    R16, 13
   \   0000005A   4F10               SBCI    R17, 240
   \   0000005C   ....               LDI     R31, HIGH((`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_1` + 260))
   \   0000005E   E842               LDI     R20, 130
   \   00000060   ........           CALL    ?ML_FLASH_SRAM_24EC_16_L07
   \   00000064   018E               MOVW    R17:R16, R29:R28
   \   00000066   580F               SUBI    R16, 143
   \   00000068   4F10               SBCI    R17, 240
   \   0000006A   ....               LDI     R31, HIGH((`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_1` + 390))
   \   0000006C   E842               LDI     R20, 130
   \   0000006E   ........           CALL    ?ML_FLASH_SRAM_24EC_16_L07
    906          	int digits_l1[65] = {0}, digits_l2[65] = {0}, digits_l3[65] = {0}, digits_l4[65] = {0};
   \   00000072   018E               MOVW    R17:R16, R29:R28
   \   00000074   5101               SUBI    R16, 17
   \   00000076   4F11               SBCI    R17, 241
   \   00000078   ....               LDI     R31, HIGH((`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_1` + 520))
   \   0000007A   E842               LDI     R20, 130
   \   0000007C   ........           CALL    ?ML_FLASH_SRAM_24EC_16_L07
   \   00000080   018E               MOVW    R17:R16, R29:R28
   \   00000082   5903               SUBI    R16, 147
   \   00000084   4F11               SBCI    R17, 241
   \   00000086   ....               LDI     R31, HIGH((`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_1` + 650))
   \   00000088   E842               LDI     R20, 130
   \   0000008A   ........           CALL    ?ML_FLASH_SRAM_24EC_16_L07
   \   0000008E   018E               MOVW    R17:R16, R29:R28
   \   00000090   5105               SUBI    R16, 21
   \   00000092   4F12               SBCI    R17, 242
   \   00000094   ....               LDI     R31, HIGH((`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_1` + 780))
   \   00000096   E842               LDI     R20, 130
   \   00000098   ........           CALL    ?ML_FLASH_SRAM_24EC_16_L07
   \   0000009C   018E               MOVW    R17:R16, R29:R28
   \   0000009E   5907               SUBI    R16, 151
   \   000000A0   4F12               SBCI    R17, 242
   \   000000A2   ....               LDI     R31, HIGH((`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_1` + 910))
   \   000000A4   E842               LDI     R20, 130
   \   000000A6   ........           CALL    ?ML_FLASH_SRAM_24EC_16_L07
    907          	point_precomp_t V;
    908          	point_extproj_t Q1, Q2, Q3, Q4, T;
    909          	point_extproj_precomp_t U, Q_table1[NPOINTS_DOUBLEMUL_WQ], Q_table2[NPOINTS_DOUBLEMUL_WQ], Q_table3[NPOINTS_DOUBLEMUL_WQ], Q_table4[NPOINTS_DOUBLEMUL_WQ];
    910          	uint64_t k_scalars[4], l_scalars[4];
    911          
    912          	point_setup(Q, Q1);                                        // Convert to representation (X,Y,1,Ta,Tb)
   \   000000AA   019E               MOVW    R19:R18, R29:R28
   \   000000AC   5927               SUBI    R18, 151
   \   000000AE   4F3D               SBCI    R19, 253
   \   000000B0   018B               MOVW    R17:R16, R23:R22
   \   000000B2   ........           CALL    point_setup
    913          
    914          	if (ecc_point_validate(Q1) == false) {                     // Check if point lies on the curve
   \   000000B6   018E               MOVW    R17:R16, R29:R28
   \   000000B8   5907               SUBI    R16, 151
   \   000000BA   4F1D               SBCI    R17, 253
   \   000000BC   ....               RCALL   ecc_point_validate
   \   000000BE   2B01               OR      R16, R17
   \   000000C0   F419               BRNE    ??ecc_mul_double_1
    915          		return false;
   \   000000C2   E000               LDI     R16, 0
   \   000000C4   ........           JMP     ??ecc_mul_double_2
    916          	}
    917          
    918          	// Computing endomorphisms over point Q
    919          	ecccopy(Q1, Q2);
   \                     ??ecc_mul_double_1:
   \   000000C8   019E               MOVW    R19:R18, R29:R28
   \   000000CA   5327               SUBI    R18, 55
   \   000000CC   4F3E               SBCI    R19, 254
   \   000000CE   018E               MOVW    R17:R16, R29:R28
   \   000000D0   5907               SUBI    R16, 151
   \   000000D2   4F1D               SBCI    R17, 253
   \   000000D4   ........           CALL    fpcopy1271
   \   000000D8   019E               MOVW    R19:R18, R29:R28
   \   000000DA   5227               SUBI    R18, 39
   \   000000DC   4F3E               SBCI    R19, 254
   \   000000DE   018E               MOVW    R17:R16, R29:R28
   \   000000E0   5807               SUBI    R16, 135
   \   000000E2   4F1D               SBCI    R17, 253
   \   000000E4   ........           CALL    fpcopy1271
   \   000000E8   019E               MOVW    R19:R18, R29:R28
   \   000000EA   5127               SUBI    R18, 23
   \   000000EC   4F3E               SBCI    R19, 254
   \   000000EE   018E               MOVW    R17:R16, R29:R28
   \   000000F0   5707               SUBI    R16, 119
   \   000000F2   4F1D               SBCI    R17, 253
   \   000000F4   ........           CALL    fpcopy1271
   \   000000F8   019E               MOVW    R19:R18, R29:R28
   \   000000FA   5027               SUBI    R18, 7
   \   000000FC   4F3E               SBCI    R19, 254
   \   000000FE   018E               MOVW    R17:R16, R29:R28
   \   00000100   5607               SUBI    R16, 103
   \   00000102   4F1D               SBCI    R17, 253
   \   00000104   ........           CALL    fpcopy1271
   \   00000108   019E               MOVW    R19:R18, R29:R28
   \   0000010A   5F27               SUBI    R18, 247
   \   0000010C   4F3D               SBCI    R19, 253
   \   0000010E   018E               MOVW    R17:R16, R29:R28
   \   00000110   5507               SUBI    R16, 87
   \   00000112   4F1D               SBCI    R17, 253
   \   00000114   ........           CALL    fpcopy1271
   \   00000118   019E               MOVW    R19:R18, R29:R28
   \   0000011A   5E27               SUBI    R18, 231
   \   0000011C   4F3D               SBCI    R19, 253
   \   0000011E   018E               MOVW    R17:R16, R29:R28
   \   00000120   5407               SUBI    R16, 71
   \   00000122   4F1D               SBCI    R17, 253
   \   00000124   ........           CALL    fpcopy1271
   \   00000128   019E               MOVW    R19:R18, R29:R28
   \   0000012A   5D27               SUBI    R18, 215
   \   0000012C   4F3D               SBCI    R19, 253
   \   0000012E   018E               MOVW    R17:R16, R29:R28
   \   00000130   5307               SUBI    R16, 55
   \   00000132   4F1D               SBCI    R17, 253
   \   00000134   ........           CALL    fpcopy1271
   \   00000138   019E               MOVW    R19:R18, R29:R28
   \   0000013A   5C27               SUBI    R18, 199
   \   0000013C   4F3D               SBCI    R19, 253
   \   0000013E   018E               MOVW    R17:R16, R29:R28
   \   00000140   5207               SUBI    R16, 39
   \   00000142   4F1D               SBCI    R17, 253
   \   00000144   ........           CALL    fpcopy1271
   \   00000148   019E               MOVW    R19:R18, R29:R28
   \   0000014A   5B27               SUBI    R18, 183
   \   0000014C   4F3D               SBCI    R19, 253
   \   0000014E   018E               MOVW    R17:R16, R29:R28
   \   00000150   5107               SUBI    R16, 23
   \   00000152   4F1D               SBCI    R17, 253
   \   00000154   ........           CALL    fpcopy1271
   \   00000158   019E               MOVW    R19:R18, R29:R28
   \   0000015A   5A27               SUBI    R18, 167
   \   0000015C   4F3D               SBCI    R19, 253
   \   0000015E   018E               MOVW    R17:R16, R29:R28
   \   00000160   5007               SUBI    R16, 7
   \   00000162   4F1D               SBCI    R17, 253
   \   00000164   ........           CALL    fpcopy1271
    920          	ecc_phi(Q2);
   \   00000168   018E               MOVW    R17:R16, R29:R28
   \   0000016A   5307               SUBI    R16, 55
   \   0000016C   4F1E               SBCI    R17, 254
   \   0000016E   ........           CALL    ecc_tau
   \   00000172   018E               MOVW    R17:R16, R29:R28
   \   00000174   5307               SUBI    R16, 55
   \   00000176   4F1E               SBCI    R17, 254
   \   00000178   ........           CALL    ecc_delphidel
   \   0000017C   018E               MOVW    R17:R16, R29:R28
   \   0000017E   5307               SUBI    R16, 55
   \   00000180   4F1E               SBCI    R17, 254
   \   00000182   ........           CALL    ecc_tau_dual
    921          	ecccopy(Q1, Q3);
   \   00000186   019E               MOVW    R19:R18, R29:R28
   \   00000188   5327               SUBI    R18, 55
   \   0000018A   4F33               SBCI    R19, 243
   \   0000018C   018E               MOVW    R17:R16, R29:R28
   \   0000018E   5907               SUBI    R16, 151
   \   00000190   4F1D               SBCI    R17, 253
   \   00000192   ........           CALL    fpcopy1271
   \   00000196   019E               MOVW    R19:R18, R29:R28
   \   00000198   5227               SUBI    R18, 39
   \   0000019A   4F33               SBCI    R19, 243
   \   0000019C   018E               MOVW    R17:R16, R29:R28
   \   0000019E   5807               SUBI    R16, 135
   \   000001A0   4F1D               SBCI    R17, 253
   \   000001A2   ........           CALL    fpcopy1271
   \   000001A6   019E               MOVW    R19:R18, R29:R28
   \   000001A8   5127               SUBI    R18, 23
   \   000001AA   4F33               SBCI    R19, 243
   \   000001AC   018E               MOVW    R17:R16, R29:R28
   \   000001AE   5707               SUBI    R16, 119
   \   000001B0   4F1D               SBCI    R17, 253
   \   000001B2   ........           CALL    fpcopy1271
   \   000001B6   019E               MOVW    R19:R18, R29:R28
   \   000001B8   5027               SUBI    R18, 7
   \   000001BA   4F33               SBCI    R19, 243
   \   000001BC   018E               MOVW    R17:R16, R29:R28
   \   000001BE   5607               SUBI    R16, 103
   \   000001C0   4F1D               SBCI    R17, 253
   \   000001C2   ........           CALL    fpcopy1271
   \   000001C6   019E               MOVW    R19:R18, R29:R28
   \   000001C8   5F27               SUBI    R18, 247
   \   000001CA   4F32               SBCI    R19, 242
   \   000001CC   018E               MOVW    R17:R16, R29:R28
   \   000001CE   5507               SUBI    R16, 87
   \   000001D0   4F1D               SBCI    R17, 253
   \   000001D2   ........           CALL    fpcopy1271
   \   000001D6   019E               MOVW    R19:R18, R29:R28
   \   000001D8   5E27               SUBI    R18, 231
   \   000001DA   4F32               SBCI    R19, 242
   \   000001DC   018E               MOVW    R17:R16, R29:R28
   \   000001DE   5407               SUBI    R16, 71
   \   000001E0   4F1D               SBCI    R17, 253
   \   000001E2   ........           CALL    fpcopy1271
   \   000001E6   019E               MOVW    R19:R18, R29:R28
   \   000001E8   5D27               SUBI    R18, 215
   \   000001EA   4F32               SBCI    R19, 242
   \   000001EC   018E               MOVW    R17:R16, R29:R28
   \   000001EE   5307               SUBI    R16, 55
   \   000001F0   4F1D               SBCI    R17, 253
   \   000001F2   ........           CALL    fpcopy1271
   \   000001F6   019E               MOVW    R19:R18, R29:R28
   \   000001F8   5C27               SUBI    R18, 199
   \   000001FA   4F32               SBCI    R19, 242
   \   000001FC   018E               MOVW    R17:R16, R29:R28
   \   000001FE   5207               SUBI    R16, 39
   \   00000200   4F1D               SBCI    R17, 253
   \   00000202   ........           CALL    fpcopy1271
   \   00000206   019E               MOVW    R19:R18, R29:R28
   \   00000208   5B27               SUBI    R18, 183
   \   0000020A   4F32               SBCI    R19, 242
   \   0000020C   018E               MOVW    R17:R16, R29:R28
   \   0000020E   5107               SUBI    R16, 23
   \   00000210   4F1D               SBCI    R17, 253
   \   00000212   ........           CALL    fpcopy1271
   \   00000216   019E               MOVW    R19:R18, R29:R28
   \   00000218   5A27               SUBI    R18, 167
   \   0000021A   4F32               SBCI    R19, 242
   \   0000021C   018E               MOVW    R17:R16, R29:R28
   \   0000021E   5007               SUBI    R16, 7
   \   00000220   4F1D               SBCI    R17, 253
   \   00000222   ........           CALL    fpcopy1271
    922          	ecc_psi(Q3);
   \   00000226   018E               MOVW    R17:R16, R29:R28
   \   00000228   5307               SUBI    R16, 55
   \   0000022A   4F13               SBCI    R17, 243
   \   0000022C   ........           CALL    ecc_tau
   \   00000230   018E               MOVW    R17:R16, R29:R28
   \   00000232   5307               SUBI    R16, 55
   \   00000234   4F13               SBCI    R17, 243
   \   00000236   ........           CALL    ecc_delpsidel
   \   0000023A   018E               MOVW    R17:R16, R29:R28
   \   0000023C   5307               SUBI    R16, 55
   \   0000023E   4F13               SBCI    R17, 243
   \   00000240   ........           CALL    ecc_tau_dual
    923          	ecccopy(Q2, Q4);
   \   00000244   019E               MOVW    R19:R18, R29:R28
   \   00000246   5D27               SUBI    R18, 215
   \   00000248   4F33               SBCI    R19, 243
   \   0000024A   018E               MOVW    R17:R16, R29:R28
   \   0000024C   5307               SUBI    R16, 55
   \   0000024E   4F1E               SBCI    R17, 254
   \   00000250   ........           CALL    fpcopy1271
   \   00000254   019E               MOVW    R19:R18, R29:R28
   \   00000256   5C27               SUBI    R18, 199
   \   00000258   4F33               SBCI    R19, 243
   \   0000025A   018E               MOVW    R17:R16, R29:R28
   \   0000025C   5207               SUBI    R16, 39
   \   0000025E   4F1E               SBCI    R17, 254
   \   00000260   ........           CALL    fpcopy1271
   \   00000264   019E               MOVW    R19:R18, R29:R28
   \   00000266   5B27               SUBI    R18, 183
   \   00000268   4F33               SBCI    R19, 243
   \   0000026A   018E               MOVW    R17:R16, R29:R28
   \   0000026C   5107               SUBI    R16, 23
   \   0000026E   4F1E               SBCI    R17, 254
   \   00000270   ........           CALL    fpcopy1271
   \   00000274   019E               MOVW    R19:R18, R29:R28
   \   00000276   5A27               SUBI    R18, 167
   \   00000278   4F33               SBCI    R19, 243
   \   0000027A   018E               MOVW    R17:R16, R29:R28
   \   0000027C   5007               SUBI    R16, 7
   \   0000027E   4F1E               SBCI    R17, 254
   \   00000280   ........           CALL    fpcopy1271
   \   00000284   019E               MOVW    R19:R18, R29:R28
   \   00000286   5927               SUBI    R18, 151
   \   00000288   4F33               SBCI    R19, 243
   \   0000028A   018E               MOVW    R17:R16, R29:R28
   \   0000028C   5F07               SUBI    R16, 247
   \   0000028E   4F1D               SBCI    R17, 253
   \   00000290   ........           CALL    fpcopy1271
   \   00000294   019E               MOVW    R19:R18, R29:R28
   \   00000296   5827               SUBI    R18, 135
   \   00000298   4F33               SBCI    R19, 243
   \   0000029A   018E               MOVW    R17:R16, R29:R28
   \   0000029C   5E07               SUBI    R16, 231
   \   0000029E   4F1D               SBCI    R17, 253
   \   000002A0   ........           CALL    fpcopy1271
   \   000002A4   019E               MOVW    R19:R18, R29:R28
   \   000002A6   5727               SUBI    R18, 119
   \   000002A8   4F33               SBCI    R19, 243
   \   000002AA   018E               MOVW    R17:R16, R29:R28
   \   000002AC   5D07               SUBI    R16, 215
   \   000002AE   4F1D               SBCI    R17, 253
   \   000002B0   ........           CALL    fpcopy1271
   \   000002B4   019E               MOVW    R19:R18, R29:R28
   \   000002B6   5627               SUBI    R18, 103
   \   000002B8   4F33               SBCI    R19, 243
   \   000002BA   018E               MOVW    R17:R16, R29:R28
   \   000002BC   5C07               SUBI    R16, 199
   \   000002BE   4F1D               SBCI    R17, 253
   \   000002C0   ........           CALL    fpcopy1271
   \   000002C4   019E               MOVW    R19:R18, R29:R28
   \   000002C6   5527               SUBI    R18, 87
   \   000002C8   4F33               SBCI    R19, 243
   \   000002CA   018E               MOVW    R17:R16, R29:R28
   \   000002CC   5B07               SUBI    R16, 183
   \   000002CE   4F1D               SBCI    R17, 253
   \   000002D0   ........           CALL    fpcopy1271
   \   000002D4   019E               MOVW    R19:R18, R29:R28
   \   000002D6   5427               SUBI    R18, 71
   \   000002D8   4F33               SBCI    R19, 243
   \   000002DA   018E               MOVW    R17:R16, R29:R28
   \   000002DC   5A07               SUBI    R16, 167
   \   000002DE   4F1D               SBCI    R17, 253
   \   000002E0   ........           CALL    fpcopy1271
    924          	ecc_psi(Q4);
   \   000002E4   018E               MOVW    R17:R16, R29:R28
   \   000002E6   5D07               SUBI    R16, 215
   \   000002E8   4F13               SBCI    R17, 243
   \   000002EA   ........           CALL    ecc_tau
   \   000002EE   018E               MOVW    R17:R16, R29:R28
   \   000002F0   5D07               SUBI    R16, 215
   \   000002F2   4F13               SBCI    R17, 243
   \   000002F4   ........           CALL    ecc_delpsidel
   \   000002F8   018E               MOVW    R17:R16, R29:R28
   \   000002FA   5D07               SUBI    R16, 215
   \   000002FC   4F13               SBCI    R17, 243
   \   000002FE   ........           CALL    ecc_tau_dual
    925          
    926          	decompose(k, (digit_t*)k_scalars);                        // Scalar decomposition
   \   00000302   019E               MOVW    R19:R18, R29:R28
   \   00000304   5F27               SUBI    R18, 247
   \   00000306   4F3E               SBCI    R19, 254
   \   00000308   018D               MOVW    R17:R16, R27:R26
   \   0000030A   ........           CALL    decompose
    927          	decompose(l, (digit_t*)l_scalars);
   \   0000030E   019E               MOVW    R19:R18, R29:R28
   \   00000310   5127               SUBI    R18, 23
   \   00000312   4F3F               SBCI    R19, 255
   \   00000314   018C               MOVW    R17:R16, R25:R24
   \   00000316   ........           CALL    decompose
    928          	wNAF_recode(k_scalars[0], WP_DOUBLEBASE, digits_k1);       // Scalar recoding
   \   0000031A   E0A0               LDI     R26, 0
   \   0000031C   E0B0               LDI     R27, 0
   \   0000031E   01FE               MOVW    R31:R30, R29:R28
   \   00000320   5FE7               SUBI    R30, 247
   \   00000322   4FFE               SBCI    R31, 254
   \   00000324   8000               LD      R0, Z
   \   00000326   8011               LDD     R1, Z+1
   \   00000328   8022               LDD     R2, Z+2
   \   0000032A   8033               LDD     R3, Z+3
   \   0000032C   8044               LDD     R4, Z+4
   \   0000032E   8055               LDD     R5, Z+5
   \   00000330   8066               LDD     R6, Z+6
   \   00000332   8077               LDD     R7, Z+7
   \   00000334   ....               LDI     R30, LOW(__Constant_0_0)
   \   00000336   ....               LDI     R31, (__Constant_0_0) >> 8
   \   00000338   ........           CALL    ?LL_CMP_R0_L12
   \   0000033C   F409               BRNE    $+2+2
   \   0000033E   C06B               RJMP    ??ecc_mul_double_3
   \                     ??ecc_mul_double_4:
   \   00000340   FA00               BST     R0, 0
   \   00000342   2488               CLR     R8
   \   00000344   2711               CLR     R17
   \   00000346   2722               CLR     R18
   \   00000348   2733               CLR     R19
   \   0000034A   2744               CLR     R20
   \   0000034C   2755               CLR     R21
   \   0000034E   2766               CLR     R22
   \   00000350   2777               CLR     R23
   \   00000352   F880               BLD     R8, 0
   \   00000354   ....               LDI     R30, LOW(__Constant_0_0)
   \   00000356   ....               LDI     R31, (__Constant_0_0) >> 8
   \   00000358   2D08               MOV     R16, R8
   \   0000035A   ........           CALL    ?LL_CMP_L12
   \   0000035E   F499               BRNE    ??ecc_mul_double_5
   \   00000360   9476               LSR     R7
   \   00000362   9467               ROR     R6
   \   00000364   9457               ROR     R5
   \   00000366   9447               ROR     R4
   \   00000368   9437               ROR     R3
   \   0000036A   9427               ROR     R2
   \   0000036C   9417               ROR     R1
   \   0000036E   9407               ROR     R0
   \   00000370   01FE               MOVW    R31:R30, R29:R28
   \   00000372   50E9               SUBI    R30, 9
   \   00000374   4EFF               SBCI    R31, 239
   \   00000376   018D               MOVW    R17:R16, R27:R26
   \   00000378   0F00               LSL     R16
   \   0000037A   1F11               ROL     R17
   \   0000037C   0FE0               ADD     R30, R16
   \   0000037E   1FF1               ADC     R31, R17
   \   00000380   8320               ST      Z, R18
   \   00000382   8321               STD     Z+1, R18
   \   00000384   C041               RJMP    ??ecc_mul_double_6
   \                     ??ecc_mul_double_5:
   \   00000386   2C80               MOV     R8, R0
   \   00000388   E30F               LDI     R16, 63
   \   0000038A   2280               AND     R8, R16
   \   0000038C   2499               CLR     R9
   \   0000038E   E086               LDI     R24, 6
   \   00000390   0180               MOVW    R17:R16, R1:R0
   \   00000392   0191               MOVW    R19:R18, R3:R2
   \   00000394   01A2               MOVW    R21:R20, R5:R4
   \   00000396   01B3               MOVW    R23:R22, R7:R6
   \   00000398   ........           CALL    ?ULL_SHR_L12
   \   0000039C   0108               MOVW    R1:R0, R17:R16
   \   0000039E   0119               MOVW    R3:R2, R19:R18
   \   000003A0   012A               MOVW    R5:R4, R21:R20
   \   000003A2   013B               MOVW    R7:R6, R23:R22
   \   000003A4   E200               LDI     R16, 32
   \   000003A6   1680               CP      R8, R16
   \   000003A8   0499               CPC     R9, R9
   \   000003AA   F024               BRLT    ??ecc_mul_double_7
   \   000003AC   EC00               LDI     R16, 192
   \   000003AE   0E80               ADD     R8, R16
   \   000003B0   EF0F               LDI     R16, 255
   \   000003B2   1E90               ADC     R9, R16
   \                     ??ecc_mul_double_7:
   \   000003B4   2099               TST     R9
   \   000003B6   F452               BRPL    ??ecc_mul_double_8
   \   000003B8   E001               LDI     R16, 1
   \   000003BA   0E00               ADD     R0, R16
   \   000003BC   E000               LDI     R16, 0
   \   000003BE   1E10               ADC     R1, R16
   \   000003C0   1E20               ADC     R2, R16
   \   000003C2   1E30               ADC     R3, R16
   \   000003C4   1E40               ADC     R4, R16
   \   000003C6   1E50               ADC     R5, R16
   \   000003C8   1E60               ADC     R6, R16
   \   000003CA   1E70               ADC     R7, R16
   \                     ??ecc_mul_double_8:
   \   000003CC   019E               MOVW    R19:R18, R29:R28
   \   000003CE   5029               SUBI    R18, 9
   \   000003D0   4E3F               SBCI    R19, 239
   \   000003D2   018D               MOVW    R17:R16, R27:R26
   \   000003D4   0F00               LSL     R16
   \   000003D6   1F11               ROL     R17
   \   000003D8   0F20               ADD     R18, R16
   \   000003DA   1F31               ADC     R19, R17
   \   000003DC   01F9               MOVW    R31:R30, R19:R18
   \   000003DE   8280               ST      Z, R8
   \   000003E0   8291               STD     Z+1, R9
   \   000003E2   ....               LDI     R30, LOW(__Constant_0_0)
   \   000003E4   ....               LDI     R31, (__Constant_0_0) >> 8
   \   000003E6   ........           CALL    ?LL_CMP_R0_L12
   \   000003EA   F071               BREQ    ??ecc_mul_double_6
   \   000003EC   E080               LDI     R24, 0
   \   000003EE   E090               LDI     R25, 0
   \   000003F0   5F2E               SUBI    R18, 254
   \   000003F2   4F3F               SBCI    R19, 255
   \   000003F4   E000               LDI     R16, 0
   \                     ??ecc_mul_double_9:
   \   000003F6   9611               ADIW    R27:R26, 1
   \   000003F8   01F9               MOVW    R31:R30, R19:R18
   \   000003FA   9301               ST      Z+, R16
   \   000003FC   9301               ST      Z+, R16
   \   000003FE   019F               MOVW    R19:R18, R31:R30
   \   00000400   9601               ADIW    R25:R24, 1
   \   00000402   3085               CPI     R24, 5
   \   00000404   0790               CPC     R25, R16
   \   00000406   F3B8               BRCS    ??ecc_mul_double_9
   \                     ??ecc_mul_double_6:
   \   00000408   9611               ADIW    R27:R26, 1
   \   0000040A   ....               LDI     R30, LOW(__Constant_0_0)
   \   0000040C   ....               LDI     R31, (__Constant_0_0) >> 8
   \   0000040E   ........           CALL    ?LL_CMP_R0_L12
   \   00000412   F009               BREQ    $+2+2
   \   00000414   CF95               RJMP    ??ecc_mul_double_4
    929          	wNAF_recode(k_scalars[1], WP_DOUBLEBASE, digits_k2);
   \                     ??ecc_mul_double_3:
   \   00000416   E0A0               LDI     R26, 0
   \   00000418   E0B0               LDI     R27, 0
   \   0000041A   01FE               MOVW    R31:R30, R29:R28
   \   0000041C   5EEF               SUBI    R30, 239
   \   0000041E   4FFE               SBCI    R31, 254
   \   00000420   8000               LD      R0, Z
   \   00000422   8011               LDD     R1, Z+1
   \   00000424   8022               LDD     R2, Z+2
   \   00000426   8033               LDD     R3, Z+3
   \   00000428   8044               LDD     R4, Z+4
   \   0000042A   8055               LDD     R5, Z+5
   \   0000042C   8066               LDD     R6, Z+6
   \   0000042E   8077               LDD     R7, Z+7
   \   00000430   ....               LDI     R30, LOW(__Constant_0_0)
   \   00000432   ....               LDI     R31, (__Constant_0_0) >> 8
   \   00000434   ........           CALL    ?LL_CMP_R0_L12
   \   00000438   F409               BRNE    $+2+2
   \   0000043A   C06B               RJMP    ??ecc_mul_double_10
   \                     ??ecc_mul_double_11:
   \   0000043C   FA00               BST     R0, 0
   \   0000043E   2488               CLR     R8
   \   00000440   2711               CLR     R17
   \   00000442   2722               CLR     R18
   \   00000444   2733               CLR     R19
   \   00000446   2744               CLR     R20
   \   00000448   2755               CLR     R21
   \   0000044A   2766               CLR     R22
   \   0000044C   2777               CLR     R23
   \   0000044E   F880               BLD     R8, 0
   \   00000450   ....               LDI     R30, LOW(__Constant_0_0)
   \   00000452   ....               LDI     R31, (__Constant_0_0) >> 8
   \   00000454   2D08               MOV     R16, R8
   \   00000456   ........           CALL    ?LL_CMP_L12
   \   0000045A   F499               BRNE    ??ecc_mul_double_12
   \   0000045C   9476               LSR     R7
   \   0000045E   9467               ROR     R6
   \   00000460   9457               ROR     R5
   \   00000462   9447               ROR     R4
   \   00000464   9437               ROR     R3
   \   00000466   9427               ROR     R2
   \   00000468   9417               ROR     R1
   \   0000046A   9407               ROR     R0
   \   0000046C   01FE               MOVW    R31:R30, R29:R28
   \   0000046E   58EB               SUBI    R30, 139
   \   00000470   4EFF               SBCI    R31, 239
   \   00000472   018D               MOVW    R17:R16, R27:R26
   \   00000474   0F00               LSL     R16
   \   00000476   1F11               ROL     R17
   \   00000478   0FE0               ADD     R30, R16
   \   0000047A   1FF1               ADC     R31, R17
   \   0000047C   8320               ST      Z, R18
   \   0000047E   8321               STD     Z+1, R18
   \   00000480   C041               RJMP    ??ecc_mul_double_13
   \                     ??ecc_mul_double_12:
   \   00000482   2C80               MOV     R8, R0
   \   00000484   E30F               LDI     R16, 63
   \   00000486   2280               AND     R8, R16
   \   00000488   2499               CLR     R9
   \   0000048A   E086               LDI     R24, 6
   \   0000048C   0180               MOVW    R17:R16, R1:R0
   \   0000048E   0191               MOVW    R19:R18, R3:R2
   \   00000490   01A2               MOVW    R21:R20, R5:R4
   \   00000492   01B3               MOVW    R23:R22, R7:R6
   \   00000494   ........           CALL    ?ULL_SHR_L12
   \   00000498   0108               MOVW    R1:R0, R17:R16
   \   0000049A   0119               MOVW    R3:R2, R19:R18
   \   0000049C   012A               MOVW    R5:R4, R21:R20
   \   0000049E   013B               MOVW    R7:R6, R23:R22
   \   000004A0   E200               LDI     R16, 32
   \   000004A2   1680               CP      R8, R16
   \   000004A4   0499               CPC     R9, R9
   \   000004A6   F024               BRLT    ??ecc_mul_double_14
   \   000004A8   EC00               LDI     R16, 192
   \   000004AA   0E80               ADD     R8, R16
   \   000004AC   EF0F               LDI     R16, 255
   \   000004AE   1E90               ADC     R9, R16
   \                     ??ecc_mul_double_14:
   \   000004B0   2099               TST     R9
   \   000004B2   F452               BRPL    ??ecc_mul_double_15
   \   000004B4   E001               LDI     R16, 1
   \   000004B6   0E00               ADD     R0, R16
   \   000004B8   E000               LDI     R16, 0
   \   000004BA   1E10               ADC     R1, R16
   \   000004BC   1E20               ADC     R2, R16
   \   000004BE   1E30               ADC     R3, R16
   \   000004C0   1E40               ADC     R4, R16
   \   000004C2   1E50               ADC     R5, R16
   \   000004C4   1E60               ADC     R6, R16
   \   000004C6   1E70               ADC     R7, R16
   \                     ??ecc_mul_double_15:
   \   000004C8   019E               MOVW    R19:R18, R29:R28
   \   000004CA   582B               SUBI    R18, 139
   \   000004CC   4E3F               SBCI    R19, 239
   \   000004CE   018D               MOVW    R17:R16, R27:R26
   \   000004D0   0F00               LSL     R16
   \   000004D2   1F11               ROL     R17
   \   000004D4   0F20               ADD     R18, R16
   \   000004D6   1F31               ADC     R19, R17
   \   000004D8   01F9               MOVW    R31:R30, R19:R18
   \   000004DA   8280               ST      Z, R8
   \   000004DC   8291               STD     Z+1, R9
   \   000004DE   ....               LDI     R30, LOW(__Constant_0_0)
   \   000004E0   ....               LDI     R31, (__Constant_0_0) >> 8
   \   000004E2   ........           CALL    ?LL_CMP_R0_L12
   \   000004E6   F071               BREQ    ??ecc_mul_double_13
   \   000004E8   E080               LDI     R24, 0
   \   000004EA   E090               LDI     R25, 0
   \   000004EC   5F2E               SUBI    R18, 254
   \   000004EE   4F3F               SBCI    R19, 255
   \   000004F0   E000               LDI     R16, 0
   \                     ??ecc_mul_double_16:
   \   000004F2   9611               ADIW    R27:R26, 1
   \   000004F4   01F9               MOVW    R31:R30, R19:R18
   \   000004F6   9301               ST      Z+, R16
   \   000004F8   9301               ST      Z+, R16
   \   000004FA   019F               MOVW    R19:R18, R31:R30
   \   000004FC   9601               ADIW    R25:R24, 1
   \   000004FE   3085               CPI     R24, 5
   \   00000500   0790               CPC     R25, R16
   \   00000502   F3B8               BRCS    ??ecc_mul_double_16
   \                     ??ecc_mul_double_13:
   \   00000504   9611               ADIW    R27:R26, 1
   \   00000506   ....               LDI     R30, LOW(__Constant_0_0)
   \   00000508   ....               LDI     R31, (__Constant_0_0) >> 8
   \   0000050A   ........           CALL    ?LL_CMP_R0_L12
   \   0000050E   F009               BREQ    $+2+2
   \   00000510   CF95               RJMP    ??ecc_mul_double_11
    930          	wNAF_recode(k_scalars[2], WP_DOUBLEBASE, digits_k3);
   \                     ??ecc_mul_double_10:
   \   00000512   E0A0               LDI     R26, 0
   \   00000514   E0B0               LDI     R27, 0
   \   00000516   01FE               MOVW    R31:R30, R29:R28
   \   00000518   5EE7               SUBI    R30, 231
   \   0000051A   4FFE               SBCI    R31, 254
   \   0000051C   8000               LD      R0, Z
   \   0000051E   8011               LDD     R1, Z+1
   \   00000520   8022               LDD     R2, Z+2
   \   00000522   8033               LDD     R3, Z+3
   \   00000524   8044               LDD     R4, Z+4
   \   00000526   8055               LDD     R5, Z+5
   \   00000528   8066               LDD     R6, Z+6
   \   0000052A   8077               LDD     R7, Z+7
   \   0000052C   ....               LDI     R30, LOW(__Constant_0_0)
   \   0000052E   ....               LDI     R31, (__Constant_0_0) >> 8
   \   00000530   ........           CALL    ?LL_CMP_R0_L12
   \   00000534   F409               BRNE    $+2+2
   \   00000536   C06B               RJMP    ??ecc_mul_double_17
   \                     ??ecc_mul_double_18:
   \   00000538   FA00               BST     R0, 0
   \   0000053A   2488               CLR     R8
   \   0000053C   2711               CLR     R17
   \   0000053E   2722               CLR     R18
   \   00000540   2733               CLR     R19
   \   00000542   2744               CLR     R20
   \   00000544   2755               CLR     R21
   \   00000546   2766               CLR     R22
   \   00000548   2777               CLR     R23
   \   0000054A   F880               BLD     R8, 0
   \   0000054C   ....               LDI     R30, LOW(__Constant_0_0)
   \   0000054E   ....               LDI     R31, (__Constant_0_0) >> 8
   \   00000550   2D08               MOV     R16, R8
   \   00000552   ........           CALL    ?LL_CMP_L12
   \   00000556   F499               BRNE    ??ecc_mul_double_19
   \   00000558   9476               LSR     R7
   \   0000055A   9467               ROR     R6
   \   0000055C   9457               ROR     R5
   \   0000055E   9447               ROR     R4
   \   00000560   9437               ROR     R3
   \   00000562   9427               ROR     R2
   \   00000564   9417               ROR     R1
   \   00000566   9407               ROR     R0
   \   00000568   01FE               MOVW    R31:R30, R29:R28
   \   0000056A   50ED               SUBI    R30, 13
   \   0000056C   4FF0               SBCI    R31, 240
   \   0000056E   018D               MOVW    R17:R16, R27:R26
   \   00000570   0F00               LSL     R16
   \   00000572   1F11               ROL     R17
   \   00000574   0FE0               ADD     R30, R16
   \   00000576   1FF1               ADC     R31, R17
   \   00000578   8320               ST      Z, R18
   \   0000057A   8321               STD     Z+1, R18
   \   0000057C   C041               RJMP    ??ecc_mul_double_20
   \                     ??ecc_mul_double_19:
   \   0000057E   2C80               MOV     R8, R0
   \   00000580   E30F               LDI     R16, 63
   \   00000582   2280               AND     R8, R16
   \   00000584   2499               CLR     R9
   \   00000586   E086               LDI     R24, 6
   \   00000588   0180               MOVW    R17:R16, R1:R0
   \   0000058A   0191               MOVW    R19:R18, R3:R2
   \   0000058C   01A2               MOVW    R21:R20, R5:R4
   \   0000058E   01B3               MOVW    R23:R22, R7:R6
   \   00000590   ........           CALL    ?ULL_SHR_L12
   \   00000594   0108               MOVW    R1:R0, R17:R16
   \   00000596   0119               MOVW    R3:R2, R19:R18
   \   00000598   012A               MOVW    R5:R4, R21:R20
   \   0000059A   013B               MOVW    R7:R6, R23:R22
   \   0000059C   E200               LDI     R16, 32
   \   0000059E   1680               CP      R8, R16
   \   000005A0   0499               CPC     R9, R9
   \   000005A2   F024               BRLT    ??ecc_mul_double_21
   \   000005A4   EC00               LDI     R16, 192
   \   000005A6   0E80               ADD     R8, R16
   \   000005A8   EF0F               LDI     R16, 255
   \   000005AA   1E90               ADC     R9, R16
   \                     ??ecc_mul_double_21:
   \   000005AC   2099               TST     R9
   \   000005AE   F452               BRPL    ??ecc_mul_double_22
   \   000005B0   E001               LDI     R16, 1
   \   000005B2   0E00               ADD     R0, R16
   \   000005B4   E000               LDI     R16, 0
   \   000005B6   1E10               ADC     R1, R16
   \   000005B8   1E20               ADC     R2, R16
   \   000005BA   1E30               ADC     R3, R16
   \   000005BC   1E40               ADC     R4, R16
   \   000005BE   1E50               ADC     R5, R16
   \   000005C0   1E60               ADC     R6, R16
   \   000005C2   1E70               ADC     R7, R16
   \                     ??ecc_mul_double_22:
   \   000005C4   019E               MOVW    R19:R18, R29:R28
   \   000005C6   502D               SUBI    R18, 13
   \   000005C8   4F30               SBCI    R19, 240
   \   000005CA   018D               MOVW    R17:R16, R27:R26
   \   000005CC   0F00               LSL     R16
   \   000005CE   1F11               ROL     R17
   \   000005D0   0F20               ADD     R18, R16
   \   000005D2   1F31               ADC     R19, R17
   \   000005D4   01F9               MOVW    R31:R30, R19:R18
   \   000005D6   8280               ST      Z, R8
   \   000005D8   8291               STD     Z+1, R9
   \   000005DA   ....               LDI     R30, LOW(__Constant_0_0)
   \   000005DC   ....               LDI     R31, (__Constant_0_0) >> 8
   \   000005DE   ........           CALL    ?LL_CMP_R0_L12
   \   000005E2   F071               BREQ    ??ecc_mul_double_20
   \   000005E4   E080               LDI     R24, 0
   \   000005E6   E090               LDI     R25, 0
   \   000005E8   5F2E               SUBI    R18, 254
   \   000005EA   4F3F               SBCI    R19, 255
   \   000005EC   E000               LDI     R16, 0
   \                     ??ecc_mul_double_23:
   \   000005EE   9611               ADIW    R27:R26, 1
   \   000005F0   01F9               MOVW    R31:R30, R19:R18
   \   000005F2   9301               ST      Z+, R16
   \   000005F4   9301               ST      Z+, R16
   \   000005F6   019F               MOVW    R19:R18, R31:R30
   \   000005F8   9601               ADIW    R25:R24, 1
   \   000005FA   3085               CPI     R24, 5
   \   000005FC   0790               CPC     R25, R16
   \   000005FE   F3B8               BRCS    ??ecc_mul_double_23
   \                     ??ecc_mul_double_20:
   \   00000600   9611               ADIW    R27:R26, 1
   \   00000602   ....               LDI     R30, LOW(__Constant_0_0)
   \   00000604   ....               LDI     R31, (__Constant_0_0) >> 8
   \   00000606   ........           CALL    ?LL_CMP_R0_L12
   \   0000060A   F009               BREQ    $+2+2
   \   0000060C   CF95               RJMP    ??ecc_mul_double_18
    931          	wNAF_recode(k_scalars[3], WP_DOUBLEBASE, digits_k4);
   \                     ??ecc_mul_double_17:
   \   0000060E   E0A0               LDI     R26, 0
   \   00000610   E0B0               LDI     R27, 0
   \   00000612   01FE               MOVW    R31:R30, R29:R28
   \   00000614   5DEF               SUBI    R30, 223
   \   00000616   4FFE               SBCI    R31, 254
   \   00000618   8000               LD      R0, Z
   \   0000061A   8011               LDD     R1, Z+1
   \   0000061C   8022               LDD     R2, Z+2
   \   0000061E   8033               LDD     R3, Z+3
   \   00000620   8044               LDD     R4, Z+4
   \   00000622   8055               LDD     R5, Z+5
   \   00000624   8066               LDD     R6, Z+6
   \   00000626   8077               LDD     R7, Z+7
   \   00000628   ....               LDI     R30, LOW(__Constant_0_0)
   \   0000062A   ....               LDI     R31, (__Constant_0_0) >> 8
   \   0000062C   ........           CALL    ?LL_CMP_R0_L12
   \   00000630   F409               BRNE    $+2+2
   \   00000632   C06B               RJMP    ??ecc_mul_double_24
   \                     ??ecc_mul_double_25:
   \   00000634   FA00               BST     R0, 0
   \   00000636   2488               CLR     R8
   \   00000638   2711               CLR     R17
   \   0000063A   2722               CLR     R18
   \   0000063C   2733               CLR     R19
   \   0000063E   2744               CLR     R20
   \   00000640   2755               CLR     R21
   \   00000642   2766               CLR     R22
   \   00000644   2777               CLR     R23
   \   00000646   F880               BLD     R8, 0
   \   00000648   ....               LDI     R30, LOW(__Constant_0_0)
   \   0000064A   ....               LDI     R31, (__Constant_0_0) >> 8
   \   0000064C   2D08               MOV     R16, R8
   \   0000064E   ........           CALL    ?LL_CMP_L12
   \   00000652   F499               BRNE    ??ecc_mul_double_26
   \   00000654   9476               LSR     R7
   \   00000656   9467               ROR     R6
   \   00000658   9457               ROR     R5
   \   0000065A   9447               ROR     R4
   \   0000065C   9437               ROR     R3
   \   0000065E   9427               ROR     R2
   \   00000660   9417               ROR     R1
   \   00000662   9407               ROR     R0
   \   00000664   01FE               MOVW    R31:R30, R29:R28
   \   00000666   58EF               SUBI    R30, 143
   \   00000668   4FF0               SBCI    R31, 240
   \   0000066A   018D               MOVW    R17:R16, R27:R26
   \   0000066C   0F00               LSL     R16
   \   0000066E   1F11               ROL     R17
   \   00000670   0FE0               ADD     R30, R16
   \   00000672   1FF1               ADC     R31, R17
   \   00000674   8320               ST      Z, R18
   \   00000676   8321               STD     Z+1, R18
   \   00000678   C041               RJMP    ??ecc_mul_double_27
   \                     ??ecc_mul_double_26:
   \   0000067A   2C80               MOV     R8, R0
   \   0000067C   E30F               LDI     R16, 63
   \   0000067E   2280               AND     R8, R16
   \   00000680   2499               CLR     R9
   \   00000682   E086               LDI     R24, 6
   \   00000684   0180               MOVW    R17:R16, R1:R0
   \   00000686   0191               MOVW    R19:R18, R3:R2
   \   00000688   01A2               MOVW    R21:R20, R5:R4
   \   0000068A   01B3               MOVW    R23:R22, R7:R6
   \   0000068C   ........           CALL    ?ULL_SHR_L12
   \   00000690   0108               MOVW    R1:R0, R17:R16
   \   00000692   0119               MOVW    R3:R2, R19:R18
   \   00000694   012A               MOVW    R5:R4, R21:R20
   \   00000696   013B               MOVW    R7:R6, R23:R22
   \   00000698   E200               LDI     R16, 32
   \   0000069A   1680               CP      R8, R16
   \   0000069C   0499               CPC     R9, R9
   \   0000069E   F024               BRLT    ??ecc_mul_double_28
   \   000006A0   EC00               LDI     R16, 192
   \   000006A2   0E80               ADD     R8, R16
   \   000006A4   EF0F               LDI     R16, 255
   \   000006A6   1E90               ADC     R9, R16
   \                     ??ecc_mul_double_28:
   \   000006A8   2099               TST     R9
   \   000006AA   F452               BRPL    ??ecc_mul_double_29
   \   000006AC   E001               LDI     R16, 1
   \   000006AE   0E00               ADD     R0, R16
   \   000006B0   E000               LDI     R16, 0
   \   000006B2   1E10               ADC     R1, R16
   \   000006B4   1E20               ADC     R2, R16
   \   000006B6   1E30               ADC     R3, R16
   \   000006B8   1E40               ADC     R4, R16
   \   000006BA   1E50               ADC     R5, R16
   \   000006BC   1E60               ADC     R6, R16
   \   000006BE   1E70               ADC     R7, R16
   \                     ??ecc_mul_double_29:
   \   000006C0   019E               MOVW    R19:R18, R29:R28
   \   000006C2   582F               SUBI    R18, 143
   \   000006C4   4F30               SBCI    R19, 240
   \   000006C6   018D               MOVW    R17:R16, R27:R26
   \   000006C8   0F00               LSL     R16
   \   000006CA   1F11               ROL     R17
   \   000006CC   0F20               ADD     R18, R16
   \   000006CE   1F31               ADC     R19, R17
   \   000006D0   01F9               MOVW    R31:R30, R19:R18
   \   000006D2   8280               ST      Z, R8
   \   000006D4   8291               STD     Z+1, R9
   \   000006D6   ....               LDI     R30, LOW(__Constant_0_0)
   \   000006D8   ....               LDI     R31, (__Constant_0_0) >> 8
   \   000006DA   ........           CALL    ?LL_CMP_R0_L12
   \   000006DE   F071               BREQ    ??ecc_mul_double_27
   \   000006E0   E080               LDI     R24, 0
   \   000006E2   E090               LDI     R25, 0
   \   000006E4   5F2E               SUBI    R18, 254
   \   000006E6   4F3F               SBCI    R19, 255
   \   000006E8   E000               LDI     R16, 0
   \                     ??ecc_mul_double_30:
   \   000006EA   9611               ADIW    R27:R26, 1
   \   000006EC   01F9               MOVW    R31:R30, R19:R18
   \   000006EE   9301               ST      Z+, R16
   \   000006F0   9301               ST      Z+, R16
   \   000006F2   019F               MOVW    R19:R18, R31:R30
   \   000006F4   9601               ADIW    R25:R24, 1
   \   000006F6   3085               CPI     R24, 5
   \   000006F8   0790               CPC     R25, R16
   \   000006FA   F3B8               BRCS    ??ecc_mul_double_30
   \                     ??ecc_mul_double_27:
   \   000006FC   9611               ADIW    R27:R26, 1
   \   000006FE   ....               LDI     R30, LOW(__Constant_0_0)
   \   00000700   ....               LDI     R31, (__Constant_0_0) >> 8
   \   00000702   ........           CALL    ?LL_CMP_R0_L12
   \   00000706   F009               BREQ    $+2+2
   \   00000708   CF95               RJMP    ??ecc_mul_double_25
    932          	wNAF_recode(l_scalars[0], WQ_DOUBLEBASE, digits_l1);
   \                     ??ecc_mul_double_24:
   \   0000070A   E0A0               LDI     R26, 0
   \   0000070C   E0B0               LDI     R27, 0
   \   0000070E   01FE               MOVW    R31:R30, R29:R28
   \   00000710   51E7               SUBI    R30, 23
   \   00000712   4FFF               SBCI    R31, 255
   \   00000714   8000               LD      R0, Z
   \   00000716   8011               LDD     R1, Z+1
   \   00000718   8022               LDD     R2, Z+2
   \   0000071A   8033               LDD     R3, Z+3
   \   0000071C   8044               LDD     R4, Z+4
   \   0000071E   8055               LDD     R5, Z+5
   \   00000720   8066               LDD     R6, Z+6
   \   00000722   8077               LDD     R7, Z+7
   \   00000724   ....               LDI     R30, LOW(__Constant_0_0)
   \   00000726   ....               LDI     R31, (__Constant_0_0) >> 8
   \   00000728   ........           CALL    ?LL_CMP_R0_L12
   \   0000072C   F409               BRNE    $+2+2
   \   0000072E   C079               RJMP    ??ecc_mul_double_31
   \                     ??ecc_mul_double_32:
   \   00000730   FA00               BST     R0, 0
   \   00000732   2488               CLR     R8
   \   00000734   2711               CLR     R17
   \   00000736   2722               CLR     R18
   \   00000738   2733               CLR     R19
   \   0000073A   2744               CLR     R20
   \   0000073C   2755               CLR     R21
   \   0000073E   2766               CLR     R22
   \   00000740   2777               CLR     R23
   \   00000742   F880               BLD     R8, 0
   \   00000744   ....               LDI     R30, LOW(__Constant_0_0)
   \   00000746   ....               LDI     R31, (__Constant_0_0) >> 8
   \   00000748   2D08               MOV     R16, R8
   \   0000074A   ........           CALL    ?LL_CMP_L12
   \   0000074E   F499               BRNE    ??ecc_mul_double_33
   \   00000750   9476               LSR     R7
   \   00000752   9467               ROR     R6
   \   00000754   9457               ROR     R5
   \   00000756   9447               ROR     R4
   \   00000758   9437               ROR     R3
   \   0000075A   9427               ROR     R2
   \   0000075C   9417               ROR     R1
   \   0000075E   9407               ROR     R0
   \   00000760   01FE               MOVW    R31:R30, R29:R28
   \   00000762   51E1               SUBI    R30, 17
   \   00000764   4FF1               SBCI    R31, 241
   \   00000766   018D               MOVW    R17:R16, R27:R26
   \   00000768   0F00               LSL     R16
   \   0000076A   1F11               ROL     R17
   \   0000076C   0FE0               ADD     R30, R16
   \   0000076E   1FF1               ADC     R31, R17
   \   00000770   8320               ST      Z, R18
   \   00000772   8321               STD     Z+1, R18
   \   00000774   C04F               RJMP    ??ecc_mul_double_34
   \                     ??ecc_mul_double_33:
   \   00000776   2D80               MOV     R24, R0
   \   00000778   708F               ANDI    R24, 0x0F
   \   0000077A   E090               LDI     R25, 0
   \   0000077C   9476               LSR     R7
   \   0000077E   9467               ROR     R6
   \   00000780   9457               ROR     R5
   \   00000782   9447               ROR     R4
   \   00000784   9437               ROR     R3
   \   00000786   9427               ROR     R2
   \   00000788   9417               ROR     R1
   \   0000078A   9407               ROR     R0
   \   0000078C   9476               LSR     R7
   \   0000078E   9467               ROR     R6
   \   00000790   9457               ROR     R5
   \   00000792   9447               ROR     R4
   \   00000794   9437               ROR     R3
   \   00000796   9427               ROR     R2
   \   00000798   9417               ROR     R1
   \   0000079A   9407               ROR     R0
   \   0000079C   9476               LSR     R7
   \   0000079E   9467               ROR     R6
   \   000007A0   9457               ROR     R5
   \   000007A2   9447               ROR     R4
   \   000007A4   9437               ROR     R3
   \   000007A6   9427               ROR     R2
   \   000007A8   9417               ROR     R1
   \   000007AA   9407               ROR     R0
   \   000007AC   9476               LSR     R7
   \   000007AE   9467               ROR     R6
   \   000007B0   9457               ROR     R5
   \   000007B2   9447               ROR     R4
   \   000007B4   9437               ROR     R3
   \   000007B6   9427               ROR     R2
   \   000007B8   9417               ROR     R1
   \   000007BA   9407               ROR     R0
   \   000007BC   3088               CPI     R24, 8
   \   000007BE   0711               CPC     R17, R17
   \   000007C0   F00C               BRLT    ??ecc_mul_double_35
   \   000007C2   9740               SBIW    R25:R24, 16
   \                     ??ecc_mul_double_35:
   \   000007C4   2399               TST     R25
   \   000007C6   F44A               BRPL    ??ecc_mul_double_36
   \   000007C8   E001               LDI     R16, 1
   \   000007CA   0E00               ADD     R0, R16
   \   000007CC   1E11               ADC     R1, R17
   \   000007CE   1E21               ADC     R2, R17
   \   000007D0   1E31               ADC     R3, R17
   \   000007D2   1E41               ADC     R4, R17
   \   000007D4   1E51               ADC     R5, R17
   \   000007D6   1E61               ADC     R6, R17
   \   000007D8   1E71               ADC     R7, R17
   \                     ??ecc_mul_double_36:
   \   000007DA   019E               MOVW    R19:R18, R29:R28
   \   000007DC   5121               SUBI    R18, 17
   \   000007DE   4F31               SBCI    R19, 241
   \   000007E0   018D               MOVW    R17:R16, R27:R26
   \   000007E2   0F00               LSL     R16
   \   000007E4   1F11               ROL     R17
   \   000007E6   0F20               ADD     R18, R16
   \   000007E8   1F31               ADC     R19, R17
   \   000007EA   01F9               MOVW    R31:R30, R19:R18
   \   000007EC   8380               ST      Z, R24
   \   000007EE   8391               STD     Z+1, R25
   \   000007F0   ....               LDI     R30, LOW(__Constant_0_0)
   \   000007F2   ....               LDI     R31, (__Constant_0_0) >> 8
   \   000007F4   ........           CALL    ?LL_CMP_R0_L12
   \   000007F8   F069               BREQ    ??ecc_mul_double_34
   \   000007FA   E080               LDI     R24, 0
   \   000007FC   E090               LDI     R25, 0
   \   000007FE   5F2E               SUBI    R18, 254
   \   00000800   4F3F               SBCI    R19, 255
   \                     ??ecc_mul_double_37:
   \   00000802   9611               ADIW    R27:R26, 1
   \   00000804   01F9               MOVW    R31:R30, R19:R18
   \   00000806   9341               ST      Z+, R20
   \   00000808   9341               ST      Z+, R20
   \   0000080A   019F               MOVW    R19:R18, R31:R30
   \   0000080C   9601               ADIW    R25:R24, 1
   \   0000080E   3083               CPI     R24, 3
   \   00000810   0794               CPC     R25, R20
   \   00000812   F3B8               BRCS    ??ecc_mul_double_37
   \                     ??ecc_mul_double_34:
   \   00000814   9611               ADIW    R27:R26, 1
   \   00000816   ....               LDI     R30, LOW(__Constant_0_0)
   \   00000818   ....               LDI     R31, (__Constant_0_0) >> 8
   \   0000081A   ........           CALL    ?LL_CMP_R0_L12
   \   0000081E   F009               BREQ    $+2+2
   \   00000820   CF87               RJMP    ??ecc_mul_double_32
    933          	wNAF_recode(l_scalars[1], WQ_DOUBLEBASE, digits_l2);
   \                     ??ecc_mul_double_31:
   \   00000822   E0A0               LDI     R26, 0
   \   00000824   E0B0               LDI     R27, 0
   \   00000826   01FE               MOVW    R31:R30, R29:R28
   \   00000828   50EF               SUBI    R30, 15
   \   0000082A   4FFF               SBCI    R31, 255
   \   0000082C   8000               LD      R0, Z
   \   0000082E   8011               LDD     R1, Z+1
   \   00000830   8022               LDD     R2, Z+2
   \   00000832   8033               LDD     R3, Z+3
   \   00000834   8044               LDD     R4, Z+4
   \   00000836   8055               LDD     R5, Z+5
   \   00000838   8066               LDD     R6, Z+6
   \   0000083A   8077               LDD     R7, Z+7
   \   0000083C   ....               LDI     R30, LOW(__Constant_0_0)
   \   0000083E   ....               LDI     R31, (__Constant_0_0) >> 8
   \   00000840   ........           CALL    ?LL_CMP_R0_L12
   \   00000844   F409               BRNE    $+2+2
   \   00000846   C079               RJMP    ??ecc_mul_double_38
   \                     ??ecc_mul_double_39:
   \   00000848   FA00               BST     R0, 0
   \   0000084A   2488               CLR     R8
   \   0000084C   2711               CLR     R17
   \   0000084E   2722               CLR     R18
   \   00000850   2733               CLR     R19
   \   00000852   2744               CLR     R20
   \   00000854   2755               CLR     R21
   \   00000856   2766               CLR     R22
   \   00000858   2777               CLR     R23
   \   0000085A   F880               BLD     R8, 0
   \   0000085C   ....               LDI     R30, LOW(__Constant_0_0)
   \   0000085E   ....               LDI     R31, (__Constant_0_0) >> 8
   \   00000860   2D08               MOV     R16, R8
   \   00000862   ........           CALL    ?LL_CMP_L12
   \   00000866   F499               BRNE    ??ecc_mul_double_40
   \   00000868   9476               LSR     R7
   \   0000086A   9467               ROR     R6
   \   0000086C   9457               ROR     R5
   \   0000086E   9447               ROR     R4
   \   00000870   9437               ROR     R3
   \   00000872   9427               ROR     R2
   \   00000874   9417               ROR     R1
   \   00000876   9407               ROR     R0
   \   00000878   01FE               MOVW    R31:R30, R29:R28
   \   0000087A   59E3               SUBI    R30, 147
   \   0000087C   4FF1               SBCI    R31, 241
   \   0000087E   018D               MOVW    R17:R16, R27:R26
   \   00000880   0F00               LSL     R16
   \   00000882   1F11               ROL     R17
   \   00000884   0FE0               ADD     R30, R16
   \   00000886   1FF1               ADC     R31, R17
   \   00000888   8320               ST      Z, R18
   \   0000088A   8321               STD     Z+1, R18
   \   0000088C   C04F               RJMP    ??ecc_mul_double_41
   \                     ??ecc_mul_double_40:
   \   0000088E   2D80               MOV     R24, R0
   \   00000890   708F               ANDI    R24, 0x0F
   \   00000892   E090               LDI     R25, 0
   \   00000894   9476               LSR     R7
   \   00000896   9467               ROR     R6
   \   00000898   9457               ROR     R5
   \   0000089A   9447               ROR     R4
   \   0000089C   9437               ROR     R3
   \   0000089E   9427               ROR     R2
   \   000008A0   9417               ROR     R1
   \   000008A2   9407               ROR     R0
   \   000008A4   9476               LSR     R7
   \   000008A6   9467               ROR     R6
   \   000008A8   9457               ROR     R5
   \   000008AA   9447               ROR     R4
   \   000008AC   9437               ROR     R3
   \   000008AE   9427               ROR     R2
   \   000008B0   9417               ROR     R1
   \   000008B2   9407               ROR     R0
   \   000008B4   9476               LSR     R7
   \   000008B6   9467               ROR     R6
   \   000008B8   9457               ROR     R5
   \   000008BA   9447               ROR     R4
   \   000008BC   9437               ROR     R3
   \   000008BE   9427               ROR     R2
   \   000008C0   9417               ROR     R1
   \   000008C2   9407               ROR     R0
   \   000008C4   9476               LSR     R7
   \   000008C6   9467               ROR     R6
   \   000008C8   9457               ROR     R5
   \   000008CA   9447               ROR     R4
   \   000008CC   9437               ROR     R3
   \   000008CE   9427               ROR     R2
   \   000008D0   9417               ROR     R1
   \   000008D2   9407               ROR     R0
   \   000008D4   3088               CPI     R24, 8
   \   000008D6   0711               CPC     R17, R17
   \   000008D8   F00C               BRLT    ??ecc_mul_double_42
   \   000008DA   9740               SBIW    R25:R24, 16
   \                     ??ecc_mul_double_42:
   \   000008DC   2399               TST     R25
   \   000008DE   F44A               BRPL    ??ecc_mul_double_43
   \   000008E0   E001               LDI     R16, 1
   \   000008E2   0E00               ADD     R0, R16
   \   000008E4   1E11               ADC     R1, R17
   \   000008E6   1E21               ADC     R2, R17
   \   000008E8   1E31               ADC     R3, R17
   \   000008EA   1E41               ADC     R4, R17
   \   000008EC   1E51               ADC     R5, R17
   \   000008EE   1E61               ADC     R6, R17
   \   000008F0   1E71               ADC     R7, R17
   \                     ??ecc_mul_double_43:
   \   000008F2   019E               MOVW    R19:R18, R29:R28
   \   000008F4   5923               SUBI    R18, 147
   \   000008F6   4F31               SBCI    R19, 241
   \   000008F8   018D               MOVW    R17:R16, R27:R26
   \   000008FA   0F00               LSL     R16
   \   000008FC   1F11               ROL     R17
   \   000008FE   0F20               ADD     R18, R16
   \   00000900   1F31               ADC     R19, R17
   \   00000902   01F9               MOVW    R31:R30, R19:R18
   \   00000904   8380               ST      Z, R24
   \   00000906   8391               STD     Z+1, R25
   \   00000908   ....               LDI     R30, LOW(__Constant_0_0)
   \   0000090A   ....               LDI     R31, (__Constant_0_0) >> 8
   \   0000090C   ........           CALL    ?LL_CMP_R0_L12
   \   00000910   F069               BREQ    ??ecc_mul_double_41
   \   00000912   E080               LDI     R24, 0
   \   00000914   E090               LDI     R25, 0
   \   00000916   5F2E               SUBI    R18, 254
   \   00000918   4F3F               SBCI    R19, 255
   \                     ??ecc_mul_double_44:
   \   0000091A   9611               ADIW    R27:R26, 1
   \   0000091C   01F9               MOVW    R31:R30, R19:R18
   \   0000091E   9341               ST      Z+, R20
   \   00000920   9341               ST      Z+, R20
   \   00000922   019F               MOVW    R19:R18, R31:R30
   \   00000924   9601               ADIW    R25:R24, 1
   \   00000926   3083               CPI     R24, 3
   \   00000928   0794               CPC     R25, R20
   \   0000092A   F3B8               BRCS    ??ecc_mul_double_44
   \                     ??ecc_mul_double_41:
   \   0000092C   9611               ADIW    R27:R26, 1
   \   0000092E   ....               LDI     R30, LOW(__Constant_0_0)
   \   00000930   ....               LDI     R31, (__Constant_0_0) >> 8
   \   00000932   ........           CALL    ?LL_CMP_R0_L12
   \   00000936   F009               BREQ    $+2+2
   \   00000938   CF87               RJMP    ??ecc_mul_double_39
    934          	wNAF_recode(l_scalars[2], WQ_DOUBLEBASE, digits_l3);
   \                     ??ecc_mul_double_38:
   \   0000093A   E0A0               LDI     R26, 0
   \   0000093C   E0B0               LDI     R27, 0
   \   0000093E   01FE               MOVW    R31:R30, R29:R28
   \   00000940   50E7               SUBI    R30, 7
   \   00000942   4FFF               SBCI    R31, 255
   \   00000944   8000               LD      R0, Z
   \   00000946   8011               LDD     R1, Z+1
   \   00000948   8022               LDD     R2, Z+2
   \   0000094A   8033               LDD     R3, Z+3
   \   0000094C   8044               LDD     R4, Z+4
   \   0000094E   8055               LDD     R5, Z+5
   \   00000950   8066               LDD     R6, Z+6
   \   00000952   8077               LDD     R7, Z+7
   \   00000954   ....               LDI     R30, LOW(__Constant_0_0)
   \   00000956   ....               LDI     R31, (__Constant_0_0) >> 8
   \   00000958   ........           CALL    ?LL_CMP_R0_L12
   \   0000095C   F409               BRNE    $+2+2
   \   0000095E   C079               RJMP    ??ecc_mul_double_45
   \                     ??ecc_mul_double_46:
   \   00000960   FA00               BST     R0, 0
   \   00000962   2488               CLR     R8
   \   00000964   2711               CLR     R17
   \   00000966   2722               CLR     R18
   \   00000968   2733               CLR     R19
   \   0000096A   2744               CLR     R20
   \   0000096C   2755               CLR     R21
   \   0000096E   2766               CLR     R22
   \   00000970   2777               CLR     R23
   \   00000972   F880               BLD     R8, 0
   \   00000974   ....               LDI     R30, LOW(__Constant_0_0)
   \   00000976   ....               LDI     R31, (__Constant_0_0) >> 8
   \   00000978   2D08               MOV     R16, R8
   \   0000097A   ........           CALL    ?LL_CMP_L12
   \   0000097E   F499               BRNE    ??ecc_mul_double_47
   \   00000980   9476               LSR     R7
   \   00000982   9467               ROR     R6
   \   00000984   9457               ROR     R5
   \   00000986   9447               ROR     R4
   \   00000988   9437               ROR     R3
   \   0000098A   9427               ROR     R2
   \   0000098C   9417               ROR     R1
   \   0000098E   9407               ROR     R0
   \   00000990   01FE               MOVW    R31:R30, R29:R28
   \   00000992   51E5               SUBI    R30, 21
   \   00000994   4FF2               SBCI    R31, 242
   \   00000996   018D               MOVW    R17:R16, R27:R26
   \   00000998   0F00               LSL     R16
   \   0000099A   1F11               ROL     R17
   \   0000099C   0FE0               ADD     R30, R16
   \   0000099E   1FF1               ADC     R31, R17
   \   000009A0   8320               ST      Z, R18
   \   000009A2   8321               STD     Z+1, R18
   \   000009A4   C04F               RJMP    ??ecc_mul_double_48
   \                     ??ecc_mul_double_47:
   \   000009A6   2D80               MOV     R24, R0
   \   000009A8   708F               ANDI    R24, 0x0F
   \   000009AA   E090               LDI     R25, 0
   \   000009AC   9476               LSR     R7
   \   000009AE   9467               ROR     R6
   \   000009B0   9457               ROR     R5
   \   000009B2   9447               ROR     R4
   \   000009B4   9437               ROR     R3
   \   000009B6   9427               ROR     R2
   \   000009B8   9417               ROR     R1
   \   000009BA   9407               ROR     R0
   \   000009BC   9476               LSR     R7
   \   000009BE   9467               ROR     R6
   \   000009C0   9457               ROR     R5
   \   000009C2   9447               ROR     R4
   \   000009C4   9437               ROR     R3
   \   000009C6   9427               ROR     R2
   \   000009C8   9417               ROR     R1
   \   000009CA   9407               ROR     R0
   \   000009CC   9476               LSR     R7
   \   000009CE   9467               ROR     R6
   \   000009D0   9457               ROR     R5
   \   000009D2   9447               ROR     R4
   \   000009D4   9437               ROR     R3
   \   000009D6   9427               ROR     R2
   \   000009D8   9417               ROR     R1
   \   000009DA   9407               ROR     R0
   \   000009DC   9476               LSR     R7
   \   000009DE   9467               ROR     R6
   \   000009E0   9457               ROR     R5
   \   000009E2   9447               ROR     R4
   \   000009E4   9437               ROR     R3
   \   000009E6   9427               ROR     R2
   \   000009E8   9417               ROR     R1
   \   000009EA   9407               ROR     R0
   \   000009EC   3088               CPI     R24, 8
   \   000009EE   0711               CPC     R17, R17
   \   000009F0   F00C               BRLT    ??ecc_mul_double_49
   \   000009F2   9740               SBIW    R25:R24, 16
   \                     ??ecc_mul_double_49:
   \   000009F4   2399               TST     R25
   \   000009F6   F44A               BRPL    ??ecc_mul_double_50
   \   000009F8   E001               LDI     R16, 1
   \   000009FA   0E00               ADD     R0, R16
   \   000009FC   1E11               ADC     R1, R17
   \   000009FE   1E21               ADC     R2, R17
   \   00000A00   1E31               ADC     R3, R17
   \   00000A02   1E41               ADC     R4, R17
   \   00000A04   1E51               ADC     R5, R17
   \   00000A06   1E61               ADC     R6, R17
   \   00000A08   1E71               ADC     R7, R17
   \                     ??ecc_mul_double_50:
   \   00000A0A   019E               MOVW    R19:R18, R29:R28
   \   00000A0C   5125               SUBI    R18, 21
   \   00000A0E   4F32               SBCI    R19, 242
   \   00000A10   018D               MOVW    R17:R16, R27:R26
   \   00000A12   0F00               LSL     R16
   \   00000A14   1F11               ROL     R17
   \   00000A16   0F20               ADD     R18, R16
   \   00000A18   1F31               ADC     R19, R17
   \   00000A1A   01F9               MOVW    R31:R30, R19:R18
   \   00000A1C   8380               ST      Z, R24
   \   00000A1E   8391               STD     Z+1, R25
   \   00000A20   ....               LDI     R30, LOW(__Constant_0_0)
   \   00000A22   ....               LDI     R31, (__Constant_0_0) >> 8
   \   00000A24   ........           CALL    ?LL_CMP_R0_L12
   \   00000A28   F069               BREQ    ??ecc_mul_double_48
   \   00000A2A   E080               LDI     R24, 0
   \   00000A2C   E090               LDI     R25, 0
   \   00000A2E   5F2E               SUBI    R18, 254
   \   00000A30   4F3F               SBCI    R19, 255
   \                     ??ecc_mul_double_51:
   \   00000A32   9611               ADIW    R27:R26, 1
   \   00000A34   01F9               MOVW    R31:R30, R19:R18
   \   00000A36   9341               ST      Z+, R20
   \   00000A38   9341               ST      Z+, R20
   \   00000A3A   019F               MOVW    R19:R18, R31:R30
   \   00000A3C   9601               ADIW    R25:R24, 1
   \   00000A3E   3083               CPI     R24, 3
   \   00000A40   0794               CPC     R25, R20
   \   00000A42   F3B8               BRCS    ??ecc_mul_double_51
   \                     ??ecc_mul_double_48:
   \   00000A44   9611               ADIW    R27:R26, 1
   \   00000A46   ....               LDI     R30, LOW(__Constant_0_0)
   \   00000A48   ....               LDI     R31, (__Constant_0_0) >> 8
   \   00000A4A   ........           CALL    ?LL_CMP_R0_L12
   \   00000A4E   F009               BREQ    $+2+2
   \   00000A50   CF87               RJMP    ??ecc_mul_double_46
    935          	wNAF_recode(l_scalars[3], WQ_DOUBLEBASE, digits_l4);
   \                     ??ecc_mul_double_45:
   \   00000A52   E0A0               LDI     R26, 0
   \   00000A54   E0B0               LDI     R27, 0
   \   00000A56   01FE               MOVW    R31:R30, R29:R28
   \   00000A58   5FEF               SUBI    R30, 255
   \   00000A5A   4FFE               SBCI    R31, 254
   \   00000A5C   8000               LD      R0, Z
   \   00000A5E   8011               LDD     R1, Z+1
   \   00000A60   8022               LDD     R2, Z+2
   \   00000A62   8033               LDD     R3, Z+3
   \   00000A64   8044               LDD     R4, Z+4
   \   00000A66   8055               LDD     R5, Z+5
   \   00000A68   8066               LDD     R6, Z+6
   \   00000A6A   8077               LDD     R7, Z+7
   \   00000A6C   ....               LDI     R30, LOW(__Constant_0_0)
   \   00000A6E   ....               LDI     R31, (__Constant_0_0) >> 8
   \   00000A70   ........           CALL    ?LL_CMP_R0_L12
   \   00000A74   F409               BRNE    $+2+2
   \   00000A76   C079               RJMP    ??ecc_mul_double_52
   \                     ??ecc_mul_double_53:
   \   00000A78   FA00               BST     R0, 0
   \   00000A7A   2488               CLR     R8
   \   00000A7C   2711               CLR     R17
   \   00000A7E   2722               CLR     R18
   \   00000A80   2733               CLR     R19
   \   00000A82   2744               CLR     R20
   \   00000A84   2755               CLR     R21
   \   00000A86   2766               CLR     R22
   \   00000A88   2777               CLR     R23
   \   00000A8A   F880               BLD     R8, 0
   \   00000A8C   ....               LDI     R30, LOW(__Constant_0_0)
   \   00000A8E   ....               LDI     R31, (__Constant_0_0) >> 8
   \   00000A90   2D08               MOV     R16, R8
   \   00000A92   ........           CALL    ?LL_CMP_L12
   \   00000A96   F499               BRNE    ??ecc_mul_double_54
   \   00000A98   9476               LSR     R7
   \   00000A9A   9467               ROR     R6
   \   00000A9C   9457               ROR     R5
   \   00000A9E   9447               ROR     R4
   \   00000AA0   9437               ROR     R3
   \   00000AA2   9427               ROR     R2
   \   00000AA4   9417               ROR     R1
   \   00000AA6   9407               ROR     R0
   \   00000AA8   01FE               MOVW    R31:R30, R29:R28
   \   00000AAA   59E7               SUBI    R30, 151
   \   00000AAC   4FF2               SBCI    R31, 242
   \   00000AAE   018D               MOVW    R17:R16, R27:R26
   \   00000AB0   0F00               LSL     R16
   \   00000AB2   1F11               ROL     R17
   \   00000AB4   0FE0               ADD     R30, R16
   \   00000AB6   1FF1               ADC     R31, R17
   \   00000AB8   8320               ST      Z, R18
   \   00000ABA   8321               STD     Z+1, R18
   \   00000ABC   C04F               RJMP    ??ecc_mul_double_55
   \                     ??ecc_mul_double_54:
   \   00000ABE   2D80               MOV     R24, R0
   \   00000AC0   708F               ANDI    R24, 0x0F
   \   00000AC2   E090               LDI     R25, 0
   \   00000AC4   9476               LSR     R7
   \   00000AC6   9467               ROR     R6
   \   00000AC8   9457               ROR     R5
   \   00000ACA   9447               ROR     R4
   \   00000ACC   9437               ROR     R3
   \   00000ACE   9427               ROR     R2
   \   00000AD0   9417               ROR     R1
   \   00000AD2   9407               ROR     R0
   \   00000AD4   9476               LSR     R7
   \   00000AD6   9467               ROR     R6
   \   00000AD8   9457               ROR     R5
   \   00000ADA   9447               ROR     R4
   \   00000ADC   9437               ROR     R3
   \   00000ADE   9427               ROR     R2
   \   00000AE0   9417               ROR     R1
   \   00000AE2   9407               ROR     R0
   \   00000AE4   9476               LSR     R7
   \   00000AE6   9467               ROR     R6
   \   00000AE8   9457               ROR     R5
   \   00000AEA   9447               ROR     R4
   \   00000AEC   9437               ROR     R3
   \   00000AEE   9427               ROR     R2
   \   00000AF0   9417               ROR     R1
   \   00000AF2   9407               ROR     R0
   \   00000AF4   9476               LSR     R7
   \   00000AF6   9467               ROR     R6
   \   00000AF8   9457               ROR     R5
   \   00000AFA   9447               ROR     R4
   \   00000AFC   9437               ROR     R3
   \   00000AFE   9427               ROR     R2
   \   00000B00   9417               ROR     R1
   \   00000B02   9407               ROR     R0
   \   00000B04   3088               CPI     R24, 8
   \   00000B06   0711               CPC     R17, R17
   \   00000B08   F00C               BRLT    ??ecc_mul_double_56
   \   00000B0A   9740               SBIW    R25:R24, 16
   \                     ??ecc_mul_double_56:
   \   00000B0C   2399               TST     R25
   \   00000B0E   F44A               BRPL    ??ecc_mul_double_57
   \   00000B10   E001               LDI     R16, 1
   \   00000B12   0E00               ADD     R0, R16
   \   00000B14   1E11               ADC     R1, R17
   \   00000B16   1E21               ADC     R2, R17
   \   00000B18   1E31               ADC     R3, R17
   \   00000B1A   1E41               ADC     R4, R17
   \   00000B1C   1E51               ADC     R5, R17
   \   00000B1E   1E61               ADC     R6, R17
   \   00000B20   1E71               ADC     R7, R17
   \                     ??ecc_mul_double_57:
   \   00000B22   019E               MOVW    R19:R18, R29:R28
   \   00000B24   5927               SUBI    R18, 151
   \   00000B26   4F32               SBCI    R19, 242
   \   00000B28   018D               MOVW    R17:R16, R27:R26
   \   00000B2A   0F00               LSL     R16
   \   00000B2C   1F11               ROL     R17
   \   00000B2E   0F20               ADD     R18, R16
   \   00000B30   1F31               ADC     R19, R17
   \   00000B32   01F9               MOVW    R31:R30, R19:R18
   \   00000B34   8380               ST      Z, R24
   \   00000B36   8391               STD     Z+1, R25
   \   00000B38   ....               LDI     R30, LOW(__Constant_0_0)
   \   00000B3A   ....               LDI     R31, (__Constant_0_0) >> 8
   \   00000B3C   ........           CALL    ?LL_CMP_R0_L12
   \   00000B40   F069               BREQ    ??ecc_mul_double_55
   \   00000B42   E080               LDI     R24, 0
   \   00000B44   E090               LDI     R25, 0
   \   00000B46   5F2E               SUBI    R18, 254
   \   00000B48   4F3F               SBCI    R19, 255
   \                     ??ecc_mul_double_58:
   \   00000B4A   9611               ADIW    R27:R26, 1
   \   00000B4C   01F9               MOVW    R31:R30, R19:R18
   \   00000B4E   9341               ST      Z+, R20
   \   00000B50   9341               ST      Z+, R20
   \   00000B52   019F               MOVW    R19:R18, R31:R30
   \   00000B54   9601               ADIW    R25:R24, 1
   \   00000B56   3083               CPI     R24, 3
   \   00000B58   0794               CPC     R25, R20
   \   00000B5A   F3B8               BRCS    ??ecc_mul_double_58
   \                     ??ecc_mul_double_55:
   \   00000B5C   9611               ADIW    R27:R26, 1
   \   00000B5E   ....               LDI     R30, LOW(__Constant_0_0)
   \   00000B60   ....               LDI     R31, (__Constant_0_0) >> 8
   \   00000B62   ........           CALL    ?LL_CMP_R0_L12
   \   00000B66   F009               BREQ    $+2+2
   \   00000B68   CF87               RJMP    ??ecc_mul_double_53
    936          	ecc_precomp_double(Q1, Q_table1, NPOINTS_DOUBLEMUL_WQ);    // Precomputation
   \                     ??ecc_mul_double_52:
   \   00000B6A   019E               MOVW    R19:R18, R29:R28
   \   00000B6C   5D27               SUBI    R18, 215
   \   00000B6E   4F35               SBCI    R19, 245
   \   00000B70   018E               MOVW    R17:R16, R29:R28
   \   00000B72   5907               SUBI    R16, 151
   \   00000B74   4F1D               SBCI    R17, 253
   \   00000B76   ....               RCALL   ?Subroutine17
   \                     ??CrossCallReturnLabel_22:
   \   00000B78   018E               MOVW    R17:R16, R29:R28
   \   00000B7A   5907               SUBI    R16, 151
   \   00000B7C   4F1D               SBCI    R17, 253
   \   00000B7E   ....               RCALL   ?Subroutine18
   \                     ??CrossCallReturnLabel_31:
   \   00000B80   019E               MOVW    R19:R18, R29:R28
   \   00000B82   5F27               SUBI    R18, 247
   \   00000B84   4F3C               SBCI    R19, 252
   \   00000B86   018E               MOVW    R17:R16, R29:R28
   \   00000B88   5907               SUBI    R16, 151
   \   00000B8A   4F1D               SBCI    R17, 253
   \   00000B8C   ....               RCALL   ?Subroutine15
   \                     ??CrossCallReturnLabel_0:
   \   00000B8E   01CE               MOVW    R25:R24, R29:R28
   \   00000B90   5587               SUBI    R24, 87
   \   00000B92   4F95               SBCI    R25, 245
   \   00000B94   E0A3               LDI     R26, 3
   \                     ??ecc_mul_double_59:
   \   00000B96   01AE               MOVW    R21:R20, R29:R28
   \   00000B98   5747               SUBI    R20, 119
   \   00000B9A   4F5C               SBCI    R21, 252
   \   00000B9C   019E               MOVW    R19:R18, R29:R28
   \   00000B9E   5F27               SUBI    R18, 247
   \   00000BA0   4F3C               SBCI    R19, 252
   \   00000BA2   018C               MOVW    R17:R16, R25:R24
   \   00000BA4   5800               SUBI    R16, 128
   \   00000BA6   4010               SBCI    R17, 0
   \   00000BA8   ....               RCALL   ?Subroutine16
   \                     ??CrossCallReturnLabel_13:
   \   00000BAA   019C               MOVW    R19:R18, R25:R24
   \   00000BAC   018E               MOVW    R17:R16, R29:R28
   \   00000BAE   5707               SUBI    R16, 119
   \   00000BB0   4F1C               SBCI    R17, 252
   \   00000BB2   ....               RCALL   ?Subroutine17
   \                     ??CrossCallReturnLabel_23:
   \   00000BB4   5880               SUBI    R24, 128
   \   00000BB6   4F9F               SBCI    R25, 255
   \   00000BB8   95AA               DEC     R26
   \   00000BBA   F769               BRNE    ??ecc_mul_double_59
    937          	ecc_precomp_double(Q2, Q_table2, NPOINTS_DOUBLEMUL_WQ);
   \   00000BBC   019E               MOVW    R19:R18, R29:R28
   \   00000BBE   5D27               SUBI    R18, 215
   \   00000BC0   4F37               SBCI    R19, 247
   \   00000BC2   018E               MOVW    R17:R16, R29:R28
   \   00000BC4   5307               SUBI    R16, 55
   \   00000BC6   4F1E               SBCI    R17, 254
   \   00000BC8   ....               RCALL   ?Subroutine17
   \                     ??CrossCallReturnLabel_24:
   \   00000BCA   018E               MOVW    R17:R16, R29:R28
   \   00000BCC   5307               SUBI    R16, 55
   \   00000BCE   4F1E               SBCI    R17, 254
   \   00000BD0   ....               RCALL   ?Subroutine18
   \                     ??CrossCallReturnLabel_32:
   \   00000BD2   019E               MOVW    R19:R18, R29:R28
   \   00000BD4   5F27               SUBI    R18, 247
   \   00000BD6   4F3C               SBCI    R19, 252
   \   00000BD8   018E               MOVW    R17:R16, R29:R28
   \   00000BDA   5307               SUBI    R16, 55
   \   00000BDC   4F1E               SBCI    R17, 254
   \   00000BDE   ....               RCALL   ?Subroutine15
   \                     ??CrossCallReturnLabel_1:
   \   00000BE0   01CE               MOVW    R25:R24, R29:R28
   \   00000BE2   5587               SUBI    R24, 87
   \   00000BE4   4F97               SBCI    R25, 247
   \   00000BE6   E0A3               LDI     R26, 3
   \                     ??ecc_mul_double_60:
   \   00000BE8   01AE               MOVW    R21:R20, R29:R28
   \   00000BEA   5747               SUBI    R20, 119
   \   00000BEC   4F5C               SBCI    R21, 252
   \   00000BEE   019E               MOVW    R19:R18, R29:R28
   \   00000BF0   5F27               SUBI    R18, 247
   \   00000BF2   4F3C               SBCI    R19, 252
   \   00000BF4   018C               MOVW    R17:R16, R25:R24
   \   00000BF6   5800               SUBI    R16, 128
   \   00000BF8   4010               SBCI    R17, 0
   \   00000BFA   ....               RCALL   ?Subroutine16
   \                     ??CrossCallReturnLabel_14:
   \   00000BFC   019C               MOVW    R19:R18, R25:R24
   \   00000BFE   018E               MOVW    R17:R16, R29:R28
   \   00000C00   5707               SUBI    R16, 119
   \   00000C02   4F1C               SBCI    R17, 252
   \   00000C04   ....               RCALL   ?Subroutine17
   \                     ??CrossCallReturnLabel_25:
   \   00000C06   5880               SUBI    R24, 128
   \   00000C08   4F9F               SBCI    R25, 255
   \   00000C0A   95AA               DEC     R26
   \   00000C0C   F769               BRNE    ??ecc_mul_double_60
    938          	ecc_precomp_double(Q3, Q_table3, NPOINTS_DOUBLEMUL_WQ);
   \   00000C0E   019E               MOVW    R19:R18, R29:R28
   \   00000C10   5D27               SUBI    R18, 215
   \   00000C12   4F39               SBCI    R19, 249
   \   00000C14   018E               MOVW    R17:R16, R29:R28
   \   00000C16   5307               SUBI    R16, 55
   \   00000C18   4F13               SBCI    R17, 243
   \   00000C1A   ....               RCALL   ?Subroutine17
   \                     ??CrossCallReturnLabel_26:
   \   00000C1C   018E               MOVW    R17:R16, R29:R28
   \   00000C1E   5307               SUBI    R16, 55
   \   00000C20   4F13               SBCI    R17, 243
   \   00000C22   ....               RCALL   ?Subroutine18
   \                     ??CrossCallReturnLabel_33:
   \   00000C24   019E               MOVW    R19:R18, R29:R28
   \   00000C26   5F27               SUBI    R18, 247
   \   00000C28   4F3C               SBCI    R19, 252
   \   00000C2A   018E               MOVW    R17:R16, R29:R28
   \   00000C2C   5307               SUBI    R16, 55
   \   00000C2E   4F13               SBCI    R17, 243
   \   00000C30   ....               RCALL   ?Subroutine15
   \                     ??CrossCallReturnLabel_2:
   \   00000C32   01CE               MOVW    R25:R24, R29:R28
   \   00000C34   5587               SUBI    R24, 87
   \   00000C36   4F99               SBCI    R25, 249
   \   00000C38   E0A3               LDI     R26, 3
   \                     ??ecc_mul_double_61:
   \   00000C3A   01AE               MOVW    R21:R20, R29:R28
   \   00000C3C   5747               SUBI    R20, 119
   \   00000C3E   4F5C               SBCI    R21, 252
   \   00000C40   019E               MOVW    R19:R18, R29:R28
   \   00000C42   5F27               SUBI    R18, 247
   \   00000C44   4F3C               SBCI    R19, 252
   \   00000C46   018C               MOVW    R17:R16, R25:R24
   \   00000C48   5800               SUBI    R16, 128
   \   00000C4A   4010               SBCI    R17, 0
   \   00000C4C   ....               RCALL   ?Subroutine16
   \                     ??CrossCallReturnLabel_15:
   \   00000C4E   019C               MOVW    R19:R18, R25:R24
   \   00000C50   018E               MOVW    R17:R16, R29:R28
   \   00000C52   5707               SUBI    R16, 119
   \   00000C54   4F1C               SBCI    R17, 252
   \   00000C56   ....               RCALL   ?Subroutine17
   \                     ??CrossCallReturnLabel_27:
   \   00000C58   5880               SUBI    R24, 128
   \   00000C5A   4F9F               SBCI    R25, 255
   \   00000C5C   95AA               DEC     R26
   \   00000C5E   F769               BRNE    ??ecc_mul_double_61
    939          	ecc_precomp_double(Q4, Q_table4, NPOINTS_DOUBLEMUL_WQ);
   \   00000C60   019E               MOVW    R19:R18, R29:R28
   \   00000C62   5D27               SUBI    R18, 215
   \   00000C64   4F3B               SBCI    R19, 251
   \   00000C66   018E               MOVW    R17:R16, R29:R28
   \   00000C68   5D07               SUBI    R16, 215
   \   00000C6A   4F13               SBCI    R17, 243
   \   00000C6C   ....               RCALL   ?Subroutine17
   \                     ??CrossCallReturnLabel_28:
   \   00000C6E   018E               MOVW    R17:R16, R29:R28
   \   00000C70   5D07               SUBI    R16, 215
   \   00000C72   4F13               SBCI    R17, 243
   \   00000C74   ....               RCALL   ?Subroutine18
   \                     ??CrossCallReturnLabel_34:
   \   00000C76   019E               MOVW    R19:R18, R29:R28
   \   00000C78   5F27               SUBI    R18, 247
   \   00000C7A   4F3C               SBCI    R19, 252
   \   00000C7C   018E               MOVW    R17:R16, R29:R28
   \   00000C7E   5D07               SUBI    R16, 215
   \   00000C80   4F13               SBCI    R17, 243
   \   00000C82   ....               RCALL   ?Subroutine15
   \                     ??CrossCallReturnLabel_3:
   \   00000C84   01CE               MOVW    R25:R24, R29:R28
   \   00000C86   5587               SUBI    R24, 87
   \   00000C88   4F9B               SBCI    R25, 251
   \   00000C8A   E0A3               LDI     R26, 3
   \                     ??ecc_mul_double_62:
   \   00000C8C   01AE               MOVW    R21:R20, R29:R28
   \   00000C8E   5747               SUBI    R20, 119
   \   00000C90   4F5C               SBCI    R21, 252
   \   00000C92   019E               MOVW    R19:R18, R29:R28
   \   00000C94   5F27               SUBI    R18, 247
   \   00000C96   4F3C               SBCI    R19, 252
   \   00000C98   018C               MOVW    R17:R16, R25:R24
   \   00000C9A   5800               SUBI    R16, 128
   \   00000C9C   4010               SBCI    R17, 0
   \   00000C9E   ....               RCALL   ?Subroutine16
   \                     ??CrossCallReturnLabel_16:
   \   00000CA0   019C               MOVW    R19:R18, R25:R24
   \   00000CA2   018E               MOVW    R17:R16, R29:R28
   \   00000CA4   5707               SUBI    R16, 119
   \   00000CA6   4F1C               SBCI    R17, 252
   \   00000CA8   ....               RCALL   ?Subroutine17
   \                     ??CrossCallReturnLabel_29:
   \   00000CAA   5880               SUBI    R24, 128
   \   00000CAC   4F9F               SBCI    R25, 255
   \   00000CAE   95AA               DEC     R26
   \   00000CB0   F769               BRNE    ??ecc_mul_double_62
    940          
    941          	fp2zero1271(T->x);                                         // Initialize T as the neutral point (0:1:1)
   \   00000CB2   018E               MOVW    R17:R16, R29:R28
   \   00000CB4   5D07               SUBI    R16, 215
   \   00000CB6   4F1E               SBCI    R17, 254
   \   00000CB8   ........           CALL    fpzero1271
   \   00000CBC   018E               MOVW    R17:R16, R29:R28
   \   00000CBE   5C07               SUBI    R16, 199
   \   00000CC0   4F1E               SBCI    R17, 254
   \   00000CC2   ........           CALL    fpzero1271
    942          	fp2zero1271(T->y); T->y[0][0] = 1;
   \   00000CC6   018E               MOVW    R17:R16, R29:R28
   \   00000CC8   5B07               SUBI    R16, 183
   \   00000CCA   4F1E               SBCI    R17, 254
   \   00000CCC   ........           CALL    fpzero1271
   \   00000CD0   018E               MOVW    R17:R16, R29:R28
   \   00000CD2   5A07               SUBI    R16, 167
   \   00000CD4   4F1E               SBCI    R17, 254
   \   00000CD6   ........           CALL    fpzero1271
   \   00000CDA   01FE               MOVW    R31:R30, R29:R28
   \   00000CDC   5BE7               SUBI    R30, 183
   \   00000CDE   4FFE               SBCI    R31, 254
   \   00000CE0   E001               LDI     R16, 1
   \   00000CE2   8300               ST      Z, R16
   \   00000CE4   E000               LDI     R16, 0
   \   00000CE6   8301               STD     Z+1, R16
   \   00000CE8   8302               STD     Z+2, R16
   \   00000CEA   8303               STD     Z+3, R16
    943          	fp2zero1271(T->z); T->z[0][0] = 1;
   \   00000CEC   01DE               MOVW    R27:R26, R29:R28
   \   00000CEE   59A7               SUBI    R26, 151
   \   00000CF0   4FBE               SBCI    R27, 254
   \   00000CF2   018D               MOVW    R17:R16, R27:R26
   \   00000CF4   ........           CALL    fpzero1271
   \   00000CF8   018E               MOVW    R17:R16, R29:R28
   \   00000CFA   5807               SUBI    R16, 135
   \   00000CFC   4F1E               SBCI    R17, 254
   \   00000CFE   ........           CALL    fpzero1271
   \   00000D02   E001               LDI     R16, 1
   \   00000D04   930D               ST      X+, R16
   \   00000D06   E000               LDI     R16, 0
   \   00000D08   930D               ST      X+, R16
   \   00000D0A   930D               ST      X+, R16
   \   00000D0C   930C               ST      X, R16
    944          
    945          	for (i = 64; i >= 0; i--)
   \   00000D0E   017E               MOVW    R15:R14, R29:R28
   \   00000D10   E60F               LDI     R16, 111
   \   00000D12   0EE0               ADD     R14, R16
   \   00000D14   E00F               LDI     R16, 15
   \   00000D16   1EF0               ADC     R15, R16
   \   00000D18   016E               MOVW    R13:R12, R29:R28
   \   00000D1A   EE0D               LDI     R16, 237
   \   00000D1C   0EC0               ADD     R12, R16
   \   00000D1E   E00E               LDI     R16, 14
   \   00000D20   1ED0               ADC     R13, R16
   \   00000D22   015E               MOVW    R11:R10, R29:R28
   \   00000D24   E60B               LDI     R16, 107
   \   00000D26   0EA0               ADD     R10, R16
   \   00000D28   E00E               LDI     R16, 14
   \   00000D2A   1EB0               ADC     R11, R16
   \   00000D2C   014E               MOVW    R9:R8, R29:R28
   \   00000D2E   EE09               LDI     R16, 233
   \   00000D30   0E80               ADD     R8, R16
   \   00000D32   E00D               LDI     R16, 13
   \   00000D34   1E90               ADC     R9, R16
   \   00000D36   013E               MOVW    R7:R6, R29:R28
   \   00000D38   E707               LDI     R16, 119
   \   00000D3A   0E60               ADD     R6, R16
   \   00000D3C   E101               LDI     R16, 17
   \   00000D3E   1E70               ADC     R7, R16
   \   00000D40   018E               MOVW    R17:R16, R29:R28
   \   00000D42   500B               SUBI    R16, 11
   \   00000D44   4E1F               SBCI    R17, 239
   \   00000D46   830D               STD     Y+5, R16
   \   00000D48   831E               STD     Y+6, R17
   \   00000D4A   018E               MOVW    R17:R16, R29:R28
   \   00000D4C   580D               SUBI    R16, 141
   \   00000D4E   4E1F               SBCI    R17, 239
   \   00000D50   830B               STD     Y+3, R16
   \   00000D52   831C               STD     Y+4, R17
   \   00000D54   018E               MOVW    R17:R16, R29:R28
   \   00000D56   500F               SUBI    R16, 15
   \   00000D58   4F10               SBCI    R17, 240
   \   00000D5A   8309               STD     Y+1, R16
   \   00000D5C   831A               STD     Y+2, R17
   \   00000D5E   E401               LDI     R16, 65
   \   00000D60   8308               ST      Y, R16
   \   00000D62   2455               CLR     R5
    946          	{
    947          		eccdouble(T);                                          // Double (X_T,Y_T,Z_T,Ta_T,Tb_T) = 2(X_T,Y_T,Z_T,Ta_T,Tb_T)
   \                     ??ecc_mul_double_63:
   \   00000D64   018E               MOVW    R17:R16, R29:R28
   \   00000D66   5D07               SUBI    R16, 215
   \   00000D68   4F1E               SBCI    R17, 254
   \   00000D6A   ....               RCALL   ?Subroutine18
    948          		if (digits_l1[i] < 0) {
   \                     ??CrossCallReturnLabel_35:
   \   00000D6C   01F7               MOVW    R31:R30, R15:R14
   \   00000D6E   8180               LD      R24, Z
   \   00000D70   8191               LDD     R25, Z+1
   \   00000D72   2399               TST     R25
   \   00000D74   F00A               BRMI    $+2+2
   \   00000D76   C070               RJMP    ??ecc_mul_double_64
    949          			position = (-digits_l1[i])/2;
    950          			eccneg_extproj_precomp(Q_table1[position], U);     // Load and negate U = (X_U,Y_U,Z_U,Td_U) <- -(X+Y,Y-X,2Z,2dT) from a point in the precomputed table 
   \   00000D78   019C               MOVW    R19:R18, R25:R24
   \   00000D7A   01CE               MOVW    R25:R24, R29:R28
   \   00000D7C   5D87               SUBI    R24, 215
   \   00000D7E   4F95               SBCI    R25, 245
   \   00000D80   FB37               BST     R19, 7
   \   00000D82   E000               LDI     R16, 0
   \   00000D84   E010               LDI     R17, 0
   \   00000D86   F900               BLD     R16, 0
   \   00000D88   0F02               ADD     R16, R18
   \   00000D8A   1F13               ADC     R17, R19
   \   00000D8C   9515               ASR     R17
   \   00000D8E   9507               ROR     R16
   \   00000D90   9511               NEG     R17
   \   00000D92   9501               NEG     R16
   \   00000D94   4010               SBCI    R17, 0
   \   00000D96   9516               LSR     R17
   \   00000D98   9507               ROR     R16
   \   00000D9A   2F10               MOV     R17, R16
   \   00000D9C   E000               LDI     R16, 0
   \   00000D9E   9507               ROR     R16
   \   00000DA0   0F80               ADD     R24, R16
   \   00000DA2   1F91               ADC     R25, R17
   \   00000DA4   01DC               MOVW    R27:R26, R25:R24
   \   00000DA6   5AA0               SUBI    R26, 160
   \   00000DA8   4FBF               SBCI    R27, 255
   \   00000DAA   019E               MOVW    R19:R18, R29:R28
   \   00000DAC   5327               SUBI    R18, 55
   \   00000DAE   4F3F               SBCI    R19, 255
   \   00000DB0   018D               MOVW    R17:R16, R27:R26
   \   00000DB2   ........           CALL    fpcopy1271
   \   00000DB6   019E               MOVW    R19:R18, R29:R28
   \   00000DB8   5227               SUBI    R18, 39
   \   00000DBA   4F3F               SBCI    R19, 255
   \   00000DBC   018D               MOVW    R17:R16, R27:R26
   \   00000DBE   5F00               SUBI    R16, 240
   \   00000DC0   4F1F               SBCI    R17, 255
   \   00000DC2   ........           CALL    fpcopy1271
   \   00000DC6   019E               MOVW    R19:R18, R29:R28
   \   00000DC8   5727               SUBI    R18, 119
   \   00000DCA   4F3F               SBCI    R19, 255
   \   00000DCC   018C               MOVW    R17:R16, R25:R24
   \   00000DCE   ........           CALL    fpcopy1271
   \   00000DD2   019E               MOVW    R19:R18, R29:R28
   \   00000DD4   5627               SUBI    R18, 103
   \   00000DD6   4F3F               SBCI    R19, 255
   \   00000DD8   018C               MOVW    R17:R16, R25:R24
   \   00000DDA   5F00               SUBI    R16, 240
   \   00000DDC   4F1F               SBCI    R17, 255
   \   00000DDE   ........           CALL    fpcopy1271
   \   00000DE2   01DC               MOVW    R27:R26, R25:R24
   \   00000DE4   9690               ADIW    R27:R26, 32
   \   00000DE6   019E               MOVW    R19:R18, R29:R28
   \   00000DE8   5927               SUBI    R18, 151
   \   00000DEA   4F3F               SBCI    R19, 255
   \   00000DEC   018D               MOVW    R17:R16, R27:R26
   \   00000DEE   ........           CALL    fpcopy1271
   \   00000DF2   019E               MOVW    R19:R18, R29:R28
   \   00000DF4   5827               SUBI    R18, 135
   \   00000DF6   4F3F               SBCI    R19, 255
   \   00000DF8   018D               MOVW    R17:R16, R27:R26
   \   00000DFA   5F00               SUBI    R16, 240
   \   00000DFC   4F1F               SBCI    R17, 255
   \   00000DFE   ........           CALL    fpcopy1271
   \   00000E02   5C80               SUBI    R24, 192
   \   00000E04   4F9F               SBCI    R25, 255
   \   00000E06   019E               MOVW    R19:R18, R29:R28
   \   00000E08   5527               SUBI    R18, 87
   \   00000E0A   4F3F               SBCI    R19, 255
   \   00000E0C   018C               MOVW    R17:R16, R25:R24
   \   00000E0E   ........           CALL    fpcopy1271
   \   00000E12   019E               MOVW    R19:R18, R29:R28
   \   00000E14   5427               SUBI    R18, 71
   \   00000E16   4F3F               SBCI    R19, 255
   \   00000E18   018C               MOVW    R17:R16, R25:R24
   \   00000E1A   5F00               SUBI    R16, 240
   \   00000E1C   4F1F               SBCI    R17, 255
   \   00000E1E   ........           CALL    fpcopy1271
   \   00000E22   018E               MOVW    R17:R16, R29:R28
   \   00000E24   5307               SUBI    R16, 55
   \   00000E26   4F1F               SBCI    R17, 255
   \   00000E28   ........           CALL    fpneg1271
   \   00000E2C   018E               MOVW    R17:R16, R29:R28
   \   00000E2E   5207               SUBI    R16, 39
   \   00000E30   4F1F               SBCI    R17, 255
   \   00000E32   ........           CALL    fpneg1271
    951          			eccadd(U, T);                                      // T = T+U = (X_T,Y_T,Z_T,Ta_T,Tb_T) = (X_T,Y_T,Z_T,Ta_T,Tb_T) + (X_U,Y_U,Z_U,Td_U) 
   \   00000E36   019E               MOVW    R19:R18, R29:R28
   \   00000E38   5F27               SUBI    R18, 247
   \   00000E3A   4F3C               SBCI    R19, 252
   \   00000E3C   018E               MOVW    R17:R16, R29:R28
   \   00000E3E   5D07               SUBI    R16, 215
   \   00000E40   4F1E               SBCI    R17, 254
   \   00000E42   ....               RCALL   ?Subroutine15
   \                     ??CrossCallReturnLabel_4:
   \   00000E44   01AE               MOVW    R21:R20, R29:R28
   \   00000E46   5D47               SUBI    R20, 215
   \   00000E48   4F5E               SBCI    R21, 254
   \   00000E4A   019E               MOVW    R19:R18, R29:R28
   \   00000E4C   5F27               SUBI    R18, 247
   \   00000E4E   4F3C               SBCI    R19, 252
   \   00000E50   018E               MOVW    R17:R16, R29:R28
   \   00000E52   5907               SUBI    R16, 151
   \   00000E54   4F1F               SBCI    R17, 255
   \   00000E56   C022               RJMP    ??ecc_mul_double_65
    952          		} else if (digits_l1[i] > 0) {
   \                     ??ecc_mul_double_64:
   \   00000E58   3081               CPI     R24, 1
   \   00000E5A   0595               CPC     R25, R5
   \   00000E5C   F104               BRLT    ??CrossCallReturnLabel_17
    953          			position = (digits_l1[i])/2;                       // Take U = (X_U,Y_U,Z_U,Td_U) <- (X+Y,Y-X,2Z,2dT) from a point in the precomputed table
    954          			eccadd(Q_table1[position], T);                     // T = T+U = (X_T,Y_T,Z_T,Ta_T,Tb_T) = (X_T,Y_T,Z_T,Ta_T,Tb_T) + (X_U,Y_U,Z_U,Td_U) 
   \   00000E5E   019E               MOVW    R19:R18, R29:R28
   \   00000E60   5F27               SUBI    R18, 247
   \   00000E62   4F3C               SBCI    R19, 252
   \   00000E64   018E               MOVW    R17:R16, R29:R28
   \   00000E66   5D07               SUBI    R16, 215
   \   00000E68   4F1E               SBCI    R17, 254
   \   00000E6A   ....               RCALL   ?Subroutine15
   \                     ??CrossCallReturnLabel_5:
   \   00000E6C   01AE               MOVW    R21:R20, R29:R28
   \   00000E6E   5D47               SUBI    R20, 215
   \   00000E70   4F5E               SBCI    R21, 254
   \   00000E72   019E               MOVW    R19:R18, R29:R28
   \   00000E74   5F27               SUBI    R18, 247
   \   00000E76   4F3C               SBCI    R19, 252
   \   00000E78   018E               MOVW    R17:R16, R29:R28
   \   00000E7A   5D07               SUBI    R16, 215
   \   00000E7C   4F15               SBCI    R17, 245
   \   00000E7E   FB97               BST     R25, 7
   \   00000E80   E060               LDI     R22, 0
   \   00000E82   E070               LDI     R23, 0
   \   00000E84   F960               BLD     R22, 0
   \   00000E86   0F68               ADD     R22, R24
   \   00000E88   1F79               ADC     R23, R25
   \   00000E8A   9575               ASR     R23
   \   00000E8C   9567               ROR     R22
   \   00000E8E   9576               LSR     R23
   \   00000E90   9567               ROR     R22
   \   00000E92   2F76               MOV     R23, R22
   \   00000E94   E060               LDI     R22, 0
   \   00000E96   9567               ROR     R22
   \   00000E98   0F06               ADD     R16, R22
   \   00000E9A   1F17               ADC     R17, R23
   \                     ??ecc_mul_double_65:
   \   00000E9C   ....               RCALL   ?Subroutine16
    955          		}
    956          		if (digits_l2[i] < 0) {
   \                     ??CrossCallReturnLabel_17:
   \   00000E9E   01F6               MOVW    R31:R30, R13:R12
   \   00000EA0   8180               LD      R24, Z
   \   00000EA2   8191               LDD     R25, Z+1
   \   00000EA4   2399               TST     R25
   \   00000EA6   F00A               BRMI    $+2+2
   \   00000EA8   C070               RJMP    ??ecc_mul_double_66
    957          			position = (-digits_l2[i])/2;
    958          			eccneg_extproj_precomp(Q_table2[position], U);
   \   00000EAA   019C               MOVW    R19:R18, R25:R24
   \   00000EAC   01CE               MOVW    R25:R24, R29:R28
   \   00000EAE   5D87               SUBI    R24, 215
   \   00000EB0   4F97               SBCI    R25, 247
   \   00000EB2   FB37               BST     R19, 7
   \   00000EB4   E000               LDI     R16, 0
   \   00000EB6   E010               LDI     R17, 0
   \   00000EB8   F900               BLD     R16, 0
   \   00000EBA   0F02               ADD     R16, R18
   \   00000EBC   1F13               ADC     R17, R19
   \   00000EBE   9515               ASR     R17
   \   00000EC0   9507               ROR     R16
   \   00000EC2   9511               NEG     R17
   \   00000EC4   9501               NEG     R16
   \   00000EC6   4010               SBCI    R17, 0
   \   00000EC8   9516               LSR     R17
   \   00000ECA   9507               ROR     R16
   \   00000ECC   2F10               MOV     R17, R16
   \   00000ECE   E000               LDI     R16, 0
   \   00000ED0   9507               ROR     R16
   \   00000ED2   0F80               ADD     R24, R16
   \   00000ED4   1F91               ADC     R25, R17
   \   00000ED6   01DC               MOVW    R27:R26, R25:R24
   \   00000ED8   5AA0               SUBI    R26, 160
   \   00000EDA   4FBF               SBCI    R27, 255
   \   00000EDC   019E               MOVW    R19:R18, R29:R28
   \   00000EDE   5327               SUBI    R18, 55
   \   00000EE0   4F3F               SBCI    R19, 255
   \   00000EE2   018D               MOVW    R17:R16, R27:R26
   \   00000EE4   ........           CALL    fpcopy1271
   \   00000EE8   019E               MOVW    R19:R18, R29:R28
   \   00000EEA   5227               SUBI    R18, 39
   \   00000EEC   4F3F               SBCI    R19, 255
   \   00000EEE   018D               MOVW    R17:R16, R27:R26
   \   00000EF0   5F00               SUBI    R16, 240
   \   00000EF2   4F1F               SBCI    R17, 255
   \   00000EF4   ........           CALL    fpcopy1271
   \   00000EF8   019E               MOVW    R19:R18, R29:R28
   \   00000EFA   5727               SUBI    R18, 119
   \   00000EFC   4F3F               SBCI    R19, 255
   \   00000EFE   018C               MOVW    R17:R16, R25:R24
   \   00000F00   ........           CALL    fpcopy1271
   \   00000F04   019E               MOVW    R19:R18, R29:R28
   \   00000F06   5627               SUBI    R18, 103
   \   00000F08   4F3F               SBCI    R19, 255
   \   00000F0A   018C               MOVW    R17:R16, R25:R24
   \   00000F0C   5F00               SUBI    R16, 240
   \   00000F0E   4F1F               SBCI    R17, 255
   \   00000F10   ........           CALL    fpcopy1271
   \   00000F14   01DC               MOVW    R27:R26, R25:R24
   \   00000F16   9690               ADIW    R27:R26, 32
   \   00000F18   019E               MOVW    R19:R18, R29:R28
   \   00000F1A   5927               SUBI    R18, 151
   \   00000F1C   4F3F               SBCI    R19, 255
   \   00000F1E   018D               MOVW    R17:R16, R27:R26
   \   00000F20   ........           CALL    fpcopy1271
   \   00000F24   019E               MOVW    R19:R18, R29:R28
   \   00000F26   5827               SUBI    R18, 135
   \   00000F28   4F3F               SBCI    R19, 255
   \   00000F2A   018D               MOVW    R17:R16, R27:R26
   \   00000F2C   5F00               SUBI    R16, 240
   \   00000F2E   4F1F               SBCI    R17, 255
   \   00000F30   ........           CALL    fpcopy1271
   \   00000F34   5C80               SUBI    R24, 192
   \   00000F36   4F9F               SBCI    R25, 255
   \   00000F38   019E               MOVW    R19:R18, R29:R28
   \   00000F3A   5527               SUBI    R18, 87
   \   00000F3C   4F3F               SBCI    R19, 255
   \   00000F3E   018C               MOVW    R17:R16, R25:R24
   \   00000F40   ........           CALL    fpcopy1271
   \   00000F44   019E               MOVW    R19:R18, R29:R28
   \   00000F46   5427               SUBI    R18, 71
   \   00000F48   4F3F               SBCI    R19, 255
   \   00000F4A   018C               MOVW    R17:R16, R25:R24
   \   00000F4C   5F00               SUBI    R16, 240
   \   00000F4E   4F1F               SBCI    R17, 255
   \   00000F50   ........           CALL    fpcopy1271
   \   00000F54   018E               MOVW    R17:R16, R29:R28
   \   00000F56   5307               SUBI    R16, 55
   \   00000F58   4F1F               SBCI    R17, 255
   \   00000F5A   ........           CALL    fpneg1271
   \   00000F5E   018E               MOVW    R17:R16, R29:R28
   \   00000F60   5207               SUBI    R16, 39
   \   00000F62   4F1F               SBCI    R17, 255
   \   00000F64   ........           CALL    fpneg1271
    959          			eccadd(U, T);
   \   00000F68   019E               MOVW    R19:R18, R29:R28
   \   00000F6A   5F27               SUBI    R18, 247
   \   00000F6C   4F3C               SBCI    R19, 252
   \   00000F6E   018E               MOVW    R17:R16, R29:R28
   \   00000F70   5D07               SUBI    R16, 215
   \   00000F72   4F1E               SBCI    R17, 254
   \   00000F74   ....               RCALL   ?Subroutine15
   \                     ??CrossCallReturnLabel_6:
   \   00000F76   01AE               MOVW    R21:R20, R29:R28
   \   00000F78   5D47               SUBI    R20, 215
   \   00000F7A   4F5E               SBCI    R21, 254
   \   00000F7C   019E               MOVW    R19:R18, R29:R28
   \   00000F7E   5F27               SUBI    R18, 247
   \   00000F80   4F3C               SBCI    R19, 252
   \   00000F82   018E               MOVW    R17:R16, R29:R28
   \   00000F84   5907               SUBI    R16, 151
   \   00000F86   4F1F               SBCI    R17, 255
   \   00000F88   C022               RJMP    ??ecc_mul_double_67
    960          		} else if (digits_l2[i] > 0) {
   \                     ??ecc_mul_double_66:
   \   00000F8A   3081               CPI     R24, 1
   \   00000F8C   0595               CPC     R25, R5
   \   00000F8E   F104               BRLT    ??CrossCallReturnLabel_18
    961          			position = (digits_l2[i])/2;
    962          			eccadd(Q_table2[position], T);
   \   00000F90   019E               MOVW    R19:R18, R29:R28
   \   00000F92   5F27               SUBI    R18, 247
   \   00000F94   4F3C               SBCI    R19, 252
   \   00000F96   018E               MOVW    R17:R16, R29:R28
   \   00000F98   5D07               SUBI    R16, 215
   \   00000F9A   4F1E               SBCI    R17, 254
   \   00000F9C   ....               RCALL   ?Subroutine15
   \                     ??CrossCallReturnLabel_7:
   \   00000F9E   01AE               MOVW    R21:R20, R29:R28
   \   00000FA0   5D47               SUBI    R20, 215
   \   00000FA2   4F5E               SBCI    R21, 254
   \   00000FA4   019E               MOVW    R19:R18, R29:R28
   \   00000FA6   5F27               SUBI    R18, 247
   \   00000FA8   4F3C               SBCI    R19, 252
   \   00000FAA   018E               MOVW    R17:R16, R29:R28
   \   00000FAC   5D07               SUBI    R16, 215
   \   00000FAE   4F17               SBCI    R17, 247
   \   00000FB0   FB97               BST     R25, 7
   \   00000FB2   E060               LDI     R22, 0
   \   00000FB4   E070               LDI     R23, 0
   \   00000FB6   F960               BLD     R22, 0
   \   00000FB8   0F68               ADD     R22, R24
   \   00000FBA   1F79               ADC     R23, R25
   \   00000FBC   9575               ASR     R23
   \   00000FBE   9567               ROR     R22
   \   00000FC0   9576               LSR     R23
   \   00000FC2   9567               ROR     R22
   \   00000FC4   2F76               MOV     R23, R22
   \   00000FC6   E060               LDI     R22, 0
   \   00000FC8   9567               ROR     R22
   \   00000FCA   0F06               ADD     R16, R22
   \   00000FCC   1F17               ADC     R17, R23
   \                     ??ecc_mul_double_67:
   \   00000FCE   ....               RCALL   ?Subroutine16
    963          		}
    964          		if (digits_l3[i] < 0) {
   \                     ??CrossCallReturnLabel_18:
   \   00000FD0   01F5               MOVW    R31:R30, R11:R10
   \   00000FD2   8180               LD      R24, Z
   \   00000FD4   8191               LDD     R25, Z+1
   \   00000FD6   2399               TST     R25
   \   00000FD8   F00A               BRMI    $+2+2
   \   00000FDA   C070               RJMP    ??ecc_mul_double_68
    965          			position = (-digits_l3[i])/2;
    966          			eccneg_extproj_precomp(Q_table3[position], U);
   \   00000FDC   019C               MOVW    R19:R18, R25:R24
   \   00000FDE   01CE               MOVW    R25:R24, R29:R28
   \   00000FE0   5D87               SUBI    R24, 215
   \   00000FE2   4F99               SBCI    R25, 249
   \   00000FE4   FB37               BST     R19, 7
   \   00000FE6   E000               LDI     R16, 0
   \   00000FE8   E010               LDI     R17, 0
   \   00000FEA   F900               BLD     R16, 0
   \   00000FEC   0F02               ADD     R16, R18
   \   00000FEE   1F13               ADC     R17, R19
   \   00000FF0   9515               ASR     R17
   \   00000FF2   9507               ROR     R16
   \   00000FF4   9511               NEG     R17
   \   00000FF6   9501               NEG     R16
   \   00000FF8   4010               SBCI    R17, 0
   \   00000FFA   9516               LSR     R17
   \   00000FFC   9507               ROR     R16
   \   00000FFE   2F10               MOV     R17, R16
   \   00001000   E000               LDI     R16, 0
   \   00001002   9507               ROR     R16
   \   00001004   0F80               ADD     R24, R16
   \   00001006   1F91               ADC     R25, R17
   \   00001008   01DC               MOVW    R27:R26, R25:R24
   \   0000100A   5AA0               SUBI    R26, 160
   \   0000100C   4FBF               SBCI    R27, 255
   \   0000100E   019E               MOVW    R19:R18, R29:R28
   \   00001010   5327               SUBI    R18, 55
   \   00001012   4F3F               SBCI    R19, 255
   \   00001014   018D               MOVW    R17:R16, R27:R26
   \   00001016   ........           CALL    fpcopy1271
   \   0000101A   019E               MOVW    R19:R18, R29:R28
   \   0000101C   5227               SUBI    R18, 39
   \   0000101E   4F3F               SBCI    R19, 255
   \   00001020   018D               MOVW    R17:R16, R27:R26
   \   00001022   5F00               SUBI    R16, 240
   \   00001024   4F1F               SBCI    R17, 255
   \   00001026   ........           CALL    fpcopy1271
   \   0000102A   019E               MOVW    R19:R18, R29:R28
   \   0000102C   5727               SUBI    R18, 119
   \   0000102E   4F3F               SBCI    R19, 255
   \   00001030   018C               MOVW    R17:R16, R25:R24
   \   00001032   ........           CALL    fpcopy1271
   \   00001036   019E               MOVW    R19:R18, R29:R28
   \   00001038   5627               SUBI    R18, 103
   \   0000103A   4F3F               SBCI    R19, 255
   \   0000103C   018C               MOVW    R17:R16, R25:R24
   \   0000103E   5F00               SUBI    R16, 240
   \   00001040   4F1F               SBCI    R17, 255
   \   00001042   ........           CALL    fpcopy1271
   \   00001046   01DC               MOVW    R27:R26, R25:R24
   \   00001048   9690               ADIW    R27:R26, 32
   \   0000104A   019E               MOVW    R19:R18, R29:R28
   \   0000104C   5927               SUBI    R18, 151
   \   0000104E   4F3F               SBCI    R19, 255
   \   00001050   018D               MOVW    R17:R16, R27:R26
   \   00001052   ........           CALL    fpcopy1271
   \   00001056   019E               MOVW    R19:R18, R29:R28
   \   00001058   5827               SUBI    R18, 135
   \   0000105A   4F3F               SBCI    R19, 255
   \   0000105C   018D               MOVW    R17:R16, R27:R26
   \   0000105E   5F00               SUBI    R16, 240
   \   00001060   4F1F               SBCI    R17, 255
   \   00001062   ........           CALL    fpcopy1271
   \   00001066   5C80               SUBI    R24, 192
   \   00001068   4F9F               SBCI    R25, 255
   \   0000106A   019E               MOVW    R19:R18, R29:R28
   \   0000106C   5527               SUBI    R18, 87
   \   0000106E   4F3F               SBCI    R19, 255
   \   00001070   018C               MOVW    R17:R16, R25:R24
   \   00001072   ........           CALL    fpcopy1271
   \   00001076   019E               MOVW    R19:R18, R29:R28
   \   00001078   5427               SUBI    R18, 71
   \   0000107A   4F3F               SBCI    R19, 255
   \   0000107C   018C               MOVW    R17:R16, R25:R24
   \   0000107E   5F00               SUBI    R16, 240
   \   00001080   4F1F               SBCI    R17, 255
   \   00001082   ........           CALL    fpcopy1271
   \   00001086   018E               MOVW    R17:R16, R29:R28
   \   00001088   5307               SUBI    R16, 55
   \   0000108A   4F1F               SBCI    R17, 255
   \   0000108C   ........           CALL    fpneg1271
   \   00001090   018E               MOVW    R17:R16, R29:R28
   \   00001092   5207               SUBI    R16, 39
   \   00001094   4F1F               SBCI    R17, 255
   \   00001096   ........           CALL    fpneg1271
    967          			eccadd(U, T);
   \   0000109A   019E               MOVW    R19:R18, R29:R28
   \   0000109C   5F27               SUBI    R18, 247
   \   0000109E   4F3C               SBCI    R19, 252
   \   000010A0   018E               MOVW    R17:R16, R29:R28
   \   000010A2   5D07               SUBI    R16, 215
   \   000010A4   4F1E               SBCI    R17, 254
   \   000010A6   ....               RCALL   ?Subroutine15
   \                     ??CrossCallReturnLabel_8:
   \   000010A8   01AE               MOVW    R21:R20, R29:R28
   \   000010AA   5D47               SUBI    R20, 215
   \   000010AC   4F5E               SBCI    R21, 254
   \   000010AE   019E               MOVW    R19:R18, R29:R28
   \   000010B0   5F27               SUBI    R18, 247
   \   000010B2   4F3C               SBCI    R19, 252
   \   000010B4   018E               MOVW    R17:R16, R29:R28
   \   000010B6   5907               SUBI    R16, 151
   \   000010B8   4F1F               SBCI    R17, 255
   \   000010BA   C022               RJMP    ??ecc_mul_double_69
    968          		} else if (digits_l3[i] > 0) {
   \                     ??ecc_mul_double_68:
   \   000010BC   3081               CPI     R24, 1
   \   000010BE   0595               CPC     R25, R5
   \   000010C0   F104               BRLT    ??CrossCallReturnLabel_19
    969          			position = (digits_l3[i])/2;
    970          			eccadd(Q_table3[position], T);
   \   000010C2   019E               MOVW    R19:R18, R29:R28
   \   000010C4   5F27               SUBI    R18, 247
   \   000010C6   4F3C               SBCI    R19, 252
   \   000010C8   018E               MOVW    R17:R16, R29:R28
   \   000010CA   5D07               SUBI    R16, 215
   \   000010CC   4F1E               SBCI    R17, 254
   \   000010CE   ....               RCALL   ?Subroutine15
   \                     ??CrossCallReturnLabel_9:
   \   000010D0   01AE               MOVW    R21:R20, R29:R28
   \   000010D2   5D47               SUBI    R20, 215
   \   000010D4   4F5E               SBCI    R21, 254
   \   000010D6   019E               MOVW    R19:R18, R29:R28
   \   000010D8   5F27               SUBI    R18, 247
   \   000010DA   4F3C               SBCI    R19, 252
   \   000010DC   018E               MOVW    R17:R16, R29:R28
   \   000010DE   5D07               SUBI    R16, 215
   \   000010E0   4F19               SBCI    R17, 249
   \   000010E2   FB97               BST     R25, 7
   \   000010E4   E060               LDI     R22, 0
   \   000010E6   E070               LDI     R23, 0
   \   000010E8   F960               BLD     R22, 0
   \   000010EA   0F68               ADD     R22, R24
   \   000010EC   1F79               ADC     R23, R25
   \   000010EE   9575               ASR     R23
   \   000010F0   9567               ROR     R22
   \   000010F2   9576               LSR     R23
   \   000010F4   9567               ROR     R22
   \   000010F6   2F76               MOV     R23, R22
   \   000010F8   E060               LDI     R22, 0
   \   000010FA   9567               ROR     R22
   \   000010FC   0F06               ADD     R16, R22
   \   000010FE   1F17               ADC     R17, R23
   \                     ??ecc_mul_double_69:
   \   00001100   ....               RCALL   ?Subroutine16
    971          		}
    972          		if (digits_l4[i] < 0) {
   \                     ??CrossCallReturnLabel_19:
   \   00001102   01F4               MOVW    R31:R30, R9:R8
   \   00001104   8180               LD      R24, Z
   \   00001106   8191               LDD     R25, Z+1
   \   00001108   2399               TST     R25
   \   0000110A   F00A               BRMI    $+2+2
   \   0000110C   C070               RJMP    ??ecc_mul_double_70
    973          			position = (-digits_l4[i])/2;
    974          			eccneg_extproj_precomp(Q_table4[position], U);
   \   0000110E   019C               MOVW    R19:R18, R25:R24
   \   00001110   01CE               MOVW    R25:R24, R29:R28
   \   00001112   5D87               SUBI    R24, 215
   \   00001114   4F9B               SBCI    R25, 251
   \   00001116   FB37               BST     R19, 7
   \   00001118   E000               LDI     R16, 0
   \   0000111A   E010               LDI     R17, 0
   \   0000111C   F900               BLD     R16, 0
   \   0000111E   0F02               ADD     R16, R18
   \   00001120   1F13               ADC     R17, R19
   \   00001122   9515               ASR     R17
   \   00001124   9507               ROR     R16
   \   00001126   9511               NEG     R17
   \   00001128   9501               NEG     R16
   \   0000112A   4010               SBCI    R17, 0
   \   0000112C   9516               LSR     R17
   \   0000112E   9507               ROR     R16
   \   00001130   2F10               MOV     R17, R16
   \   00001132   E000               LDI     R16, 0
   \   00001134   9507               ROR     R16
   \   00001136   0F80               ADD     R24, R16
   \   00001138   1F91               ADC     R25, R17
   \   0000113A   01DC               MOVW    R27:R26, R25:R24
   \   0000113C   5AA0               SUBI    R26, 160
   \   0000113E   4FBF               SBCI    R27, 255
   \   00001140   019E               MOVW    R19:R18, R29:R28
   \   00001142   5327               SUBI    R18, 55
   \   00001144   4F3F               SBCI    R19, 255
   \   00001146   018D               MOVW    R17:R16, R27:R26
   \   00001148   ........           CALL    fpcopy1271
   \   0000114C   019E               MOVW    R19:R18, R29:R28
   \   0000114E   5227               SUBI    R18, 39
   \   00001150   4F3F               SBCI    R19, 255
   \   00001152   018D               MOVW    R17:R16, R27:R26
   \   00001154   5F00               SUBI    R16, 240
   \   00001156   4F1F               SBCI    R17, 255
   \   00001158   ........           CALL    fpcopy1271
   \   0000115C   019E               MOVW    R19:R18, R29:R28
   \   0000115E   5727               SUBI    R18, 119
   \   00001160   4F3F               SBCI    R19, 255
   \   00001162   018C               MOVW    R17:R16, R25:R24
   \   00001164   ........           CALL    fpcopy1271
   \   00001168   019E               MOVW    R19:R18, R29:R28
   \   0000116A   5627               SUBI    R18, 103
   \   0000116C   4F3F               SBCI    R19, 255
   \   0000116E   018C               MOVW    R17:R16, R25:R24
   \   00001170   5F00               SUBI    R16, 240
   \   00001172   4F1F               SBCI    R17, 255
   \   00001174   ........           CALL    fpcopy1271
   \   00001178   01DC               MOVW    R27:R26, R25:R24
   \   0000117A   9690               ADIW    R27:R26, 32
   \   0000117C   019E               MOVW    R19:R18, R29:R28
   \   0000117E   5927               SUBI    R18, 151
   \   00001180   4F3F               SBCI    R19, 255
   \   00001182   018D               MOVW    R17:R16, R27:R26
   \   00001184   ........           CALL    fpcopy1271
   \   00001188   019E               MOVW    R19:R18, R29:R28
   \   0000118A   5827               SUBI    R18, 135
   \   0000118C   4F3F               SBCI    R19, 255
   \   0000118E   018D               MOVW    R17:R16, R27:R26
   \   00001190   5F00               SUBI    R16, 240
   \   00001192   4F1F               SBCI    R17, 255
   \   00001194   ........           CALL    fpcopy1271
   \   00001198   5C80               SUBI    R24, 192
   \   0000119A   4F9F               SBCI    R25, 255
   \   0000119C   019E               MOVW    R19:R18, R29:R28
   \   0000119E   5527               SUBI    R18, 87
   \   000011A0   4F3F               SBCI    R19, 255
   \   000011A2   018C               MOVW    R17:R16, R25:R24
   \   000011A4   ........           CALL    fpcopy1271
   \   000011A8   019E               MOVW    R19:R18, R29:R28
   \   000011AA   5427               SUBI    R18, 71
   \   000011AC   4F3F               SBCI    R19, 255
   \   000011AE   018C               MOVW    R17:R16, R25:R24
   \   000011B0   5F00               SUBI    R16, 240
   \   000011B2   4F1F               SBCI    R17, 255
   \   000011B4   ........           CALL    fpcopy1271
   \   000011B8   018E               MOVW    R17:R16, R29:R28
   \   000011BA   5307               SUBI    R16, 55
   \   000011BC   4F1F               SBCI    R17, 255
   \   000011BE   ........           CALL    fpneg1271
   \   000011C2   018E               MOVW    R17:R16, R29:R28
   \   000011C4   5207               SUBI    R16, 39
   \   000011C6   4F1F               SBCI    R17, 255
   \   000011C8   ........           CALL    fpneg1271
    975          			eccadd(U, T);
   \   000011CC   019E               MOVW    R19:R18, R29:R28
   \   000011CE   5F27               SUBI    R18, 247
   \   000011D0   4F3C               SBCI    R19, 252
   \   000011D2   018E               MOVW    R17:R16, R29:R28
   \   000011D4   5D07               SUBI    R16, 215
   \   000011D6   4F1E               SBCI    R17, 254
   \   000011D8   ....               RCALL   ?Subroutine15
   \                     ??CrossCallReturnLabel_10:
   \   000011DA   01AE               MOVW    R21:R20, R29:R28
   \   000011DC   5D47               SUBI    R20, 215
   \   000011DE   4F5E               SBCI    R21, 254
   \   000011E0   019E               MOVW    R19:R18, R29:R28
   \   000011E2   5F27               SUBI    R18, 247
   \   000011E4   4F3C               SBCI    R19, 252
   \   000011E6   018E               MOVW    R17:R16, R29:R28
   \   000011E8   5907               SUBI    R16, 151
   \   000011EA   4F1F               SBCI    R17, 255
   \   000011EC   C022               RJMP    ??ecc_mul_double_71
    976          		} else if (digits_l4[i] > 0) {
   \                     ??ecc_mul_double_70:
   \   000011EE   3081               CPI     R24, 1
   \   000011F0   0595               CPC     R25, R5
   \   000011F2   F104               BRLT    ??CrossCallReturnLabel_20
    977          			position = (digits_l4[i])/2;
    978          			eccadd(Q_table4[position], T);
   \   000011F4   019E               MOVW    R19:R18, R29:R28
   \   000011F6   5F27               SUBI    R18, 247
   \   000011F8   4F3C               SBCI    R19, 252
   \   000011FA   018E               MOVW    R17:R16, R29:R28
   \   000011FC   5D07               SUBI    R16, 215
   \   000011FE   4F1E               SBCI    R17, 254
   \   00001200   ....               RCALL   ?Subroutine15
   \                     ??CrossCallReturnLabel_11:
   \   00001202   01AE               MOVW    R21:R20, R29:R28
   \   00001204   5D47               SUBI    R20, 215
   \   00001206   4F5E               SBCI    R21, 254
   \   00001208   019E               MOVW    R19:R18, R29:R28
   \   0000120A   5F27               SUBI    R18, 247
   \   0000120C   4F3C               SBCI    R19, 252
   \   0000120E   018E               MOVW    R17:R16, R29:R28
   \   00001210   5D07               SUBI    R16, 215
   \   00001212   4F1B               SBCI    R17, 251
   \   00001214   FB97               BST     R25, 7
   \   00001216   E060               LDI     R22, 0
   \   00001218   E070               LDI     R23, 0
   \   0000121A   F960               BLD     R22, 0
   \   0000121C   0F68               ADD     R22, R24
   \   0000121E   1F79               ADC     R23, R25
   \   00001220   9575               ASR     R23
   \   00001222   9567               ROR     R22
   \   00001224   9576               LSR     R23
   \   00001226   9567               ROR     R22
   \   00001228   2F76               MOV     R23, R22
   \   0000122A   E060               LDI     R22, 0
   \   0000122C   9567               ROR     R22
   \   0000122E   0F06               ADD     R16, R22
   \   00001230   1F17               ADC     R17, R23
   \                     ??ecc_mul_double_71:
   \   00001232   ....               RCALL   ?Subroutine16
    979          		}
    980          
    981          		if (digits_k1[i] < 0) {
   \                     ??CrossCallReturnLabel_20:
   \   00001234   01F3               MOVW    R31:R30, R7:R6
   \   00001236   8160               LD      R22, Z
   \   00001238   8171               LDD     R23, Z+1
   \   0000123A   2377               TST     R23
   \   0000123C   F00A               BRMI    $+2+2
   \   0000123E   C054               RJMP    ??ecc_mul_double_72
    982          			position = (-digits_k1[i])/2;
    983          			eccneg_precomp(((point_precomp_t*)&DOUBLE_SCALAR_TABLE)[position], V);    // Load and negate V = (X_V,Y_V,Z_V,Td_V) <- -(x+y,y-x,2dt) from a point in the precomputed table 
   \   00001240   ....               LDI     R24, LOW(DOUBLE_SCALAR_TABLE)
   \   00001242   ....               LDI     R25, (DOUBLE_SCALAR_TABLE) >> 8
   \   00001244   FB77               BST     R23, 7
   \   00001246   E020               LDI     R18, 0
   \   00001248   E030               LDI     R19, 0
   \   0000124A   F920               BLD     R18, 0
   \   0000124C   0F26               ADD     R18, R22
   \   0000124E   1F37               ADC     R19, R23
   \   00001250   9535               ASR     R19
   \   00001252   9527               ROR     R18
   \   00001254   EA00               LDI     R16, 160
   \   00001256   EF1F               LDI     R17, 255
   \   00001258   9F30               MUL     R19, R16
   \   0000125A   2D30               MOV     R19, R0
   \   0000125C   9F21               MUL     R18, R17
   \   0000125E   0D30               ADD     R19, R0
   \   00001260   9F20               MUL     R18, R16
   \   00001262   0D31               ADD     R19, R1
   \   00001264   0D80               ADD     R24, R0
   \   00001266   1F93               ADC     R25, R19
   \   00001268   01DC               MOVW    R27:R26, R25:R24
   \   0000126A   5CA0               SUBI    R26, 192
   \   0000126C   4FBF               SBCI    R27, 255
   \   0000126E   019E               MOVW    R19:R18, R29:R28
   \   00001270   5B27               SUBI    R18, 183
   \   00001272   4F3F               SBCI    R19, 255
   \   00001274   018D               MOVW    R17:R16, R27:R26
   \   00001276   ........           CALL    fpcopy1271_flash
   \   0000127A   019E               MOVW    R19:R18, R29:R28
   \   0000127C   5A27               SUBI    R18, 167
   \   0000127E   4F3F               SBCI    R19, 255
   \   00001280   018D               MOVW    R17:R16, R27:R26
   \   00001282   5F00               SUBI    R16, 240
   \   00001284   4F1F               SBCI    R17, 255
   \   00001286   ........           CALL    fpcopy1271_flash
   \   0000128A   019E               MOVW    R19:R18, R29:R28
   \   0000128C   5D27               SUBI    R18, 215
   \   0000128E   4F3F               SBCI    R19, 255
   \   00001290   018C               MOVW    R17:R16, R25:R24
   \   00001292   ........           CALL    fpcopy1271_flash
   \   00001296   019E               MOVW    R19:R18, R29:R28
   \   00001298   5C27               SUBI    R18, 199
   \   0000129A   4F3F               SBCI    R19, 255
   \   0000129C   018C               MOVW    R17:R16, R25:R24
   \   0000129E   5F00               SUBI    R16, 240
   \   000012A0   4F1F               SBCI    R17, 255
   \   000012A2   ........           CALL    fpcopy1271_flash
   \   000012A6   9680               ADIW    R25:R24, 32
   \   000012A8   019E               MOVW    R19:R18, R29:R28
   \   000012AA   5F27               SUBI    R18, 247
   \   000012AC   4F3F               SBCI    R19, 255
   \   000012AE   018C               MOVW    R17:R16, R25:R24
   \   000012B0   ........           CALL    fpcopy1271_flash
   \   000012B4   019E               MOVW    R19:R18, R29:R28
   \   000012B6   5E27               SUBI    R18, 231
   \   000012B8   4F3F               SBCI    R19, 255
   \   000012BA   018C               MOVW    R17:R16, R25:R24
   \   000012BC   5F00               SUBI    R16, 240
   \   000012BE   4F1F               SBCI    R17, 255
   \   000012C0   ........           CALL    fpcopy1271_flash
   \   000012C4   018E               MOVW    R17:R16, R29:R28
   \   000012C6   5B07               SUBI    R16, 183
   \   000012C8   4F1F               SBCI    R17, 255
   \   000012CA   ........           CALL    fpneg1271
   \   000012CE   018E               MOVW    R17:R16, R29:R28
   \   000012D0   5A07               SUBI    R16, 167
   \   000012D2   4F1F               SBCI    R17, 255
   \   000012D4   ........           CALL    fpneg1271
    984          			eccmadd(V, T);                                                            // T = T+V = (X_T,Y_T,Z_T,Ta_T,Tb_T) = (X_T,Y_T,Z_T,Ta_T,Tb_T) + (X_V,Y_V,Z_V,Td_V) 
   \   000012D8   019E               MOVW    R19:R18, R29:R28
   \   000012DA   5D27               SUBI    R18, 215
   \   000012DC   4F3E               SBCI    R19, 254
   \   000012DE   018E               MOVW    R17:R16, R29:R28
   \   000012E0   5F07               SUBI    R16, 247
   \   000012E2   4F1F               SBCI    R17, 255
   \   000012E4   ....               RCALL   ?Subroutine19
    985          		} else if (digits_k1[i] > 0) {
   \                     ??CrossCallReturnLabel_37:
   \   000012E6   C019               RJMP    ??CrossCallReturnLabel_41
   \                     ??ecc_mul_double_72:
   \   000012E8   3061               CPI     R22, 1
   \   000012EA   0575               CPC     R23, R5
   \   000012EC   F0B4               BRLT    ??CrossCallReturnLabel_41
    986          			position = (digits_k1[i])/2;                                              // Take V = (X_V,Y_V,Z_V,Td_V) <- (x+y,y-x,2dt) from a point in the precomputed table
    987          			eccmadd2(((point_precomp_t*)&DOUBLE_SCALAR_TABLE)[position], T);          // T = T+V = (X_T,Y_T,Z_T,Ta_T,Tb_T) = (X_T,Y_T,Z_T,Ta_T,Tb_T) + (X_V,Y_V,Z_V,Td_V) 
   \   000012EE   019E               MOVW    R19:R18, R29:R28
   \   000012F0   5D27               SUBI    R18, 215
   \   000012F2   4F3E               SBCI    R19, 254
   \   000012F4   ....               LDI     R20, LOW(DOUBLE_SCALAR_TABLE)
   \   000012F6   ....               LDI     R21, (DOUBLE_SCALAR_TABLE) >> 8
   \   000012F8   FB77               BST     R23, 7
   \   000012FA   2422               CLR     R2
   \   000012FC   2433               CLR     R3
   \   000012FE   F820               BLD     R2, 0
   \   00001300   0E26               ADD     R2, R22
   \   00001302   1E37               ADC     R3, R23
   \   00001304   9435               ASR     R3
   \   00001306   9427               ROR     R2
   \   00001308   E600               LDI     R16, 96
   \   0000130A   9E30               MUL     R3, R16
   \   0000130C   2C30               MOV     R3, R0
   \   0000130E   9E20               MUL     R2, R16
   \   00001310   0C31               ADD     R3, R1
   \   00001312   0D40               ADD     R20, R0
   \   00001314   1D53               ADC     R21, R3
   \   00001316   018A               MOVW    R17:R16, R21:R20
   \   00001318   ....               RCALL   ?Subroutine20
    988          		}
    989          		if (digits_k2[i] < 0) {
   \                     ??CrossCallReturnLabel_41:
   \   0000131A   81ED               LDD     R30, Y+5
   \   0000131C   81FE               LDD     R31, Y+6
   \   0000131E   8160               LD      R22, Z
   \   00001320   8171               LDD     R23, Z+1
   \   00001322   2377               TST     R23
   \   00001324   F00A               BRMI    $+2+2
   \   00001326   C055               RJMP    ??ecc_mul_double_73
    990          			position = (-digits_k2[i])/2;
    991          			eccneg_precomp(((point_precomp_t*)&DOUBLE_SCALAR_TABLE)[NPOINTS_DOUBLEMUL_WP+position], V);
   \   00001328   ....               LDI     R24, LOW(DOUBLE_SCALAR_TABLE)
   \   0000132A   ....               LDI     R25, (DOUBLE_SCALAR_TABLE) >> 8
   \   0000132C   FB77               BST     R23, 7
   \   0000132E   E020               LDI     R18, 0
   \   00001330   E030               LDI     R19, 0
   \   00001332   F920               BLD     R18, 0
   \   00001334   0F26               ADD     R18, R22
   \   00001336   1F37               ADC     R19, R23
   \   00001338   9535               ASR     R19
   \   0000133A   9527               ROR     R18
   \   0000133C   EA00               LDI     R16, 160
   \   0000133E   EF1F               LDI     R17, 255
   \   00001340   9F30               MUL     R19, R16
   \   00001342   2D30               MOV     R19, R0
   \   00001344   9F21               MUL     R18, R17
   \   00001346   0D30               ADD     R19, R0
   \   00001348   9F20               MUL     R18, R16
   \   0000134A   0D31               ADD     R19, R1
   \   0000134C   0D80               ADD     R24, R0
   \   0000134E   1F93               ADC     R25, R19
   \   00001350   5F9A               SUBI    R25, 250
   \   00001352   01DC               MOVW    R27:R26, R25:R24
   \   00001354   5CA0               SUBI    R26, 192
   \   00001356   4FBF               SBCI    R27, 255
   \   00001358   019E               MOVW    R19:R18, R29:R28
   \   0000135A   5B27               SUBI    R18, 183
   \   0000135C   4F3F               SBCI    R19, 255
   \   0000135E   018D               MOVW    R17:R16, R27:R26
   \   00001360   ........           CALL    fpcopy1271_flash
   \   00001364   019E               MOVW    R19:R18, R29:R28
   \   00001366   5A27               SUBI    R18, 167
   \   00001368   4F3F               SBCI    R19, 255
   \   0000136A   018D               MOVW    R17:R16, R27:R26
   \   0000136C   5F00               SUBI    R16, 240
   \   0000136E   4F1F               SBCI    R17, 255
   \   00001370   ........           CALL    fpcopy1271_flash
   \   00001374   019E               MOVW    R19:R18, R29:R28
   \   00001376   5D27               SUBI    R18, 215
   \   00001378   4F3F               SBCI    R19, 255
   \   0000137A   018C               MOVW    R17:R16, R25:R24
   \   0000137C   ........           CALL    fpcopy1271_flash
   \   00001380   019E               MOVW    R19:R18, R29:R28
   \   00001382   5C27               SUBI    R18, 199
   \   00001384   4F3F               SBCI    R19, 255
   \   00001386   018C               MOVW    R17:R16, R25:R24
   \   00001388   5F00               SUBI    R16, 240
   \   0000138A   4F1F               SBCI    R17, 255
   \   0000138C   ........           CALL    fpcopy1271_flash
   \   00001390   9680               ADIW    R25:R24, 32
   \   00001392   019E               MOVW    R19:R18, R29:R28
   \   00001394   5F27               SUBI    R18, 247
   \   00001396   4F3F               SBCI    R19, 255
   \   00001398   018C               MOVW    R17:R16, R25:R24
   \   0000139A   ........           CALL    fpcopy1271_flash
   \   0000139E   019E               MOVW    R19:R18, R29:R28
   \   000013A0   5E27               SUBI    R18, 231
   \   000013A2   4F3F               SBCI    R19, 255
   \   000013A4   018C               MOVW    R17:R16, R25:R24
   \   000013A6   5F00               SUBI    R16, 240
   \   000013A8   4F1F               SBCI    R17, 255
   \   000013AA   ........           CALL    fpcopy1271_flash
   \   000013AE   018E               MOVW    R17:R16, R29:R28
   \   000013B0   5B07               SUBI    R16, 183
   \   000013B2   4F1F               SBCI    R17, 255
   \   000013B4   ........           CALL    fpneg1271
   \   000013B8   018E               MOVW    R17:R16, R29:R28
   \   000013BA   5A07               SUBI    R16, 167
   \   000013BC   4F1F               SBCI    R17, 255
   \   000013BE   ........           CALL    fpneg1271
    992          			eccmadd(V, T);
   \   000013C2   019E               MOVW    R19:R18, R29:R28
   \   000013C4   5D27               SUBI    R18, 215
   \   000013C6   4F3E               SBCI    R19, 254
   \   000013C8   018E               MOVW    R17:R16, R29:R28
   \   000013CA   5F07               SUBI    R16, 247
   \   000013CC   4F1F               SBCI    R17, 255
   \   000013CE   ....               RCALL   ?Subroutine19
    993          		} else if (digits_k2[i] > 0) {
   \                     ??CrossCallReturnLabel_38:
   \   000013D0   C01A               RJMP    ??CrossCallReturnLabel_42
   \                     ??ecc_mul_double_73:
   \   000013D2   3061               CPI     R22, 1
   \   000013D4   0575               CPC     R23, R5
   \   000013D6   F0BC               BRLT    ??CrossCallReturnLabel_42
    994          			position = (digits_k2[i])/2;
    995          			eccmadd2(((point_precomp_t*)&DOUBLE_SCALAR_TABLE)[NPOINTS_DOUBLEMUL_WP+position], T);
   \   000013D8   019E               MOVW    R19:R18, R29:R28
   \   000013DA   5D27               SUBI    R18, 215
   \   000013DC   4F3E               SBCI    R19, 254
   \   000013DE   ....               LDI     R20, LOW(DOUBLE_SCALAR_TABLE)
   \   000013E0   ....               LDI     R21, (DOUBLE_SCALAR_TABLE) >> 8
   \   000013E2   FB77               BST     R23, 7
   \   000013E4   2422               CLR     R2
   \   000013E6   2433               CLR     R3
   \   000013E8   F820               BLD     R2, 0
   \   000013EA   0E26               ADD     R2, R22
   \   000013EC   1E37               ADC     R3, R23
   \   000013EE   9435               ASR     R3
   \   000013F0   9427               ROR     R2
   \   000013F2   E600               LDI     R16, 96
   \   000013F4   9E30               MUL     R3, R16
   \   000013F6   2C30               MOV     R3, R0
   \   000013F8   9E20               MUL     R2, R16
   \   000013FA   0C31               ADD     R3, R1
   \   000013FC   0D40               ADD     R20, R0
   \   000013FE   1D53               ADC     R21, R3
   \   00001400   5F5A               SUBI    R21, 250
   \   00001402   018A               MOVW    R17:R16, R21:R20
   \   00001404   ....               RCALL   ?Subroutine20
    996          		}
    997          		if (digits_k3[i] < 0) {
   \                     ??CrossCallReturnLabel_42:
   \   00001406   81EB               LDD     R30, Y+3
   \   00001408   81FC               LDD     R31, Y+4
   \   0000140A   8160               LD      R22, Z
   \   0000140C   8171               LDD     R23, Z+1
   \   0000140E   2377               TST     R23
   \   00001410   F00A               BRMI    $+2+2
   \   00001412   C055               RJMP    ??ecc_mul_double_74
    998          			position = (-digits_k3[i])/2;
    999          			eccneg_precomp(((point_precomp_t*)&DOUBLE_SCALAR_TABLE)[2*NPOINTS_DOUBLEMUL_WP+position], V);
   \   00001414   ....               LDI     R24, LOW(DOUBLE_SCALAR_TABLE)
   \   00001416   ....               LDI     R25, (DOUBLE_SCALAR_TABLE) >> 8
   \   00001418   FB77               BST     R23, 7
   \   0000141A   E020               LDI     R18, 0
   \   0000141C   E030               LDI     R19, 0
   \   0000141E   F920               BLD     R18, 0
   \   00001420   0F26               ADD     R18, R22
   \   00001422   1F37               ADC     R19, R23
   \   00001424   9535               ASR     R19
   \   00001426   9527               ROR     R18
   \   00001428   EA00               LDI     R16, 160
   \   0000142A   EF1F               LDI     R17, 255
   \   0000142C   9F30               MUL     R19, R16
   \   0000142E   2D30               MOV     R19, R0
   \   00001430   9F21               MUL     R18, R17
   \   00001432   0D30               ADD     R19, R0
   \   00001434   9F20               MUL     R18, R16
   \   00001436   0D31               ADD     R19, R1
   \   00001438   0D80               ADD     R24, R0
   \   0000143A   1F93               ADC     R25, R19
   \   0000143C   5F94               SUBI    R25, 244
   \   0000143E   01DC               MOVW    R27:R26, R25:R24
   \   00001440   5CA0               SUBI    R26, 192
   \   00001442   4FBF               SBCI    R27, 255
   \   00001444   019E               MOVW    R19:R18, R29:R28
   \   00001446   5B27               SUBI    R18, 183
   \   00001448   4F3F               SBCI    R19, 255
   \   0000144A   018D               MOVW    R17:R16, R27:R26
   \   0000144C   ........           CALL    fpcopy1271_flash
   \   00001450   019E               MOVW    R19:R18, R29:R28
   \   00001452   5A27               SUBI    R18, 167
   \   00001454   4F3F               SBCI    R19, 255
   \   00001456   018D               MOVW    R17:R16, R27:R26
   \   00001458   5F00               SUBI    R16, 240
   \   0000145A   4F1F               SBCI    R17, 255
   \   0000145C   ........           CALL    fpcopy1271_flash
   \   00001460   019E               MOVW    R19:R18, R29:R28
   \   00001462   5D27               SUBI    R18, 215
   \   00001464   4F3F               SBCI    R19, 255
   \   00001466   018C               MOVW    R17:R16, R25:R24
   \   00001468   ........           CALL    fpcopy1271_flash
   \   0000146C   019E               MOVW    R19:R18, R29:R28
   \   0000146E   5C27               SUBI    R18, 199
   \   00001470   4F3F               SBCI    R19, 255
   \   00001472   018C               MOVW    R17:R16, R25:R24
   \   00001474   5F00               SUBI    R16, 240
   \   00001476   4F1F               SBCI    R17, 255
   \   00001478   ........           CALL    fpcopy1271_flash
   \   0000147C   9680               ADIW    R25:R24, 32
   \   0000147E   019E               MOVW    R19:R18, R29:R28
   \   00001480   5F27               SUBI    R18, 247
   \   00001482   4F3F               SBCI    R19, 255
   \   00001484   018C               MOVW    R17:R16, R25:R24
   \   00001486   ........           CALL    fpcopy1271_flash
   \   0000148A   019E               MOVW    R19:R18, R29:R28
   \   0000148C   5E27               SUBI    R18, 231
   \   0000148E   4F3F               SBCI    R19, 255
   \   00001490   018C               MOVW    R17:R16, R25:R24
   \   00001492   5F00               SUBI    R16, 240
   \   00001494   4F1F               SBCI    R17, 255
   \   00001496   ........           CALL    fpcopy1271_flash
   \   0000149A   018E               MOVW    R17:R16, R29:R28
   \   0000149C   5B07               SUBI    R16, 183
   \   0000149E   4F1F               SBCI    R17, 255
   \   000014A0   ........           CALL    fpneg1271
   \   000014A4   018E               MOVW    R17:R16, R29:R28
   \   000014A6   5A07               SUBI    R16, 167
   \   000014A8   4F1F               SBCI    R17, 255
   \   000014AA   ........           CALL    fpneg1271
   1000          			eccmadd(V, T);
   \   000014AE   019E               MOVW    R19:R18, R29:R28
   \   000014B0   5D27               SUBI    R18, 215
   \   000014B2   4F3E               SBCI    R19, 254
   \   000014B4   018E               MOVW    R17:R16, R29:R28
   \   000014B6   5F07               SUBI    R16, 247
   \   000014B8   4F1F               SBCI    R17, 255
   \   000014BA   ....               RCALL   ?Subroutine19
   1001          		} else if (digits_k3[i] > 0) {
   \                     ??CrossCallReturnLabel_39:
   \   000014BC   C01A               RJMP    ??CrossCallReturnLabel_43
   \                     ??ecc_mul_double_74:
   \   000014BE   3061               CPI     R22, 1
   \   000014C0   0575               CPC     R23, R5
   \   000014C2   F0BC               BRLT    ??CrossCallReturnLabel_43
   1002          			position = (digits_k3[i])/2;
   1003          			eccmadd2(((point_precomp_t*)&DOUBLE_SCALAR_TABLE)[2*NPOINTS_DOUBLEMUL_WP+position], T);
   \   000014C4   019E               MOVW    R19:R18, R29:R28
   \   000014C6   5D27               SUBI    R18, 215
   \   000014C8   4F3E               SBCI    R19, 254
   \   000014CA   ....               LDI     R20, LOW(DOUBLE_SCALAR_TABLE)
   \   000014CC   ....               LDI     R21, (DOUBLE_SCALAR_TABLE) >> 8
   \   000014CE   FB77               BST     R23, 7
   \   000014D0   2422               CLR     R2
   \   000014D2   2433               CLR     R3
   \   000014D4   F820               BLD     R2, 0
   \   000014D6   0E26               ADD     R2, R22
   \   000014D8   1E37               ADC     R3, R23
   \   000014DA   9435               ASR     R3
   \   000014DC   9427               ROR     R2
   \   000014DE   E600               LDI     R16, 96
   \   000014E0   9E30               MUL     R3, R16
   \   000014E2   2C30               MOV     R3, R0
   \   000014E4   9E20               MUL     R2, R16
   \   000014E6   0C31               ADD     R3, R1
   \   000014E8   0D40               ADD     R20, R0
   \   000014EA   1D53               ADC     R21, R3
   \   000014EC   5F54               SUBI    R21, 244
   \   000014EE   018A               MOVW    R17:R16, R21:R20
   \   000014F0   ....               RCALL   ?Subroutine20
   1004          		}
   1005          		if (digits_k4[i] < 0) {
   \                     ??CrossCallReturnLabel_43:
   \   000014F2   81E9               LDD     R30, Y+1
   \   000014F4   81FA               LDD     R31, Y+2
   \   000014F6   8160               LD      R22, Z
   \   000014F8   8171               LDD     R23, Z+1
   \   000014FA   2377               TST     R23
   \   000014FC   F00A               BRMI    $+2+2
   \   000014FE   C055               RJMP    ??ecc_mul_double_75
   1006          			position = (-digits_k4[i])/2;
   1007          			eccneg_precomp(((point_precomp_t*)&DOUBLE_SCALAR_TABLE)[3*NPOINTS_DOUBLEMUL_WP+position], V);
   \   00001500   ....               LDI     R24, LOW(DOUBLE_SCALAR_TABLE)
   \   00001502   ....               LDI     R25, (DOUBLE_SCALAR_TABLE) >> 8
   \   00001504   FB77               BST     R23, 7
   \   00001506   E020               LDI     R18, 0
   \   00001508   E030               LDI     R19, 0
   \   0000150A   F920               BLD     R18, 0
   \   0000150C   0F26               ADD     R18, R22
   \   0000150E   1F37               ADC     R19, R23
   \   00001510   9535               ASR     R19
   \   00001512   9527               ROR     R18
   \   00001514   EA00               LDI     R16, 160
   \   00001516   EF1F               LDI     R17, 255
   \   00001518   9F30               MUL     R19, R16
   \   0000151A   2D30               MOV     R19, R0
   \   0000151C   9F21               MUL     R18, R17
   \   0000151E   0D30               ADD     R19, R0
   \   00001520   9F20               MUL     R18, R16
   \   00001522   0D31               ADD     R19, R1
   \   00001524   0D80               ADD     R24, R0
   \   00001526   1F93               ADC     R25, R19
   \   00001528   5E9E               SUBI    R25, 238
   \   0000152A   01DC               MOVW    R27:R26, R25:R24
   \   0000152C   5CA0               SUBI    R26, 192
   \   0000152E   4FBF               SBCI    R27, 255
   \   00001530   019E               MOVW    R19:R18, R29:R28
   \   00001532   5B27               SUBI    R18, 183
   \   00001534   4F3F               SBCI    R19, 255
   \   00001536   018D               MOVW    R17:R16, R27:R26
   \   00001538   ........           CALL    fpcopy1271_flash
   \   0000153C   019E               MOVW    R19:R18, R29:R28
   \   0000153E   5A27               SUBI    R18, 167
   \   00001540   4F3F               SBCI    R19, 255
   \   00001542   018D               MOVW    R17:R16, R27:R26
   \   00001544   5F00               SUBI    R16, 240
   \   00001546   4F1F               SBCI    R17, 255
   \   00001548   ........           CALL    fpcopy1271_flash
   \   0000154C   019E               MOVW    R19:R18, R29:R28
   \   0000154E   5D27               SUBI    R18, 215
   \   00001550   4F3F               SBCI    R19, 255
   \   00001552   018C               MOVW    R17:R16, R25:R24
   \   00001554   ........           CALL    fpcopy1271_flash
   \   00001558   019E               MOVW    R19:R18, R29:R28
   \   0000155A   5C27               SUBI    R18, 199
   \   0000155C   4F3F               SBCI    R19, 255
   \   0000155E   018C               MOVW    R17:R16, R25:R24
   \   00001560   5F00               SUBI    R16, 240
   \   00001562   4F1F               SBCI    R17, 255
   \   00001564   ........           CALL    fpcopy1271_flash
   \   00001568   9680               ADIW    R25:R24, 32
   \   0000156A   019E               MOVW    R19:R18, R29:R28
   \   0000156C   5F27               SUBI    R18, 247
   \   0000156E   4F3F               SBCI    R19, 255
   \   00001570   018C               MOVW    R17:R16, R25:R24
   \   00001572   ........           CALL    fpcopy1271_flash
   \   00001576   019E               MOVW    R19:R18, R29:R28
   \   00001578   5E27               SUBI    R18, 231
   \   0000157A   4F3F               SBCI    R19, 255
   \   0000157C   018C               MOVW    R17:R16, R25:R24
   \   0000157E   5F00               SUBI    R16, 240
   \   00001580   4F1F               SBCI    R17, 255
   \   00001582   ........           CALL    fpcopy1271_flash
   \   00001586   018E               MOVW    R17:R16, R29:R28
   \   00001588   5B07               SUBI    R16, 183
   \   0000158A   4F1F               SBCI    R17, 255
   \   0000158C   ........           CALL    fpneg1271
   \   00001590   018E               MOVW    R17:R16, R29:R28
   \   00001592   5A07               SUBI    R16, 167
   \   00001594   4F1F               SBCI    R17, 255
   \   00001596   ........           CALL    fpneg1271
   1008          			eccmadd(V, T);
   \   0000159A   019E               MOVW    R19:R18, R29:R28
   \   0000159C   5D27               SUBI    R18, 215
   \   0000159E   4F3E               SBCI    R19, 254
   \   000015A0   018E               MOVW    R17:R16, R29:R28
   \   000015A2   5F07               SUBI    R16, 247
   \   000015A4   4F1F               SBCI    R17, 255
   \   000015A6   ....               RCALL   ?Subroutine19
   1009          		} else if (digits_k4[i] > 0) {
   \                     ??CrossCallReturnLabel_40:
   \   000015A8   C01A               RJMP    ??CrossCallReturnLabel_44
   \                     ??ecc_mul_double_75:
   \   000015AA   3061               CPI     R22, 1
   \   000015AC   0575               CPC     R23, R5
   \   000015AE   F0BC               BRLT    ??CrossCallReturnLabel_44
   1010          			position = (digits_k4[i])/2;
   1011          			eccmadd2(((point_precomp_t*)&DOUBLE_SCALAR_TABLE)[3*NPOINTS_DOUBLEMUL_WP+position], T);
   \   000015B0   019E               MOVW    R19:R18, R29:R28
   \   000015B2   5D27               SUBI    R18, 215
   \   000015B4   4F3E               SBCI    R19, 254
   \   000015B6   ....               LDI     R20, LOW(DOUBLE_SCALAR_TABLE)
   \   000015B8   ....               LDI     R21, (DOUBLE_SCALAR_TABLE) >> 8
   \   000015BA   FB77               BST     R23, 7
   \   000015BC   2422               CLR     R2
   \   000015BE   2433               CLR     R3
   \   000015C0   F820               BLD     R2, 0
   \   000015C2   0E26               ADD     R2, R22
   \   000015C4   1E37               ADC     R3, R23
   \   000015C6   9435               ASR     R3
   \   000015C8   9427               ROR     R2
   \   000015CA   E600               LDI     R16, 96
   \   000015CC   9E30               MUL     R3, R16
   \   000015CE   2C30               MOV     R3, R0
   \   000015D0   9E20               MUL     R2, R16
   \   000015D2   0C31               ADD     R3, R1
   \   000015D4   0D40               ADD     R20, R0
   \   000015D6   1D53               ADC     R21, R3
   \   000015D8   5E5E               SUBI    R21, 238
   \   000015DA   018A               MOVW    R17:R16, R21:R20
   \   000015DC   ....               RCALL   ?Subroutine20
   1012          		}
   1013          	}
   \                     ??CrossCallReturnLabel_44:
   \   000015DE   8109               LDD     R16, Y+1
   \   000015E0   811A               LDD     R17, Y+2
   \   000015E2   5002               SUBI    R16, 2
   \   000015E4   4010               SBCI    R17, 0
   \   000015E6   8309               STD     Y+1, R16
   \   000015E8   831A               STD     Y+2, R17
   \   000015EA   810B               LDD     R16, Y+3
   \   000015EC   811C               LDD     R17, Y+4
   \   000015EE   5002               SUBI    R16, 2
   \   000015F0   4010               SBCI    R17, 0
   \   000015F2   830B               STD     Y+3, R16
   \   000015F4   831C               STD     Y+4, R17
   \   000015F6   810D               LDD     R16, Y+5
   \   000015F8   811E               LDD     R17, Y+6
   \   000015FA   5002               SUBI    R16, 2
   \   000015FC   4010               SBCI    R17, 0
   \   000015FE   830D               STD     Y+5, R16
   \   00001600   831E               STD     Y+6, R17
   \   00001602   EF0E               LDI     R16, 254
   \   00001604   0E60               ADD     R6, R16
   \   00001606   EF0F               LDI     R16, 255
   \   00001608   1E70               ADC     R7, R16
   \   0000160A   EF0E               LDI     R16, 254
   \   0000160C   0E80               ADD     R8, R16
   \   0000160E   EF0F               LDI     R16, 255
   \   00001610   1E90               ADC     R9, R16
   \   00001612   EF0E               LDI     R16, 254
   \   00001614   0EA0               ADD     R10, R16
   \   00001616   EF0F               LDI     R16, 255
   \   00001618   1EB0               ADC     R11, R16
   \   0000161A   EF0E               LDI     R16, 254
   \   0000161C   0EC0               ADD     R12, R16
   \   0000161E   EF0F               LDI     R16, 255
   \   00001620   1ED0               ADC     R13, R16
   \   00001622   EF0E               LDI     R16, 254
   \   00001624   0EE0               ADD     R14, R16
   \   00001626   EF0F               LDI     R16, 255
   \   00001628   1EF0               ADC     R15, R16
   \   0000162A   8108               LD      R16, Y
   \   0000162C   950A               DEC     R16
   \   0000162E   8308               ST      Y, R16
   \   00001630   F009               BREQ    $+2+2
   \   00001632   CB98               RJMP    ??ecc_mul_double_63
   1014          
   1015          #else
   1016          	point_t A;
   1017          	point_extproj_t T;
   1018          	point_extproj_precomp_t S;
   1019          
   1020          	if (ecc_mul(Q, l, A, false) == false) {
   1021          		return false;
   1022          	}
   1023          	point_setup(A, T);
   1024          	R1_to_R2(T, S);
   1025          
   1026          	ecc_mul_fixed(k, A);
   1027          	point_setup(A, T);
   1028          	eccadd(S, T);
   1029          #endif
   1030          	eccnorm(T, R);                                             // Output R = (x,y)
   \   00001634   812F               LDD     R18, Y+7
   \   00001636   8538               LDD     R19, Y+8
   \   00001638   018E               MOVW    R17:R16, R29:R28
   \   0000163A   5D07               SUBI    R16, 215
   \   0000163C   4F1E               SBCI    R17, 254
   \   0000163E   ........           CALL    eccnorm
   1031          
   1032          	return true;
   \   00001642   E001               LDI     R16, 1
   \                     ??ecc_mul_double_2:
   \   00001644   E010               LDI     R17, 0
   \   00001646   96EF               ADIW    R29:R28, 63
   \   00001648   96EA               ADIW    R29:R28, 58
   \   0000164A   5EDF               SUBI    R29, 239
   \   0000164C   ........           JMP     ?Subroutine1
   1033          }

   \                                 In  segment FARCODE, align 2, keep-with-next
   \                     ?Subroutine20:
   \   00000000   ........           JMP     eccmadd2

   \                                 In  segment FARCODE, align 2, keep-with-next
   \                     ?Subroutine19:
   \   00000000   ........           JMP     eccmadd

   \                                 In  segment FARCODE, align 2, keep-with-next
   \                     ?Subroutine18:
   \   00000000   ........           JMP     eccdouble
   1034          
   1035          

   \                                 In  segment FARCODE, align 2, keep-with-next
   1036          void ecc_precomp_double(point_extproj_t P, point_extproj_precomp_t* Table, unsigned int npoints)
   \                     ecc_precomp_double:
   1037          { // Generation of the precomputation table used internally by the double scalar multiplication function ecc_mul_double().  
   \   00000000   927A               ST      -Y, R7
   \   00000002   926A               ST      -Y, R6
   \   00000004   925A               ST      -Y, R5
   \   00000006   924A               ST      -Y, R4
   \   00000008   93BA               ST      -Y, R27
   \   0000000A   93AA               ST      -Y, R26
   \   0000000C   939A               ST      -Y, R25
   \   0000000E   938A               ST      -Y, R24
   \   00000010                      REQUIRE ?Register_R4_is_cg_reg
   \   00000010                      REQUIRE ?Register_R5_is_cg_reg
   \   00000010                      REQUIRE ?Register_R6_is_cg_reg
   \   00000010                      REQUIRE ?Register_R7_is_cg_reg
   \   00000010   97A0               SBIW    R29:R28, 32
   \   00000012   95DA               DEC     R29
   \   00000014   0128               MOVW    R5:R4, R17:R16
   \   00000016   01D9               MOVW    R27:R26, R19:R18
   \   00000018   01CA               MOVW    R25:R24, R21:R20
   1038            // Inputs: point P in representation (X,Y,Z,Ta,Tb),
   1039            //         Table with storage for npoints, 
   1040            //         number of points "npoints".
   1041            // Output: Table containing multiples of the base point P using representation (X+Y,Y-X,2Z,2dT).
   1042          	point_extproj_t Q;
   1043          	point_extproj_precomp_t PP;
   1044          	unsigned int i;
   1045          
   1046          	R1_to_R2(P, Table[0]);                     // Precomputed point Table[0] = P in coordinates (X+Y,Y-X,2Z,2dT)
   \   0000001A   ....               RCALL   ?Subroutine17
   1047          	eccdouble(P);                              // A = 2*P in (X,Y,Z,Ta,Tb)
   \                     ??CrossCallReturnLabel_30:
   \   0000001C   0182               MOVW    R17:R16, R5:R4
   \   0000001E   ....               RCALL   ?Subroutine18
   1048          	R1_to_R3(P, PP);                           // Converting from (X,Y,Z,Ta,Tb) to (X+Y,Y-X,Z,T) 
   \                     ??CrossCallReturnLabel_36:
   \   00000020   019E               MOVW    R19:R18, R29:R28
   \   00000022   0182               MOVW    R17:R16, R5:R4
   \   00000024   ....               RCALL   ?Subroutine15
   1049          
   1050          	for (i = 1; i < npoints; i++) {
   \                     ??CrossCallReturnLabel_12:
   \   00000026   3082               CPI     R24, 2
   \   00000028   E000               LDI     R16, 0
   \   0000002A   0790               CPC     R25, R16
   \   0000002C   F408               BRCC    $+2+2
   \   0000002E   C079               RJMP    ??ecc_precomp_double_0
   \   00000030   58A0               SUBI    R26, 128
   \   00000032   4FBF               SBCI    R27, 255
   \   00000034   012D               MOVW    R5:R4, R27:R26
   \   00000036   9701               SBIW    R25:R24, 1
   \   00000038   013C               MOVW    R7:R6, R25:R24
   1051          		eccadd_core(Table[i-1], PP, Q);        // Table[i] = Table[i-1]+2P using the representations (X,Y,Z,Ta,Tb) <- (X+Y,Y-X,2Z,2dT) + (X+Y,Y-X,Z,T)
   \                     ??ecc_precomp_double_1:
   \   0000003A   01AE               MOVW    R21:R20, R29:R28
   \   0000003C   5840               SUBI    R20, 128
   \   0000003E   4F5F               SBCI    R21, 255
   \   00000040   019E               MOVW    R19:R18, R29:R28
   \   00000042   0182               MOVW    R17:R16, R5:R4
   \   00000044   5800               SUBI    R16, 128
   \   00000046   4010               SBCI    R17, 0
   \   00000048   ....               RCALL   ?Subroutine16
   1052          		R1_to_R2(Q, Table[i]);                 // Converting from (X,Y,Z,Ta,Tb) to (X+Y,Y-X,2Z,2dT)
   \                     ??CrossCallReturnLabel_21:
   \   0000004A   01C2               MOVW    R25:R24, R5:R4
   \   0000004C   5A80               SUBI    R24, 160
   \   0000004E   4F9F               SBCI    R25, 255
   \   00000050   01AC               MOVW    R21:R20, R25:R24
   \   00000052   019E               MOVW    R19:R18, R29:R28
   \   00000054   5220               SUBI    R18, 32
   \   00000056   4F3F               SBCI    R19, 255
   \   00000058   018E               MOVW    R17:R16, R29:R28
   \   0000005A   5200               SUBI    R16, 32
   \   0000005C   4F1F               SBCI    R17, 255
   \   0000005E   ........           CALL    fpadd1271
   \   00000062   01AC               MOVW    R21:R20, R25:R24
   \   00000064   5F40               SUBI    R20, 240
   \   00000066   4F5F               SBCI    R21, 255
   \   00000068   019E               MOVW    R19:R18, R29:R28
   \   0000006A   5120               SUBI    R18, 16
   \   0000006C   4F3F               SBCI    R19, 255
   \   0000006E   018E               MOVW    R17:R16, R29:R28
   \   00000070   5100               SUBI    R16, 16
   \   00000072   4F1F               SBCI    R17, 255
   \   00000074   ........           CALL    fpadd1271
   \   00000078   01A2               MOVW    R21:R20, R5:R4
   \   0000007A   019E               MOVW    R19:R18, R29:R28
   \   0000007C   5620               SUBI    R18, 96
   \   0000007E   4F3F               SBCI    R19, 255
   \   00000080   018E               MOVW    R17:R16, R29:R28
   \   00000082   5800               SUBI    R16, 128
   \   00000084   4F1F               SBCI    R17, 255
   \   00000086   ........           CALL    fpadd1271
   \   0000008A   01A2               MOVW    R21:R20, R5:R4
   \   0000008C   5F40               SUBI    R20, 240
   \   0000008E   4F5F               SBCI    R21, 255
   \   00000090   019E               MOVW    R19:R18, R29:R28
   \   00000092   5520               SUBI    R18, 80
   \   00000094   4F3F               SBCI    R19, 255
   \   00000096   018E               MOVW    R17:R16, R29:R28
   \   00000098   5700               SUBI    R16, 112
   \   0000009A   4F1F               SBCI    R17, 255
   \   0000009C   ........           CALL    fpadd1271
   \   000000A0   01D2               MOVW    R27:R26, R5:R4
   \   000000A2   9690               ADIW    R27:R26, 32
   \   000000A4   01AD               MOVW    R21:R20, R27:R26
   \   000000A6   019E               MOVW    R19:R18, R29:R28
   \   000000A8   5820               SUBI    R18, 128
   \   000000AA   4F3F               SBCI    R19, 255
   \   000000AC   018E               MOVW    R17:R16, R29:R28
   \   000000AE   5600               SUBI    R16, 96
   \   000000B0   4F1F               SBCI    R17, 255
   \   000000B2   ........           CALL    fpsub1271
   \   000000B6   9650               ADIW    R27:R26, 16
   \   000000B8   01AD               MOVW    R21:R20, R27:R26
   \   000000BA   019E               MOVW    R19:R18, R29:R28
   \   000000BC   5720               SUBI    R18, 112
   \   000000BE   4F3F               SBCI    R19, 255
   \   000000C0   018E               MOVW    R17:R16, R29:R28
   \   000000C2   5500               SUBI    R16, 80
   \   000000C4   4F1F               SBCI    R17, 255
   \   000000C6   ........           CALL    fpsub1271
   \   000000CA   01AC               MOVW    R21:R20, R25:R24
   \   000000CC   019E               MOVW    R19:R18, R29:R28
   \   000000CE   9533               INC     R19
   \   000000D0   018C               MOVW    R17:R16, R25:R24
   \   000000D2   ........           CALL    fp2mul1271
   \   000000D6   01D2               MOVW    R27:R26, R5:R4
   \   000000D8   5CA0               SUBI    R26, 192
   \   000000DA   4FBF               SBCI    R27, 255
   \   000000DC   01AD               MOVW    R21:R20, R27:R26
   \   000000DE   019E               MOVW    R19:R18, R29:R28
   \   000000E0   5420               SUBI    R18, 64
   \   000000E2   4F3F               SBCI    R19, 255
   \   000000E4   018E               MOVW    R17:R16, R29:R28
   \   000000E6   5400               SUBI    R16, 64
   \   000000E8   4F1F               SBCI    R17, 255
   \   000000EA   ........           CALL    fpadd1271
   \   000000EE   9650               ADIW    R27:R26, 16
   \   000000F0   01AD               MOVW    R21:R20, R27:R26
   \   000000F2   019E               MOVW    R19:R18, R29:R28
   \   000000F4   5320               SUBI    R18, 48
   \   000000F6   4F3F               SBCI    R19, 255
   \   000000F8   018E               MOVW    R17:R16, R29:R28
   \   000000FA   5300               SUBI    R16, 48
   \   000000FC   4F1F               SBCI    R17, 255
   \   000000FE   ........           CALL    fpadd1271
   \   00000102   01AC               MOVW    R21:R20, R25:R24
   \   00000104   ....               LDI     R18, LOW(PARAMETER_d)
   \   00000106   ....               LDI     R19, (PARAMETER_d) >> 8
   \   00000108   018C               MOVW    R17:R16, R25:R24
   \   0000010A   ........           CALL    fp2mul1271
   1053          	}
   \   0000010E   E800               LDI     R16, 128
   \   00000110   0E40               ADD     R4, R16
   \   00000112   E000               LDI     R16, 0
   \   00000114   1E50               ADC     R5, R16
   \   00000116   E001               LDI     R16, 1
   \   00000118   1A60               SUB     R6, R16
   \   0000011A   E000               LDI     R16, 0
   \   0000011C   0A70               SBC     R7, R16
   \   0000011E   F009               BREQ    $+2+2
   \   00000120   CF8C               RJMP    ??ecc_precomp_double_1
   1054          
   1055          	return;
   \                     ??ecc_precomp_double_0:
   \   00000122   96A0               ADIW    R29:R28, 32
   \   00000124   95D3               INC     R29
   \   00000126   ........           JMP     ??Subroutine12_0
   1056          }

   \                                 In  segment FARCODE, align 2, keep-with-next
   \                     ?Subroutine17:
   \   00000000   ........           JMP     R1_to_R2

   \                                 In  segment FARCODE, align 2, keep-with-next
   \                     ?Subroutine16:
   \   00000000   ........           JMP     eccadd_core

   \                                 In  segment FARCODE, align 2, keep-with-next
   \                     ?Subroutine15:
   \   00000000   ........           JMP     R1_to_R3
   1057          
   1058          

   \                                 In  segment FARCODE, align 2, keep-with-next
   1059          void wNAF_recode(uint64_t scalar, unsigned int w, int* digits)
   \                     wNAF_recode:
   1060          { // Computes wNAF recoding of a scalar, where digits are in set {0,+-1,+-3,...,+-(2^(w-1)-1)}
   \   00000000   92FA               ST      -Y, R15
   \   00000002   92EA               ST      -Y, R14
   \   00000004   92DA               ST      -Y, R13
   \   00000006   92CA               ST      -Y, R12
   \   00000008   92BA               ST      -Y, R11
   \   0000000A   92AA               ST      -Y, R10
   \   0000000C   929A               ST      -Y, R9
   \   0000000E   928A               ST      -Y, R8
   \   00000010   927A               ST      -Y, R7
   \   00000012   926A               ST      -Y, R6
   \   00000014   925A               ST      -Y, R5
   \   00000016   924A               ST      -Y, R4
   \   00000018   93BA               ST      -Y, R27
   \   0000001A   93AA               ST      -Y, R26
   \   0000001C   939A               ST      -Y, R25
   \   0000001E   938A               ST      -Y, R24
   \   00000020                      REQUIRE ?Register_R4_is_cg_reg
   \   00000020                      REQUIRE ?Register_R5_is_cg_reg
   \   00000020                      REQUIRE ?Register_R6_is_cg_reg
   \   00000020                      REQUIRE ?Register_R7_is_cg_reg
   \   00000020                      REQUIRE ?Register_R8_is_cg_reg
   \   00000020                      REQUIRE ?Register_R9_is_cg_reg
   \   00000020                      REQUIRE ?Register_R10_is_cg_reg
   \   00000020                      REQUIRE ?Register_R11_is_cg_reg
   \   00000020                      REQUIRE ?Register_R12_is_cg_reg
   \   00000020                      REQUIRE ?Register_R13_is_cg_reg
   \   00000020                      REQUIRE ?Register_R14_is_cg_reg
   \   00000020                      REQUIRE ?Register_R15_is_cg_reg
   \   00000020   972E               SBIW    R29:R28, 14
   \   00000022   0108               MOVW    R1:R0, R17:R16
   \   00000024   0119               MOVW    R3:R2, R19:R18
   \   00000026   012A               MOVW    R5:R4, R21:R20
   \   00000028   013B               MOVW    R7:R6, R23:R22
   1061              unsigned int i;
   1062              int digit, index = 0; 
   \   0000002A   E0A0               LDI     R26, 0
   \   0000002C   E0B0               LDI     R27, 0
   1063              int val1 = (int)(1 << (w-1)) - 1;                  // 2^(w-1) - 1
   \   0000002E   8D4E               LDD     R20, Y+30
   \   00000030   954A               DEC     R20
   \   00000032   E001               LDI     R16, 1
   \   00000034   E010               LDI     R17, 0
   \   00000036   ........           CALL    ?S_SHL_L02
   \   0000003A   5001               SUBI    R16, 1
   \   0000003C   4010               SBCI    R17, 0
   \   0000003E   830C               STD     Y+4, R16
   \   00000040   831D               STD     Y+5, R17
   1064              int val2 = (int)(1 << w);                          // 2^w;
   \   00000042   8D4E               LDD     R20, Y+30
   \   00000044   E001               LDI     R16, 1
   \   00000046   E010               LDI     R17, 0
   \   00000048   ........           CALL    ?S_SHL_L02
   \   0000004C   830A               STD     Y+2, R16
   \   0000004E   831B               STD     Y+3, R17
   1065              uint64_t k = scalar, mask = (uint64_t)val2 - 1;    // 2^w - 1 
   \   00000050   2F21               MOV     R18, R17
   \   00000052   0F22               LSL     R18
   \   00000054   0B22               SBC     R18, R18
   \   00000056   2F32               MOV     R19, R18
   \   00000058   2F42               MOV     R20, R18
   \   0000005A   2F52               MOV     R21, R18
   \   0000005C   2F62               MOV     R22, R18
   \   0000005E   2F72               MOV     R23, R18
   \   00000060   5001               SUBI    R16, 1
   \   00000062   4010               SBCI    R17, 0
   \   00000064   4020               SBCI    R18, 0
   \   00000066   4030               SBCI    R19, 0
   \   00000068   4040               SBCI    R20, 0
   \   0000006A   4050               SBCI    R21, 0
   \   0000006C   4060               SBCI    R22, 0
   \   0000006E   4070               SBCI    R23, 0
   \   00000070   830E               STD     Y+6, R16
   \   00000072   831F               STD     Y+7, R17
   \   00000074   8728               STD     Y+8, R18
   \   00000076   8739               STD     Y+9, R19
   \   00000078   874A               STD     Y+10, R20
   \   0000007A   875B               STD     Y+11, R21
   \   0000007C   876C               STD     Y+12, R22
   \   0000007E   877D               STD     Y+13, R23
   \   00000080   8D8E               LDD     R24, Y+30
   \   00000082   8D9F               LDD     R25, Y+31
   \   00000084   9701               SBIW    R25:R24, 1
   \   00000086   8388               ST      Y, R24
   \   00000088   8399               STD     Y+1, R25
   1066          
   1067              while (k != 0)
   \   0000008A   ....               LDI     R30, LOW(__Constant_0_0)
   \   0000008C   ....               LDI     R31, (__Constant_0_0) >> 8
   \   0000008E   ........           CALL    ?LL_CMP_R0_L12
   \   00000092   F409               BRNE    $+2+2
   \   00000094   C06D               RJMP    ??wNAF_recode_0
   1068              {
   1069                  digit = (int)(k & 1); 
   1070          
   1071                  if (digit == 0) {                         
   \                     ??wNAF_recode_1:
   \   00000096   FA00               BST     R0, 0
   \   00000098   2488               CLR     R8
   \   0000009A   2711               CLR     R17
   \   0000009C   2722               CLR     R18
   \   0000009E   2733               CLR     R19
   \   000000A0   2744               CLR     R20
   \   000000A2   2755               CLR     R21
   \   000000A4   2766               CLR     R22
   \   000000A6   2777               CLR     R23
   \   000000A8   F880               BLD     R8, 0
   \   000000AA   ....               LDI     R30, LOW(__Constant_0_0)
   \   000000AC   ....               LDI     R31, (__Constant_0_0) >> 8
   \   000000AE   2D08               MOV     R16, R8
   \   000000B0   ........           CALL    ?LL_CMP_L12
   \   000000B4   F491               BRNE    ??wNAF_recode_2
   1072                      k >>= 1;                 // Shift scalar to the right by 1
   \   000000B6   9476               LSR     R7
   \   000000B8   9467               ROR     R6
   \   000000BA   9457               ROR     R5
   \   000000BC   9447               ROR     R4
   \   000000BE   9437               ROR     R3
   \   000000C0   9427               ROR     R2
   \   000000C2   9417               ROR     R1
   \   000000C4   9407               ROR     R0
   1073                      digits[index] = 0;
   \   000000C6   019D               MOVW    R19:R18, R27:R26
   \   000000C8   0F22               LSL     R18
   \   000000CA   1F33               ROL     R19
   \   000000CC   A1E8               LDD     R30, Y+32
   \   000000CE   A1F9               LDD     R31, Y+33
   \   000000D0   0FE2               ADD     R30, R18
   \   000000D2   1FF3               ADC     R31, R19
   \   000000D4   8310               ST      Z, R17
   \   000000D6   8311               STD     Z+1, R17
   \   000000D8   C044               RJMP    ??wNAF_recode_3
   1074                  } else {
   1075                      digit = (int)(k & mask); 
   \                     ??wNAF_recode_2:
   \   000000DA   0140               MOVW    R9:R8, R1:R0
   \   000000DC   810E               LDD     R16, Y+6
   \   000000DE   811F               LDD     R17, Y+7
   \   000000E0   2280               AND     R8, R16
   \   000000E2   2291               AND     R9, R17
   1076                      k >>= w;                 // Shift scalar to the right by w            
   \   000000E4   8D8E               LDD     R24, Y+30
   \   000000E6   0180               MOVW    R17:R16, R1:R0
   \   000000E8   0191               MOVW    R19:R18, R3:R2
   \   000000EA   01A2               MOVW    R21:R20, R5:R4
   \   000000EC   01B3               MOVW    R23:R22, R7:R6
   \   000000EE   ........           CALL    ?ULL_SHR_L12
   \   000000F2   0108               MOVW    R1:R0, R17:R16
   \   000000F4   0119               MOVW    R3:R2, R19:R18
   \   000000F6   012A               MOVW    R5:R4, R21:R20
   \   000000F8   013B               MOVW    R7:R6, R23:R22
   1077          
   1078                      if (digit > val1) {
   \   000000FA   810C               LDD     R16, Y+4
   \   000000FC   811D               LDD     R17, Y+5
   \   000000FE   1508               CP      R16, R8
   \   00000100   0519               CPC     R17, R9
   \   00000102   F424               BRGE    ??wNAF_recode_4
   1079                          digit -= val2; 
   \   00000104   810A               LDD     R16, Y+2
   \   00000106   811B               LDD     R17, Y+3
   \   00000108   1A80               SUB     R8, R16
   \   0000010A   0A91               SBC     R9, R17
   1080                      }
   1081                      if (digit < 0) {         // scalar + 1
   \                     ??wNAF_recode_4:
   \   0000010C   2099               TST     R9
   \   0000010E   F452               BRPL    ??wNAF_recode_5
   1082                          k += 1;
   \   00000110   E001               LDI     R16, 1
   \   00000112   0E00               ADD     R0, R16
   \   00000114   E000               LDI     R16, 0
   \   00000116   1E10               ADC     R1, R16
   \   00000118   1E20               ADC     R2, R16
   \   0000011A   1E30               ADC     R3, R16
   \   0000011C   1E40               ADC     R4, R16
   \   0000011E   1E50               ADC     R5, R16
   \   00000120   1E60               ADC     R6, R16
   \   00000122   1E70               ADC     R7, R16
   1083                      }
   1084                      digits[index] = digit; 
   \                     ??wNAF_recode_5:
   \   00000124   018D               MOVW    R17:R16, R27:R26
   \   00000126   0F00               LSL     R16
   \   00000128   1F11               ROL     R17
   \   0000012A   A128               LDD     R18, Y+32
   \   0000012C   A139               LDD     R19, Y+33
   \   0000012E   0F20               ADD     R18, R16
   \   00000130   1F31               ADC     R19, R17
   \   00000132   01F9               MOVW    R31:R30, R19:R18
   \   00000134   8280               ST      Z, R8
   \   00000136   8291               STD     Z+1, R9
   1085                                 
   1086                      if (k != 0) {            // Check if scalar != 0
   \   00000138   ....               LDI     R30, LOW(__Constant_0_0)
   \   0000013A   ....               LDI     R31, (__Constant_0_0) >> 8
   \   0000013C   ........           CALL    ?LL_CMP_R0_L12
   \   00000140   F081               BREQ    ??wNAF_recode_3
   1087                          for (i = 0; i < (w-1); i++) 
   \   00000142   8108               LD      R16, Y
   \   00000144   8119               LDD     R17, Y+1
   \   00000146   2B01               OR      R16, R17
   \   00000148   F061               BREQ    ??wNAF_recode_3
   \   0000014A   5F2E               SUBI    R18, 254
   \   0000014C   4F3F               SBCI    R19, 255
   \   0000014E   8188               LD      R24, Y
   \   00000150   2F91               MOV     R25, R17
   \   00000152   E000               LDI     R16, 0
   1088                          {     
   1089                              index++; 
   \                     ??wNAF_recode_6:
   \   00000154   9611               ADIW    R27:R26, 1
   1090                              digits[index] = 0;
   \   00000156   01F9               MOVW    R31:R30, R19:R18
   \   00000158   9301               ST      Z+, R16
   \   0000015A   9301               ST      Z+, R16
   \   0000015C   019F               MOVW    R19:R18, R31:R30
   1091                          }
   \   0000015E   9701               SBIW    R25:R24, 1
   \   00000160   F7C9               BRNE    ??wNAF_recode_6
   1092                      }
   1093                  }
   1094                  index++;
   \                     ??wNAF_recode_3:
   \   00000162   9611               ADIW    R27:R26, 1
   \   00000164   ....               LDI     R30, LOW(__Constant_0_0)
   \   00000166   ....               LDI     R31, (__Constant_0_0) >> 8
   \   00000168   ........           CALL    ?LL_CMP_R0_L12
   \   0000016C   F009               BREQ    $+2+2
   \   0000016E   CF93               RJMP    ??wNAF_recode_1
   1095              } 
   1096              return;
   \                     ??wNAF_recode_0:
   \   00000170   962E               ADIW    R29:R28, 14
   \   00000172   9189               LD      R24, Y+
   \   00000174   9199               LD      R25, Y+
   \   00000176   91A9               LD      R26, Y+
   \   00000178   91B9               LD      R27, Y+
   \   0000017A   9049               LD      R4, Y+
   \   0000017C   9059               LD      R5, Y+
   \   0000017E   9069               LD      R6, Y+
   \   00000180   9079               LD      R7, Y+
   \   00000182   9089               LD      R8, Y+
   \   00000184   9099               LD      R9, Y+
   \   00000186   90A9               LD      R10, Y+
   \   00000188   90B9               LD      R11, Y+
   \   0000018A   90C9               LD      R12, Y+
   \   0000018C   90D9               LD      R13, Y+
   \   0000018E   90E9               LD      R14, Y+
   \   00000190   90F9               LD      R15, Y+
   \   00000192   9624               ADIW    R29:R28, 4
   \   00000194   9508               RET
   1097          }

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     __Constant_0_0:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for 64 Bit Constant>_0`

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for PARAMETER_d>`:
   \   00000000   014200000000       DD 322, 0, 228, 0, 4059827341, 3011646600, 1717035260, 1581723524
   \              000000E40000
   \              000000000C8D
   \              F1FC1488B382
   \              E0FC66572F84
   \              5E47        

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for GENERATOR_x>`:
   \   00000000   33AA7B3892AD       DD 2067280810, 677745325, 2083500805, 439644707, 1621915638, 2525405107
   \              2865B3057C2F
   \              72231A3477F6
   \              60AC9FB39686
   \   00000018   AA9C2878553F       DD 678996636, 505369919
   \              1E1F        
   \                     `?<Initializer for GENERATOR_y>`:
   \   00000020   B2872BCBA246       DD 734769799, 3106185798, 2703259738, 239070875, 2219608924, 1235731268
   \              B924785AA120
   \              EE9B0E3F8B5C
   \              844CC34449A7
   \   00000038   0242630E4AF8       DD 1661862466, 1847347960
   \              6E1C        

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for curve_order>`:
   \   00000000   8CE7C776540E       DD 3346435303, 800216078, 4262427033, 3753705549, 2629571813
   \              2FB27999FE0F
   \              004DDFBD14E5
   \              9CBC        
   \   00000014   9782F0530A72       DD 4032010114, 1314785906, 2739137
   \              4E5ECBC10029
   \                     `?<Initializer for Montgomery_rprime>`:
   \   00000020   392979BCE5F0       DD 2042378537, 3778012656, 3523009779, 3613292728, 1991629601
   \              E12FDCF3D1FC
   \              78B8D75EDB21
   \              76B5        
   \   00000034   09EDBCE4C074       DD 3169061357, 2948710516, 4079420157
   \              AFC102FDF327

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for Montgomery_Rprime>`:
   \   00000000   D6215FF3B879       DD 1609815585, 3357390969, 3932895357, 389981610, 557250076, 1023522759
   \              C81D387DEA6B
   \              A5AA173EF61C
   \              2136B7C73D01
   \   00000018   F9D36AC8A5F1       DD 1791556051, 435697
   \              0006        

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for mask_7fff>`:
   \   00000000   FFFF7FFF           DD 2147483647

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for prime1271_0>`:
   \   00000000   FFFFFFFF           DD 4294967295

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for ctau1>`:
   \   00000000   74C3EBCED57C       DD 3956176067, 1960629628, 989516300, 426040876, 18, 0, 12, 0
   \              74DCD20C3AFA
   \              DE2C19640012
   \              000000000000
   \              000C00000000
   \              0000        

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for ctaudual1>`:
   \   00000000   F034DECDA6D9       DD 3738038324, 2664081113, 587564626, 1252475115, 17, 0, 4294967284
   \              9ECA86522305
   \              40EB4AA70011
   \              000000000000
   \              FFF4FFFF    
   \   0000001C   FFFF7FFF           DD 2147483647

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for cphi0>`:
   \   00000000   FFF7FFFFFFFF       DD 4294967287, 4294967295, 5, 0, 4016502810, 1332040556, 2441265961
   \              FFFF00050000
   \              00000000F81A
   \              EF66536C4F65
   \              C3299182    
   \   0000001C   A0752553           DD 626237557
   \                     `?<Initializer for cphi1>`:
   \   00000020   000700000000       DD 7, 0, 5, 0, 3800209145, 860721385, 3305923279, 1657326240
   \              000000050000
   \              0000000096F9
   \              E28290E9334D
   \              62CFC50CCAA0
   \              62C8        
   \                     `?<Initializer for cphi2>`:
   \   00000040   001500000000       DD 21, 0, 15, 0, 1327362961, 741127957, 1822121112, 2027890219
   \              0000000F0000
   \              00000000F391
   \              4F1DB7152C2C
   \              5C986C9B262B
   \              78DF        
   \                     `?<Initializer for cphi3>`:
   \   00000060   000300000000       DD 3, 0, 2, 0, 2811637412, 2453931095, 494285866, 1350878793
   \              000000020000
   \              000000002EA4
   \              A79604579244
   \              342A1D76C649
   \              5084        
   \                     `?<Initializer for cphi4>`:
   \   00000080   000300000000       DD 3, 0, 3, 0, 988571733, 2701757586, 2811637412, 306447447
   \              000000030000
   \              000000006855
   \              3AEC8C92A109
   \              2EA4A7960457
   \              1244        
   \                     `?<Initializer for cphi5>`:
   \   000000A0   000F00000000       DD 15, 0, 10, 0, 3305450995, 1721442771, 2316879262, 1167168833
   \              0000000A0000
   \              000000002DF3
   \              C50521D3669B
   \              C59E8A189541
   \              4591        
   \                     `?<Initializer for cphi6>`:
   \   000000C0   001800000000       DD 24, 0, 18, 0, 2315934695, 3442885543, 338791228, 186854019
   \              000000120000
   \              000000005BE7
   \              8A0A43A7CD36
   \              8B3C14312A83
   \              0B23        
   \                     `?<Initializer for cphi7>`:
   \   000000E0   002300000000       DD 35, 0, 24, 0, 1598584858, 1723958019, 2581785114, 962837532
   \              000000180000
   \              00000000781A
   \              5F48830366C1
   \              EA1A99E2BC1C
   \              3963        
   \                     `?<Initializer for cphi8>`:
   \   00000100   00F000000000       DD 240, 0, 170, 0, 727518960, 1155682648, 51825637, 525508486
   \              000000AA0000
   \              000000000EF0
   \              2B5D515844E2
   \              CBE503169F86
   \              1F52        
   \                     `?<Initializer for cphi9>`:
   \   00000120   0BEF00000000       DD 3055, 0, 2160, 0, 2540578053, 21839432, 4261427035, 265629340
   \              000008700000
   \              000000002505
   \              976E3E48014D
   \              375BFE002E9C
   \              0FD5        

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for cpsi1>`:
   \   00000000   46EF67E37F47       DD 1742948079, 3991961415, 2211793410, 721002138, 314, 0, 222, 0
   \              EDF04A0283D5
   \              9E9A2AF9013A
   \              000000000000
   \              00DE00000000
   \              0000        
   \                     `?<Initializer for cpsi2>`:
   \   00000020   014300000000       DD 323, 0, 228, 0, 235139954, 1283320695, 2577932035, 565760123
   \              000000E40000
   \              00000000F372
   \              0E03EB774C7D
   \              1F0399A8D07B
   \              21B8        
   \                     `?<Initializer for cpsi3>`:
   \   00000040   000900000000       DD 9, 0, 6, 0, 1978088033, 980314814, 494758150, 1286762262
   \              000000060000
   \              000000003A61
   \              75E76ABE3A6E
   \              69061D7D6F16
   \              4CB2        
   \                     `?<Initializer for cpsi4>`:
   \   00000060   FFF6FFFFFFFF       DD 4294967286, 4294967295, 4294967289, 2147483647, 2316879262
   \              FFFFFFF9FFFF
   \              FFFF7FFFC59E
   \              8A18        
   \   00000074   9541C59196F9       DD 3314652481, 3800209145, 860721385
   \              E28290E9334D

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for b41>`:
   \   00000000   C83F9108340A       DD 2433271871, 325989386
   \              136E        
   \                     `?<Initializer for b42>`:
   \   00000008   FF32C3E0DF2D       DD 3286302514, 824368941
   \              3122        
   \                     `?<Initializer for b43>`:
   \   00000010   A9B52AA849F0       DD 715696565, 109726192
   \              068A        
   \                     `?<Initializer for b44>`:
   \   00000018   0AEA96DE0878       DD 2531134186, 416614520
   \              18D5        
   \                     `?<Initializer for c1>`:
   \   00000020   559C51A42C52       DD 1369724316, 1917332562
   \              7248        
   \                     `?<Initializer for c2>`:
   \   00000028   6F6CDD275B0A       DD 3710349164, 1509513994
   \              59F9        
   \                     `?<Initializer for c3>`:
   \   00000030   FA784625D17C       DD 1176894072, 2110968188
   \              7DD2        
   \                     `?<Initializer for c4>`:
   \   00000038   887756CE7DEF       DD 1456375927, 1808104943
   \              6BC5        
   \                     `?<Initializer for b11>`:
   \   00000040   A196E0A0FF27       DD 3768623510, 151453479
   \              0906        
   \                     `?<Initializer for b12>`:
   \   00000048   2DA0C22AE862       DD 3257544096, 325314658
   \              1363        
   \                     `?<Initializer for b13>`:
   \   00000050   030FECC86031       DD 3972530959, 121790513
   \              0742        
   \                     `?<Initializer for b14>`:
   \   00000058   E65186B97399       DD 2260330065, 139424665
   \              084F        
   \                     `?<Initializer for b21>`:
   \   00000060   C2D484FC5BEA       DD 2231157460, 491346922
   \              1D49        
   \                     `?<Initializer for b24>`:
   \   00000068   67D08DD1C5BC       DD 2379311056, 635159996
   \              25DB        
   \                     `?<Initializer for b31>`:
   \   00000070   0302231FAD1D       DD 589234946, 397126941
   \              17AB        
   \                     `?<Initializer for b32>`:
   \   00000078   DA51E388211A       DD 3817396817, 46407962
   \              02C4        
   \                     `?<Initializer for b33>`:
   \   00000080   C49F892721C9       DD 2301084831, 776806857
   \              2E4D        
   \                     `?<Initializer for b34>`:
   \   00000088   CD97C02E6F44       DD 3224292759, 178155332
   \              0A9E        
   \                     `?<Initializer for ell1>`:
   \   00000090   7D4F9D1A86E0       DD 2635758927, 630621920, 3869687142, 4149641900, 3928745439
   \              2596BD66E6A6
   \              82ACF756E5DF
   \              EA2B        
   \   000000A4   B5C5FC5B0007       DD 4233868741, 7, 0
   \              000000000000
   \                     `?<Initializer for ell2>`:
   \   000000B0   7AFBDD621D84       DD 3714218747, 3518635396, 256281997, 735196504, 2859208586, 2413080652
   \              D1BA8D8D0F46
   \              35582BD20F8A
   \              AA6CB04C8FD4
   \   000000C8   000300000000       DD 3, 0
   \              0000        
   \                     `?<Initializer for ell3>`:
   \   000000D0   203C678C1A33       DD 1737236540, 2603162163, 1708960002, 3291207369, 201308918
   \              9B29A90265DC
   \              D6C9C42BBAF6
   \              0BFF        
   \   000000E4   BF8DD0380000       DD 3493379981, 0, 0
   \              000000000000
   \                     `?<Initializer for ell4>`:
   \   000000F0   FDC077E7666B       DD 2011692480, 317023851, 345521538, 2177621047, 2720891920, 453458039
   \              12E53D821498
   \              DC3781CB8410
   \              A22D38771B07
   \   00000108   000300000000       DD 3, 0
   \              0000        

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for 64 Bit Constant>_0`:
   \   00000000   000000000000       DD 0, 0
   \              0000        

   \                                 In  segment FAR_F, align 1, keep-with-next
   \   00000000   000000000000       DD 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              0000        

   \                                 In  segment FAR_F, align 1, keep-with-next
   \   00000000   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              0000        
   \   0000002C   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              0000        
   \   00000058   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              0000        
   \   00000084   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              0000        
   \   000000B0   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              0000        
   \   000000DC   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              0000        
   \   00000108   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              0000        
   \   00000134   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              0000        
   \   00000160   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              0000        
   \   0000018C   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              0000        
   \   000001B8   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              0000        
   \   000001E4   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              0000        
   \   00000210   000000000000       DC16 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              0000        

   \                                 In  segment FAR_F, align 1, keep-with-next
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_1`:
   \   00000000   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              0000        
   \   0000002C   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              0000        
   \   00000058   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \   00000082   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              0000        
   \   000000AE   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              0000        
   \   000000DA   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \   00000104   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              0000        
   \   00000130   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              0000        
   \   0000015C   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \   00000186   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              0000        
   \   000001B2   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              0000        
   \   000001DE   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \   00000208   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              0000        
   \   00000234   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              0000        
   \   00000260   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \   0000028A   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              0000        
   \   000002B6   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              0000        
   \   000002E2   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \   0000030C   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              0000        
   \   00000338   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              0000        
   \   00000364   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \   0000038E   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              0000        
   \   000003BA   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              0000        
   \   000003E6   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
    200      3   Montgomery_multiply_mod_order
      200      3   -> mp_add
      200      3   -> mp_mul
      200      3   -> mp_sub
     10      3   R1_to_R2
       10      3   -> fp2mul1271
       10      3   -> fpadd1271
       10      3   -> fpsub1271
      8      3   R1_to_R3
        8      3   -> fp2mul1271
        8      3   -> fpadd1271
        8      3   -> fpcopy1271
        8      3   -> fpsub1271
      8      3   R2_to_R4
        8      3   -> fpadd1271
        8      3   -> fpcopy1271
        8      3   -> fpsub1271
      8      3   R5_to_R1
        8      3   -> fpadd1271
        8      3   -> fpcopy1271
        8      3   -> fpdiv1271
        8      3   -> fpsub1271
        8      3   -> fpzero1271
      2      3   add_mod_order
        2      3   -> mp_add
        2      3   -> subtract_mod_order
      0      3   clear_words
    258      3   cofactor_clearing
      258      3   -> R1_to_R2
      258      3   -> R1_to_R3
      258      3   -> eccadd_core
      258      3   -> eccdouble
     15      3   conversion_to_odd
    134      3   decompose
      134      3   -> mp_add
      134      3   -> mp_mul
      134      3   -> mp_sub
     10      3   digit_x_digit
       10      3   -> mul32
    262      3   ecc_delphidel
      262      3   -> fp2mul1271
      262      3   -> fpadd1271
      262      3   -> fpneg1271
      262      3   -> fpsub1271
      262      3   -> mod_mul128
      262      3   -> mod_mul_dbl128
    132      3   ecc_delpsidel
      132      3   -> fp2mul1271
      132      3   -> fpadd1271
      132      3   -> fpneg1271
      132      3   -> fpsub1271
      132      3   -> mod_mul128
      132      3   -> mod_mul_dbl128
   1739      3   ecc_mul
     1739      3   -> R1_to_R3
     1739      3   -> cofactor_clearing
     1739      3   -> decompose
     1739      3   -> ecc_point_validate
     1739      3   -> ecc_precomp
     1739      3   -> eccadd_core
     1739      3   -> eccdouble
     1739      3   -> eccnorm
     1739      3   -> fpadd1271
     1739      3   -> fpcopy1271
     1739      3   -> fpsub1271
     1739      3   -> point_setup
     1739      3   -> recode
     1739      3   -> table_lookup_1x8
   4489      3   ecc_mul_double
     4489      3   -> R1_to_R2
     4489      3   -> R1_to_R3
     4489      3   -> decompose
     4489      3   -> ecc_delphidel
     4489      3   -> ecc_delpsidel
     4489      3   -> ecc_point_validate
     4489      3   -> ecc_tau
     4489      3   -> ecc_tau_dual
     4489      3   -> eccadd_core
     4489      3   -> eccdouble
     4489      3   -> eccmadd
     4489      3   -> eccmadd2
     4489      3   -> eccnorm
     4489      3   -> fpcopy1271
     4489      3   -> fpcopy1271_flash
     4489      3   -> fpneg1271
     4489      3   -> fpzero1271
     4489      3   -> point_setup
     4489      3 ?LL_CMP_L12
     4489      3 ?LL_CMP_R0_L12
     4489      3 ?ML_FLASH_SRAM_24EC_16_L07
     4489      3 ?ULL_SHR_L12
   1042      3   ecc_mul_fixed
     1042      3   -> Montgomery_multiply_mod_order
     1042      3   -> R5_to_R1
     1042      3   -> conversion_to_odd
     1042      3   -> eccdouble
     1042      3   -> eccmadd
     1042      3   -> eccnorm
     1042      3   -> fpcopy1271
     1042      3   -> fpcopy1271_flash
     1042      3   -> fpneg1271
     1042      3   -> mLSB_set_recode
     1042      3   -> table_lookup_fixed_base
      2      3   ecc_phi
        2      3   -> ecc_delphidel
        2      3   -> ecc_tau
        2      3   -> ecc_tau_dual
    132      3   ecc_point_validate
      132      3   -> fp2mul1271
      132      3   -> fpadd1271
      132      3   -> fpsub1271
      132      3   -> fpzero1271
      132      3   -> mod_mul128
      132      3   -> mod_mul_dbl128
    552      3   ecc_precomp
      552      3   -> R1_to_R2
      552      3   -> R1_to_R3
      552      3   -> ecc_delphidel
      552      3   -> ecc_delpsidel
      552      3   -> ecc_tau
      552      3   -> ecc_tau_dual
      552      3   -> eccadd_core
      552      3   -> fpcopy1271
    296      3   ecc_precomp_double
      296      3   -> R1_to_R2
      296      3   -> R1_to_R3
      296      3   -> eccadd_core
      296      3   -> eccdouble
      296      3   -> fp2mul1271
      296      3   -> fpadd1271
      296      3   -> fpsub1271
      2      3   ecc_psi
        2      3   -> ecc_delpsidel
        2      3   -> ecc_tau
        2      3   -> ecc_tau_dual
    106      3   ecc_tau
      106      3   -> fp2mul1271
      106      3   -> fpadd1271
      106      3   -> fpsub1271
      106      3   -> mod_mul128
      106      3   -> mod_mul_dbl128
    104      3   ecc_tau_dual
      104      3   -> fp2mul1271
      104      3   -> fpadd1271
      104      3   -> fpsub1271
      104      3   -> mod_mul128
      104      3   -> mod_mul_dbl128
    132      3   eccadd
      132      3   -> R1_to_R3
      132      3   -> eccadd_core
     74      3   eccadd_core
       74      3   -> fp2mul1271
       74      3   -> fpadd1271
       74      3   -> fpsub1271
    104      3   eccdouble
      104      3   -> fp2mul1271
      104      3   -> fpadd1271
      104      3   -> fpsub1271
      104      3   -> mod_mul128
      104      3   -> mod_mul_dbl128
     76      3   eccmadd
       76      3   -> fp2mul1271
       76      3   -> fpadd1271
       76      3   -> fpsub1271
    108      3   eccmadd2
      108      3   -> fp2mul1271
      108      3   -> fpadd1271
      108      3   -> fpcopy1271_flash
      108      3   -> fpsub1271
      4      3   eccnorm
        4      3   -> fp2inv1271
        4      3   -> fp2mul1271
        4      3   -> mod1271
      2      3   eccset
        2      3   -> fpcopy1271
      6      3   fp2add1271
        6      3   -> fpadd1271
      6      3   fp2addsub1271
        6      3   -> fpadd1271
        6      3   -> fpsub1271
      4      3   fp2copy1271
        4      3   -> fpcopy1271
      4      3   fp2copy1271_flash
        4      3   -> fpcopy1271_flash
     50      3   fp2inv1271
       50      3   -> fpadd1271
       50      3   -> fpexp1251
       50      3   -> fpneg1271
       50      3   -> mod_mul128
       50      3   -> mod_sqr128
     70      3   fp2mul1271
       70      3   -> fpadd1271
       70      3   -> fpsub1271
       70      3   -> mod_mul128
      2      3   fp2neg1271
        2      3   -> fpneg1271
     36      3   fp2sqr1271
       36      3   -> fpadd1271
       36      3   -> fpsub1271
       36      3   -> mod_mul128
       36      3   -> mod_mul_dbl128
      6      3   fp2sub1271
        6      3   -> fpsub1271
      2      3   fp2zero1271
        2      3   -> fpzero1271
     12      3   fpdiv1271
     85      3   fpexp1251
       85      3   -> mod_mul128
       85      3   -> mod_sqr128
     18      3   fpinv1271
       18      3   -> fpexp1251
       18      3   -> mod_mul128
       18      3   -> mod_sqr128
      0      3   fpmul1271
        0      3   -> mod_mul128
      0      3   fpsqr1271
        0      3   -> mod_sqr128
     35      3   mLSB_set_recode
       35      3 ?LL_ADD_L12
       35      3 ?LL_AND_L12
       35      3 ?LL_XOR_L12
       35      3 ?US_DIVMOD_S_L02
     67      3   modulo_order
       67      3   -> Montgomery_multiply_mod_order
     52      3   mp_mul
       48      3   -> mul256
       48      3   -> mul32
       48      3   -> mul64
      6      3   point_setup
        6      3   -> fpcopy1271
        6      3   -> fpzero1271
      9      3   recode
      0      3   subtract
        0      3   -> mp_sub
     13      3   subtract_mod_order
       13      3   -> mp_sub
    264      3   table_lookup_1x8
      264      3   -> fpcopy1271
      264      3   -> fpneg1271
    200      3   table_lookup_fixed_base
      200      3   -> fpcopy1271
      200      3   -> fpcopy1271_flash
      200      3   -> fpneg1271
     34      3   wNAF_recode
       34      3 ?LL_CMP_L12
       34      3 ?LL_CMP_R0_L12
       34      3 ?S_SHL_L02
       34      3 ?ULL_SHR_L12


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
     542  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    1040  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_1
      32  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0}>
       8  ?<Initializer for 64 Bit Constant>_0
      64  ?<Initializer for GENERATOR_x>
      32  ?<Initializer for Montgomery_Rprime>
      32  ?<Initializer for PARAMETER_d>
     272  ?<Initializer for b41>
     320  ?<Initializer for cphi0>
     128  ?<Initializer for cpsi1>
      32  ?<Initializer for ctau1>
      32  ?<Initializer for ctaudual1>
      64  ?<Initializer for curve_order>
       4  ?<Initializer for mask_7fff>
       4  ?<Initializer for prime1271_0>
      20  ??Subroutine11_0
      18  ??Subroutine12_0
      10  ??Subroutine13_0
      14  ??Subroutine14_0
       8  ?Subroutine0
      34  ?Subroutine1
       8  ?Subroutine10
       4  ?Subroutine15
       4  ?Subroutine16
       4  ?Subroutine17
       4  ?Subroutine18
       4  ?Subroutine19
      26  ?Subroutine2
       4  ?Subroutine20
      22  ?Subroutine3
       4  ?Subroutine4
       6  ?Subroutine5
      14  ?Subroutine6
      10  ?Subroutine7
      10  ?Subroutine8
      10  ?Subroutine9
    6144  DOUBLE_SCALAR_TABLE
    7680  FIXED_BASE_TABLE
      64  GENERATOR_x
          GENERATOR_y
      32  Montgomery_Rprime
     206  Montgomery_multiply_mod_order
      32  PARAMETER_d
     246  R1_to_R2
     150  R1_to_R3
     130  R2_to_R4
     232  R5_to_R1
       8  __Constant_0_0
      30  add_mod_order
     272  b41
          b42
          b43
          b44
          c1
          c2
          c3
          c4
          b11
          b12
          b13
          b14
          b21
          b24
          b31
          b32
          b33
          b34
          ell1
          ell2
          ell3
          ell4
      24  clear_words
      92  cofactor_clearing
     254  conversion_to_odd
     320  cphi0
          cphi1
          cphi2
          cphi3
          cphi4
          cphi5
          cphi6
          cphi7
          cphi8
          cphi9
     128  cpsi1
          cpsi2
          cpsi3
          cpsi4
      32  ctau1
      32  ctaudual1
      64  curve_order
          Montgomery_rprime
    1284  decompose
      40  digit_x_digit
    1212  ecc_delphidel
     428  ecc_delpsidel
     390  ecc_mul
    5712  ecc_mul_double
     926  ecc_mul_fixed
      14  ecc_phi
     614  ecc_point_validate
     452  ecc_precomp
     298  ecc_precomp_double
      12  ecc_psi
     526  ecc_tau
     460  ecc_tau_dual
      38  eccadd
     296  eccadd_core
     594  eccdouble
     390  eccmadd
     502  eccmadd2
      92  eccnorm
      60  eccset
      46  fp2add1271
      78  fp2addsub1271
      30  fp2copy1271
      30  fp2copy1271_flash
     152  fp2inv1271
     160  fp2mul1271
      24  fp2neg1271
      80  fp2sqr1271
      42  fp2sub1271
      24  fp2zero1271
     306  fpdiv1271
     506  fpexp1251
      46  fpinv1271
       4  fpmul1271
       4  fpsqr1271
     952  mLSB_set_recode
       4  mask_7fff
      70  modulo_order
     546  mp_mul
     180  point_setup
       4  prime1271_0
     464  recode
       4  subtract
     232  subtract_mod_order
     498  table_lookup_1x8
     362  table_lookup_fixed_base
     406  wNAF_recode
       7  -- Other

 
 21 188 bytes in segment FARCODE
  1 614 bytes in segment FAR_F
      7 bytes in segment INITTAB
 13 824 bytes in segment NEAR_F
    992 bytes in segment NEAR_I
    992 bytes in segment NEAR_ID
 
 37 610 bytes of CODE memory (+ 15 bytes shared)
    984 bytes of DATA memory (+  8 bytes shared)

Errors: none
Warnings: none
